mads 2.1.4 build 29 (6 Dec 21)
Source: D:\!Delphi\PAS6502\src\for_in_ident.inc
     1
     2 				  	    if Tok[j].Kind <> IDENTTOK then
     3 					      iError(j, IdentifierExpected);
     4
     5 					    IdentTemp := GetIdent(Tok[j].Name^);
     6
     7 					    ActualParamType := Ident[IdentTemp].DataType;
     8 					    VarType := Ident[IdentTemp].AllocElementType;
     9
    10 					    k := Elements(IdentTemp);
    11
    12 					    if k * DataSize[VarType] > 256 then
    13 					     Error(j, 'only arrays with a maximum of 256 bytes');
    14
    15 				// writeln(ActualParamType,',', VarType,',',Ident[IdentTemp].NumAllocElements,',',Ident[IdentTemp].NumAllocElements_,' | ',Ident[IdentTemp].IdType);
    16
    17 					    if not (Ident[IdentTemp].IdType in [ARRAYTOK, STRINGTOK, STRINGLITERALTOK]) then
    18 					      Error(j, 'for-in statement cannot operate on collection type ''' + InfoAboutToken(ActualParamType) + '''');
    19
    20 					    if (VarType in [RECORDTOK]) and (Ident[IdentIndex].DataType = POINTERTOK) then
    21 						// ok
    22 					    else
    23 					     GetCommonType(i, Ident[IdentIndex].DataType, VarType);
    24
    25 					    StartOptimization(j);
    26
    27 					    if ActualParamType = STRINGPOINTERTOK then
    28 				             asm65(#9'lda #$00')
    29 					    else
    30 				             asm65(#9'lda #-' + IntToStr(k));
    31
    32
    33 					    asm65(#9'sta l_' + IntToHex(CodeSize, 4) + '+1' );
    34
    35
    36 					     GenerateRepeatUntilProlog;		// Save return address used by GenerateForToDoEpilog
    37
    38 					     SaveBreakAddress;
    39
    40 					     asm65('; --- ForToDoCondition');
    41
    42 					     StartOptimization(j);
    43 					     ResetOpty;				// !!!
    44
    45
    46 					     if ActualParamType = STRINGPOINTERTOK then begin
    47
    48 					      asm65(#9'ldy #$00');
    49
    50 				 	      asm65(#9'lda adr.' + GetLocalName(IdentTemp) + '+1,y' );
    51 					      asm65(#9'jeq l_' + IntToHex(CodePosStack[CodePosStackTop], 4));
    52 					      asm65(#9'sta ' + GetLocalName(IdentIndex));
    53
    54 					     end else begin
