// 160 / 4142

// F73654DB8A587962996923D44A99D420

uses crt, sysutils, md5;

const

test: array [0..511] of byte = (
$11, $92, $10, $05, $83, $00, $42, $42,
$00, $00, $01, $02, $A9, $40, $8D, $0E,
$D4, $AD, $13, $D0, $8D, $FA, $03, $60,
$2C, $0F, $D4, $10, $03, $6C, $00, $02,
$D8, $48, $8A, $48, $98, $48, $8D, $0F,
$D4, $6C, $22, $02, $D8, $6C, $16, $02,
$48, $AD, $0E, $D2, $29, $20, $D0, $0D,
$A9, $DF, $8D, $0E, $D2, $A5, $10, $8D,
$0E, $D2, $6C, $0A, $02, $8A, $48, $AD,
$FF, $D1, $2D, $49, $02, $F0, $03, $6C,
$38, $02, $A2, $06, $BD, $CF, $C0, $E0,
$05, $D0, $04, $25, $10, $F0, $05, $2C,
$0E, $D2, $F0, $06, $CA, $10, $ED, $4C,
$A0, $C0, $49, $FF, $8D, $0E, $D2, $A5,
$10, $8D, $0E, $D2, $E0, $00, $D0, $05,
$AD, $6D, $02, $D0, $23, $BD, $D7, $C0,
$AA, $BD, $00, $02, $8D, $8C, $02, $BD,
$01, $02, $8D, $8D, $02, $68, $AA, $6C,
$8C, $02, $A9, $00, $85, $11, $8D, $FF,
$02, $8D, $F0, $02, $85, $4D, $68, $40,
$68, $AA, $2C, $02, $D3, $10, $06, $AD,
$00, $D3, $6C, $02, $02, $2C, $03, $D3,
$10, $06, $AD, $01, $D3, $6C, $04, $02,
$68, $8D, $8C, $02, $68, $48, $29, $10,
$F0, $07, $AD, $8C, $02, $48, $6C, $06,
$02, $AD, $8C, $02, $48, $68, $40, $80,
$40, $04, $02, $01, $08, $10, $20, $36,
$08, $14, $12, $10, $0E, $0C, $0A, $4C,
$DF, $C0, $E6, $14, $D0, $08, $E6, $4D,
$E6, $13, $D0, $02, $E6, $12, $A9, $FE,
$A2, $00, $A4, $4D, $10, $06, $85, $4D,
$A6, $13, $A9, $F6, $85, $4E, $86, $4F,
$AD, $C5, $02, $45, $4F, $25, $4E, $8D,
$17, $D0, $A2, $00, $20, $55, $C2, $D0,
$03, $20, $4F, $C2, $A5, $42, $D0, $08,
$BA, $BD, $04, $01, $29, $04, $F0, $03,
$4C, $8A, $C2, $AD, $13, $D0, $CD, $FA,
$03, $D0, $B4, $AD, $0D, $D4, $8D, $35,
$02, $AD, $0C, $D4, $8D, $34, $02, $AD,
$31, $02, $8D, $03, $D4, $AD, $30, $02,
$8D, $02, $D4, $AD, $2F, $02, $8D, $00,
$D4, $AD, $6F, $02, $8D, $1B, $D0, $AD,
$6C, $02, $F0, $0E, $CE, $6C, $02, $A9,
$08, $38, $ED, $6C, $02, $29, $07, $8D,
$05, $D4, $A2, $08, $8E, $1F, $D0, $58,
$BD, $C0, $02, $45, $4F, $25, $4E, $9D,
$12, $D0, $CA, $10, $F2, $AD, $F4, $02,
$8D, $09, $D4, $AD, $F3, $02, $8D, $01,
$D4, $A2, $02, $20, $55, $C2, $D0, $03,
$20, $52, $C2, $A2, $02, $E8, $E8, $BD,
$18, $02, $1D, $19, $02, $F0, $06, $20,
$55, $C2, $9D, $26, $02, $E0, $08, $D0,
$EC, $AD, $0F, $D2, $29, $04, $F0, $08,
$AD, $F1, $02, $F0, $03, $CE, $F1, $02,
$AD, $2B, $02, $F0, $3E, $AD, $0F, $D2,
$29, $04, $D0, $32, $CE, $2B, $02, $D0,
$32, $AD, $6D, $02, $D0, $2D, $AD, $DA,
$02, $8D, $2B, $02, $AD, $09, $D2, $C9,
$9F, $F0, $20, $C9, $83, $F0, $1C, $C9,
$84, $F0, $18, $C9, $94, $F0, $14, $29,
$3F, $C9, $11, $F0, $0E, $AD, $09, $D2,
$8D, $FC, $02, $4C, $F3, $C1, $A9, $00,
$8D, $2B, $02, $AD, $00, $D3, $4A, $4A,
$4A, $4A, $8D, $79, $02, $8D, $7B, $02
);

var

 ticks: cardinal;
 i, cnt: byte;
 md: TMD5;

 txt:string;


begin

 pause;

 ticks:=GetTickCount;

// MD5File('D:BYTES512.DAT', md);
// txt:='atari'; MD5String(txt, md);

 for i:=0 to 4 do MD5Buffer(test, 512, md);

 writeln( MD5Print(md) );

 ticks:=GetTickCount-ticks;

 writeln(ticks,' TICKS');

 repeat until keypressed;

end.
