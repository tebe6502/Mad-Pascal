mads 2.1.5 build 4 (1 Apr 22)
Source: datamatrix_gfx.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/04/11] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: datamatrix_gfx.a65]
     1 FFFF> 2000-2720> 4F 4C + .by  $4F $4C $6F $72 $65 $6D $20 $69  $70 $73 $75 $6D $20 $64 $6F $6C  $6F $72 $20 $73 $69 $74 $20 $61
     2 2018 6D 65 74 2C 20 63 + .by  $6D $65 $74 $2C $20 $63 $6F $6E  $73 $65 $63 $74 $65 $74 $75 $72  $20 $61 $64 $69 $70 $69 $73 $63
     3 2030 69 6E 67 20 65 6C + .by  $69 $6E $67 $20 $65 $6C $69 $74  $2E $20 $4E $75 $6C $6C $61 $6D  $20 $69 $6E $20 $71 $75 $61 $6D
     4 2048 20 6C 69 67 75 6C + .by  $20 $6C $69 $67 $75 $6C $61 $2E  $00 $03 $02 $02 $01 $01 $02 $02  $03 $03 $03 $03 $03 $03 $03 $02
     5 2060 03 28 14 14 28 50 + .by  $03 $28 $14 $14 $28 $50 $50 $A0  $A0 $40 $50 $50 $50 $28 $28 $A0  $A0 $18 $18 $0C $18 $30 $30 $60
     6 2078 60 C0 C0 C0 C0 18 + .by  $60 $C0 $C0 $C0 $C0 $18 $0C $C0  $C0
Source: datamatrix_gfx.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 2081			RTLIB
   113 2081				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $2081..$21F1
   118
   119 				; ------------------------------------------------------------
   120
   121 21F2			START
   122 21F2 BA				tsx
   123 21F3 8E 0C 27			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					.fi
   128
   129 = 012B			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 2736			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 					ldx #256-VLEN
   136 					lda #$00
   137 					sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>256
   139 					@fill #VADR #VLEN #$00
   139 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   139 21F6 A9 36 85 88 A9 27 +  MWA #VADR @FILL.PTR1
   139 21FE A9 2B 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   139 2206 A9 00 85 84		 MVA #$00 @FILL.PTR2
   139 220A 20 AA 21		 JSR @FILL
   140 					eif
   141
   142 				.ifdef :psptr
   143 					mwa #PROGRAMSTACK :psptr
   144 				.fi
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.fi
   149
   150 220D A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 220F BD 40 03 9D 11 27 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 2218 E8				inx						; X = 0
   154 2219 86 80			stx bp						; BP = 0
   155
   156 221B 8E 0F D2			stx skctl					; reset POKEY
   157 221E A9 03			lda #3
   158 2220 8D 0F D2			sta skctl
   159
   160 2223 CA				dex						; X = 255
   161
   162 2224				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: datamatrix_gfx.a65]
Source: datamatrix_gfx.a65
   163
   164 2224			.local	MAIN						; PROCEDURE
   165
   166 2224 4C E8 26			jmp l_0058
   167
   168 				; ------------------------------------------------------------
   169
   170 2227			.local	SYSTEM						; UNIT
   171
   172 2227			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   177 				; as Pointer
   178 2227 B5 94			lda :STACKORIGIN,x
   179 2229 85 88			sta A
   180 222B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   181 222D 85 89			sta A+1
   182 222F CA				dex
   183 2230			@main
   184
   185 				; -------------------  ASM Block 00000002  -------------------
   186
   187 2230 A0 00			ldy #0
   188 2232 B1 88 85 90			mva (:edx),y Result
   189
   190 2236			@exit
   191
   192 				; ------------------------------------------------------------
   193
   194 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   195 				; as Pointer
   196
   197 2236 E8				inx
   198 2237 A5 90 95 94			mva RESULT :STACKORIGIN,x
   199
   200 					.ifdef @new
   201 					lda <@VarData
   202 					sta :ztmp
   203 					lda >@VarData
   204 					ldy #@VarDataSize-1
   205 					jmp @FreeMem
   206 					eif
   207
   208 				; ------------------------------------------------------------
   209
   210 = 0088			A	= :EDX
   211 = 0090			RESULT	= :STACKORIGIN-4
   212 223B 60				rts						; ret
   213 				.endl
   214
   215 223C			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   216
   217 				; ------------------------------------------------------------
   218
   219 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   220 				; as Pointer
   221 223C B5 94			lda :STACKORIGIN,x
   222 223E 85 88			sta A
   223 2240 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   224 2242 85 89			sta A+1
   225 2244 CA				dex
   226 2245 30 05			jmi @main
   227
   228 				; ------------------------------------------------------------
   229
   230 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   231 				; as Pointer
   232 2247 B5 94			lda :STACKORIGIN,x
   233 2249 85 8C			sta VALUE
   234 224B CA				dex
   235 224C			@main
   236
   237 				; -------------------  ASM Block 00000018  -------------------
   238
   239 224C A0 00			ldy #0
   240 224E A5 8C 91 88			mva value (:edx),y
   241
   242 				; ------------------------------------------------------------
   243
   244 = 0088			A	= :EDX
   245 = 008C			VALUE	= :ECX
   246 2252			@exit
   247 					.ifdef @new
   248 					lda <@VarData
   249 					sta :ztmp
   250 					lda >@VarData
   251 					ldy #@VarDataSize-1
   252 					jmp @FreeMem
   253 					els
   254 2252 60				rts						; ret
   255 					eif
   256 				.endl
   257
   258 2253			.local	MOVE_00A2					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   259
   260 					.MACRO m@INLINE
   261 				
   262 				; -------------------  ASM Block 00000028  -------------------
   263 				
   264 					jsr @move
   265 				
   266 					.ENDM
   267
   268 				; ------------------------------------------------------------
   269
   270 = 0088			SOURCE	= :EDX
   271 = 008C			DEST	= :ECX
   272 = 0084			COUNT	= :EAX
   273 2253			@exit
   274 				.endl
   275
   276 				; ------------------------------------------------------------
   277
   278 = 0101			__PORTB_BANKS	= $0101
   279 = 0648			M_PI_2	= $0648
   280 = 0192			D_PI_2	= $0192
   281 = 0004			D_PI_180	= $04
   282 = 0000			MGTIA	= $00
   283 = 0080			MVBXE	= $80
   284 = 0000			VBXE_XDLADR	= $00
   285 = 00E0			VBXE_BCBTMP	= $E0
   286 = 0100			VBXE_BCBADR	= $0100
   287 = 1000			VBXE_MAPADR	= $1000
   288 = 1000			VBXE_CHBASE	= $1000
   289 = 5000			VBXE_OVRADR	= $5000
   290 = B000			VBXE_WINDOW	= $B000
   291 = 0000			IDLI	= $00
   292 = 0001			IVBL	= $01
   293 = 0002			ITIM1	= $02
   294 = 0003			ITIM2	= $03
   295 = 0004			ITIM4	= $04
   296 = 00FE			CH_DELCHR	= $FE
   297 = 009B			CH_ENTER	= $9B
   298 = 001B			CH_ESC	= $1B
   299 = 001C			CH_CURS_UP	= $1C
   300 = 001D			CH_CURS_DOWN	= $1D
   301 = 001E			CH_CURS_LEFT	= $1E
   302 = 001F			CH_CURS_RIGHT	= $1F
   303 = 007F			CH_TAB	= $7F
   304 = 009B			CH_EOL	= $9B
   305 = 007D			CH_CLR	= $7D
   306 = 00FD			CH_BELL	= $FD
   307 = 007E			CH_DEL	= $7E
   308 = 009C			CH_DELLINE	= $9C
   309 = 009D			CH_INSLINE	= $9D
   310 = 0000			COLOR_BLACK	= $00
   311 = 000E			COLOR_WHITE	= $0E
   312 = 0032			COLOR_RED	= $32
   313 = 0096			COLOR_CYAN	= $96
   314 = 0068			COLOR_VIOLET	= $68
   315 = 00C4			COLOR_GREEN	= $C4
   316 = 0074			COLOR_BLUE	= $74
   317 = 00EE			COLOR_YELLOW	= $EE
   318 = 0028			COLOR_ORANGE	= $28
   319 = 00E4			COLOR_BROWN	= $E4
   320 = 003C			COLOR_LIGHTRED	= $3C
   321 = 0004			COLOR_GRAY1	= $04
   322 = 0006			COLOR_GRAY2	= $06
   323 = 000A			COLOR_GRAY3	= $0A
   324 = 00CC			COLOR_LIGHTGREEN	= $CC
   325 = 007C			COLOR_LIGHTBLUE	= $7C
   326 = 0004			FMOPENREAD	= $04
   327 = 0008			FMOPENWRITE	= $08
   328 = 0009			FMOPENAPPEND	= $09
   329 = 000C			FMOPENREADWRITE	= $0C
   330 = 2724			SCREENWIDTH	= DATAORIGIN+$0000
   331 = 2726			SCREENHEIGHT	= DATAORIGIN+$0002
   332 = 2728			DATESEPARATOR	= DATAORIGIN+$0004
   333 = D20A			RND	= $D20A
   334 = 02C0			adr.PALETTE	= $02C0
   335 2253			.var PALETTE	= adr.PALETTE .word
   336 = D012			adr.HPALETTE	= $D012
   337 2253			.var HPALETTE	= adr.HPALETTE .word
   338 = 2729			FILEMODE	= DATAORIGIN+$0005
   339 = 272A			GRAPHMODE	= DATAORIGIN+$0006
   340 = 272B			IORESULT	= DATAORIGIN+$0007
   341 = 272C			EOLN	= DATAORIGIN+$0008
   342 = 272D			RNDSEED	= DATAORIGIN+$0009
   343
   344 = 2253 C0 02		PALETTE
   344 = 2255 12 D0		HPALETTE
   344 				.endl							; UNIT SYSTEM
   345
   346 				; ------------------------------------------------------------
   347
   348 2257			.local	TYPES						; UNIT
   349
   350 				; ------------------------------------------------------------
   351
   352 				.endl							; UNIT TYPES
   353
   354 				; ------------------------------------------------------------
   355
   356 2257			.local	ATARI						; UNIT
   357
   358 				; ------------------------------------------------------------
   359
   360 = 0010			IRQENS	= $10
   361 = 0012			RTCLOK	= $12
   362 = 0012			RTCLOK1	= $12
   363 = 0013			RTCLOK2	= $13
   364 = 0014			RTCLOK3	= $14
   365 = 004D			ATRACT	= $4D
   366 = 0052			LMARGIN	= $52
   367 = 0053			RMARGIN	= $53
   368 = 0054			ROWCRS	= $54
   369 = 0055			COLCRS	= $55
   370 = 0057			DINDEX	= $57
   371 = 0058			SAVMSC	= $58
   372 = 0062			PALNTS	= $62
   373 = 006A			RAMTOP	= $6A
   374 = 0200			VDSLST	= $0200
   375 = 0230			SDLSTL	= $0230
   376 = 0290			TXTROW	= $0290
   377 = 0291			TXTCOL	= $0291
   378 = 0293			TINDEX	= $0293
   379 = 0294			TXTMSC	= $0294
   380 = 022F			SDMCTL	= $022F
   381 = 026F			GPRIOR	= $026F
   382 = 02F0			CRSINH	= $02F0
   383 = 02F3			CHACT	= $02F3
   384 = 02F4			CHBAS	= $02F4
   385 = 02FC			CH	= $02FC
   386 = 02C0			PCOLR0	= $02C0
   387 = 02C1			PCOLR1	= $02C1
   388 = 02C2			PCOLR2	= $02C2
   389 = 02C3			PCOLR3	= $02C3
   390 = 02C4			COLOR0	= $02C4
   391 = 02C5			COLOR1	= $02C5
   392 = 02C6			COLOR2	= $02C6
   393 = 02C7			COLOR3	= $02C7
   394 = 02C8			COLOR4	= $02C8
   395 = 02C8			COLBAKS	= $02C8
   396 = D000			HPOSP0	= $D000
   397 = D001			HPOSP1	= $D001
   398 = D002			HPOSP2	= $D002
   399 = D003			HPOSP3	= $D003
   400 = D004			HPOSM0	= $D004
   401 = D005			HPOSM1	= $D005
   402 = D006			HPOSM2	= $D006
   403 = D007			HPOSM3	= $D007
   404 = D008			SIZEP0	= $D008
   405 = D009			SIZEP1	= $D009
   406 = D00A			SIZEP2	= $D00A
   407 = D00B			SIZEP3	= $D00B
   408 = D00C			SIZEM	= $D00C
   409 = D00D			GRAFP0	= $D00D
   410 = D00E			GRAFP1	= $D00E
   411 = D00F			GRAFP2	= $D00F
   412 = D010			GRAFP3	= $D010
   413 = D011			GRAFM	= $D011
   414 = D004			P0PF	= $D004
   415 = D014			PAL	= $D014
   416 = D012			COLPM0	= $D012
   417 = D013			COLPM1	= $D013
   418 = D014			COLPM2	= $D014
   419 = D015			COLPM3	= $D015
   420 = D016			COLPF0	= $D016
   421 = D017			COLPF1	= $D017
   422 = D018			COLPF2	= $D018
   423 = D019			COLPF3	= $D019
   424 = D01A			COLBK	= $D01A
   425 = D01B			PRIOR	= $D01B
   426 = D01D			GRACTL	= $D01D
   427 = D01E			HITCLR	= $D01E
   428 = D01F			CONSOL	= $D01F
   429 = D200			AUDF1	= $D200
   430 = D201			AUDC1	= $D201
   431 = D202			AUDF2	= $D202
   432 = D203			AUDC2	= $D203
   433 = D204			AUDF3	= $D204
   434 = D205			AUDC3	= $D205
   435 = D206			AUDF4	= $D206
   436 = D207			AUDC4	= $D207
   437 = D208			AUDCTL	= $D208
   438 = D209			KBCODE	= $D209
   439 = D20E			IRQEN	= $D20E
   440 = D20F			SKSTAT	= $D20F
   441 = D300			PORTA	= $D300
   442 = D301			PORTB	= $D301
   443 = D400			DMACTL	= $D400
   444 = D401			CHACTL	= $D401
   445 = D402			DLISTL	= $D402
   446 = D404			HSCROL	= $D404
   447 = D405			VSCROL	= $D405
   448 = D407			PMBASE	= $D407
   449 = D409			CHBASE	= $D409
   450 = D40A			WSYNC	= $D40A
   451 = D40B			VCOUNT	= $D40B
   452 = D40C			PENH	= $D40C
   453 = D40D			PENV	= $D40D
   454 = D40E			NMIEN	= $D40E
   455 = FFFA			NMIVEC	= $FFFA
   456 = FFFC			RESETVEC	= $FFFC
   457 = FFFE			IRQVEC	= $FFFE
   458
   459 				.endl							; UNIT ATARI
   460
   461 				; ------------------------------------------------------------
   462
   463 2257			.local	GRAPH						; UNIT
   464
   465 2257			.local	INITGRAPH_00E1					; PROCEDURE | OVERLOAD
   466 2257 8D 4C 27			sta MODE
   467
   468 				; -------------------  ASM Block 00000052  -------------------
   469
   470 225A 8A 48			txa:pha
   471
   472 225C AD 4C 27			lda mode
   473 225F 8D 2A 27			sta MAIN.SYSTEM.GraphMode
   474 2262 29 0F			and #$0f
   475 2264 A8				tay
   476
   477 2265 A2 60			ldx #$60		; 6*16
   478 2267 AD 4C 27			lda mode		; %00010000 with text window
   479 226A 29 10			and #$10
   480 226C 49 10			eor #$10
   481 226E 09 02			ora #2			; read
   482
   483 					.nowarn @GRAPHICS
   483 2270 20 C2 20		 JSR @GRAPHICS
   484
   485 2273 8C 37 27			sty GraphResult
   486
   487
   488 					.ifdef MAIN.@DEFINES.ROMOFF
   489 					inc portb
   490 					.endif
   491
   492 2276 A6 57			ldx dindex
   493 2278 BC 51 20			ldy adr.tlshc,x
   494 227B A9 05			lda #5
   495 227D 0A			shift	asl @
   496 227E 88				dey
   497 227F D0 FC			bne shift
   498
   499 2281 8D 47 27			sta SCANLINE_WIDTH
   500
   501 				; Fox/TQA
   502
   503 = 0057			dindex	equ $57
   504
   505 2284 A6 57			ldx dindex
   506 2286 BD 61 20			lda adr.tmccn,x
   507 2289 BC 71 20			ldy adr.tmrcn,x
   508 228C A2 00			ldx #0
   509 228E C9 40			cmp #<320
   510 2290 D0 01 E8			sne:inx
   511
   512 				; X:A = horizontal resolution
   513 				; Y = vertical resolution
   514
   515 2293 20 FC 20			@SCREENSIZE
   516
   517 					.ifdef MAIN.@DEFINES.ROMOFF
   518 					dec portb
   519 					.endif
   520
   521 2296 68 AA			pla:tax
   522 				 
   523 				; optimize OK (graph_atari.inc), line = 82
   524
   525 2298 A5 58			lda ATARI.SAVMSC
   526 229A 8D 39 27			sta VIDEORAM
   527 229D A5 59			lda ATARI.SAVMSC+1
   528 229F 8D 3A 27			sta VIDEORAM+1
   529
   530 				; ------------------------------------------------------------
   531
   532 = 274C			MODE	= DATAORIGIN+$0028
   533 = 2051			adr.TLSHC	= CODEORIGIN+$0051
   534 22A2			.var TLSHC	= adr.TLSHC .word
   535 = 2061			adr.TMCCN	= CODEORIGIN+$0061
   536 22A2			.var TMCCN	= adr.TMCCN .word
   537 = 2071			adr.TMRCN	= CODEORIGIN+$0071
   538 22A2			.var TMRCN	= adr.TMRCN .word
   539
   540 = 274C			@VarData	= MODE
   541 = 0001			@VarDataSize	= 1
   542
   543 22A2			@exit
   544 					.ifdef @new
   545 					lda <@VarData
   546 					sta :ztmp
   547 					lda >@VarData
   548 					ldy #@VarDataSize-1
   549 					jmp @FreeMem
   550 					els
   551 22A2 60				rts						; ret
   552 					eif
   553 = 22A3 51 20		TLSHC
   553 = 22A5 61 20		TMCCN
   553 = 22A7 71 20		TMRCN
   553 				.endl
   554
   555 22A9			.local	SETBKCOLOR					; PROCEDURE | ASSEMBLER
   556 22A9 8D 4D 27			sta COLOR
   557
   558 				; -------------------  ASM Block 00000054  -------------------
   559
   560 22AC 8D C8 02			sta colbaks
   561
   562 				; ------------------------------------------------------------
   563
   564 = 274D			COLOR	= DATAORIGIN+$0029
   565
   566 = 274D			@VarData	= COLOR
   567 = 0001			@VarDataSize	= 1
   568
   569 22AF			@exit
   570 					.ifdef @new
   571 					lda <@VarData
   572 					sta :ztmp
   573 					lda >@VarData
   574 					ldy #@VarDataSize-1
   575 					jmp @FreeMem
   576 					els
   577 22AF 60				rts						; ret
   578 					eif
   579 				.endl
   580
   581 22B0			.local	PUTPIXEL_00EB					; PROCEDURE | ASSEMBLER | OVERLOAD
   582
   583 				; -------------------  ASM Block 00000056  -------------------
   584
   585 22B0 8A 48			txa:pha
   586
   587 22B2 AD 51 27			lda y+1
   588 22B5 30 37			bmi stop
   589 22B7 CD 27 27			cmp MAIN.SYSTEM.ScreenHeight+1
   590 22BA D0 06			bne sk0
   591 22BC AD 50 27			lda y
   592 22BF CD 26 27			cmp MAIN.SYSTEM.ScreenHeight
   593 22C2			sk0
   594 22C2 B0 2A			bcs stop
   595
   596 22C4 AD 4F 27			lda x+1
   597 22C7 30 25			bmi stop
   598 22C9 CD 25 27			cmp MAIN.SYSTEM.ScreenWidth+1
   599 22CC D0 06			bne sk1
   600 22CE AD 4E 27			lda x
   601 22D1 CD 24 27			cmp MAIN.SYSTEM.ScreenWidth
   602 22D4			sk1
   603 22D4 B0 18			bcs stop
   604
   605 22D6 AD 4E 27 85 55 AD + 	mwa x colcrs
   606 22E0 AD 50 27 85 54		mva y rowcrs
   607
   608 				;	lda #@IDput		; slower
   609 				;	jsr @COMMAND
   610
   611 22E5 AE A5 20			ldx @COMMAND.scrchn	; faster
   612 22E8 AD BA 20			lda @COMMAND.colscr
   613
   614 22EB				m@call	@putchar.main
Macro: M@CALL [Source: macros.asm]
    12 22EB 20 99 20				jsr @PUTCHAR.MAIN
Source: datamatrix_gfx.a65
   615
   616 22EE 68 AA		stop	pla:tax
   617
   618
   619 				; ------------------------------------------------------------
   620
   621 = 274E			X	= DATAORIGIN+$002A
   622 = 2750			Y	= DATAORIGIN+$002C
   623
   624 = 274E			@VarData	= X
   625 = 0004			@VarDataSize	= 4
   626
   627 22F0			@exit
   628 					.ifdef @new
   629 					lda <@VarData
   630 					sta :ztmp
   631 					lda >@VarData
   632 					ldy #@VarDataSize-1
   633 					jmp @FreeMem
   634 					els
   635 22F0 60				rts						; ret
   636 					eif
   637 				.endl
   638
   639 22F1			.local	PUTPIXEL_00EC					; PROCEDURE | OVERLOAD
   640
   641 				; -------------------  ASM Block 00000057  -------------------
   642
   643 22F1 AD 56 27 8D BA 20		mva color @COMMAND.colscr
   644 				  
   645 				; optimize OK (graph_atari.inc), line = 197
   646
   647 22F7 AD 52 27			lda X
   648 22FA 8D 4E 27			sta PUTPIXEL_00EB.X
   649 22FD AD 53 27			lda X+1
   650 2300 8D 4F 27			sta PUTPIXEL_00EB.X+1
   651 2303 AD 54 27			lda Y
   652 2306 8D 50 27			sta PUTPIXEL_00EB.Y
   653 2309 AD 55 27			lda Y+1
   654 230C 8D 51 27			sta PUTPIXEL_00EB.Y+1
   655 230F 20 B0 22			jsr PUTPIXEL_00EB
   656
   657 				; ------------------------------------------------------------
   658
   659 = 2752			X	= DATAORIGIN+$002E
   660 = 2754			Y	= DATAORIGIN+$0030
   661 = 2756			COLOR	= DATAORIGIN+$0032
   662
   663 = 2752			@VarData	= X
   664 = 0005			@VarDataSize	= 5
   665
   666 2312			@exit
   667 					.ifdef @new
   668 					lda <@VarData
   669 					sta :ztmp
   670 					lda >@VarData
   671 					ldy #@VarDataSize-1
   672 					jmp @FreeMem
   673 					els
   674 2312 60				rts						; ret
   675 					eif
   676 				.endl
   677
   678 				; ------------------------------------------------------------
   679
   680 = 0080			CURRENTDRIVER	= $80
   681 = 0000			DETECT	= $00
   682 = 0001			CGA	= $01
   683 = 0002			MCGA	= $02
   684 = 0003			EGA	= $03
   685 = 0004			EGA64	= $04
   686 = 0005			EGAMONO	= $05
   687 = 0006			LOWRES	= $06
   688 = 0007			HERCMONO	= $07
   689 = 0009			VGA	= $09
   690 = 000A			VESA	= $0A
   691 = 000B			D1BIT	= $0B
   692 = 000C			D2BIT	= $0C
   693 = 000D			D4BIT	= $0D
   694 = 000E			D6BIT	= $0E
   695 = 000F			D8BIT	= $0F
   696 = 0010			D12BIT	= $10
   697 = 0018			M640X400	= $18
   698 = 0018			M640X480	= $18
   699 = 0001			GROK	= $01
   700 = 00FF			GRNOINITGRAPH	= $FF
   701 = 00FE			GRNOTDETECTED	= $FE
   702 = 00FD			GRFILENOTFOUND	= $FD
   703 = 00FC			GRINVALIDDRIVER	= $FC
   704 = 00FB			GRNOLOADMEM	= $FB
   705 = 00FA			GRNOSCANMEM	= $FA
   706 = 00F9			GRNOFLOODMEM	= $F9
   707 = 00F8			GRFONTNOTFOUND	= $F8
   708 = 00F7			GRNOFONTMEM	= $F7
   709 = 00F6			GRINVALIDMODE	= $F6
   710 = 00F5			GRERROR	= $F5
   711 = 00F4			GRIOERROR	= $F4
   712 = 00F3			GRINVALIDFONT	= $F3
   713 = 00F2			GRINVALIDFONTNUM	= $F2
   714 = 00EE			GRINVALIDVERSION	= $EE
   715 = 0000			CGAC0	= $00
   716 = 0001			CGAC1	= $01
   717 = 0002			CGAC2	= $02
   718 = 0003			CGAC3	= $03
   719 = 0004			CGAHI	= $04
   720 = 0000			MCGAC0	= $00
   721 = 0001			MCGAC1	= $01
   722 = 0002			MCGAC2	= $02
   723 = 0003			MCGAC3	= $03
   724 = 0004			MCGAMED	= $04
   725 = 0005			MCGAHI	= $05
   726 = 0000			EGALO	= $00
   727 = 0001			EGAHI	= $01
   728 = 0000			EGA64LO	= $00
   729 = 0001			EGA64HI	= $01
   730 = 0003			EGAMONOHI	= $03
   731 = 000A			VGALO	= $0A
   732 = 001F			VGAMED	= $1F
   733 = 0018			VGAHI	= $18
   734 = 272F			WIN_LEFT	= DATAORIGIN+$000B
   735 = 2731			WIN_RIGHT	= DATAORIGIN+$000D
   736 = 2733			WIN_TOP	= DATAORIGIN+$000F
   737 = 2735			WIN_BOTTOM	= DATAORIGIN+$0011
   738 = 2737			GRAPHRESULT	= DATAORIGIN+$0013
   739 = 2738			GETCOLOR	= DATAORIGIN+$0014
   740 = 2739			VIDEORAM	= DATAORIGIN+$0015
   741 = 273B			adr.LASTARCCOORDS	= [DATAORIGIN+$0017] .array [5] ; type unknown
   742 2313			.var LASTARCCOORDS	= adr.LASTARCCOORDS .word
   743 = 273B			LASTARCCOORDS.X	= DATAORIGIN+$0017
   744 = 273D			LASTARCCOORDS.Y	= DATAORIGIN+$0019
   745 = 273F			LASTARCCOORDS.XSTART	= DATAORIGIN+$001B
   746 = 2741			LASTARCCOORDS.YSTART	= DATAORIGIN+$001D
   747 = 2743			LASTARCCOORDS.XEND	= DATAORIGIN+$001F
   748 = 2745			LASTARCCOORDS.YEND	= DATAORIGIN+$0021
   749 = 2747			SCANLINE_WIDTH	= DATAORIGIN+$0023
   750 = 2748			CURRENTX	= DATAORIGIN+$0024
   751 = 274A			CURRENTY	= DATAORIGIN+$0026
   752
   753 = 2313 3B 27		LASTARCCOORDS
   753 				.endl							; UNIT GRAPH
   754
   755 				; ------------------------------------------------------------
   756
   757 2315			.local	DATAMATRIX					; UNIT
   758
   759 2315			.local	CALCULATEMATRIX					; PROCEDURE | ASSEMBLER
   760
   761 				; -------------------  ASM Block 00000076  -------------------
   762
   763
   764 2315 8A 48		   txa:pha	; need to store register X in Mad pascal
   765
   766 				; datamatrix.asx - Data Matrix barcode encoder in 6502 assembly language
   767
   768 				; "THE BEER-WARE LICENSE" (Revision 42):
   769 				; Piotr Fusik <fox@scene.pl> wrote this file.
   770 				; As long as you retain this notice you can do whatever you want with this stuff.
   771 				; If we meet some day, and you think this stuff is worth it, you can buy me a beer in return.
   772
   773 				; Compile with xasm (http://xasm.atari.org/), for example:
   774 				; xasm datamatrix.asx /l /d:DataMatrix_code=$b600 /d:DataMatrix_data=$b900 /d:DataMatrix_SIZE=20
   775 				; DataMatrix_code - self-modifying code
   776 				; DataMatrix_data - uninitialized data
   777 				; DataMatrix_SIZE - 10, 12, 14, 16, 18, 20, 22, 24, 26, 32, 36, 40, 44 or 48
   778
   779
   780 = 8400			DataMatrix_data = DM_DATA;
   781 = 0030			DataMatrix_SIZE = DM_SIZE;
   782
   783 = 8400			DataMatrix_message  equ DataMatrix_data ; DataMatrix_DATA_CODEWORDS
   784
   785 = 8500			   DataMatrix_symbol = DataMatrix_data+$100;
   786
   787 				; private:
   788
   789 				    ift DataMatrix_SIZE<=26
   790 				DataMatrix_MATRIX_SIZE  equ DataMatrix_SIZE-2
   791 				    els
   792 = 002C			DataMatrix_MATRIX_SIZE  equ DataMatrix_SIZE-4
   793 				    eif
   794
   795 = 8400			DataMatrix_dataCodewords    equ DataMatrix_message  ; DataMatrix_DATA_CODEWORDS
   796 = 84AE			DataMatrix_errorCodewords   equ DataMatrix_dataCodewords+DataMatrix_DATA_CODEWORDS ; DataMatrix_ERROR_CODEWORDS
   797
   798 = 8500			DataMatrix_exp  equ DataMatrix_data+$100    ; $100
   799 = 8600			DataMatrix_log  equ Datamatrix_data+$200    ; $100
   800
   801 				    ;org DataMatrix_code
   802
   803 2317 A2 FF		    ldx #-1
   804 2319			DataMatrix_encodeMessage_1
   805 2319 E8			    inx
   806 231A FE 00 84		    inc DataMatrix_message,x
   807 231D D0 FA		    bne DataMatrix_encodeMessage_1
   808 231F A9 81		    lda #129
   809 2321			DataMatrix_padMessage_1
   810 2321 9D 00 84 E8		    sta DataMatrix_message,x+
   811 2325 BD E4 24		    lda DataMatrix_padding,x
   812 2328 D0 F7		    bne DataMatrix_padMessage_1
   813
   814 232A AA			    tax ; #0
   815 232B A9 01		    lda #1
   816 232D			DataMatrix_initExpLog_1
   817 232D 9D 00 85		    sta DataMatrix_exp,x
   818 2330 A8			    tay
   819 2331 8A			    txa
   820 2332 99 00 86		    sta DataMatrix_log,y
   821 2335 98			    tya
   822 2336 0A			    asl @
   823 2337 90 02 49 2D		    scc:eor <301
   824 233B E8			    inx
   825 233C D0 EF		    bne DataMatrix_initExpLog_1
   826
   827 233E A0 43		    ldy #DataMatrix_ERROR_CODEWORDS-1
   828 2340 8A			    txa ; #0
   829 2341 99 AE 84 88 10 FA	    sta:rpl DataMatrix_errorCodewords,y-
   830 				;   ldx #0
   831 2347			DataMatrix_reedSolomon_1
   832 2347 8A 48		    txa:pha
   833 2349 A0 00		    ldy #0
   834 234B BD 00 84		    lda DataMatrix_dataCodewords,x
   835 234E 4D AE 84		    eor DataMatrix_errorCodewords
   836 2351			DataMatrix_reedSolomon_2
   837 2351 48			    pha
   838 2352 F0 0E		    beq DataMatrix_reedSolomon_3
   839 2354 AA			    tax
   840 2355 BD 00 86		    lda DataMatrix_log,x
   841 2358 18 79 A0 24		    add DataMatrix_poly,y
   842 235C 69 00		    adc #0
   843 235E AA			    tax
   844 235F BD 00 85		    lda DataMatrix_exp,x
   845 2362			DataMatrix_reedSolomon_3
   846 2362 C0 43		    cpy #DataMatrix_ERROR_CODEWORDS-1
   847 2364 B0 03 59 AF 84	    scs:eor DataMatrix_errorCodewords+1,y
   848 2369 99 AE 84 C8		    sta DataMatrix_errorCodewords,y+
   849 236D 68			    pla
   850 236E 90 E1		    bcc DataMatrix_reedSolomon_2
   851 2370 68 AA		    pla:tax
   852 2372 E8			    inx
   853 2373 E0 AE		    cpx #DataMatrix_DATA_CODEWORDS
   854 2375 90 D0		    bcc DataMatrix_reedSolomon_1
   855
   856 2377 A0 2D		    ldy #DataMatrix_SIZE-3
   857 2379 A9 00 8D 97 23 A9 +     mwa #DataMatrix_symbol  DataMatrix_clear_store+1
   858 2383			DataMatrix_clear_line
   859 2383 A9 30		    lda #DataMatrix_SIZE
   860 2385 18 6D 97 23 8D 97 +     add:sta DataMatrix_clear_store+1
   861 238C 90 03 EE 98 23	    scc:inc DataMatrix_clear_store+2
   862 2391 A2 2F		    ldx #DataMatrix_SIZE-1
   863 2393			DataMatrix_clear_dashed
   864 2393 98			    tya
   865 2394 29 01		    and #1
   866 2396			DataMatrix_clear_store
   867 2396 9D FF FF		    sta $ffff,x
   868 2399 A9 02		    lda #2
   869 239B CA			    dex
   870 239C 30 0D		    bmi DataMatrix_clear_next
   871 				    ift DataMatrix_SIZE>26
   872 239E F0 08		    beq DataMatrix_clear_solid
   873 23A0 E0 17		    cpx #DataMatrix_SIZE/2-1
   874 23A2 F0 EF		    beq DataMatrix_clear_dashed
   875 23A4 E0 18		    cpx #DataMatrix_SIZE/2
   876 				    eif
   877 23A6 D0 EE		    bne DataMatrix_clear_store
   878 23A8			DataMatrix_clear_solid
   879 23A8 4A			    lsr @
   880 23A9 10 EB		    bpl DataMatrix_clear_store  ; jmp
   881 23AB			DataMatrix_clear_next
   882 23AB 88			    dey
   883 23AC 10 D5		    bpl DataMatrix_clear_line
   884
   885 23AE A2 2F		    ldx #DataMatrix_SIZE-1
   886 23B0			DataMatrix_horizontal_1
   887 23B0 8A			    txa
   888 23B1 29 01 49 01		    and:eor #1
   889 23B5 9D 00 85		    sta DataMatrix_symbol,x
   890 23B8 9D 80 89		:DataMatrix_SIZE>26 sta DataMatrix_symbol+DataMatrix_SIZE/2*DataMatrix_SIZE,x
   891 23BB A9 01 9D D0 8D	    mva #1  DataMatrix_symbol+[DataMatrix_SIZE-1]*DataMatrix_SIZE,x
   892 23C0 9D 50 89		:DataMatrix_SIZE>26 sta DataMatrix_symbol+[DataMatrix_SIZE/2-1]*DataMatrix_SIZE,x
   893 23C3 CA			    dex
   894 23C4 10 EA		    bpl DataMatrix_horizontal_1
   895
   896 23C6 A9 00 8D 82 24 A9 +     mwa #DataMatrix_dataCodewords   DataMatrix_fillSource
   897 23D0 A2 00		    ldx #0
   898 23D2 A0 04		    ldy #4
   899
   900 23D4			DataMatrix_fill_1
   901 				; Check corner cases
   902 				    ift [DataMatrix_MATRIX_SIZE&4]!=0
   903 23D4 8A			    txa
   904 23D5 D0 09		    bne DataMatrix_noCorner
   905 23D7 C0 2C		    cpy #DataMatrix_MATRIX_SIZE-[DataMatrix_MATRIX_SIZE&2]
   906 23D9 D0 05		    bne DataMatrix_noCorner
   907 				; corner1/2
   908 23DB A9 0F		    lda #15
   909 23DD 20 41 24		    jsr DataMatrix_setCorner
   910 23E0			DataMatrix_noCorner
   911 				    eif
   912
   913 				; Sweep upward-right
   914 23E0			DataMatrix_fill_up
   915 23E0 C0 2C		    cpy #DataMatrix_MATRIX_SIZE
   916 23E2 20 23 24		    jsr DataMatrix_setUtah
   917 23E5			DataMatrix_no_up
   918 23E5 E8 E8		:2  inx
   919 23E7 88 88		:2  dey
   920 23E9 30 04		    bmi DataMatrix_fill_top
   921 23EB E0 2C		    cpx #DataMatrix_MATRIX_SIZE
   922 23ED 90 F1		    bcc DataMatrix_fill_up
   923 23EF			DataMatrix_fill_top
   924 23EF E8 E8 E8		:3  inx
   925 23F2 C8			    iny
   926 				; Sweep downward-left
   927 23F3			DataMatrix_fill_down
   928 23F3 98			    tya
   929 23F4 30 05		    bmi DataMatrix_no_down
   930 23F6 E0 2C		    cpx #DataMatrix_MATRIX_SIZE
   931 23F8 20 23 24		    jsr DataMatrix_setUtah
   932 23FB			DataMatrix_no_down
   933 23FB C8 C8		:2  iny
   934 23FD CA CA		:2  dex
   935 23FF 30 04		    bmi DataMatrix_fill_left
   936 2401 C0 2C		    cpy #DataMatrix_MATRIX_SIZE
   937 2403 90 EE		    bcc DataMatrix_fill_down
   938 2405			DataMatrix_fill_left
   939 2405 E8			    inx
   940 2406 C8 C8 C8		:3  iny
   941 2409 E0 2C		    cpx #DataMatrix_MATRIX_SIZE
   942 240B 90 C7		    bcc DataMatrix_fill_1
   943 240D C0 2C		    cpy #DataMatrix_MATRIX_SIZE
   944 240F 90 C3		    bcc DataMatrix_fill_1
   945
   946 				    ift [DataMatrix_SIZE&2]==0
   947 				; Fixed pattern in the bottom-right corner.
   948 2411 A9 01		    lda #1
   949 2413 8D 9D 8D		    sta DataMatrix_symbol+[DataMatrix_SIZE-3]*DataMatrix_SIZE+DataMatrix_SIZE-3
   950 2416 8D CE 8D		    sta DataMatrix_symbol+[DataMatrix_SIZE-2]*DataMatrix_SIZE+DataMatrix_SIZE-2
   951 2419 4A			    lsr @
   952 241A 8D 9E 8D		    sta DataMatrix_symbol+[DataMatrix_SIZE-3]*DataMatrix_SIZE+DataMatrix_SIZE-2
   953 241D 8D CD 8D		    sta DataMatrix_symbol+[DataMatrix_SIZE-2]*DataMatrix_SIZE+DataMatrix_SIZE-3
   954 				    eif
   955
   956 2420 68 AA		    pla:tax	; need to restore register X in Mad pascal
   957 2422 60			    rts
   958
   959 2423			DataMatrix_setUtah
   960 2423 B0 7A		    bcs DataMatrix_setUtah_no
   961 2425 B9 B2 25		    lda DataMatrix_matrixLo,y
   962 				    ift DataMatrix_SIZE>26
   963 2428 E0 16		    cpx #DataMatrix_MATRIX_SIZE/2
   964 242A 90 02 69 01		    scc:adc #1
   965 				    eif
   966 242E 8D 3A 24		    sta DataMatrix_setUtah_load+1
   967 2431 B9 DE 25		    lda DataMatrix_matrixHi,y
   968 				    ift DataMatrix_SIZE>26
   969 2434 69 00		    adc #0
   970 				    eif
   971 2436 8D 3B 24		    sta DataMatrix_setUtah_load+2
   972 2439			DataMatrix_setUtah_load
   973 2439 BD FF FF		    lda $ffff,x
   974 243C 4A			    lsr @
   975 243D F0 60		    beq DataMatrix_setUtah_no
   976 243F A9 07		    lda #7
   977 2441			DataMatrix_setCorner
   978 2441 8E 4B 24		    stx DataMatrix_column
   979 2444 8C 52 24		    sty DataMatrix_row
   980 2447 A8			    tay
   981 2448			DataMatrix_setShape_1
   982 2448 98 48		    tya:pha
   983 244A A9 00		    lda #0
   984 = 244B			DataMatrix_column   equ *-1
   985 244C 18 79 A2 25		    add DataMatrix_shapeX,y
   986 2450 AA			    tax
   987 2451 A9 00		    lda #0
   988 = 2452			DataMatrix_row  equ *-1
   989 2453 18 79 92 25		    add DataMatrix_shapeY,y
   990 2457 A8			    tay
   991 2458 10 09		    bpl DataMatrix_setModuleWrapped_yOk
   992 245A 18 69 2C		    add #DataMatrix_MATRIX_SIZE
   993 245D A8			    tay
   994 				    ift [DataMatrix_MATRIX_SIZE&7]!=0
   995 245E 8A			    txa
   996 245F 18 69 04		    add #4-[[DataMatrix_MATRIX_SIZE+4]&7]
   997 2462 AA			    tax
   998 				    eif
   999 2463			DataMatrix_setModuleWrapped_yOk
  1000 2463 8A			    txa
  1001 2464 10 09		    bpl DataMatrix_setModuleWrapped_xOk
  1002 2466 18 69 2C		    add #DataMatrix_MATRIX_SIZE
  1003 2469 AA			    tax
  1004 				    ift [DataMatrix_MATRIX_SIZE&7]!=0
  1005 246A 98			    tya
  1006 246B 18 69 04		    add #4-[[DataMatrix_MATRIX_SIZE+4]&7]
  1007 246E A8			    tay
  1008 				    eif
  1009 246F			DataMatrix_setModuleWrapped_xOk
  1010 				    ift DataMatrix_SIZE>26
  1011 246F E0 16		    cpx #DataMatrix_MATRIX_SIZE/2
  1012 2471 90 02		    bcc DataMatrix_setModuleWrapped_leftRegion
  1013 2473 E8 E8		    inx:inx
  1014 2475			DataMatrix_setModuleWrapped_leftRegion
  1015 				    eif
  1016 2475 B9 B2 25 8D 88 24	    mva DataMatrix_matrixLo,y   DataMatrix_setModule_store+1
  1017 247B B9 DE 25 8D 89 24	    mva DataMatrix_matrixHi,y   DataMatrix_setModule_store+2
  1018 2481 0E 00 84		    asl DataMatrix_dataCodewords
  1019 = 2482			DataMatrix_fillSource   equ *-2
  1020 2484 A9 00		    lda #0
  1021 2486 2A			    rol @
  1022 2487			DataMatrix_setModule_store
  1023 2487 9D FF FF		    sta $ffff,x
  1024 248A 68 A8		    pla:tay
  1025 248C 88			    dey
  1026 248D 29 07		    and #7
  1027 248F D0 B7		    bne DataMatrix_setShape_1
  1028 2491 EE 82 24 D0 03 EE +     inw DataMatrix_fillSource
  1029 2499 AE 4B 24		    ldx DataMatrix_column
  1030 249C AC 52 24		    ldy DataMatrix_row
  1031 249F			DataMatrix_setUtah_no
  1032 249F 60			    rts
  1033
  1034 				    ift DataMatrix_SIZE==10
  1035 				DataMatrix_DATA_CODEWORDS   equ 3
  1036 				DataMatrix_ERROR_CODEWORDS  equ 5
  1037 				DataMatrix_poly dta $eb,$cf,$d2,$f4,$0f
  1038
  1039 				    eli DataMatrix_SIZE==12
  1040 				DataMatrix_DATA_CODEWORDS   equ 5
  1041 				DataMatrix_ERROR_CODEWORDS  equ 7
  1042 				DataMatrix_poly dta $b1,$1e,$d6,$da,$2a,$c5,$1c
  1043
  1044 				    eli DataMatrix_SIZE==14
  1045 				DataMatrix_DATA_CODEWORDS   equ 8
  1046 				DataMatrix_ERROR_CODEWORDS  equ 10
  1047 				DataMatrix_poly dta $c7,$32,$96,$78,$ed,$83,$ac,$53,$f3,$37
  1048
  1049 				    eli DataMatrix_SIZE==16
  1050 				DataMatrix_DATA_CODEWORDS   equ 12
  1051 				DataMatrix_ERROR_CODEWORDS  equ 12
  1052 				DataMatrix_poly dta $a8,$8e,$23,$ad,$5e,$b9,$6b,$c7,$4a,$c2,$e9,$4e
  1053
  1054 				    eli DataMatrix_SIZE==18
  1055 				DataMatrix_DATA_CODEWORDS   equ 18
  1056 				DataMatrix_ERROR_CODEWORDS  equ 14
  1057 				DataMatrix_poly dta $53,$ab,$21,$27,$08,$0c,$f8,$1b,$26,$54,$5d,$f6,$ad,$69
  1058
  1059 				    eli DataMatrix_SIZE==20
  1060 				DataMatrix_DATA_CODEWORDS   equ 22
  1061 				DataMatrix_ERROR_CODEWORDS  equ 18
  1062 				DataMatrix_poly dta $a4,$09,$f4,$45,$b1,$a3,$a1,$e7,$5e,$fa,$c7,$dc,$fd,$a4,$67,$8e,$3d,$ab
  1063
  1064 				    eli DataMatrix_SIZE==22
  1065 				DataMatrix_DATA_CODEWORDS   equ 30
  1066 				DataMatrix_ERROR_CODEWORDS  equ 20
  1067 				DataMatrix_poly dta $7f,$21,$92,$17,$4f,$19,$c1,$7a,$d1,$e9,$e6,$a4,$01,$6d,$b8,$95,$26,$c9,$3d,$d2
  1068
  1069 				    eli DataMatrix_SIZE==24
  1070 				DataMatrix_DATA_CODEWORDS   equ 36
  1071 				DataMatrix_ERROR_CODEWORDS  equ 24
  1072 				DataMatrix_poly dta $41,$8d,$f5,$1f,$b7,$f2,$ec,$b1,$7f,$e1,$6a,$16,$83,$14,$ca,$16,$6a,$89,$67,$e7,$d7,$88,$55,$2d
  1073
  1074 				    eli DataMatrix_SIZE==26
  1075 				DataMatrix_DATA_CODEWORDS   equ 44
  1076 				DataMatrix_ERROR_CODEWORDS  equ 28
  1077 				DataMatrix_poly dta $96,$20,$6d,$95,$ef,$d5,$c6,$30,$5e,$32,$0c,$c3,$a7,$82,$c4,$fd,$63,$a6,$ef,$de,$92,$be,$f5,$b8,$ad,$7d,$11,$97
  1078
  1079 				    eli DataMatrix_SIZE==32
  1080 				DataMatrix_DATA_CODEWORDS   equ 62
  1081 				DataMatrix_ERROR_CODEWORDS  equ 36
  1082 				DataMatrix_poly dta $39,$56,$bb,$45,$8c,$99,$1f,$42,$87,$43,$f8,$54,$5a,$51,$db,$c5,$02,$01,$27,$10,$4b,$e5,$14,$33,$fc,$6c,$d5,$b5,$b7,$57,$6f,$4d,$e8,$a8,$b0,$9c
  1083
  1084 				    eli DataMatrix_SIZE==36
  1085 				DataMatrix_DATA_CODEWORDS   equ 86
  1086 				DataMatrix_ERROR_CODEWORDS  equ 42
  1087 				DataMatrix_poly dta $e1,$26,$e1,$94,$c0,$fe,$8d,$0b,$52,$ed,$51,$18,$0d,$7a,$ff,$6a,$a7,$0d,$cf,$a0,$58,$cb,$26,$8e,$54,$42,$03,$a8,$66,$9c,$01,$c8,$58,$3c,$e9,$86,$73,$72,$ea,$5a,$41,$8a
  1088
  1089 				    eli DataMatrix_SIZE==40
  1090 				DataMatrix_DATA_CODEWORDS   equ 114
  1091 				DataMatrix_ERROR_CODEWORDS  equ 48
  1092 				DataMatrix_poly dta $72,$45,$7a,$1e,$5e,$0b,$42,$e6,$84,$49,$91,$89,$87,$4f,$d6,$21,$0c,$dc,$8e,$d5,$88,$7c,$d7,$a6,$09,$de,$1c,$9a,$84,$04,$64,$aa,$91,$3b,$a4,$d7,$11,$f9,$66,$f9,$86,$80,$05,$f5,$83,$7f,$dd,$9c
  1093
  1094 				    eli DataMatrix_SIZE==44
  1095 				DataMatrix_DATA_CODEWORDS   equ 144
  1096 				DataMatrix_ERROR_CODEWORDS  equ 56
  1097 				DataMatrix_poly dta $1d,$b3,$63,$95,$9f,$48,$7d,$16,$37,$3c,$d9,$b0,$9c,$5a,$2b,$50,$fb,$eb,$80,$a9,$fe,$86,$f9,$2a,$79,$76,$48,$80,$81,$e8,$25,$0f,$18,$dd,$8f,$73,$83,$28,$71,$fe,$13,$7b,$f6,$44,$a6,$42,$76,$8e,$2f,$33,$c3,$f2,$f9,$83,$26,$42
  1098
  1099 				    eli DataMatrix_SIZE==48
  1100 = 00AE			DataMatrix_DATA_CODEWORDS   equ 174
  1101 = 0044			DataMatrix_ERROR_CODEWORDS  equ 68
  1102 24A0 21 4F BE F5 5B DD + DataMatrix_poly dta $21,$4f,$be,$f5,$5b,$dd,$e9,$19,$18,$06,$90,$97,$79,$ba,$8c,$7f,$2d,$99,$fa,$b7,$46,$83,$c6,$11,$59,$f5,$79,$33,$8c,$fc,$cb,$52,$53,$e9,$98,$dc,$9b,$12,$e6,$d2,$5e,$20,$c8,$c5,$c0,$c2,$ca,$81,$0a,$ed,$c6,$5e,$b0,$24,$28,$8b,$c9,$84,$db,$22,$38,$71,$34,$14,$22,$f7,$0f,$33
  1103
  1104 				    els
  1105 				    ert 1   ; unsupported DataMatrix_SIZE
  1106 				    eif
  1107
  1108 24E4			DataMatrix_padding
  1109 24E4 19 AF 46 DC 73 0B + :DataMatrix_DATA_CODEWORDS  dta [129+[1+#]*149%253]%254+1
  1110 				; NOTE: the following two zero bytes terminate DataMatrix_padding:
  1111 2592 00 00 00 FF FF FF + DataMatrix_shapeY   dta 0,0,0,-1,-1,-1,-2,-2
  1112 				    ift DataMatrix_SIZE==14||DataMatrix_SIZE==22||DataMatrix_SIZE==32||DataMatrix_SIZE==40||DataMatrix_SIZE==48 ; corner1
  1113 259A D7 D6 D5 D4 D4 FF +     dta 3-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,1-DataMatrix_MATRIX_SIZE,-DataMatrix_MATRIX_SIZE,-DataMatrix_MATRIX_SIZE,-1,-1,-1
  1114 				    eli DataMatrix_SIZE==16||DataMatrix_SIZE==24 ; corner2
  1115 				    dta 3-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,1,0,-1
  1116 				    eif
  1117 25A2 00 FF FE 00 FF FE + DataMatrix_shapeX   dta 0,-1,-2,0,-1,-2,-1,-2
  1118 				    ift DataMatrix_SIZE==14||DataMatrix_SIZE==22||DataMatrix_SIZE==32||DataMatrix_SIZE==40||DataMatrix_SIZE==48 ; corner1
  1119 25AA 2B 2B 2B 2B 2A 02 +     dta DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-2,2,1,0
  1120 				    eli DataMatrix_SIZE==16||DataMatrix_SIZE==24 ; corner2
  1121 				    dta DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-2,DataMatrix_MATRIX_SIZE-3,DataMatrix_MATRIX_SIZE-4,0,0,0
  1122 				    eif
  1123
  1124 				    ift DataMatrix_SIZE<=26
  1125 				DataMatrix_matrixLo
  1126 				:DataMatrix_MATRIX_SIZE dta l(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
  1127 				DataMatrix_matrixHi
  1128 				:DataMatrix_MATRIX_SIZE dta h(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
  1129 				    els
  1130 25B2			DataMatrix_matrixLo
  1131 25B2 31 61 91 C1 F1 21 + :DataMatrix_MATRIX_SIZE/2   dta l(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
  1132 25C8 B1 E1 11 41 71 A1 + :DataMatrix_MATRIX_SIZE/2   dta l(DataMatrix_symbol+[1+DataMatrix_SIZE/2+#]*DataMatrix_SIZE+1)
  1133 25DE			DataMatrix_matrixHi
  1134 25DE 85 85 85 85 85 86 + :DataMatrix_MATRIX_SIZE/2   dta h(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
  1135 25F4 89 89 8A 8A 8A 8A + :DataMatrix_MATRIX_SIZE/2   dta h(DataMatrix_symbol+[1+DataMatrix_SIZE/2+#]*DataMatrix_SIZE+1)
  1136 				    eif
  1137
  1138 260A			@exit
  1139 					.ifdef @new
  1140 					lda <@VarData
  1141 					sta :ztmp
  1142 					lda >@VarData
  1143 					ldy #@VarDataSize-1
  1144 					jmp @FreeMem
  1145 					els
  1146 260A 60				rts						; ret
  1147 					eif
  1148 				.endl
  1149
  1150 260B			.local	SETMESSAGE					; PROCEDURE
  1151
  1152 				; ------------------------------------------------------------
  1153
  1154 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1155 				; as Pointer
  1156 260B B5 94			lda :STACKORIGIN,x
  1157 260D 85 82			sta :bp2
  1158 260F B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1159 2611 85 83			sta :bp2+1
  1160 2613 A0 00			ldy #$00
  1161 2615 B1 82 99 57 27 C8 + 	mva:rne (:bp2),y adr.MSG,y+
  1162 261D A9 57 8D 6B 26 A9 + 	mwa #adr.MSG MSG
  1163 2627 CA				dex
  1164 2628 30 0B			jmi @main
  1165
  1166 				; ------------------------------------------------------------
  1167
  1168 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1169 				; as Pointer
  1170 262A B5 94			lda :STACKORIGIN,x
  1171 262C 8D 57 28			sta DMDATA
  1172 262F B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1173 2631 8D 58 28			sta DMDATA+1
  1174 2634 CA				dex
  1175 2635			@main
  1176
  1177 				; optimize OK (DATAMATRIX), line = 415
  1178
  1179 2635 AD 57 27			lda adr.MSG+$00
  1180 2638 8D 59 28			sta LEN
  1181
  1182 				; optimize OK (DATAMATRIX), line = 416
  1183
  1184 263B A9 58			lda <adr.MSG+$01
  1185 263D 85 88			sta SYSTEM.MOVE_00A2.SOURCE
  1186 263F A9 27			lda >adr.MSG+$01
  1187 2641 85 89			sta SYSTEM.MOVE_00A2.SOURCE+1
  1188 2643 AD 57 28			lda DMDATA
  1189 2646 85 8C			sta SYSTEM.MOVE_00A2.DEST
  1190 2648 AD 58 28			lda DMDATA+1
  1191 264B 85 8D			sta SYSTEM.MOVE_00A2.DEST+1
  1192 264D AD 59 28			lda LEN
  1193 2650 85 84			sta SYSTEM.MOVE_00A2.COUNT
  1194 2652 A9 00			lda #$00
  1195 2654 85 85			sta SYSTEM.MOVE_00A2.COUNT+1
  1196 2656				.local +MAIN.SYSTEM.MOVE_00A2
  1197 2656				m@INLINE
Macro: MAIN.SYSTEM.MOVE_00A2.M@INLINE [Source: datamatrix_gfx.a65]
     4 2656 20 55 21			jsr @move
Source: datamatrix_gfx.a65
  1198 					.endl
  1199
  1200 				; optimize OK (DATAMATRIX), line = 417
  1201
  1202 2659 AC 57 28 84 82 AC + 	mwy DMDATA :bp2
  1203 2663 AC 59 28			ldy LEN
  1204 2666 A9 FF			lda #$FF
  1205 2668 91 82			sta (:bp2),y
  1206
  1207 				; ------------------------------------------------------------
  1208
  1209 = 2757			adr.MSG	= [DATAORIGIN+$0033] .array [256]
  1210 266A			.var MSG	= adr.MSG .word
  1211 = 2857			DMDATA	= DATAORIGIN+$0133
  1212 = 2859			LEN	= DATAORIGIN+$0135
  1213
  1214 = 266B			@VarData	= MSG
  1215 = 0103			@VarDataSize	= 259
  1216
  1217 266A			@exit
  1218 					.ifdef @new
  1219 					lda <@VarData
  1220 					sta :ztmp
  1221 					lda >@VarData
  1222 					ldy #@VarDataSize-1
  1223 					jmp @FreeMem
  1224 					els
  1225 266A 60				rts						; ret
  1226 					eif
  1227 = 266B 57 27		MSG
  1227 				.endl
  1228
  1229 				; ------------------------------------------------------------
  1230
  1231 = 00FF			DATAMATRIX_EOF	= $FF
  1232
  1233 				.endl							; UNIT DATAMATRIX
  1234
  1235 				; ------------------------------------------------------------
  1236
  1237 266D			.local	CRT						; UNIT
  1238
  1239 266D			.local	READKEY						; FUNCTION | ASSEMBLER
  1240
  1241 				; -------------------  ASM Block 00000077  -------------------
  1242
  1243 266D				m@call @GetKey
Macro: M@CALL [Source: macros.asm]
    12 266D 20 81 20				jsr @GETKEY
Source: datamatrix_gfx.a65
  1244 2670 8D 5B 28			sta Result
  1245
  1246 2673			@exit
  1247
  1248 				; ------------------------------------------------------------
  1249
  1250 = 285B			RESULT	= DATAORIGIN+$0137
  1251 2673 60				rts						; ret
  1252 				.endl
  1253
  1254 				; ------------------------------------------------------------
  1255
  1256 = 285A			TEXTATTR	= DATAORIGIN+$0136
  1257 = D01F			CONSOL	= $D01F
  1258 = 0000			CN_START_SELECT_OPTION	= $00
  1259 = 0001			CN_SELECT_OPTION	= $01
  1260 = 0002			CN_START_OPTION	= $02
  1261 = 0003			CN_OPTION	= $03
  1262 = 0004			CN_START_SELECT	= $04
  1263 = 0005			CN_SELECT	= $05
  1264 = 0006			CN_START	= $06
  1265 = 0007			CN_NONE	= $07
  1266 = 0000			BW40	= $00
  1267 = 0001			CO40	= $01
  1268 = 0002			BW80	= $02
  1269 = 0003			CO80	= $03
  1270 = 0007			MONO	= $07
  1271 = 0001			C40	= $01
  1272 = 0003			C80	= $03
  1273 = 0000			BLACK	= $00
  1274 = 000F			WHITE	= $0F
  1275 = 0026			RED	= $26
  1276 = 00AC			CYAN	= $AC
  1277 = 0048			PURPLE	= $48
  1278 = 00B6			GREEN	= $B6
  1279 = 0086			BLUE	= $86
  1280 = 00DC			YELLOW	= $DC
  1281 = 0018			ORANGE	= $18
  1282 = 00F4			BROWN	= $F4
  1283 = 002A			LIGHT_RED	= $2A
  1284 = 0004			DARK_GREY	= $04
  1285 = 0008			GREY	= $08
  1286 = 00BC			LIGHT_GREEN	= $BC
  1287 = 009A			LIGHT_BLUE	= $9A
  1288 = 000C			LIGHT_GREY	= $0C
  1289 = 0080			BLINK	= $80
  1290
  1291 				.endl							; UNIT CRT
  1292
  1293 2674			.local	SHOWMATRIX					; PROCEDURE
  1294
  1295 				; optimize OK (datamatrix_gfx.pas), line = 19
  1296
  1297 2674 A9 14			lda #$14
  1298 2676 20 57 22			jsr GRAPH.INITGRAPH_00E1
  1299
  1300 				; optimize OK (datamatrix_gfx.pas), line = 20
  1301
  1302 2679 A9 0F			lda #$0F
  1303 267B 20 A9 22			jsr GRAPH.SETBKCOLOR
  1304
  1305 				; optimize OK (datamatrix_gfx.pas), line = 22
  1306
  1307 267E A9 00			lda #$00
  1308 2680 8D C4 02			sta SYSTEM.adr.PALETTE+$04
  1309
  1310 				; optimize OK (datamatrix_gfx.pas), line = 23
  1311
  1312 2683 8D C5 02			sta SYSTEM.adr.PALETTE+$05
  1313
  1314 				; optimize OK (datamatrix_gfx.pas), line = 24
  1315
  1316 2686 8D C6 02			sta SYSTEM.adr.PALETTE+$06
  1317
  1318 				; optimize OK (datamatrix_gfx.pas), line = 26
  1319
  1320 2689 8D 5F 28			sta DATA
  1321 268C A9 85			lda #$85
  1322 268E 8D 60 28			sta DATA+1
  1323
  1324 				; optimize OK (datamatrix_gfx.pas), line = 28
  1325
  1326 2691 A9 00			lda #$00
  1327 2693 8D 5D 28			sta Y
  1328
  1329 2696			l_0181
  1330 				; --- ForToDoCondition
  1331 2696 AD 5D 28			lda Y
  1332 2699 C9 30			cmp #$30
  1333 269B B0 4A			jcs l_018F
  1334
  1335 				; optimize OK (datamatrix_gfx.pas), line = 29
  1336
  1337 269D A9 10			lda #$10
  1338 269F 8D 5C 28			sta X
  1339
  1340 26A2			l_0198
  1341 				; --- ForToDoCondition
  1342 26A2 AD 5C 28			lda X
  1343 26A5 C9 40			cmp #$40
  1344 26A7 B0 39			jcs l_01A6
  1345
  1346 				; optimize OK (datamatrix_gfx.pas), line = 30
  1347
  1348 26A9 AC 60 28			ldy DATA+1
  1349 26AC 84 81			sty :bp+1
  1350 26AE AC 5F 28			ldy DATA
  1351 26B1 B1 80			lda (:bp),y
  1352 26B3 8D 5E 28			sta B
  1353
  1354 				; optimize OK (datamatrix_gfx.pas), line = 31
  1355
  1356 26B6 AD 5C 28			lda X
  1357 26B9 8D 52 27			sta GRAPH.PUTPIXEL_00EC.X
  1358 26BC A9 00			lda #$00
  1359 26BE 8D 53 27			sta GRAPH.PUTPIXEL_00EC.X+1
  1360 26C1 AD 5D 28			lda Y
  1361 26C4 8D 54 27			sta GRAPH.PUTPIXEL_00EC.Y
  1362 26C7 A9 00			lda #$00
  1363 26C9 8D 55 27			sta GRAPH.PUTPIXEL_00EC.Y+1
  1364 26CC AD 5E 28			lda B
  1365 26CF 8D 56 27			sta GRAPH.PUTPIXEL_00EC.COLOR
  1366 26D2 20 F1 22			jsr GRAPH.PUTPIXEL_00EC
  1367
  1368 				; optimize FAIL (0, datamatrix_gfx.pas), line = 32
  1369
  1370 26D5 EE 5F 28			inc DATA
  1371 26D8 D0 03			sne
  1372 26DA EE 60 28			inc DATA+1
  1373
  1374 				; --- ForToDoEpilog
  1375 26DD EE 5C 28			inc X
  1376 26E0 D0 C0			jne l_0198
  1377 26E2			l_01A6
  1378
  1379 				; --- ForToDoEpilog
  1380 26E2 EE 5D 28			inc Y
  1381 26E5 D0 AF			jne l_0181
  1382 26E7			l_018F
  1383
  1384 				; ------------------------------------------------------------
  1385
  1386 = 285C			X	= DATAORIGIN+$0138
  1387 = 285D			Y	= DATAORIGIN+$0139
  1388 = 285E			B	= DATAORIGIN+$013A
  1389 = 285F			DATA	= DATAORIGIN+$013B
  1390
  1391 = 285C			@VarData	= X
  1392 = 0005			@VarDataSize	= 5
  1393
  1394 26E7			@exit
  1395 					.ifdef @new
  1396 					lda <@VarData
  1397 					sta :ztmp
  1398 					lda >@VarData
  1399 					ldy #@VarDataSize-1
  1400 					jmp @FreeMem
  1401 					els
  1402 26E7 60				rts						; ret
  1403 					eif
  1404 				.endl
  1405 26E8			l_0058
  1406
  1407 				; optimize FAIL ('DATAMATRIX.SETMESSAGE', datamatrix_gfx.pas), line = 38
  1408
  1409 26E8 E8				inx
  1410 26E9 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1411 26ED A9 84 95 A4			mva #$84 :STACKORIGIN+STACKWIDTH,x
  1412 26F1 E8				inx
  1413 26F2 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1414 26F6 A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  1415 26FA 20 0B 26			jsr DATAMATRIX.SETMESSAGE
  1416
  1417 				; optimize FAIL ('DATAMATRIX.CALCULATEMATRIX', datamatrix_gfx.pas), line = 39
  1418
  1419 26FD 20 15 23			jsr DATAMATRIX.CALCULATEMATRIX
  1420
  1421 				; optimize FAIL ('SHOWMATRIX', datamatrix_gfx.pas), line = 40
  1422
  1423 2700 20 74 26			jsr SHOWMATRIX
  1424
  1425 				; optimize FAIL ('CRT.READKEY', datamatrix_gfx.pas), line = 42
  1426
  1427 2703 20 6D 26			jsr CRT.READKEY
  1428 2706 AD 5B 28 95 95		mva CRT.READKEY.RESULT :STACKORIGIN+1,x
  1429
  1430 				; ------------------------------------------------------------
  1431
  1432 = 8400			DM_DATA	= $8400
  1433 = 0030			DM_SIZE	= $30
  1434 = 0010			XOFFSET	= $10
  1435 = 0000			YOFFSET	= $00
  1436 270B			@exit
  1437
  1438 270B A2 00		@halt	ldx #$00
  1439 270D 9A				txs
  1440 					.ifdef MAIN.@DEFINES.ROMOFF
  1441 					inc portb
  1442 					.fi
  1443
  1444 270E A0 01			ldy #$01
  1445
  1446 2710 60				rts
  1447
  1448 				; ------------------------------------------------------------
  1449
  1450 2711 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1451
  1452 				; ------------------------------------------------------------
  1453
  1454 2721			.local	@DEFINES
  1455 2721			ATARI
  1456 				.endl
  1457
  1458 2721			.local	@RESOURCE
  1459 				.endl
  1460
  1461 				.endl							; MAIN
  1462
  1463 				; ------------------------------------------------------------
  1464 				; ------------------------------------------------------------
  1465
  1466 				.macro	UNITINITIALIZATION
  1467 				
  1468 					.ifdef MAIN.SYSTEM.@UnitInit
  1469 					jsr MAIN.SYSTEM.@UnitInit
  1470 					.fi
  1471 				
  1472 					.ifdef MAIN.TYPES.@UnitInit
  1473 					jsr MAIN.TYPES.@UnitInit
  1474 					.fi
  1475 				
  1476 					.ifdef MAIN.ATARI.@UnitInit
  1477 					jsr MAIN.ATARI.@UnitInit
  1478 					.fi
  1479 				
  1480 					.ifdef MAIN.GRAPH.@UnitInit
  1481 					jsr MAIN.GRAPH.@UnitInit
  1482 					.fi
  1483 				
  1484 					.ifdef MAIN.DATAMATRIX.@UnitInit
  1485 					jsr MAIN.DATAMATRIX.@UnitInit
  1486 					.fi
  1487 				
  1488 					.ifdef MAIN.CRT.@UnitInit
  1489 					jsr MAIN.CRT.@UnitInit
  1490 					.fi
  1491 				.endm
  1492
  1493 				; ------------------------------------------------------------
  1494
  1495 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1496 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1496 				SYSTEM: $2227..$2256
  1497 					eif
  1498
  1499 					ift .SIZEOF(MAIN.TYPES) > 0
  1500 					.print 'TYPES: ',MAIN.TYPES,'..',MAIN.TYPES+.SIZEOF(MAIN.TYPES)-1
  1501 					eif
  1502
  1503 					ift .SIZEOF(MAIN.ATARI) > 0
  1504 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1505 					eif
  1506
  1507 					ift .SIZEOF(MAIN.GRAPH) > 0
  1508 					.print 'GRAPH: ',MAIN.GRAPH,'..',MAIN.GRAPH+.SIZEOF(MAIN.GRAPH)-1
  1508 				GRAPH: $2257..$2314
  1509 					eif
  1510
  1511 					ift .SIZEOF(MAIN.DATAMATRIX) > 0
  1512 					.print 'DATAMATRIX: ',MAIN.DATAMATRIX,'..',MAIN.DATAMATRIX+.SIZEOF(MAIN.DATAMATRIX)-1
  1512 				DATAMATRIX: $2315..$266C
  1513 					eif
  1514
  1515 					ift .SIZEOF(MAIN.CRT) > 0
  1516 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1516 				CRT: $266D..$2673
  1517 					eif
  1518
  1519 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1519 				CODE: $2000..$2720
  1520
  1521 				; ------------------------------------------------------------
  1522
  1523 2721				.align $0004
  1524
  1525 2724			DATAORIGIN
  1526 2724-2735> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $27 $00 $00  $00 $17
  1527
  1528 = 0012			VARINITSIZE	= *-DATAORIGIN
  1529 = 013D			VARDATASIZE	= 317
  1530
  1531 = 2861			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1532
  1533 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1533 				DATA: $2724..$2861
  1534
  1535 02E0-02E1> F2 21			run START
  1536
  1537 				; ------------------------------------------------------------
  1538
  1539 				.macro	STATICDATA
  1540 				.by  $4F $4C $6F $72 $65 $6D $20 $69  $70 $73 $75 $6D $20 $64 $6F $6C  $6F $72 $20 $73 $69 $74 $20 $61
  1541 				.by  $6D $65 $74 $2C $20 $63 $6F $6E  $73 $65 $63 $74 $65 $74 $75 $72  $20 $61 $64 $69 $70 $69 $73 $63
  1542 				.by  $69 $6E $67 $20 $65 $6C $69 $74  $2E $20 $4E $75 $6C $6C $61 $6D  $20 $69 $6E $20 $71 $75 $61 $6D
  1543 				.by  $20 $6C $69 $67 $75 $6C $61 $2E  $00 $03 $02 $02 $01 $01 $02 $02  $03 $03 $03 $03 $03 $03 $03 $02
  1544 				.by  $03 $28 $14 $14 $28 $50 $50 $A0  $A0 $40 $50 $50 $50 $28 $28 $A0  $A0 $18 $18 $0C $18 $30 $30 $60
  1545 				.by  $60 $C0 $C0 $C0 $C0 $18 $0C $C0  $C0
  1546 				.endm
  1547
  1548 					end
