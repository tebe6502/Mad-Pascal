; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/04/11] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_002B

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_0075					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000028  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	DATAMATRIX					; UNIT

.local	CALCULATEMATRIX					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000052  -------------------


   txa:pha	; need to store register X in Mad pascal

; datamatrix.asx - Data Matrix barcode encoder in 6502 assembly language

; "THE BEER-WARE LICENSE" (Revision 42):
; Piotr Fusik <fox@scene.pl> wrote this file.
; As long as you retain this notice you can do whatever you want with this stuff.
; If we meet some day, and you think this stuff is worth it, you can buy me a beer in return.

; Compile with xasm (http://xasm.atari.org/), for example:
; xasm datamatrix.asx /l /d:DataMatrix_code=$b600 /d:DataMatrix_data=$b900 /d:DataMatrix_SIZE=20
; DataMatrix_code - self-modifying code
; DataMatrix_data - uninitialized data
; DataMatrix_SIZE - 10, 12, 14, 16, 18, 20, 22, 24, 26, 32, 36, 40, 44 or 48


DataMatrix_data = DM_DATA;
DataMatrix_SIZE = DM_SIZE;

DataMatrix_message  equ DataMatrix_data ; DataMatrix_DATA_CODEWORDS

   DataMatrix_symbol = DataMatrix_data+$100;

; private:

    ift DataMatrix_SIZE<=26
DataMatrix_MATRIX_SIZE  equ DataMatrix_SIZE-2
    els
DataMatrix_MATRIX_SIZE  equ DataMatrix_SIZE-4
    eif

DataMatrix_dataCodewords    equ DataMatrix_message  ; DataMatrix_DATA_CODEWORDS
DataMatrix_errorCodewords   equ DataMatrix_dataCodewords+DataMatrix_DATA_CODEWORDS ; DataMatrix_ERROR_CODEWORDS

DataMatrix_exp  equ DataMatrix_data+$100    ; $100
DataMatrix_log  equ Datamatrix_data+$200    ; $100

    ;org DataMatrix_code

    ldx #-1
DataMatrix_encodeMessage_1
    inx
    inc DataMatrix_message,x
    bne DataMatrix_encodeMessage_1
    lda #129
DataMatrix_padMessage_1
    sta DataMatrix_message,x+
    lda DataMatrix_padding,x
    bne DataMatrix_padMessage_1

    tax ; #0
    lda #1
DataMatrix_initExpLog_1
    sta DataMatrix_exp,x
    tay
    txa
    sta DataMatrix_log,y
    tya
    asl @
    scc:eor <301
    inx
    bne DataMatrix_initExpLog_1

    ldy #DataMatrix_ERROR_CODEWORDS-1
    txa ; #0
    sta:rpl DataMatrix_errorCodewords,y-
;   ldx #0
DataMatrix_reedSolomon_1
    txa:pha
    ldy #0
    lda DataMatrix_dataCodewords,x
    eor DataMatrix_errorCodewords
DataMatrix_reedSolomon_2
    pha
    beq DataMatrix_reedSolomon_3
    tax
    lda DataMatrix_log,x
    add DataMatrix_poly,y
    adc #0
    tax
    lda DataMatrix_exp,x
DataMatrix_reedSolomon_3
    cpy #DataMatrix_ERROR_CODEWORDS-1
    scs:eor DataMatrix_errorCodewords+1,y
    sta DataMatrix_errorCodewords,y+
    pla
    bcc DataMatrix_reedSolomon_2
    pla:tax
    inx
    cpx #DataMatrix_DATA_CODEWORDS
    bcc DataMatrix_reedSolomon_1

    ldy #DataMatrix_SIZE-3
    mwa #DataMatrix_symbol  DataMatrix_clear_store+1
DataMatrix_clear_line
    lda #DataMatrix_SIZE
    add:sta DataMatrix_clear_store+1
    scc:inc DataMatrix_clear_store+2
    ldx #DataMatrix_SIZE-1
DataMatrix_clear_dashed
    tya
    and #1
DataMatrix_clear_store
    sta $ffff,x
    lda #2
    dex
    bmi DataMatrix_clear_next
    ift DataMatrix_SIZE>26
    beq DataMatrix_clear_solid
    cpx #DataMatrix_SIZE/2-1
    beq DataMatrix_clear_dashed
    cpx #DataMatrix_SIZE/2
    eif
    bne DataMatrix_clear_store
DataMatrix_clear_solid
    lsr @
    bpl DataMatrix_clear_store  ; jmp
DataMatrix_clear_next
    dey
    bpl DataMatrix_clear_line

    ldx #DataMatrix_SIZE-1
DataMatrix_horizontal_1
    txa
    and:eor #1
    sta DataMatrix_symbol,x
:DataMatrix_SIZE>26 sta DataMatrix_symbol+DataMatrix_SIZE/2*DataMatrix_SIZE,x
    mva #1  DataMatrix_symbol+[DataMatrix_SIZE-1]*DataMatrix_SIZE,x
:DataMatrix_SIZE>26 sta DataMatrix_symbol+[DataMatrix_SIZE/2-1]*DataMatrix_SIZE,x
    dex
    bpl DataMatrix_horizontal_1

    mwa #DataMatrix_dataCodewords   DataMatrix_fillSource
    ldx #0
    ldy #4

DataMatrix_fill_1
; Check corner cases
    ift [DataMatrix_MATRIX_SIZE&4]!=0
    txa
    bne DataMatrix_noCorner
    cpy #DataMatrix_MATRIX_SIZE-[DataMatrix_MATRIX_SIZE&2]
    bne DataMatrix_noCorner
; corner1/2
    lda #15
    jsr DataMatrix_setCorner
DataMatrix_noCorner
    eif

; Sweep upward-right
DataMatrix_fill_up
    cpy #DataMatrix_MATRIX_SIZE
    jsr DataMatrix_setUtah
DataMatrix_no_up
:2  inx
:2  dey
    bmi DataMatrix_fill_top
    cpx #DataMatrix_MATRIX_SIZE
    bcc DataMatrix_fill_up
DataMatrix_fill_top
:3  inx
    iny
; Sweep downward-left
DataMatrix_fill_down
    tya
    bmi DataMatrix_no_down
    cpx #DataMatrix_MATRIX_SIZE
    jsr DataMatrix_setUtah
DataMatrix_no_down
:2  iny
:2  dex
    bmi DataMatrix_fill_left
    cpy #DataMatrix_MATRIX_SIZE
    bcc DataMatrix_fill_down
DataMatrix_fill_left
    inx
:3  iny
    cpx #DataMatrix_MATRIX_SIZE
    bcc DataMatrix_fill_1
    cpy #DataMatrix_MATRIX_SIZE
    bcc DataMatrix_fill_1

    ift [DataMatrix_SIZE&2]==0
; Fixed pattern in the bottom-right corner.
    lda #1
    sta DataMatrix_symbol+[DataMatrix_SIZE-3]*DataMatrix_SIZE+DataMatrix_SIZE-3
    sta DataMatrix_symbol+[DataMatrix_SIZE-2]*DataMatrix_SIZE+DataMatrix_SIZE-2
    lsr @
    sta DataMatrix_symbol+[DataMatrix_SIZE-3]*DataMatrix_SIZE+DataMatrix_SIZE-2
    sta DataMatrix_symbol+[DataMatrix_SIZE-2]*DataMatrix_SIZE+DataMatrix_SIZE-3
    eif

    pla:tax	; need to restore register X in Mad pascal
    rts

DataMatrix_setUtah
    bcs DataMatrix_setUtah_no
    lda DataMatrix_matrixLo,y
    ift DataMatrix_SIZE>26
    cpx #DataMatrix_MATRIX_SIZE/2
    scc:adc #1
    eif
    sta DataMatrix_setUtah_load+1
    lda DataMatrix_matrixHi,y
    ift DataMatrix_SIZE>26
    adc #0
    eif
    sta DataMatrix_setUtah_load+2
DataMatrix_setUtah_load
    lda $ffff,x
    lsr @
    beq DataMatrix_setUtah_no
    lda #7
DataMatrix_setCorner
    stx DataMatrix_column
    sty DataMatrix_row
    tay
DataMatrix_setShape_1
    tya:pha
    lda #0
DataMatrix_column   equ *-1
    add DataMatrix_shapeX,y
    tax
    lda #0
DataMatrix_row  equ *-1
    add DataMatrix_shapeY,y
    tay
    bpl DataMatrix_setModuleWrapped_yOk
    add #DataMatrix_MATRIX_SIZE
    tay
    ift [DataMatrix_MATRIX_SIZE&7]!=0
    txa
    add #4-[[DataMatrix_MATRIX_SIZE+4]&7]
    tax
    eif
DataMatrix_setModuleWrapped_yOk
    txa
    bpl DataMatrix_setModuleWrapped_xOk
    add #DataMatrix_MATRIX_SIZE
    tax
    ift [DataMatrix_MATRIX_SIZE&7]!=0
    tya
    add #4-[[DataMatrix_MATRIX_SIZE+4]&7]
    tay
    eif
DataMatrix_setModuleWrapped_xOk
    ift DataMatrix_SIZE>26
    cpx #DataMatrix_MATRIX_SIZE/2
    bcc DataMatrix_setModuleWrapped_leftRegion
    inx:inx
DataMatrix_setModuleWrapped_leftRegion
    eif
    mva DataMatrix_matrixLo,y   DataMatrix_setModule_store+1
    mva DataMatrix_matrixHi,y   DataMatrix_setModule_store+2
    asl DataMatrix_dataCodewords
DataMatrix_fillSource   equ *-2
    lda #0
    rol @
DataMatrix_setModule_store
    sta $ffff,x
    pla:tay
    dey
    and #7
    bne DataMatrix_setShape_1
    inw DataMatrix_fillSource
    ldx DataMatrix_column
    ldy DataMatrix_row
DataMatrix_setUtah_no
    rts

    ift DataMatrix_SIZE==10
DataMatrix_DATA_CODEWORDS   equ 3
DataMatrix_ERROR_CODEWORDS  equ 5
DataMatrix_poly dta $eb,$cf,$d2,$f4,$0f

    eli DataMatrix_SIZE==12
DataMatrix_DATA_CODEWORDS   equ 5
DataMatrix_ERROR_CODEWORDS  equ 7
DataMatrix_poly dta $b1,$1e,$d6,$da,$2a,$c5,$1c

    eli DataMatrix_SIZE==14
DataMatrix_DATA_CODEWORDS   equ 8
DataMatrix_ERROR_CODEWORDS  equ 10
DataMatrix_poly dta $c7,$32,$96,$78,$ed,$83,$ac,$53,$f3,$37

    eli DataMatrix_SIZE==16
DataMatrix_DATA_CODEWORDS   equ 12
DataMatrix_ERROR_CODEWORDS  equ 12
DataMatrix_poly dta $a8,$8e,$23,$ad,$5e,$b9,$6b,$c7,$4a,$c2,$e9,$4e

    eli DataMatrix_SIZE==18
DataMatrix_DATA_CODEWORDS   equ 18
DataMatrix_ERROR_CODEWORDS  equ 14
DataMatrix_poly dta $53,$ab,$21,$27,$08,$0c,$f8,$1b,$26,$54,$5d,$f6,$ad,$69

    eli DataMatrix_SIZE==20
DataMatrix_DATA_CODEWORDS   equ 22
DataMatrix_ERROR_CODEWORDS  equ 18
DataMatrix_poly dta $a4,$09,$f4,$45,$b1,$a3,$a1,$e7,$5e,$fa,$c7,$dc,$fd,$a4,$67,$8e,$3d,$ab

    eli DataMatrix_SIZE==22
DataMatrix_DATA_CODEWORDS   equ 30
DataMatrix_ERROR_CODEWORDS  equ 20
DataMatrix_poly dta $7f,$21,$92,$17,$4f,$19,$c1,$7a,$d1,$e9,$e6,$a4,$01,$6d,$b8,$95,$26,$c9,$3d,$d2

    eli DataMatrix_SIZE==24
DataMatrix_DATA_CODEWORDS   equ 36
DataMatrix_ERROR_CODEWORDS  equ 24
DataMatrix_poly dta $41,$8d,$f5,$1f,$b7,$f2,$ec,$b1,$7f,$e1,$6a,$16,$83,$14,$ca,$16,$6a,$89,$67,$e7,$d7,$88,$55,$2d

    eli DataMatrix_SIZE==26
DataMatrix_DATA_CODEWORDS   equ 44
DataMatrix_ERROR_CODEWORDS  equ 28
DataMatrix_poly dta $96,$20,$6d,$95,$ef,$d5,$c6,$30,$5e,$32,$0c,$c3,$a7,$82,$c4,$fd,$63,$a6,$ef,$de,$92,$be,$f5,$b8,$ad,$7d,$11,$97

    eli DataMatrix_SIZE==32
DataMatrix_DATA_CODEWORDS   equ 62
DataMatrix_ERROR_CODEWORDS  equ 36
DataMatrix_poly dta $39,$56,$bb,$45,$8c,$99,$1f,$42,$87,$43,$f8,$54,$5a,$51,$db,$c5,$02,$01,$27,$10,$4b,$e5,$14,$33,$fc,$6c,$d5,$b5,$b7,$57,$6f,$4d,$e8,$a8,$b0,$9c

    eli DataMatrix_SIZE==36
DataMatrix_DATA_CODEWORDS   equ 86
DataMatrix_ERROR_CODEWORDS  equ 42
DataMatrix_poly dta $e1,$26,$e1,$94,$c0,$fe,$8d,$0b,$52,$ed,$51,$18,$0d,$7a,$ff,$6a,$a7,$0d,$cf,$a0,$58,$cb,$26,$8e,$54,$42,$03,$a8,$66,$9c,$01,$c8,$58,$3c,$e9,$86,$73,$72,$ea,$5a,$41,$8a

    eli DataMatrix_SIZE==40
DataMatrix_DATA_CODEWORDS   equ 114
DataMatrix_ERROR_CODEWORDS  equ 48
DataMatrix_poly dta $72,$45,$7a,$1e,$5e,$0b,$42,$e6,$84,$49,$91,$89,$87,$4f,$d6,$21,$0c,$dc,$8e,$d5,$88,$7c,$d7,$a6,$09,$de,$1c,$9a,$84,$04,$64,$aa,$91,$3b,$a4,$d7,$11,$f9,$66,$f9,$86,$80,$05,$f5,$83,$7f,$dd,$9c

    eli DataMatrix_SIZE==44
DataMatrix_DATA_CODEWORDS   equ 144
DataMatrix_ERROR_CODEWORDS  equ 56
DataMatrix_poly dta $1d,$b3,$63,$95,$9f,$48,$7d,$16,$37,$3c,$d9,$b0,$9c,$5a,$2b,$50,$fb,$eb,$80,$a9,$fe,$86,$f9,$2a,$79,$76,$48,$80,$81,$e8,$25,$0f,$18,$dd,$8f,$73,$83,$28,$71,$fe,$13,$7b,$f6,$44,$a6,$42,$76,$8e,$2f,$33,$c3,$f2,$f9,$83,$26,$42

    eli DataMatrix_SIZE==48
DataMatrix_DATA_CODEWORDS   equ 174
DataMatrix_ERROR_CODEWORDS  equ 68
DataMatrix_poly dta $21,$4f,$be,$f5,$5b,$dd,$e9,$19,$18,$06,$90,$97,$79,$ba,$8c,$7f,$2d,$99,$fa,$b7,$46,$83,$c6,$11,$59,$f5,$79,$33,$8c,$fc,$cb,$52,$53,$e9,$98,$dc,$9b,$12,$e6,$d2,$5e,$20,$c8,$c5,$c0,$c2,$ca,$81,$0a,$ed,$c6,$5e,$b0,$24,$28,$8b,$c9,$84,$db,$22,$38,$71,$34,$14,$22,$f7,$0f,$33

    els
    ert 1   ; unsupported DataMatrix_SIZE
    eif

DataMatrix_padding
:DataMatrix_DATA_CODEWORDS  dta [129+[1+#]*149%253]%254+1
; NOTE: the following two zero bytes terminate DataMatrix_padding:
DataMatrix_shapeY   dta 0,0,0,-1,-1,-1,-2,-2
    ift DataMatrix_SIZE==14||DataMatrix_SIZE==22||DataMatrix_SIZE==32||DataMatrix_SIZE==40||DataMatrix_SIZE==48 ; corner1
    dta 3-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,1-DataMatrix_MATRIX_SIZE,-DataMatrix_MATRIX_SIZE,-DataMatrix_MATRIX_SIZE,-1,-1,-1
    eli DataMatrix_SIZE==16||DataMatrix_SIZE==24 ; corner2
    dta 3-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,1,0,-1
    eif
DataMatrix_shapeX   dta 0,-1,-2,0,-1,-2,-1,-2
    ift DataMatrix_SIZE==14||DataMatrix_SIZE==22||DataMatrix_SIZE==32||DataMatrix_SIZE==40||DataMatrix_SIZE==48 ; corner1
    dta DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-2,2,1,0
    eli DataMatrix_SIZE==16||DataMatrix_SIZE==24 ; corner2
    dta DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-2,DataMatrix_MATRIX_SIZE-3,DataMatrix_MATRIX_SIZE-4,0,0,0
    eif

    ift DataMatrix_SIZE<=26
DataMatrix_matrixLo
:DataMatrix_MATRIX_SIZE dta l(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
DataMatrix_matrixHi
:DataMatrix_MATRIX_SIZE dta h(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
    els
DataMatrix_matrixLo
:DataMatrix_MATRIX_SIZE/2   dta l(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
:DataMatrix_MATRIX_SIZE/2   dta l(DataMatrix_symbol+[1+DataMatrix_SIZE/2+#]*DataMatrix_SIZE+1)
DataMatrix_matrixHi
:DataMatrix_MATRIX_SIZE/2   dta h(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
:DataMatrix_MATRIX_SIZE/2   dta h(DataMatrix_symbol+[1+DataMatrix_SIZE/2+#]*DataMatrix_SIZE+1)
    eif

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETMESSAGE					; PROCEDURE

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.MSG,y+
	mwa #adr.MSG MSG
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta DMDATA
	lda :STACKORIGIN+STACKWIDTH,x
	sta DMDATA+1
	dex
@main

; optimize OK (DATAMATRIX), line = 415

	lda adr.MSG+$00
	sta LEN

; optimize OK (DATAMATRIX), line = 416

	lda <adr.MSG+$01
	sta SYSTEM.MOVE_0075.SOURCE
	lda >adr.MSG+$01
	sta SYSTEM.MOVE_0075.SOURCE+1
	lda DMDATA
	sta SYSTEM.MOVE_0075.DEST
	lda DMDATA+1
	sta SYSTEM.MOVE_0075.DEST+1
	lda LEN
	sta SYSTEM.MOVE_0075.COUNT
	lda #$00
	sta SYSTEM.MOVE_0075.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0075
	m@INLINE
	.endl

; optimize OK (DATAMATRIX), line = 417

	mwy DMDATA :bp2
	ldy LEN
	lda #$FF
	sta (:bp2),y

; ------------------------------------------------------------

adr.MSG	= [DATAORIGIN+$000B] .array [256]
.var MSG	= adr.MSG .word
DMDATA	= DATAORIGIN+$010B
LEN	= DATAORIGIN+$010D

@VarData	= MSG
@VarDataSize	= 259

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

DATAMATRIX_EOF	= $FF

.endl							; UNIT DATAMATRIX

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	CURSOROFF					; PROCEDURE

; optimize OK (crt_atari.inc), line = 8

	lda #$01
	sta ATARI.CRSINH

; optimize FAIL ('@print', crt_atari.inc), line = 10

	@print #$1F
	@print #$1E
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READKEY						; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000053  -------------------

	m@call @GetKey
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$010F
	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$010E
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

.local	SHOWMATRIX					; PROCEDURE

; optimize OK (datamatrix_txt.pas), line = 17

	lda #$0F
	sta $02C6

; optimize OK (datamatrix_txt.pas), line = 18

	sta $02C8

; optimize OK (datamatrix_txt.pas), line = 19

	lda #$00
	sta $02C5

; --- RepeatUntilProlog
l_00E4

; optimize OK (datamatrix_txt.pas), line = 22

	lda DATA
	sta :eax
	lda DATA+1
	sta :eax+1
	lda #$18
	sta :ecx
	jsr idivAX_CL.MOD
	lda :ztmp8
	jne l_00FE
	@printEOL
l_00FE

; optimize OK (datamatrix_txt.pas), line = 23

	ldy DATA
	lda #$85
	add DATA+1
	sta :bp+1
	lda (:bp),y
	cmp #$01
	jne l_0117
	@print #$A0
	jmp l_0121
l_0117

; optimize FAIL ('@print', datamatrix_txt.pas), line = 24

	@print #$20
l_0121

; optimize FAIL (0, datamatrix_txt.pas), line = 25

	inc DATA
	sne
	inc DATA+1

; optimize OK (datamatrix_txt.pas), line = 26

	lda DATA+1
	cmp #$02
	bne @+
	lda DATA
	cmp #$40
@
	jne l_00E4

; ------------------------------------------------------------

DATA	= DATAORIGIN+$0110

@VarData	= DATA
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_002B

; optimize FAIL ('DATAMATRIX.SETMESSAGE', datamatrix_txt.pas), line = 30

	inx
	mva #$00 :STACKORIGIN,x
	mva #$84 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$00 :STACKORIGIN,x
	mva #$20 :STACKORIGIN+STACKWIDTH,x
	jsr DATAMATRIX.SETMESSAGE

; optimize FAIL ('DATAMATRIX.CALCULATEMATRIX', datamatrix_txt.pas), line = 31

	jsr DATAMATRIX.CALCULATEMATRIX

; optimize FAIL ('SHOWMATRIX', datamatrix_txt.pas), line = 32

	jsr SHOWMATRIX

; optimize FAIL ('CRT.CURSOROFF', datamatrix_txt.pas), line = 33

	jsr CRT.CURSOROFF

; optimize FAIL ('CRT.READKEY', datamatrix_txt.pas), line = 34

	jsr CRT.READKEY
	mva CRT.READKEY.RESULT :STACKORIGIN+1,x

; ------------------------------------------------------------

DM_DATA	= $8400
DM_SIZE	= $18
DM_SYMBOL	= $8500
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.DATAMATRIX.@UnitInit
	jsr MAIN.DATAMATRIX.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.DATAMATRIX) > 0
	.print 'DATAMATRIX: ',MAIN.DATAMATRIX,'..',MAIN.DATAMATRIX+.SIZEOF(MAIN.DATAMATRIX)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 274

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $22 $68 $74 $74 $70 $3A $2F $2F  $61 $74 $61 $72 $69 $2E $70 $6C  $2F $48 $53 $43 $2F $3F $78 $3D
.by  $31 $30 $30 $30 $30 $30 $30 $30  $30 $30 $31 $00
.endm

	end
