mads 2.1.5 build 4 (1 Apr 22)
Source: datamatrix_txt.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/04/11] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 				fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0080			bp	.ds 2
    26 = 0082			bp2	.ds 2
    27
    28 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 0088			edx	.ds 4
    30 = 008C			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0090			ztmp8	.ds 1
    35 = 0091			ztmp9	.ds 1
    36 = 0092			ztmp10	.ds 1
    37 = 0093			ztmp11	.ds 1
    38
    39 = 0094			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0084			ax	= eax
    45 = 0084			al	= eax
    46 = 0085			ah	= eax+1
    47
    48 = 008C			cx	= ecx
    49 = 008C			cl	= ecx
    50 = 008D			ch	= ecx+1
    51
    52 = 0088			dx	= edx
    53 = 0088			dl	= edx
    54 = 0089			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0084			FP1MAN0	.ds 1
    59 = 0085			FP1MAN1	.ds 1
    60 = 0086			FP1MAN2	.ds 1
    61 = 0087			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0090			FP1SGN	.ds 1
    66 = 0091			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 0088			FP2MAN0	.ds 1
    71 = 0089			FP2MAN1	.ds 1
    72 = 008A			FP2MAN2	.ds 1
    73 = 008B			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0092			FP2SGN	.ds 1
    78 = 0093			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008C			FPMAN0	.ds 1
    83 = 008D			FPMAN1	.ds 1
    84 = 008E			FPMAN2	.ds 1
    85 = 008F			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0082			FPSGN	.ds 1
    90 = 0083			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: datamatrix_txt.a65]
     1 FFFF> 2000-24B1> 22 68 + .by  $22 $68 $74 $74 $70 $3A $2F $2F  $61 $74 $61 $72 $69 $2E $70 $6C  $2F $48 $53 $43 $2F $3F $78 $3D
     2 2018 31 30 30 30 30 30 + .by  $31 $30 $30 $30 $30 $30 $30 $30  $30 $30 $31 $00
Source: datamatrix_txt.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 2024			RTLIB
   113 2024				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D3
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $2024..$213F
   118
   119 				; ------------------------------------------------------------
   120
   121 2140			START
   122 2140 BA				tsx
   123 2141 8E 97 24			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					.fi
   128
   129 = 010C			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 24B2			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 					ldx #256-VLEN
   136 					lda #$00
   137 					sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>256
   139 					@fill #VADR #VLEN #$00
   139 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #$00 @FILL.PTR2\ JSR @FILL
   139 2144 A9 B2 85 88 A9 24 +  MWA #VADR @FILL.PTR1
   139 214C A9 0C 85 8C A9 01 +  MWA #VLEN @FILL.PTR3
   139 2154 A9 00 85 84		 MVA #$00 @FILL.PTR2
   139 2158 20 C7 20		 JSR @FILL
   140 					eif
   141
   142 				.ifdef :psptr
   143 					mwa #PROGRAMSTACK :psptr
   144 				.fi
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.fi
   149
   150 215B A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 215D BD 40 03 9D 9C 24 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 2166 E8				inx						; X = 0
   154 2167 86 80			stx bp						; BP = 0
   155
   156 2169 8E 0F D2			stx skctl					; reset POKEY
   157 216C A9 03			lda #3
   158 216E 8D 0F D2			sta skctl
   159
   160 2171 CA				dex						; X = 255
   161
   162 2172				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: datamatrix_txt.a65]
Source: datamatrix_txt.a65
   163
   164 2172			.local	MAIN						; PROCEDURE
   165
   166 2172 4C 70 24			jmp l_002B
   167
   168 				; ------------------------------------------------------------
   169
   170 2175			.local	SYSTEM						; UNIT
   171
   172 2175			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   173
   174 				; ------------------------------------------------------------
   175
   176 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   177 				; as Pointer
   178 2175 B5 94			lda :STACKORIGIN,x
   179 2177 85 88			sta A
   180 2179 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   181 217B 85 89			sta A+1
   182 217D CA				dex
   183 217E			@main
   184
   185 				; -------------------  ASM Block 00000002  -------------------
   186
   187 217E A0 00			ldy #0
   188 2180 B1 88 85 90			mva (:edx),y Result
   189
   190 2184			@exit
   191
   192 				; ------------------------------------------------------------
   193
   194 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   195 				; as Pointer
   196
   197 2184 E8				inx
   198 2185 A5 90 95 94			mva RESULT :STACKORIGIN,x
   199
   200 					.ifdef @new
   201 					lda <@VarData
   202 					sta :ztmp
   203 					lda >@VarData
   204 					ldy #@VarDataSize-1
   205 					jmp @FreeMem
   206 					eif
   207
   208 				; ------------------------------------------------------------
   209
   210 = 0088			A	= :EDX
   211 = 0090			RESULT	= :STACKORIGIN-4
   212 2189 60				rts						; ret
   213 				.endl
   214
   215 218A			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   216
   217 				; ------------------------------------------------------------
   218
   219 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   220 				; as Pointer
   221 218A B5 94			lda :STACKORIGIN,x
   222 218C 85 88			sta A
   223 218E B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   224 2190 85 89			sta A+1
   225 2192 CA				dex
   226 2193 30 05			jmi @main
   227
   228 				; ------------------------------------------------------------
   229
   230 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   231 				; as Pointer
   232 2195 B5 94			lda :STACKORIGIN,x
   233 2197 85 8C			sta VALUE
   234 2199 CA				dex
   235 219A			@main
   236
   237 				; -------------------  ASM Block 00000018  -------------------
   238
   239 219A A0 00			ldy #0
   240 219C A5 8C 91 88			mva value (:edx),y
   241
   242 				; ------------------------------------------------------------
   243
   244 = 0088			A	= :EDX
   245 = 008C			VALUE	= :ECX
   246 21A0			@exit
   247 					.ifdef @new
   248 					lda <@VarData
   249 					sta :ztmp
   250 					lda >@VarData
   251 					ldy #@VarDataSize-1
   252 					jmp @FreeMem
   253 					els
   254 21A0 60				rts						; ret
   255 					eif
   256 				.endl
   257
   258 21A1			.local	MOVE_0075					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   259
   260 					.MACRO m@INLINE
   261 				
   262 				; -------------------  ASM Block 00000028  -------------------
   263 				
   264 					jsr @move
   265 				
   266 					.ENDM
   267
   268 				; ------------------------------------------------------------
   269
   270 = 0088			SOURCE	= :EDX
   271 = 008C			DEST	= :ECX
   272 = 0084			COUNT	= :EAX
   273 21A1			@exit
   274 				.endl
   275
   276 				; ------------------------------------------------------------
   277
   278 = 0101			__PORTB_BANKS	= $0101
   279 = 0648			M_PI_2	= $0648
   280 = 0192			D_PI_2	= $0192
   281 = 0004			D_PI_180	= $04
   282 = 0000			MGTIA	= $00
   283 = 0080			MVBXE	= $80
   284 = 0000			VBXE_XDLADR	= $00
   285 = 00E0			VBXE_BCBTMP	= $E0
   286 = 0100			VBXE_BCBADR	= $0100
   287 = 1000			VBXE_MAPADR	= $1000
   288 = 1000			VBXE_CHBASE	= $1000
   289 = 5000			VBXE_OVRADR	= $5000
   290 = B000			VBXE_WINDOW	= $B000
   291 = 0000			IDLI	= $00
   292 = 0001			IVBL	= $01
   293 = 0002			ITIM1	= $02
   294 = 0003			ITIM2	= $03
   295 = 0004			ITIM4	= $04
   296 = 00FE			CH_DELCHR	= $FE
   297 = 009B			CH_ENTER	= $9B
   298 = 001B			CH_ESC	= $1B
   299 = 001C			CH_CURS_UP	= $1C
   300 = 001D			CH_CURS_DOWN	= $1D
   301 = 001E			CH_CURS_LEFT	= $1E
   302 = 001F			CH_CURS_RIGHT	= $1F
   303 = 007F			CH_TAB	= $7F
   304 = 009B			CH_EOL	= $9B
   305 = 007D			CH_CLR	= $7D
   306 = 00FD			CH_BELL	= $FD
   307 = 007E			CH_DEL	= $7E
   308 = 009C			CH_DELLINE	= $9C
   309 = 009D			CH_INSLINE	= $9D
   310 = 0000			COLOR_BLACK	= $00
   311 = 000E			COLOR_WHITE	= $0E
   312 = 0032			COLOR_RED	= $32
   313 = 0096			COLOR_CYAN	= $96
   314 = 0068			COLOR_VIOLET	= $68
   315 = 00C4			COLOR_GREEN	= $C4
   316 = 0074			COLOR_BLUE	= $74
   317 = 00EE			COLOR_YELLOW	= $EE
   318 = 0028			COLOR_ORANGE	= $28
   319 = 00E4			COLOR_BROWN	= $E4
   320 = 003C			COLOR_LIGHTRED	= $3C
   321 = 0004			COLOR_GRAY1	= $04
   322 = 0006			COLOR_GRAY2	= $06
   323 = 000A			COLOR_GRAY3	= $0A
   324 = 00CC			COLOR_LIGHTGREEN	= $CC
   325 = 007C			COLOR_LIGHTBLUE	= $7C
   326 = 0004			FMOPENREAD	= $04
   327 = 0008			FMOPENWRITE	= $08
   328 = 0009			FMOPENAPPEND	= $09
   329 = 000C			FMOPENREADWRITE	= $0C
   330 = 24AC			SCREENWIDTH	= DATAORIGIN+$0000
   331 = 24AE			SCREENHEIGHT	= DATAORIGIN+$0002
   332 = 24B0			DATESEPARATOR	= DATAORIGIN+$0004
   333 = D20A			RND	= $D20A
   334 = 02C0			adr.PALETTE	= $02C0
   335 21A1			.var PALETTE	= adr.PALETTE .word
   336 = D012			adr.HPALETTE	= $D012
   337 21A1			.var HPALETTE	= adr.HPALETTE .word
   338 = 24B1			FILEMODE	= DATAORIGIN+$0005
   339 = 24B2			GRAPHMODE	= DATAORIGIN+$0006
   340 = 24B3			IORESULT	= DATAORIGIN+$0007
   341 = 24B4			EOLN	= DATAORIGIN+$0008
   342 = 24B5			RNDSEED	= DATAORIGIN+$0009
   343
   344 = 21A1 C0 02		PALETTE
   344 = 21A3 12 D0		HPALETTE
   344 				.endl							; UNIT SYSTEM
   345
   346 				; ------------------------------------------------------------
   347
   348 21A5			.local	DATAMATRIX					; UNIT
   349
   350 21A5			.local	CALCULATEMATRIX					; PROCEDURE | ASSEMBLER
   351
   352 				; -------------------  ASM Block 00000052  -------------------
   353
   354
   355 21A5 8A 48		   txa:pha	; need to store register X in Mad pascal
   356
   357 				; datamatrix.asx - Data Matrix barcode encoder in 6502 assembly language
   358
   359 				; "THE BEER-WARE LICENSE" (Revision 42):
   360 				; Piotr Fusik <fox@scene.pl> wrote this file.
   361 				; As long as you retain this notice you can do whatever you want with this stuff.
   362 				; If we meet some day, and you think this stuff is worth it, you can buy me a beer in return.
   363
   364 				; Compile with xasm (http://xasm.atari.org/), for example:
   365 				; xasm datamatrix.asx /l /d:DataMatrix_code=$b600 /d:DataMatrix_data=$b900 /d:DataMatrix_SIZE=20
   366 				; DataMatrix_code - self-modifying code
   367 				; DataMatrix_data - uninitialized data
   368 				; DataMatrix_SIZE - 10, 12, 14, 16, 18, 20, 22, 24, 26, 32, 36, 40, 44 or 48
   369
   370
   371 = 8400			DataMatrix_data = DM_DATA;
   372 = 0018			DataMatrix_SIZE = DM_SIZE;
   373
   374 = 8400			DataMatrix_message  equ DataMatrix_data ; DataMatrix_DATA_CODEWORDS
   375
   376 = 8500			   DataMatrix_symbol = DataMatrix_data+$100;
   377
   378 				; private:
   379
   380 				    ift DataMatrix_SIZE<=26
   381 = 0016			DataMatrix_MATRIX_SIZE  equ DataMatrix_SIZE-2
   382 				    els
   383 				DataMatrix_MATRIX_SIZE  equ DataMatrix_SIZE-4
   384 				    eif
   385
   386 = 8400			DataMatrix_dataCodewords    equ DataMatrix_message  ; DataMatrix_DATA_CODEWORDS
   387 = 8424			DataMatrix_errorCodewords   equ DataMatrix_dataCodewords+DataMatrix_DATA_CODEWORDS ; DataMatrix_ERROR_CODEWORDS
   388
   389 = 8500			DataMatrix_exp  equ DataMatrix_data+$100    ; $100
   390 = 8600			DataMatrix_log  equ Datamatrix_data+$200    ; $100
   391
   392 				    ;org DataMatrix_code
   393
   394 21A7 A2 FF		    ldx #-1
   395 21A9			DataMatrix_encodeMessage_1
   396 21A9 E8			    inx
   397 21AA FE 00 84		    inc DataMatrix_message,x
   398 21AD D0 FA		    bne DataMatrix_encodeMessage_1
   399 21AF A9 81		    lda #129
   400 21B1			DataMatrix_padMessage_1
   401 21B1 9D 00 84 E8		    sta DataMatrix_message,x+
   402 21B5 BD 2C 23		    lda DataMatrix_padding,x
   403 21B8 D0 F7		    bne DataMatrix_padMessage_1
   404
   405 21BA AA			    tax ; #0
   406 21BB A9 01		    lda #1
   407 21BD			DataMatrix_initExpLog_1
   408 21BD 9D 00 85		    sta DataMatrix_exp,x
   409 21C0 A8			    tay
   410 21C1 8A			    txa
   411 21C2 99 00 86		    sta DataMatrix_log,y
   412 21C5 98			    tya
   413 21C6 0A			    asl @
   414 21C7 90 02 49 2D		    scc:eor <301
   415 21CB E8			    inx
   416 21CC D0 EF		    bne DataMatrix_initExpLog_1
   417
   418 21CE A0 17		    ldy #DataMatrix_ERROR_CODEWORDS-1
   419 21D0 8A			    txa ; #0
   420 21D1 99 24 84 88 10 FA	    sta:rpl DataMatrix_errorCodewords,y-
   421 				;   ldx #0
   422 21D7			DataMatrix_reedSolomon_1
   423 21D7 8A 48		    txa:pha
   424 21D9 A0 00		    ldy #0
   425 21DB BD 00 84		    lda DataMatrix_dataCodewords,x
   426 21DE 4D 24 84		    eor DataMatrix_errorCodewords
   427 21E1			DataMatrix_reedSolomon_2
   428 21E1 48			    pha
   429 21E2 F0 0E		    beq DataMatrix_reedSolomon_3
   430 21E4 AA			    tax
   431 21E5 BD 00 86		    lda DataMatrix_log,x
   432 21E8 18 79 14 23		    add DataMatrix_poly,y
   433 21EC 69 00		    adc #0
   434 21EE AA			    tax
   435 21EF BD 00 85		    lda DataMatrix_exp,x
   436 21F2			DataMatrix_reedSolomon_3
   437 21F2 C0 17		    cpy #DataMatrix_ERROR_CODEWORDS-1
   438 21F4 B0 03 59 25 84	    scs:eor DataMatrix_errorCodewords+1,y
   439 21F9 99 24 84 C8		    sta DataMatrix_errorCodewords,y+
   440 21FD 68			    pla
   441 21FE 90 E1		    bcc DataMatrix_reedSolomon_2
   442 2200 68 AA		    pla:tax
   443 2202 E8			    inx
   444 2203 E0 24		    cpx #DataMatrix_DATA_CODEWORDS
   445 2205 90 D0		    bcc DataMatrix_reedSolomon_1
   446
   447 2207 A0 15		    ldy #DataMatrix_SIZE-3
   448 2209 A9 00 8D 27 22 A9 +     mwa #DataMatrix_symbol  DataMatrix_clear_store+1
   449 2213			DataMatrix_clear_line
   450 2213 A9 18		    lda #DataMatrix_SIZE
   451 2215 18 6D 27 22 8D 27 +     add:sta DataMatrix_clear_store+1
   452 221C 90 03 EE 28 22	    scc:inc DataMatrix_clear_store+2
   453 2221 A2 17		    ldx #DataMatrix_SIZE-1
   454 2223			DataMatrix_clear_dashed
   455 2223 98			    tya
   456 2224 29 01		    and #1
   457 2226			DataMatrix_clear_store
   458 2226 9D FF FF		    sta $ffff,x
   459 2229 A9 02		    lda #2
   460 222B CA			    dex
   461 222C 30 05		    bmi DataMatrix_clear_next
   462 				    ift DataMatrix_SIZE>26
   463 				    beq DataMatrix_clear_solid
   464 				    cpx #DataMatrix_SIZE/2-1
   465 				    beq DataMatrix_clear_dashed
   466 				    cpx #DataMatrix_SIZE/2
   467 				    eif
   468 222E D0 F6		    bne DataMatrix_clear_store
   469 2230			DataMatrix_clear_solid
   470 2230 4A			    lsr @
   471 2231 10 F3		    bpl DataMatrix_clear_store  ; jmp
   472 2233			DataMatrix_clear_next
   473 2233 88			    dey
   474 2234 10 DD		    bpl DataMatrix_clear_line
   475
   476 2236 A2 17		    ldx #DataMatrix_SIZE-1
   477 2238			DataMatrix_horizontal_1
   478 2238 8A			    txa
   479 2239 29 01 49 01		    and:eor #1
   480 223D 9D 00 85		    sta DataMatrix_symbol,x
   481 2240			:DataMatrix_SIZE>26 sta DataMatrix_symbol+DataMatrix_SIZE/2*DataMatrix_SIZE,x
   482 2240 A9 01 9D 28 87	    mva #1  DataMatrix_symbol+[DataMatrix_SIZE-1]*DataMatrix_SIZE,x
   483 2245			:DataMatrix_SIZE>26 sta DataMatrix_symbol+[DataMatrix_SIZE/2-1]*DataMatrix_SIZE,x
   484 2245 CA			    dex
   485 2246 10 F0		    bpl DataMatrix_horizontal_1
   486
   487 2248 A9 00 8D F6 22 A9 +     mwa #DataMatrix_dataCodewords   DataMatrix_fillSource
   488 2252 A2 00		    ldx #0
   489 2254 A0 04		    ldy #4
   490
   491 2256			DataMatrix_fill_1
   492 				; Check corner cases
   493 				    ift [DataMatrix_MATRIX_SIZE&4]!=0
   494 2256 8A			    txa
   495 2257 D0 09		    bne DataMatrix_noCorner
   496 2259 C0 14		    cpy #DataMatrix_MATRIX_SIZE-[DataMatrix_MATRIX_SIZE&2]
   497 225B D0 05		    bne DataMatrix_noCorner
   498 				; corner1/2
   499 225D A9 0F		    lda #15
   500 225F 20 BB 22		    jsr DataMatrix_setCorner
   501 2262			DataMatrix_noCorner
   502 				    eif
   503
   504 				; Sweep upward-right
   505 2262			DataMatrix_fill_up
   506 2262 C0 16		    cpy #DataMatrix_MATRIX_SIZE
   507 2264 20 A5 22		    jsr DataMatrix_setUtah
   508 2267			DataMatrix_no_up
   509 2267 E8 E8		:2  inx
   510 2269 88 88		:2  dey
   511 226B 30 04		    bmi DataMatrix_fill_top
   512 226D E0 16		    cpx #DataMatrix_MATRIX_SIZE
   513 226F 90 F1		    bcc DataMatrix_fill_up
   514 2271			DataMatrix_fill_top
   515 2271 E8 E8 E8		:3  inx
   516 2274 C8			    iny
   517 				; Sweep downward-left
   518 2275			DataMatrix_fill_down
   519 2275 98			    tya
   520 2276 30 05		    bmi DataMatrix_no_down
   521 2278 E0 16		    cpx #DataMatrix_MATRIX_SIZE
   522 227A 20 A5 22		    jsr DataMatrix_setUtah
   523 227D			DataMatrix_no_down
   524 227D C8 C8		:2  iny
   525 227F CA CA		:2  dex
   526 2281 30 04		    bmi DataMatrix_fill_left
   527 2283 C0 16		    cpy #DataMatrix_MATRIX_SIZE
   528 2285 90 EE		    bcc DataMatrix_fill_down
   529 2287			DataMatrix_fill_left
   530 2287 E8			    inx
   531 2288 C8 C8 C8		:3  iny
   532 228B E0 16		    cpx #DataMatrix_MATRIX_SIZE
   533 228D 90 C7		    bcc DataMatrix_fill_1
   534 228F C0 16		    cpy #DataMatrix_MATRIX_SIZE
   535 2291 90 C3		    bcc DataMatrix_fill_1
   536
   537 				    ift [DataMatrix_SIZE&2]==0
   538 				; Fixed pattern in the bottom-right corner.
   539 2293 A9 01		    lda #1
   540 2295 8D 0D 87		    sta DataMatrix_symbol+[DataMatrix_SIZE-3]*DataMatrix_SIZE+DataMatrix_SIZE-3
   541 2298 8D 26 87		    sta DataMatrix_symbol+[DataMatrix_SIZE-2]*DataMatrix_SIZE+DataMatrix_SIZE-2
   542 229B 4A			    lsr @
   543 229C 8D 0E 87		    sta DataMatrix_symbol+[DataMatrix_SIZE-3]*DataMatrix_SIZE+DataMatrix_SIZE-2
   544 229F 8D 25 87		    sta DataMatrix_symbol+[DataMatrix_SIZE-2]*DataMatrix_SIZE+DataMatrix_SIZE-3
   545 				    eif
   546
   547 22A2 68 AA		    pla:tax	; need to restore register X in Mad pascal
   548 22A4 60			    rts
   549
   550 22A5			DataMatrix_setUtah
   551 22A5 B0 6C		    bcs DataMatrix_setUtah_no
   552 22A7 B9 70 23		    lda DataMatrix_matrixLo,y
   553 				    ift DataMatrix_SIZE>26
   554 				    cpx #DataMatrix_MATRIX_SIZE/2
   555 				    scc:adc #1
   556 				    eif
   557 22AA 8D B4 22		    sta DataMatrix_setUtah_load+1
   558 22AD B9 86 23		    lda DataMatrix_matrixHi,y
   559 				    ift DataMatrix_SIZE>26
   560 				    adc #0
   561 				    eif
   562 22B0 8D B5 22		    sta DataMatrix_setUtah_load+2
   563 22B3			DataMatrix_setUtah_load
   564 22B3 BD FF FF		    lda $ffff,x
   565 22B6 4A			    lsr @
   566 22B7 F0 5A		    beq DataMatrix_setUtah_no
   567 22B9 A9 07		    lda #7
   568 22BB			DataMatrix_setCorner
   569 22BB 8E C5 22		    stx DataMatrix_column
   570 22BE 8C CC 22		    sty DataMatrix_row
   571 22C1 A8			    tay
   572 22C2			DataMatrix_setShape_1
   573 22C2 98 48		    tya:pha
   574 22C4 A9 00		    lda #0
   575 = 22C5			DataMatrix_column   equ *-1
   576 22C6 18 79 60 23		    add DataMatrix_shapeX,y
   577 22CA AA			    tax
   578 22CB A9 00		    lda #0
   579 = 22CC			DataMatrix_row  equ *-1
   580 22CD 18 79 50 23		    add DataMatrix_shapeY,y
   581 22D1 A8			    tay
   582 22D2 10 09		    bpl DataMatrix_setModuleWrapped_yOk
   583 22D4 18 69 16		    add #DataMatrix_MATRIX_SIZE
   584 22D7 A8			    tay
   585 				    ift [DataMatrix_MATRIX_SIZE&7]!=0
   586 22D8 8A			    txa
   587 22D9 18 69 02		    add #4-[[DataMatrix_MATRIX_SIZE+4]&7]
   588 22DC AA			    tax
   589 				    eif
   590 22DD			DataMatrix_setModuleWrapped_yOk
   591 22DD 8A			    txa
   592 22DE 10 09		    bpl DataMatrix_setModuleWrapped_xOk
   593 22E0 18 69 16		    add #DataMatrix_MATRIX_SIZE
   594 22E3 AA			    tax
   595 				    ift [DataMatrix_MATRIX_SIZE&7]!=0
   596 22E4 98			    tya
   597 22E5 18 69 02		    add #4-[[DataMatrix_MATRIX_SIZE+4]&7]
   598 22E8 A8			    tay
   599 				    eif
   600 22E9			DataMatrix_setModuleWrapped_xOk
   601 				    ift DataMatrix_SIZE>26
   602 				    cpx #DataMatrix_MATRIX_SIZE/2
   603 				    bcc DataMatrix_setModuleWrapped_leftRegion
   604 				    inx:inx
   605 				DataMatrix_setModuleWrapped_leftRegion
   606 				    eif
   607 22E9 B9 70 23 8D FC 22	    mva DataMatrix_matrixLo,y   DataMatrix_setModule_store+1
   608 22EF B9 86 23 8D FD 22	    mva DataMatrix_matrixHi,y   DataMatrix_setModule_store+2
   609 22F5 0E 00 84		    asl DataMatrix_dataCodewords
   610 = 22F6			DataMatrix_fillSource   equ *-2
   611 22F8 A9 00		    lda #0
   612 22FA 2A			    rol @
   613 22FB			DataMatrix_setModule_store
   614 22FB 9D FF FF		    sta $ffff,x
   615 22FE 68 A8		    pla:tay
   616 2300 88			    dey
   617 2301 29 07		    and #7
   618 2303 D0 BD		    bne DataMatrix_setShape_1
   619 2305 EE F6 22 D0 03 EE +     inw DataMatrix_fillSource
   620 230D AE C5 22		    ldx DataMatrix_column
   621 2310 AC CC 22		    ldy DataMatrix_row
   622 2313			DataMatrix_setUtah_no
   623 2313 60			    rts
   624
   625 				    ift DataMatrix_SIZE==10
   626 				DataMatrix_DATA_CODEWORDS   equ 3
   627 				DataMatrix_ERROR_CODEWORDS  equ 5
   628 				DataMatrix_poly dta $eb,$cf,$d2,$f4,$0f
   629
   630 				    eli DataMatrix_SIZE==12
   631 				DataMatrix_DATA_CODEWORDS   equ 5
   632 				DataMatrix_ERROR_CODEWORDS  equ 7
   633 				DataMatrix_poly dta $b1,$1e,$d6,$da,$2a,$c5,$1c
   634
   635 				    eli DataMatrix_SIZE==14
   636 				DataMatrix_DATA_CODEWORDS   equ 8
   637 				DataMatrix_ERROR_CODEWORDS  equ 10
   638 				DataMatrix_poly dta $c7,$32,$96,$78,$ed,$83,$ac,$53,$f3,$37
   639
   640 				    eli DataMatrix_SIZE==16
   641 				DataMatrix_DATA_CODEWORDS   equ 12
   642 				DataMatrix_ERROR_CODEWORDS  equ 12
   643 				DataMatrix_poly dta $a8,$8e,$23,$ad,$5e,$b9,$6b,$c7,$4a,$c2,$e9,$4e
   644
   645 				    eli DataMatrix_SIZE==18
   646 				DataMatrix_DATA_CODEWORDS   equ 18
   647 				DataMatrix_ERROR_CODEWORDS  equ 14
   648 				DataMatrix_poly dta $53,$ab,$21,$27,$08,$0c,$f8,$1b,$26,$54,$5d,$f6,$ad,$69
   649
   650 				    eli DataMatrix_SIZE==20
   651 				DataMatrix_DATA_CODEWORDS   equ 22
   652 				DataMatrix_ERROR_CODEWORDS  equ 18
   653 				DataMatrix_poly dta $a4,$09,$f4,$45,$b1,$a3,$a1,$e7,$5e,$fa,$c7,$dc,$fd,$a4,$67,$8e,$3d,$ab
   654
   655 				    eli DataMatrix_SIZE==22
   656 				DataMatrix_DATA_CODEWORDS   equ 30
   657 				DataMatrix_ERROR_CODEWORDS  equ 20
   658 				DataMatrix_poly dta $7f,$21,$92,$17,$4f,$19,$c1,$7a,$d1,$e9,$e6,$a4,$01,$6d,$b8,$95,$26,$c9,$3d,$d2
   659
   660 				    eli DataMatrix_SIZE==24
   661 = 0024			DataMatrix_DATA_CODEWORDS   equ 36
   662 = 0018			DataMatrix_ERROR_CODEWORDS  equ 24
   663 2314 41 8D F5 1F B7 F2 + DataMatrix_poly dta $41,$8d,$f5,$1f,$b7,$f2,$ec,$b1,$7f,$e1,$6a,$16,$83,$14,$ca,$16,$6a,$89,$67,$e7,$d7,$88,$55,$2d
   664
   665 				    eli DataMatrix_SIZE==26
   666 				DataMatrix_DATA_CODEWORDS   equ 44
   667 				DataMatrix_ERROR_CODEWORDS  equ 28
   668 				DataMatrix_poly dta $96,$20,$6d,$95,$ef,$d5,$c6,$30,$5e,$32,$0c,$c3,$a7,$82,$c4,$fd,$63,$a6,$ef,$de,$92,$be,$f5,$b8,$ad,$7d,$11,$97
   669
   670 				    eli DataMatrix_SIZE==32
   671 				DataMatrix_DATA_CODEWORDS   equ 62
   672 				DataMatrix_ERROR_CODEWORDS  equ 36
   673 				DataMatrix_poly dta $39,$56,$bb,$45,$8c,$99,$1f,$42,$87,$43,$f8,$54,$5a,$51,$db,$c5,$02,$01,$27,$10,$4b,$e5,$14,$33,$fc,$6c,$d5,$b5,$b7,$57,$6f,$4d,$e8,$a8,$b0,$9c
   674
   675 				    eli DataMatrix_SIZE==36
   676 				DataMatrix_DATA_CODEWORDS   equ 86
   677 				DataMatrix_ERROR_CODEWORDS  equ 42
   678 				DataMatrix_poly dta $e1,$26,$e1,$94,$c0,$fe,$8d,$0b,$52,$ed,$51,$18,$0d,$7a,$ff,$6a,$a7,$0d,$cf,$a0,$58,$cb,$26,$8e,$54,$42,$03,$a8,$66,$9c,$01,$c8,$58,$3c,$e9,$86,$73,$72,$ea,$5a,$41,$8a
   679
   680 				    eli DataMatrix_SIZE==40
   681 				DataMatrix_DATA_CODEWORDS   equ 114
   682 				DataMatrix_ERROR_CODEWORDS  equ 48
   683 				DataMatrix_poly dta $72,$45,$7a,$1e,$5e,$0b,$42,$e6,$84,$49,$91,$89,$87,$4f,$d6,$21,$0c,$dc,$8e,$d5,$88,$7c,$d7,$a6,$09,$de,$1c,$9a,$84,$04,$64,$aa,$91,$3b,$a4,$d7,$11,$f9,$66,$f9,$86,$80,$05,$f5,$83,$7f,$dd,$9c
   684
   685 				    eli DataMatrix_SIZE==44
   686 				DataMatrix_DATA_CODEWORDS   equ 144
   687 				DataMatrix_ERROR_CODEWORDS  equ 56
   688 				DataMatrix_poly dta $1d,$b3,$63,$95,$9f,$48,$7d,$16,$37,$3c,$d9,$b0,$9c,$5a,$2b,$50,$fb,$eb,$80,$a9,$fe,$86,$f9,$2a,$79,$76,$48,$80,$81,$e8,$25,$0f,$18,$dd,$8f,$73,$83,$28,$71,$fe,$13,$7b,$f6,$44,$a6,$42,$76,$8e,$2f,$33,$c3,$f2,$f9,$83,$26,$42
   689
   690 				    eli DataMatrix_SIZE==48
   691 				DataMatrix_DATA_CODEWORDS   equ 174
   692 				DataMatrix_ERROR_CODEWORDS  equ 68
   693 				DataMatrix_poly dta $21,$4f,$be,$f5,$5b,$dd,$e9,$19,$18,$06,$90,$97,$79,$ba,$8c,$7f,$2d,$99,$fa,$b7,$46,$83,$c6,$11,$59,$f5,$79,$33,$8c,$fc,$cb,$52,$53,$e9,$98,$dc,$9b,$12,$e6,$d2,$5e,$20,$c8,$c5,$c0,$c2,$ca,$81,$0a,$ed,$c6,$5e,$b0,$24,$28,$8b,$c9,$84,$db,$22,$38,$71,$34,$14,$22,$f7,$0f,$33
   694
   695 				    els
   696 				    ert 1   ; unsupported DataMatrix_SIZE
   697 				    eif
   698
   699 232C			DataMatrix_padding
   700 232C 19 AF 46 DC 73 0B + :DataMatrix_DATA_CODEWORDS  dta [129+[1+#]*149%253]%254+1
   701 				; NOTE: the following two zero bytes terminate DataMatrix_padding:
   702 2350 00 00 00 FF FF FF + DataMatrix_shapeY   dta 0,0,0,-1,-1,-1,-2,-2
   703 				    ift DataMatrix_SIZE==14||DataMatrix_SIZE==22||DataMatrix_SIZE==32||DataMatrix_SIZE==40||DataMatrix_SIZE==48 ; corner1
   704 				    dta 3-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,1-DataMatrix_MATRIX_SIZE,-DataMatrix_MATRIX_SIZE,-DataMatrix_MATRIX_SIZE,-1,-1,-1
   705 				    eli DataMatrix_SIZE==16||DataMatrix_SIZE==24 ; corner2
   706 2358 ED EC EC EC EC 01 +     dta 3-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,2-DataMatrix_MATRIX_SIZE,1,0,-1
   707 				    eif
   708 2360 00 FF FE 00 FF FE + DataMatrix_shapeX   dta 0,-1,-2,0,-1,-2,-1,-2
   709 				    ift DataMatrix_SIZE==14||DataMatrix_SIZE==22||DataMatrix_SIZE==32||DataMatrix_SIZE==40||DataMatrix_SIZE==48 ; corner1
   710 				    dta DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-2,2,1,0
   711 				    eli DataMatrix_SIZE==16||DataMatrix_SIZE==24 ; corner2
   712 2368 15 15 14 13 12 00 +     dta DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-1,DataMatrix_MATRIX_SIZE-2,DataMatrix_MATRIX_SIZE-3,DataMatrix_MATRIX_SIZE-4,0,0,0
   713 				    eif
   714
   715 				    ift DataMatrix_SIZE<=26
   716 2370			DataMatrix_matrixLo
   717 2370 19 31 49 61 79 91 + :DataMatrix_MATRIX_SIZE dta l(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
   718 2386			DataMatrix_matrixHi
   719 2386 85 85 85 85 85 85 + :DataMatrix_MATRIX_SIZE dta h(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
   720 				    els
   721 				DataMatrix_matrixLo
   722 				:DataMatrix_MATRIX_SIZE/2   dta l(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
   723 				:DataMatrix_MATRIX_SIZE/2   dta l(DataMatrix_symbol+[1+DataMatrix_SIZE/2+#]*DataMatrix_SIZE+1)
   724 				DataMatrix_matrixHi
   725 				:DataMatrix_MATRIX_SIZE/2   dta h(DataMatrix_symbol+[1+#]*DataMatrix_SIZE+1)
   726 				:DataMatrix_MATRIX_SIZE/2   dta h(DataMatrix_symbol+[1+DataMatrix_SIZE/2+#]*DataMatrix_SIZE+1)
   727 				    eif
   728
   729 239C			@exit
   730 					.ifdef @new
   731 					lda <@VarData
   732 					sta :ztmp
   733 					lda >@VarData
   734 					ldy #@VarDataSize-1
   735 					jmp @FreeMem
   736 					els
   737 239C 60				rts						; ret
   738 					eif
   739 				.endl
   740
   741 239D			.local	SETMESSAGE					; PROCEDURE
   742
   743 				; ------------------------------------------------------------
   744
   745 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   746 				; as Pointer
   747 239D B5 94			lda :STACKORIGIN,x
   748 239F 85 82			sta :bp2
   749 23A1 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   750 23A3 85 83			sta :bp2+1
   751 23A5 A0 00			ldy #$00
   752 23A7 B1 82 99 B7 24 C8 + 	mva:rne (:bp2),y adr.MSG,y+
   753 23AF A9 B7 8D FD 23 A9 + 	mwa #adr.MSG MSG
   754 23B9 CA				dex
   755 23BA 30 0B			jmi @main
   756
   757 				; ------------------------------------------------------------
   758
   759 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   760 				; as Pointer
   761 23BC B5 94			lda :STACKORIGIN,x
   762 23BE 8D B7 25			sta DMDATA
   763 23C1 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   764 23C3 8D B8 25			sta DMDATA+1
   765 23C6 CA				dex
   766 23C7			@main
   767
   768 				; optimize OK (DATAMATRIX), line = 415
   769
   770 23C7 AD B7 24			lda adr.MSG+$00
   771 23CA 8D B9 25			sta LEN
   772
   773 				; optimize OK (DATAMATRIX), line = 416
   774
   775 23CD A9 B8			lda <adr.MSG+$01
   776 23CF 85 88			sta SYSTEM.MOVE_0075.SOURCE
   777 23D1 A9 24			lda >adr.MSG+$01
   778 23D3 85 89			sta SYSTEM.MOVE_0075.SOURCE+1
   779 23D5 AD B7 25			lda DMDATA
   780 23D8 85 8C			sta SYSTEM.MOVE_0075.DEST
   781 23DA AD B8 25			lda DMDATA+1
   782 23DD 85 8D			sta SYSTEM.MOVE_0075.DEST+1
   783 23DF AD B9 25			lda LEN
   784 23E2 85 84			sta SYSTEM.MOVE_0075.COUNT
   785 23E4 A9 00			lda #$00
   786 23E6 85 85			sta SYSTEM.MOVE_0075.COUNT+1
   787 23E8				.local +MAIN.SYSTEM.MOVE_0075
   788 23E8				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0075.M@INLINE [Source: datamatrix_txt.a65]
     4 23E8 20 72 20			jsr @move
Source: datamatrix_txt.a65
   789 					.endl
   790
   791 				; optimize OK (DATAMATRIX), line = 417
   792
   793 23EB AC B7 25 84 82 AC + 	mwy DMDATA :bp2
   794 23F5 AC B9 25			ldy LEN
   795 23F8 A9 FF			lda #$FF
   796 23FA 91 82			sta (:bp2),y
   797
   798 				; ------------------------------------------------------------
   799
   800 = 24B7			adr.MSG	= [DATAORIGIN+$000B] .array [256]
   801 23FC			.var MSG	= adr.MSG .word
   802 = 25B7			DMDATA	= DATAORIGIN+$010B
   803 = 25B9			LEN	= DATAORIGIN+$010D
   804
   805 = 23FD			@VarData	= MSG
   806 = 0103			@VarDataSize	= 259
   807
   808 23FC			@exit
   809 					.ifdef @new
   810 					lda <@VarData
   811 					sta :ztmp
   812 					lda >@VarData
   813 					ldy #@VarDataSize-1
   814 					jmp @FreeMem
   815 					els
   816 23FC 60				rts						; ret
   817 					eif
   818 = 23FD B7 24		MSG
   818 				.endl
   819
   820 				; ------------------------------------------------------------
   821
   822 = 00FF			DATAMATRIX_EOF	= $FF
   823
   824 				.endl							; UNIT DATAMATRIX
   825
   826 				; ------------------------------------------------------------
   827
   828 23FF			.local	ATARI						; UNIT
   829
   830 				; ------------------------------------------------------------
   831
   832 = 0010			IRQENS	= $10
   833 = 0012			RTCLOK	= $12
   834 = 0012			RTCLOK1	= $12
   835 = 0013			RTCLOK2	= $13
   836 = 0014			RTCLOK3	= $14
   837 = 004D			ATRACT	= $4D
   838 = 0052			LMARGIN	= $52
   839 = 0053			RMARGIN	= $53
   840 = 0054			ROWCRS	= $54
   841 = 0055			COLCRS	= $55
   842 = 0057			DINDEX	= $57
   843 = 0058			SAVMSC	= $58
   844 = 0062			PALNTS	= $62
   845 = 006A			RAMTOP	= $6A
   846 = 0200			VDSLST	= $0200
   847 = 0230			SDLSTL	= $0230
   848 = 0290			TXTROW	= $0290
   849 = 0291			TXTCOL	= $0291
   850 = 0293			TINDEX	= $0293
   851 = 0294			TXTMSC	= $0294
   852 = 022F			SDMCTL	= $022F
   853 = 026F			GPRIOR	= $026F
   854 = 02F0			CRSINH	= $02F0
   855 = 02F3			CHACT	= $02F3
   856 = 02F4			CHBAS	= $02F4
   857 = 02FC			CH	= $02FC
   858 = 02C0			PCOLR0	= $02C0
   859 = 02C1			PCOLR1	= $02C1
   860 = 02C2			PCOLR2	= $02C2
   861 = 02C3			PCOLR3	= $02C3
   862 = 02C4			COLOR0	= $02C4
   863 = 02C5			COLOR1	= $02C5
   864 = 02C6			COLOR2	= $02C6
   865 = 02C7			COLOR3	= $02C7
   866 = 02C8			COLOR4	= $02C8
   867 = 02C8			COLBAKS	= $02C8
   868 = D000			HPOSP0	= $D000
   869 = D001			HPOSP1	= $D001
   870 = D002			HPOSP2	= $D002
   871 = D003			HPOSP3	= $D003
   872 = D004			HPOSM0	= $D004
   873 = D005			HPOSM1	= $D005
   874 = D006			HPOSM2	= $D006
   875 = D007			HPOSM3	= $D007
   876 = D008			SIZEP0	= $D008
   877 = D009			SIZEP1	= $D009
   878 = D00A			SIZEP2	= $D00A
   879 = D00B			SIZEP3	= $D00B
   880 = D00C			SIZEM	= $D00C
   881 = D00D			GRAFP0	= $D00D
   882 = D00E			GRAFP1	= $D00E
   883 = D00F			GRAFP2	= $D00F
   884 = D010			GRAFP3	= $D010
   885 = D011			GRAFM	= $D011
   886 = D004			P0PF	= $D004
   887 = D014			PAL	= $D014
   888 = D012			COLPM0	= $D012
   889 = D013			COLPM1	= $D013
   890 = D014			COLPM2	= $D014
   891 = D015			COLPM3	= $D015
   892 = D016			COLPF0	= $D016
   893 = D017			COLPF1	= $D017
   894 = D018			COLPF2	= $D018
   895 = D019			COLPF3	= $D019
   896 = D01A			COLBK	= $D01A
   897 = D01B			PRIOR	= $D01B
   898 = D01D			GRACTL	= $D01D
   899 = D01E			HITCLR	= $D01E
   900 = D01F			CONSOL	= $D01F
   901 = D200			AUDF1	= $D200
   902 = D201			AUDC1	= $D201
   903 = D202			AUDF2	= $D202
   904 = D203			AUDC2	= $D203
   905 = D204			AUDF3	= $D204
   906 = D205			AUDC3	= $D205
   907 = D206			AUDF4	= $D206
   908 = D207			AUDC4	= $D207
   909 = D208			AUDCTL	= $D208
   910 = D209			KBCODE	= $D209
   911 = D20E			IRQEN	= $D20E
   912 = D20F			SKSTAT	= $D20F
   913 = D300			PORTA	= $D300
   914 = D301			PORTB	= $D301
   915 = D400			DMACTL	= $D400
   916 = D401			CHACTL	= $D401
   917 = D402			DLISTL	= $D402
   918 = D404			HSCROL	= $D404
   919 = D405			VSCROL	= $D405
   920 = D407			PMBASE	= $D407
   921 = D409			CHBASE	= $D409
   922 = D40A			WSYNC	= $D40A
   923 = D40B			VCOUNT	= $D40B
   924 = D40C			PENH	= $D40C
   925 = D40D			PENV	= $D40D
   926 = D40E			NMIEN	= $D40E
   927 = FFFA			NMIVEC	= $FFFA
   928 = FFFC			RESETVEC	= $FFFC
   929 = FFFE			IRQVEC	= $FFFE
   930
   931 				.endl							; UNIT ATARI
   932
   933 				; ------------------------------------------------------------
   934
   935 23FF			.local	CRT						; UNIT
   936
   937 23FF			.local	CURSOROFF					; PROCEDURE
   938
   939 				; optimize OK (crt_atari.inc), line = 8
   940
   941 23FF A9 01			lda #$01
   942 2401 8D F0 02			sta ATARI.CRSINH
   943
   944 				; optimize FAIL ('@print', crt_atari.inc), line = 10
   945
   946 					@print #$1F
   946 				 LDY# $1F\ JSR @PRINT
   946 2404 A0 1F		 LDY# $1F
   946 2406 20 37 21		 JSR @PRINT
   947 					@print #$1E
   947 				 LDY# $1E\ JSR @PRINT
   947 2409 A0 1E		 LDY# $1E
   947 240B 20 37 21		 JSR @PRINT
   948 240E			@exit
   949 					.ifdef @new
   950 					lda <@VarData
   951 					sta :ztmp
   952 					lda >@VarData
   953 					ldy #@VarDataSize-1
   954 					jmp @FreeMem
   955 					els
   956 240E 60				rts						; ret
   957 					eif
   958 				.endl
   959
   960 240F			.local	READKEY						; FUNCTION | ASSEMBLER
   961
   962 				; -------------------  ASM Block 00000053  -------------------
   963
   964 240F				m@call @GetKey
Macro: M@CALL [Source: macros.asm]
    12 240F 20 24 20				jsr @GETKEY
Source: datamatrix_txt.a65
   965 2412 8D BB 25			sta Result
   966
   967 2415			@exit
   968
   969 				; ------------------------------------------------------------
   970
   971 = 25BB			RESULT	= DATAORIGIN+$010F
   972 2415 60				rts						; ret
   973 				.endl
   974
   975 				; ------------------------------------------------------------
   976
   977 = 25BA			TEXTATTR	= DATAORIGIN+$010E
   978 = D01F			CONSOL	= $D01F
   979 = 0000			CN_START_SELECT_OPTION	= $00
   980 = 0001			CN_SELECT_OPTION	= $01
   981 = 0002			CN_START_OPTION	= $02
   982 = 0003			CN_OPTION	= $03
   983 = 0004			CN_START_SELECT	= $04
   984 = 0005			CN_SELECT	= $05
   985 = 0006			CN_START	= $06
   986 = 0007			CN_NONE	= $07
   987 = 0000			BW40	= $00
   988 = 0001			CO40	= $01
   989 = 0002			BW80	= $02
   990 = 0003			CO80	= $03
   991 = 0007			MONO	= $07
   992 = 0001			C40	= $01
   993 = 0003			C80	= $03
   994 = 0000			BLACK	= $00
   995 = 000F			WHITE	= $0F
   996 = 0026			RED	= $26
   997 = 00AC			CYAN	= $AC
   998 = 0048			PURPLE	= $48
   999 = 00B6			GREEN	= $B6
  1000 = 0086			BLUE	= $86
  1001 = 00DC			YELLOW	= $DC
  1002 = 0018			ORANGE	= $18
  1003 = 00F4			BROWN	= $F4
  1004 = 002A			LIGHT_RED	= $2A
  1005 = 0004			DARK_GREY	= $04
  1006 = 0008			GREY	= $08
  1007 = 00BC			LIGHT_GREEN	= $BC
  1008 = 009A			LIGHT_BLUE	= $9A
  1009 = 000C			LIGHT_GREY	= $0C
  1010 = 0080			BLINK	= $80
  1011
  1012 				.endl							; UNIT CRT
  1013
  1014 2416			.local	SHOWMATRIX					; PROCEDURE
  1015
  1016 				; optimize OK (datamatrix_txt.pas), line = 17
  1017
  1018 2416 A9 0F			lda #$0F
  1019 2418 8D C6 02			sta $02C6
  1020
  1021 				; optimize OK (datamatrix_txt.pas), line = 18
  1022
  1023 241B 8D C8 02			sta $02C8
  1024
  1025 				; optimize OK (datamatrix_txt.pas), line = 19
  1026
  1027 241E A9 00			lda #$00
  1028 2420 8D C5 02			sta $02C5
  1029
  1030 				; --- RepeatUntilProlog
  1031 2423			l_00E4
  1032
  1033 				; optimize OK (datamatrix_txt.pas), line = 22
  1034
  1035 2423 AD BC 25			lda DATA
  1036 2426 85 84			sta :eax
  1037 2428 AD BD 25			lda DATA+1
  1038 242B 85 85			sta :eax+1
  1039 242D A9 18			lda #$18
  1040 242F 85 8C			sta :ecx
  1041 2431 20 0F 21			jsr idivAX_CL.MOD
  1042 2434 A5 90			lda :ztmp8
  1043 2436 D0 03			jne l_00FE
  1044 2438 20 32 21			@printEOL
  1045 243B			l_00FE
  1046
  1047 				; optimize OK (datamatrix_txt.pas), line = 23
  1048
  1049 243B AC BC 25			ldy DATA
  1050 243E A9 85			lda #$85
  1051 2440 18 6D BD 25			add DATA+1
  1052 2444 85 81			sta :bp+1
  1053 2446 B1 80			lda (:bp),y
  1054 2448 C9 01			cmp #$01
  1055 244A D0 08			jne l_0117
  1056 					@print #$A0
  1056 				 LDY# $A0\ JSR @PRINT
  1056 244C A0 A0		 LDY# $A0
  1056 244E 20 37 21		 JSR @PRINT
  1057 2451 4C 59 24			jmp l_0121
  1058 2454			l_0117
  1059
  1060 				; optimize FAIL ('@print', datamatrix_txt.pas), line = 24
  1061
  1062 					@print #$20
  1062 				 LDY# $20\ JSR @PRINT
  1062 2454 A0 20		 LDY# $20
  1062 2456 20 37 21		 JSR @PRINT
  1063 2459			l_0121
  1064
  1065 				; optimize FAIL (0, datamatrix_txt.pas), line = 25
  1066
  1067 2459 EE BC 25			inc DATA
  1068 245C D0 03			sne
  1069 245E EE BD 25			inc DATA+1
  1070
  1071 				; optimize OK (datamatrix_txt.pas), line = 26
  1072
  1073 2461 AD BD 25			lda DATA+1
  1074 2464 C9 02			cmp #$02
  1075 2466 D0 05			bne @+
  1076 2468 AD BC 25			lda DATA
  1077 246B C9 40			cmp #$40
  1078 				@
  1079 246D D0 B4			jne l_00E4
  1080
  1081 				; ------------------------------------------------------------
  1082
  1083 = 25BC			DATA	= DATAORIGIN+$0110
  1084
  1085 = 25BC			@VarData	= DATA
  1086 = 0002			@VarDataSize	= 2
  1087
  1088 246F			@exit
  1089 					.ifdef @new
  1090 					lda <@VarData
  1091 					sta :ztmp
  1092 					lda >@VarData
  1093 					ldy #@VarDataSize-1
  1094 					jmp @FreeMem
  1095 					els
  1096 246F 60				rts						; ret
  1097 					eif
  1098 				.endl
  1099 2470			l_002B
  1100
  1101 				; optimize FAIL ('DATAMATRIX.SETMESSAGE', datamatrix_txt.pas), line = 30
  1102
  1103 2470 E8				inx
  1104 2471 A9 00 95 94			mva #$00 :STACKORIGIN,x
  1105 2475 A9 84 95 A4			mva #$84 :STACKORIGIN+STACKWIDTH,x
  1106 2479 E8				inx
  1107 247A A9 00 95 94			mva #$00 :STACKORIGIN,x
  1108 247E A9 20 95 A4			mva #$20 :STACKORIGIN+STACKWIDTH,x
  1109 2482 20 9D 23			jsr DATAMATRIX.SETMESSAGE
  1110
  1111 				; optimize FAIL ('DATAMATRIX.CALCULATEMATRIX', datamatrix_txt.pas), line = 31
  1112
  1113 2485 20 A5 21			jsr DATAMATRIX.CALCULATEMATRIX
  1114
  1115 				; optimize FAIL ('SHOWMATRIX', datamatrix_txt.pas), line = 32
  1116
  1117 2488 20 16 24			jsr SHOWMATRIX
  1118
  1119 				; optimize FAIL ('CRT.CURSOROFF', datamatrix_txt.pas), line = 33
  1120
  1121 248B 20 FF 23			jsr CRT.CURSOROFF
  1122
  1123 				; optimize FAIL ('CRT.READKEY', datamatrix_txt.pas), line = 34
  1124
  1125 248E 20 0F 24			jsr CRT.READKEY
  1126 2491 AD BB 25 95 95		mva CRT.READKEY.RESULT :STACKORIGIN+1,x
  1127
  1128 				; ------------------------------------------------------------
  1129
  1130 = 8400			DM_DATA	= $8400
  1131 = 0018			DM_SIZE	= $18
  1132 = 8500			DM_SYMBOL	= $8500
  1133 2496			@exit
  1134
  1135 2496 A2 00		@halt	ldx #$00
  1136 2498 9A				txs
  1137 					.ifdef MAIN.@DEFINES.ROMOFF
  1138 					inc portb
  1139 					.fi
  1140
  1141 2499 A0 01			ldy #$01
  1142
  1143 249B 60				rts
  1144
  1145 				; ------------------------------------------------------------
  1146
  1147 249C 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1148
  1149 				; ------------------------------------------------------------
  1150
  1151 24AC			.local	@DEFINES
  1152 24AC			ATARI
  1153 				.endl
  1154
  1155 24AC			.local	@RESOURCE
  1156 				.endl
  1157
  1158 				.endl							; MAIN
  1159
  1160 				; ------------------------------------------------------------
  1161 				; ------------------------------------------------------------
  1162
  1163 				.macro	UNITINITIALIZATION
  1164 				
  1165 					.ifdef MAIN.SYSTEM.@UnitInit
  1166 					jsr MAIN.SYSTEM.@UnitInit
  1167 					.fi
  1168 				
  1169 					.ifdef MAIN.DATAMATRIX.@UnitInit
  1170 					jsr MAIN.DATAMATRIX.@UnitInit
  1171 					.fi
  1172 				
  1173 					.ifdef MAIN.ATARI.@UnitInit
  1174 					jsr MAIN.ATARI.@UnitInit
  1175 					.fi
  1176 				
  1177 					.ifdef MAIN.CRT.@UnitInit
  1178 					jsr MAIN.CRT.@UnitInit
  1179 					.fi
  1180 				.endm
  1181
  1182 				; ------------------------------------------------------------
  1183
  1184 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1185 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1185 				SYSTEM: $2175..$21A4
  1186 					eif
  1187
  1188 					ift .SIZEOF(MAIN.DATAMATRIX) > 0
  1189 					.print 'DATAMATRIX: ',MAIN.DATAMATRIX,'..',MAIN.DATAMATRIX+.SIZEOF(MAIN.DATAMATRIX)-1
  1189 				DATAMATRIX: $21A5..$23FE
  1190 					eif
  1191
  1192 					ift .SIZEOF(MAIN.ATARI) > 0
  1193 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1194 					eif
  1195
  1196 					ift .SIZEOF(MAIN.CRT) > 0
  1197 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1197 				CRT: $23FF..$2415
  1198 					eif
  1199
  1200 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1200 				CODE: $2000..$24AB
  1201
  1202 				; ------------------------------------------------------------
  1203
  1204 24AC				.align $0004
  1205
  1206 24AC			DATAORIGIN
  1207 24AC 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  1208
  1209 = 0006			VARINITSIZE	= *-DATAORIGIN
  1210 = 0112			VARDATASIZE	= 274
  1211
  1212 = 25BE			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1213
  1214 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1214 				DATA: $24AC..$25BE
  1215
  1216 02E0-02E1> 40 21			run START
  1217
  1218 				; ------------------------------------------------------------
  1219
  1220 				.macro	STATICDATA
  1221 				.by  $22 $68 $74 $74 $70 $3A $2F $2F  $61 $74 $61 $72 $69 $2E $70 $6C  $2F $48 $53 $43 $2F $3F $78 $3D
  1222 				.by  $31 $30 $30 $30 $30 $30 $30 $30  $30 $30 $31 $00
  1223 				.endm
  1224
  1225 					end
