mads 2.1.5 build 2 (29 Jan 22)
  1142 					opt l+
   106 = 0000				?EXTDETECT = 0
   107 = 0000				?VBXDETECT = 0
   108
   109 2075				RCDATA 'keymap.bin' KEY_MAP 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 00FF			len = .filesize('keymap.bin')-0
    28 2075				org main.KEY_MAP
    30 8000-80FE> 6C 6A 3B 8A + 	ins 'keymap.bin',0
    32 					.print '$R RCDATA  ',main.KEY_MAP,'..',*-1," 'keymap.bin'"
    32 				$R RCDATA  $8000..$80FE 'keymap.bin'
Source: artur.a65
   110 80FF				RCASM 'dlist.asm' DISPLAY_LIST_ADDRESS 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCASM [Source: resource.asm]
     2 80FF				org RESORIGIN
     4 = 0027			len = .sizeof(_DISPLAY_LIST_ADDRESS)
     6 				mcpy	ift main.DISPLAY_LIST_ADDRESS+len >= $bc20
    11 2075-20BC> 20 41 20		jsr sys.off
    13 2078 A9 96 85 88 A9 20 +  MWA #DATA EDX
    13 2080 A9 00 85 8C A9 70 +  MWA #MAIN.DISPLAY_LIST_ADDRESS ECX
    13 2088 A9 27 85 84 A9 00 +  MWA #LEN EAX
    13 2090 20 00 20		 JSR RESOURCE.MEMCPY
    15 2093 4C 65 20			jmp sys.on
    16 2096			data
Source: dlist.asm
     4 = 0000			DL_BLANK1 = 0; // 1 blank line
     5 = 0010			DL_BLANK2 = %00010000; // 2 blank lines
     6 = 0020			DL_BLANK3 = %00100000; // 3 blank lines
     7 = 0030			DL_BLANK4 = %00110000; // 4 blank lines
     8 = 0040			DL_BLANK5 = %01000000; // 5 blank lines
     9 = 0050			DL_BLANK6 = %01010000; // 6 blank lines
    10 = 0060			DL_BLANK7 = %01100000; // 7 blank lines
    11 = 0070			DL_BLANK8 = %01110000; // 8 blank lines
    13 = 0080			DL_DLI = %10000000; // Order to run DLI
    14 = 0040			DL_LMS = %01000000; // Order to set new memory address
    15 = 0020			DL_VSCROLL = %00100000; // Turn on vertical scroll on this line
    16 = 0010			DL_HSCROLL = %00010000; // Turn on horizontal scroll on this line
    18 = 0002			DL_MODE_40x24T2 = 2; // Antic Modes
    19 = 0004			DL_MODE_40x24T5 = 4;
    20 = 0005			DL_MODE_40x12T5 = 5;
    21 = 0006			DL_MODE_20x24T5 = 6;
    22 = 0007			DL_MODE_20x12T5 = 7;
    23 = 0008			DL_MODE_40x24G4 = 8;
    24 = 0009			DL_MODE_80x48G2 = 9;
    25 = 000A			DL_MODE_80x48G4 = $A;
    26 = 000B			DL_MODE_160x96G2 = $B;
    27 = 000C			DL_MODE_160x192G2 = $C;
    28 = 000D			DL_MODE_160x96G4 = $D;
    29 = 000E			DL_MODE_160x192G4 = $E;
    30 = 000F			DL_MODE_320x192G2 = $F;
    32 = 0001			DL_JMP = %00000001; // Order to jump
    33 = 0041			DL_JVB = %01000001; // Jump to begining
Source: const.inc
     1 = 0028			SCREEN_WIDTH = 40;
     2 = 0018			SCREEN_HEIGHT = 24;
     3 = 03C0			SCREEN_SIZE = SCREEN_HEIGHT * SCREEN_WIDTH;
     4 = 0008			FULLSCREEN_UNDO_COUNT = 8; // each one takes 960 bytes
     5 = 0040			UNDO_ACTIONS_COUNT = 64;
     6 = 0069			BIN_HEADER_SIZE = 105;
     8 = 7000			FREE_BOTTOM = $7000;  
    10 = 7000			PMG = FREE_BOTTOM; // $7000
    11 = 7000			DISPLAY_LIST_ADDRESS = PMG;
    12 = 7100			BIN_HEADER = PMG + $100;
    14 = 7400			CUSTOM_CHARSET = PMG + $400; // $7400
    16 = 7800			VIDEO_BUFFER = CUSTOM_CHARSET + $400; // $7800  
    17 = 7BC0			MENU_BAR = VIDEO_BUFFER + SCREEN_SIZE; 
    18 = 7C00			VIDEO_RAM_ADDRESS = VIDEO_BUFFER + $400; // $7c00 
    19 = 7FC0			STATUS_BAR = VIDEO_RAM_ADDRESS + SCREEN_SIZE;  
    20 = 8000			KEY_MAP = FREE_BOTTOM + $1000;        // $8000 -> $8100
    21 = 8100			UNDO_SCREENS = $8100;  // takes 960 * FULLSCREEN_UNDO_COUNT bytes  
    23 = E000			DEFAULT_CHARSET = $E000;
    25 = 00FF			NONE = $ff;
    28 = 00FF			UNDO_NONE = $ff;
    29 = 00FE			UNDO_FROM_BUFFER = $fe;
    31 = 0000			MODE_TYPE = 0;
    32 = 0001			MODE_DRAW = 1;
    33 = 0002			MODE_BLOCK = 2;
    34 = 0003			MODE_LAST = 3;
    35 = 00FF			MODE_EXIT = $ff;
    37 = 0000			TOOL_DRAW = 0;
    38 = 0001			TOOL_LINE = 1;
    39 = 0002			TOOL_FRAME = 2;
    40 = 0003			TOOL_BLOCK = 3;
    42 = 000A			KEY_DELAY = 10;
    43 = 0004			JOY_DELAY = 4;
    44 = 0014			FIRE_DELAY = 20;
    45 = 000A			OS_REPEAT_DELAY = 10;
    46 = 0005			OS_REPEAT_RATE = 5;
    48 = 0030			PMG_XOFFSET = 48;
    49 = 000F			PMG_YOFFSET = 15;
    51 = 0092			BG_DEFAULT = $92;
    52 = 009A			FG_DEFAULT = $9a;
    54 = 0011			MAX_BRUSH_HISTORY = 17;
    56 = 0000			CODE_DISPLAY_NONE = 0;
    57 = 0001			CODE_DISPLAY_ANTIC = 1;
    58 = 0002			CODE_DISPLAY_ATASCII = 2;
    40 7000			dl_start
    41 7000 F0			    dta DL_BLANK8 + DL_DLI  ; 8 blank lines and display list interrupt call
    42 7001 30			    dta DL_BLANK4 
    43 7002 42 C0 7B		    dta DL_MODE_40x24T2 + DL_LMS, a(MENU_BAR) ; TOP line
    44 7005 90			    dta DL_BLANK2 + DL_DLI
    45 7006 42 00 7C		    dta DL_MODE_40x24T2 + DL_LMS, a(VIDEO_RAM_ADDRESS) ; first editor line
    46 7009 02 02 02 02 02 02 +     :22 dta DL_MODE_40x24T2 ; remaining 23 lines
    47 701F 82			    dta DL_MODE_40x24T2 + DL_DLI ; remaining 23 lines
    48 7020 30			    dta DL_BLANK4 
    49 7021 42 C0 7F		    dta DL_MODE_40x24T2 + DL_LMS, a(STATUS_BAR) ; BOTTOM line
    50 7024 41 00 70		    dta DL_JVB, a(dl_start) ; jump to start
    23 					.print '$R RCASM   ',main.DISPLAY_LIST_ADDRESS,'..',main.DISPLAY_LIST_ADDRESS+len-1," 'dlist.asm'"
    23 				$R RCASM   $7000..$7026 'dlist.asm'
    25 02E2-02E3> 75 20			ini mcpy
Source: artur.a65
   111 20BD				RCDATA 'head.bin' BIN_HEADER 0 0 0 0 0 0 0 0
Macro: RESOURCE.RCDATA [Source: resource.asm]
     2 = 0069			len = .filesize('head.bin')-0
    28 20BD				org main.BIN_HEADER
    30 7100-7168> FF FF 00 20 + 	ins 'head.bin',0
    32 					.print '$R RCDATA  ',main.BIN_HEADER,'..',*-1," 'head.bin'"
    32 				$R RCDATA  $7100..$7168 'head.bin'
Source: artur.a65
   112 				.endl
   113
   114 				; ------------------------------------------------------------
   115
   116 7169				org CODEORIGIN
   117
   118 2000				STATICDATA
Macro: STATICDATA [Source: artur.a65]
     1 2000-588C> 04 54 52 55 + .by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $04  $90 $8E $98 $98 $00 $12 $AD $AF
     2 2018 A4 A5 00 00 00 00 + .by  $A4 $A5 $00 $00 $00 $00 $00 $00  $B8 $00 $00 $00 $B9 $00 $00 $00  $00 $05 $74 $79 $70 $65 $00 $00
     3 2030 05 64 72 61 77 00 + .by  $05 $64 $72 $61 $77 $00 $00 $05  $62 $6C $6F $63 $6B $00 $28 $A3  $A1 $B0 $B3 $9A $62 $72 $75 $73
     4 2048 68 00 00 B2 A5 B4 + .by  $68 $00 $00 $B2 $A5 $B4 $B5 $B2  $AE $9A $70 $61 $69 $6E $74 $00  $00 $29 $2E $33 $25 $32 $34 $00
     5 2060 29 2E 36 25 32 33 + .by  $29 $2E $36 $25 $32 $33 $25 $00  $06 $A9 $AE $B3 $A5 $B2 $B4 $00  $07 $A9 $AE $B6 $A5 $B2 $B3 $A5
     6 2078 00 28 A3 A1 B0 B3 + .by  $00 $28 $A3 $A1 $B0 $B3 $9A $62  $72 $75 $73 $68 $00 $00 $00 $A4  $72 $61 $77 $00 $00 $00 $AC $69
     7 2090 6E 65 00 00 00 A6 + .by  $6E $65 $00 $00 $00 $A6 $72 $61  $6D $65 $00 $00 $00 $A2 $6C $6F  $63 $6B $00 $04 $A4 $B2 $A1 $B7
     8 20A8 00 04 AC A9 AE A5 + .by  $00 $04 $AC $A9 $AE $A5 $00 $05  $A6 $B2 $A1 $AD $A5 $00 $05 $A2  $AC $AF $A3 $AB $00 $1F $33 $65
     9 20C0 6C 65 63 74 00 61 + .by  $6C $65 $63 $74 $00 $61 $72 $65  $61 $00 $77 $69 $74 $68 $00 $B2  $A5 $B4 $B5 $B2 $AE $00 $6F $72
    10 20D8 00 A6 A9 B2 A5 00 + .by  $00 $A6 $A9 $B2 $A5 $00 $20 $A3  $6F $70 $79 $00 $00 $AD $6F $76  $65 $00 $00 $A6 $69 $6C $6C $00
    11 20F0 00 A9 6E 76 65 72 + .by  $00 $A9 $6E $76 $65 $72 $74 $00  $00 $B3 $61 $76 $65 $00 $00 $00  $02 $00 $00 $00 $0F $25 $6E $74
    12 2108 65 72 00 26 69 6C + .by  $65 $72 $00 $26 $69 $6C $65 $6E  $61 $6D $65 $1A $00 $0C $20 $20  $20 $20 $20 $20 $20 $20 $20 $20
    13 2120 20 20 00 0C B3 E5 + .by  $20 $20 $00 $0C $B3 $E5 $EC $E5  $E3 $F4 $80 $A2 $F2 $F5 $F3 $E8  $00 $0D $24 $65 $76 $69 $63 $65
    14 2138 00 25 72 72 6F 72 + .by  $00 $25 $72 $72 $6F $72 $01 $00  $0D $22 $61 $64 $00 $26 $69 $6C  $65 $6E $61 $6D $65 $01 $00 $08
    15 2150 33 75 63 63 65 73 + .by  $33 $75 $63 $63 $65 $73 $73 $0E  $00 $0C $41 $52 $54 $55 $52 $43  $46 $47 $2E $53 $59 $53 $00 $11
    16 2168 B3 A1 B6 E9 AE A7 + .by  $B3 $A1 $B6 $E9 $AE $A7 $80 $A4  $A1 $B4 $A1 $80 $A2 $AC $AF $A3  $AB $00 $1C $8D $8D $8D $8D $8D
    17 2180 8D 8D 8D 8D 8D 8D + .by  $8D $8D $8D $8D $8D $8D $8D $8D  $8D $8D $8D $8D $8D $8D $8D $8D  $8D $8D $8D $8D $8D $8D $8D $00
    18 2198 1C A1 B2 B4 F5 F2 + .by  $1C $A1 $B2 $B4 $F5 $F2 $80 $8D  $80 $F6 $8E $80 $80 $80 $80 $80  $80 $E2 $EF $E3 $E9 $E1 $EE $F5
    19 21B0 87 92 90 92 90 00 + .by  $87 $92 $90 $92 $90 $00 $12 $A1  $B4 $A1 $B3 $A3 $A9 $A9 $80 $A1  $F2 $F4 $80 $A5 $E4 $E9 $F4 $EF
    20 21C8 F2 00 11 33 34 21 + .by  $F2 $00 $11 $33 $34 $21 $32 $34  $80 $80 $8D $80 $A9 $8F $AF $80  $ED $E5 $EE $F5 $00 $14 $33 $25
    21 21E0 2C 25 23 34 80 8D + .by  $2C $25 $23 $34 $80 $8D $80 $E3  $E8 $E1 $EE $E7 $E5 $80 $ED $EF  $E4 $E5 $00 $11 $2F $30 $34 $29
    22 21F8 2F 2E 80 8D 80 F3 + .by  $2F $2E $80 $8D $80 $F3 $E5 $F4  $F4 $E9 $EE $E7 $F3 $00 $14 $28  $25 $2C $30 $80 $80 $80 $8D $80
    23 2210 F4 E8 E9 F3 80 F3 + .by  $F4 $E8 $E9 $F3 $80 $F3 $E3 $F2  $E5 $E5 $EE $00 $0D $B0 $F2 $E5  $F3 $F3 $80 $61 $6E $79 $80 $EB
    24 2228 E5 F9 00 0C 80 80 + .by  $E5 $F9 $00 $0C $80 $80 $80 $80  $80 $80 $80 $80 $80 $80 $80 $80  $00 $05 $44 $3A $2A $2E $2A $00
    25 2240 03 33 39 33 00 1E + .by  $03 $33 $39 $33 $00 $1E $A9 $8F  $AF $80 $AD $A5 $AE $B5 $80 $80  $80 $80 $80 $80 $80 $80 $80 $80
    26 2258 80 80 80 80 80 80 + .by  $80 $80 $80 $80 $80 $80 $A6 $E9  $EC $E5 $F3 $9A $00 $24 $8D $8D  $8D $8D $8D $8D $8D $8D $8D $8D
    27 2270 8D 8D 8D 8D 8D 8D + .by  $8D $8D $8D $8D $8D $8D $8D $8D  $8D $8D $8D $8D $8D $80 $8D $8D  $8D $8D $8D $8D $8D $8D $8D $8D
    28 2288 8D 8D 00 11 2E E5 + .by  $8D $8D $00 $11 $2E $E5 $F7 $80  $E9 $ED $E1 $E7 $E5 $80 $88 $E3  $EC $E5 $E1 $F2 $89 $00 $12 $2C
    29 22A0 EF E1 E4 80 A1 B4 + .by  $EF $E1 $E4 $80 $A1 $B4 $A1 $B3  $A3 $A9 $A9 $80 $E9 $ED $E1 $E7  $E5 $00 $12 $33 $E1 $F6 $E5 $80
    30 22B8 A1 B4 A1 B3 A3 A9 + .by  $A1 $B4 $A1 $B3 $A3 $A9 $A9 $80  $E9 $ED $E1 $E7 $E5 $00 $16 $B3  $E1 $F6 $E5 $80 $E5 $38 $E5 $E3
    31 22D0 F5 F4 E1 E2 EC E5 + .by  $F5 $F4 $E1 $E2 $EC $E5 $80 $E2  $E9 $EE $E1 $F2 $F9 $00 $13 $AC  $EF $E1 $E4 $80 $E3 $F5 $F3 $F4
    32 22E8 EF ED 80 23 E8 E1 + .by  $EF $ED $80 $23 $E8 $E1 $F2 $F3  $E5 $F4 $00 $17 $B2 $E5 $F3 $F4  $EF $F2 $E5 $80 $24 $E5 $E6 $E1
    33 2300 F5 EC F4 80 E3 E8 + .by  $F5 $EC $F4 $80 $E3 $E8 $E1 $F2  $F3 $E5 $F4 $00 $0B $31 $F5 $E9  $F4 $80 $F4 $EF $80 $A4 $AF $B3
    34 2318 00 13 B0 F2 E5 F3 + .by  $00 $13 $B0 $F2 $E5 $F3 $F3 $80  $25 $33 $23 $80 $F4 $EF $80 $EC  $E5 $E1 $F6 $E5 $80 $00 $0F $A5
    35 2330 A4 E9 B4 AF B2 80 + .by  $A4 $E9 $B4 $AF $B2 $80 $B3 $A5  $B4 $B4 $E9 $AE $A7 $B3 $00 $13  $22 $E1 $E3 $EB $E7 $F2 $EF $F5
    36 2348 EE E4 80 E3 EF EC + .by  $EE $E4 $80 $E3 $EF $EC $EF $F2  $9A $80 $84 $00 $13 $26 $EF $F2  $E5 $E7 $F2 $EF $F5 $EE $E4 $80
    37 2360 E3 EF EC EF F2 9A + .by  $E3 $EF $EC $EF $F2 $9A $80 $84  $00 $15 $21 $F2 $F2 $EF $F7 $F3  $80 $F7 $E9 $F4 $E8 $EF $F5 $F4
    38 2378 80 A3 F4 F2 EC 9A + .by  $80 $A3 $F4 $F2 $EC $9A $80 $00  $03 $6F $6E $80 $00 $03 $6F $66  $66 $00 $12 $23 $E8 $E1 $F2 $E3
    39 2390 EF E4 E5 80 E4 E9 + .by  $EF $E4 $E5 $80 $E4 $E9 $F3 $F0  $EC $E1 $F9 $9A $80 $00 $07 $6F  $66 $66 $80 $80 $80 $80 $00 $07
    40 23A8 21 34 21 33 23 29 + .by  $21 $34 $21 $33 $23 $29 $29 $00  $07 $21 $6E $74 $69 $63 $80 $80  $00 $0B $33 $E1 $F6 $E5 $80 $E3
    41 23C0 EF EE E6 E9 E7 00 + .by  $EF $EE $E6 $E9 $E7 $00 $12 $B0  $F2 $E5 $F3 $F3 $80 $25 $33 $23  $80 $F4 $EF $80 $EC $E5 $E1 $F6
    42 23D8 E5 00 6C 6A 3B FF + .by  $E5 $00 $6C $6A $3B $FF $FF $6B  $2B $2A $6F $FF $70 $75 $9B $69  $2D $3D $76 $FF $63 $FF $FF $62
    43 23F0 78 7A 34 FF 33 36 + .by  $78 $7A $34 $FF $33 $36 $1B $35  $32 $31 $2C $20 $2E $6E $FF $6D  $2F $81 $72 $FF $65 $79 $7F $74
    44 2408 77 71 39 FF 30 37 + .by  $77 $71 $39 $FF $30 $37 $7E $38  $3E $FF $66 $68 $64 $FF $82 $67  $73 $61 $4C $4A $3A $FF $FF $4B
    45 2420 5C 5E 4F FF 50 55 + .by  $5C $5E $4F $FF $50 $55 $FF $49  $5F $7C $56 $FF $43 $FF $FF $42  $58 $5A $24 $FF $23 $26 $FF $25
    46 2438 22 21 5B 3B 5D 4E + .by  $22 $21 $5B $3B $5D $4E $FF $4D  $3F $FF $52 $FF $45 $59 $FF $54  $57 $51 $28 $FF $29 $27 $FF $40
    47 2450 FF FF 46 48 44 FF + .by  $FF $FF $46 $48 $44 $FF $FF $47  $53 $41 $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
    48 2468 FF FF FF FF FF FF + .by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
    49 2480 FF FF FF FF FF FF + .by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
    50 2498 FF FF FF FF FF FF + .by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
    51 24B0 FF FF FF FF FF FF + .by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
    52 24C8 FF FF FF FF FF FF + .by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF
Source: artur.a65
   119
   120 				; ------------------------------------------------------------
   121
   122 24DA			RTLIB
   123 24DA				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   124
   125 				.print 'ZPAGE: ',zpage,'..',zpend-1
   125 				ZPAGE: $0080..$00D3
   126
   127 				.print 'RTLIB: ',RTLIB,'..',*-1
   127 				RTLIB: $24DA..$29CD
   128
   129 				; ------------------------------------------------------------
   130
   131 29CE			START
   132 29CE BA				tsx
   133 29CF 8E 66 58			stx MAIN.@halt+1
   134
   135 					.ifdef fmulinit
   136 					fmulinit
   137 					.fi
   138
   139 = 00A9			VLEN	= VARDATASIZE-VARINITSIZE
   140 = 62DC			VADR	= DATAORIGIN+VARINITSIZE
   141
   142 					ift VADR > $BFFF
   143 					ert 'Invalid memory address range ',VADR
   144 					eli (VLEN>0) && (VLEN<=256)
   145 29D2 A2 57			ldx #256-VLEN
   146 29D4 A9 00			lda #$00
   147 29D6 9D 85 62 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   148 					eli VLEN>256
   149 					@fill #VADR #VLEN #$00
   150 					eif
   151
   152 				.ifdef :psptr
   153 					mwa #PROGRAMSTACK :psptr
   154 				.fi
   155
   156 					.ifdef MAIN.@DEFINES.ROMOFF
   157 					icl 'atari\romoff.asm'
   158 					.fi
   159
   160 29DC A2 0F			ldx #$0F					; DOS II+/D ParamStr
   161 29DE BD 40 03 9D 6B 58 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   162
   163 29E7 E8				inx						; X = 0
   164 29E8 86 80			stx bp						; BP = 0
   165
   166 29EA 8E 0F D2			stx skctl					; reset POKEY
   167 29ED A9 03			lda #3
   168 29EF 8D 0F D2			sta skctl
   169
   170 29F2 CA				dex						; X = 255
   171
   172 29F3				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: artur.a65]
   173
   174 29F3			.local	MAIN						; PROCEDURE
   175
   176 29F3 4C 97 53			jmp l_03E1
   177
   178 				; ------------------------------------------------------------
   179
   180 29F6			.local	SYSTEM						; UNIT
   181
   182 29F6			.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER
   183
   184 				; ---------------------  ASM Block 001  ---------------------
   185
   186 29F6 20 94 28			jsr @hexStr
   187
   188 				;	@move #@buf Result #33
   189 29F9 A0 DF			ldy #256-33
   190 29FB B9 21 03 99 BC 57 + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   191
   192 2A04			@exit
   193
   194 				; ------------------------------------------------------------
   195
   196 = 0088			VALUE	= :EDX
   197 = 008C			DIGITS	= :ECX
   198 = 589B			adr.RESULT	= [DATAORIGIN+$000B] .array [33]
   199 2A04			.var RESULT	= adr.RESULT .word
   200
   201 = 2A05			@VarData	= RESULT
   202 = 0021			@VarDataSize	= 33
   203
   204 2A04 60				rts						; ret
   205 = 2A05 9B 58		RESULT
   205 				.endl
   206
   207 2A07			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   208
   209 				; ------------------------------------------------------------
   210
   211 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   212 				; as Pointer
   213 2A07 B5 94			lda :STACKORIGIN,x
   214 2A09 85 88			sta A
   215 2A0B B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   216 2A0D 85 89			sta A+1
   217 2A0F CA				dex
   218 2A10			@main
   219
   220 				; ---------------------  ASM Block 002  ---------------------
   221
   222 2A10 A0 00			ldy #0
   223 2A12 B1 88 8D BC 58		mva (:edx),y Result
   224
   225 2A17			@exit
   226
   227 				; ------------------------------------------------------------
   228
   229 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   230 				; as Pointer
   231
   232 2A17 E8				inx
   233 2A18 AD BC 58 95 94		mva RESULT :STACKORIGIN,x
   234
   235 					.ifdef @new
   236 					lda <@VarData
   237 					sta :ztmp
   238 					lda >@VarData
   239 					ldy #@VarDataSize-1
   240 					jmp @FreeMem
   241 					eif
   242
   243 				; ------------------------------------------------------------
   244
   245 = 0088			A	= :EDX
   246 = 58BC			RESULT	= DATAORIGIN+$002C
   247
   248 = 58BC			@VarData	= RESULT
   249 = 0001			@VarDataSize	= 1
   250
   251 2A1D 60				rts						; ret
   252 				.endl
   253
   254 2A1E			.local	UPCASE						; FUNCTION
   255 2A1E 8D BD 58			sta A
   256
   257 				; optimize OK (SYSTEM), line = 1236
   258
   259 2A21 8D BF 58			sta @CASETMP_0002
   260 2A24 18				clc						; clear carry for add
   261 2A25 69 85			adc #$FF-$7A					; make m = $FF
   262 2A27 69 1A			adc #$7A-$61+1					; carry set if in range n to m
   263 2A29 90 0C			jcc l_041D
   264 				@
   265
   266 				; optimize OK (SYSTEM), line = 1237
   267
   268 2A2B AD BD 58			lda A
   269 2A2E 38 E9 20			sub #$20
   270 2A31 8D BE 58			sta RESULT
   271
   272 2A34 4C 3D 2A			jmp a_0002
   273 2A37			l_041D
   274
   275 				; optimize OK (SYSTEM), line = 1239
   276
   277 2A37 AD BD 58			lda A
   278 2A3A 8D BE 58			sta RESULT
   279 2A3D			a_0002
   280 2A3D			@exit
   281
   282 				; ------------------------------------------------------------
   283
   284 = 58BD			A	= DATAORIGIN+$002D
   285 = 58BE			RESULT	= DATAORIGIN+$002E
   286 = 58BF			@CASETMP_0002	= DATAORIGIN+$002F
   287
   288 = 58BD			@VarData	= A
   289 = 0003			@VarDataSize	= 3
   290
   291 2A3D 60				rts						; ret
   292 				.endl
   293
   294 2A3E			.local	STR_0449					; PROCEDURE | ASSEMBLER | OVERLOAD
   295
   296 				; ------------------------------------------------------------
   297
   298 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   299 				; as Pointer
   300 2A3E B5 94			lda :STACKORIGIN,x
   301 2A40 8D C0 58			sta A
   302 2A43 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   303 2A45 8D C1 58			sta A+1
   304 2A48 B5 B4			lda :STACKORIGIN+STACKWIDTH*2,x
   305 2A4A 8D C2 58			sta A+2
   306 2A4D B5 C4			lda :STACKORIGIN+STACKWIDTH*3,x
   307 2A4F 8D C3 58			sta A+3
   308 2A52 CA				dex
   309 2A53 30 0B			jmi @main
   310
   311 				; ------------------------------------------------------------
   312
   313 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   314 				; as Pointer
   315 2A55 B5 94			lda :STACKORIGIN,x
   316 2A57 8D C4 58			sta S
   317 2A5A B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   318 2A5C 8D C5 58			sta S+1
   319 2A5F CA				dex
   320 2A60			@main
   321
   322 				; ---------------------  ASM Block 017  ---------------------
   323
   324 2A60 8A 48			txa:pha
   325
   326 2A62 E8				inx		; parameter A
   327 2A63 E8				inx		; parameter S
   328
   329 					@ValueToStr #@printCARD
   329 				 LDY> @PRINTCARD\ LDA< @PRINTCARD\ JSR @VALUETOSTR
   329 2A64 A0 29		 LDY> @PRINTCARD
   329 2A66 A9 3D		 LDA< @PRINTCARD
   329 2A68 20 EA 28		 JSR @VALUETOSTR
   330
   331 					@move #@buf s #16	; !!! koniecznie przez wskaznik
   331 				 MWA #@BUF @MOVE.PTR1\ MWA S @MOVE.PTR2\ MWA #16 @MOVE.PTR3\ JSR @MOVE
   331 2A6B A9 00 85 88 A9 04 +  MWA #@BUF @MOVE.PTR1
   331 2A73 AD C4 58 85 8C AD +  MWA S @MOVE.PTR2
   331 2A7D A9 10 85 84 A9 00 +  MWA #16 @MOVE.PTR3
   331 2A85 20 74 27		 JSR @MOVE
   332
   333 2A88 68 AA			pla:tax
   334
   335
   336 				; ------------------------------------------------------------
   337
   338 = 58C0			A	= DATAORIGIN+$0030
   339 = 58C4			S	= DATAORIGIN+$0034
   340
   341 = 58C0			@VarData	= A
   342 = 0006			@VarDataSize	= 6
   343
   344 2A8A			@exit
   345 					.ifdef @new
   346 					lda <@VarData
   347 					sta :ztmp
   348 					lda >@VarData
   349 					ldy #@VarDataSize-1
   350 					jmp @FreeMem
   351 					els
   352 2A8A 60				rts						; ret
   353 					eif
   354 				.endl
   355
   356 2A8B			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   357
   358 				; ------------------------------------------------------------
   359
   360 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   361 				; as Pointer
   362 2A8B B5 94			lda :STACKORIGIN,x
   363 2A8D 85 88			sta A
   364 2A8F B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   365 2A91 85 89			sta A+1
   366 2A93 CA				dex
   367 2A94 30 05			jmi @main
   368
   369 				; ------------------------------------------------------------
   370
   371 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   372 				; as Pointer
   373 2A96 B5 94			lda :STACKORIGIN,x
   374 2A98 85 8C			sta VALUE
   375 2A9A CA				dex
   376 2A9B			@main
   377
   378 				; ---------------------  ASM Block 018  ---------------------
   379
   380 2A9B A0 00			ldy #0
   381 2A9D A5 8C 91 88			mva value (:edx),y
   382
   383
   384 				; ------------------------------------------------------------
   385
   386 = 0088			A	= :EDX
   387 = 008C			VALUE	= :ECX
   388 2AA1			@exit
   389 					.ifdef @new
   390 					lda <@VarData
   391 					sta :ztmp
   392 					lda >@VarData
   393 					ldy #@VarDataSize-1
   394 					jmp @FreeMem
   395 					els
   396 2AA1 60				rts						; ret
   397 					eif
   398 				.endl
   399
   400 2AA2			.local	FILLBYTE_0457					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   401
   402 					.MACRO m@INLINE
   403 				
   404 				; ---------------------  ASM Block 026  ---------------------
   405 				
   406 					jsr @fill
   407 				
   408 					.ENDM
   409
   410 				; ------------------------------------------------------------
   411
   412 = 0088			A	= :EDX
   413 = 008C			COUNT	= :ECX
   414 = 0084			VALUE	= :EAX
   415 2AA2			@exit
   416 				.endl
   417
   418 2AA2			.local	MOVE_0458					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   419
   420 					.MACRO m@INLINE
   421 				
   422 				; ---------------------  ASM Block 028  ---------------------
   423 				
   424 					jsr @move
   425 				
   426 					.ENDM
   427
   428 				; ------------------------------------------------------------
   429
   430 = 0088			SOURCE	= :EDX
   431 = 008C			DEST	= :ECX
   432 = 0084			COUNT	= :EAX
   433 2AA2			@exit
   434 				.endl
   435
   436 2AA2			.local	MOVE_0459					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   437
   438 					.MACRO m@INLINE
   439 				
   440 				; ---------------------  ASM Block 029  ---------------------
   441 				
   442 					jsr @move
   443 				
   444 					.ENDM
   445
   446 				; ------------------------------------------------------------
   447
   448 = 0088			SOURCE	= :EDX
   449 = 008C			DEST	= :ECX
   450 = 0084			COUNT	= :EAX
   451 2AA2			@exit
   452 				.endl
   453
   454 2AA2			.local	MOVE_045A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE
   455
   456 					.MACRO m@INLINE
   457 				
   458 				; ---------------------  ASM Block 030  ---------------------
   459 				
   460 					jsr @move
   461 				
   462 					.ENDM
   463
   464 				; ------------------------------------------------------------
   465
   466 = 0088			SOURCE	= :EDX
   467 = 008C			DEST	= :ECX
   468 = 0084			COUNT	= :EAX
   469 2AA2			@exit
   470 				.endl
   471
   472 2AA2			.local	PAUSE_0479					; PROCEDURE | ASSEMBLER | OVERLOAD
   473
   474 				; ---------------------  ASM Block 036  ---------------------
   475
   476 2AA2 A5 14 C5 14 F0 FC		lda:cmp:req :rtclok+2
   477
   478 2AA8			@exit
   479 					.ifdef @new
   480 					lda <@VarData
   481 					sta :ztmp
   482 					lda >@VarData
   483 					ldy #@VarDataSize-1
   484 					jmp @FreeMem
   485 					els
   486 2AA8 60				rts						; ret
   487 					eif
   488 				.endl
   489
   490 				; ------------------------------------------------------------
   491
   492 = 0101			__PORTB_BANKS	= $0101
   493 = 0648			M_PI_2	= $0648
   494 = 0192			D_PI_2	= $0192
   495 = 0004			D_PI_180	= $04
   496 = 0000			MGTIA	= $00
   497 = 0080			MVBXE	= $80
   498 = 0000			VBXE_XDLADR	= $00
   499 = 0100			VBXE_BCBADR	= $0100
   500 = 1000			VBXE_MAPADR	= $1000
   501 = 1000			VBXE_CHBASE	= $1000
   502 = 5000			VBXE_OVRADR	= $5000
   503 = B000			VBXE_WINDOW	= $B000
   504 = 0000			IDLI	= $00
   505 = 0001			IVBL	= $01
   506 = 0002			ITIM1	= $02
   507 = 0003			ITIM2	= $03
   508 = 0004			ITIM4	= $04
   509 = 00FE			CH_DELCHR	= $FE
   510 = 009B			CH_ENTER	= $9B
   511 = 001B			CH_ESC	= $1B
   512 = 001C			CH_CURS_UP	= $1C
   513 = 001D			CH_CURS_DOWN	= $1D
   514 = 001E			CH_CURS_LEFT	= $1E
   515 = 001F			CH_CURS_RIGHT	= $1F
   516 = 007F			CH_TAB	= $7F
   517 = 009B			CH_EOL	= $9B
   518 = 007D			CH_CLR	= $7D
   519 = 00FD			CH_BELL	= $FD
   520 = 007E			CH_DEL	= $7E
   521 = 009C			CH_DELLINE	= $9C
   522 = 009D			CH_INSLINE	= $9D
   523 = 0000			COLOR_BLACK	= $00
   524 = 000E			COLOR_WHITE	= $0E
   525 = 0032			COLOR_RED	= $32
   526 = 0096			COLOR_CYAN	= $96
   527 = 0068			COLOR_VIOLET	= $68
   528 = 00C4			COLOR_GREEN	= $C4
   529 = 0074			COLOR_BLUE	= $74
   530 = 00EE			COLOR_YELLOW	= $EE
   531 = 0028			COLOR_ORANGE	= $28
   532 = 00E4			COLOR_BROWN	= $E4
   533 = 003C			COLOR_LIGHTRED	= $3C
   534 = 0004			COLOR_GRAY1	= $04
   535 = 0006			COLOR_GRAY2	= $06
   536 = 000A			COLOR_GRAY3	= $0A
   537 = 00CC			COLOR_LIGHTGREEN	= $CC
   538 = 007C			COLOR_LIGHTBLUE	= $7C
   539 = 0004			FMOPENREAD	= $04
   540 = 0008			FMOPENWRITE	= $08
   541 = 0009			FMOPENAPPEND	= $09
   542 = 000C			FMOPENREADWRITE	= $0C
   543 = 5890			SCREENWIDTH	= DATAORIGIN+$0000
   544 = 5892			SCREENHEIGHT	= DATAORIGIN+$0002
   545 = 5894			DATESEPARATOR	= DATAORIGIN+$0004
   546 = D20A			RND	= $D20A
   547 = 02C0			adr.PALETTE	= $02C0
   548 2AA9			.var PALETTE	= adr.PALETTE .word
   549 = D012			adr.HPALETTE	= $D012
   550 2AA9			.var HPALETTE	= adr.HPALETTE .word
   551 = 5895			FILEMODE	= DATAORIGIN+$0005
   552 = 5896			GRAPHMODE	= DATAORIGIN+$0006
   553 = 5897			IORESULT	= DATAORIGIN+$0007
   554 = 5898			EOLN	= DATAORIGIN+$0008
   555 = 5899			RNDSEED	= DATAORIGIN+$0009
   556
   557 = 2AA9 C0 02		PALETTE
   557 = 2AAB 12 D0		HPALETTE
   557 				.endl							; UNIT SYSTEM
   558
   559 				; ------------------------------------------------------------
   560
   561 2AAD			.local	ATARI						; UNIT
   562
   563 				; ------------------------------------------------------------
   564
   565 = 0010			IRQENS	= $10
   566 = 0012			RTCLOK	= $12
   567 = 0012			RTCLOK1	= $12
   568 = 0013			RTCLOK2	= $13
   569 = 0014			RTCLOK3	= $14
   570 = 004D			ATRACT	= $4D
   571 = 0052			LMARGIN	= $52
   572 = 0053			RMARGIN	= $53
   573 = 0054			ROWCRS	= $54
   574 = 0055			COLCRS	= $55
   575 = 0057			DINDEX	= $57
   576 = 0058			SAVMSC	= $58
   577 = 0062			PALNTS	= $62
   578 = 006A			RAMTOP	= $6A
   579 = 0200			VDSLST	= $0200
   580 = 0230			SDLSTL	= $0230
   581 = 0290			TXTROW	= $0290
   582 = 0291			TXTCOL	= $0291
   583 = 0293			TINDEX	= $0293
   584 = 0294			TXTMSC	= $0294
   585 = 022F			SDMCTL	= $022F
   586 = 026F			GPRIOR	= $026F
   587 = 02F0			CRSINH	= $02F0
   588 = 02F3			CHACT	= $02F3
   589 = 02F4			CHBAS	= $02F4
   590 = 02FC			CH	= $02FC
   591 = 02C0			PCOLR0	= $02C0
   592 = 02C1			PCOLR1	= $02C1
   593 = 02C2			PCOLR2	= $02C2
   594 = 02C3			PCOLR3	= $02C3
   595 = 02C4			COLOR0	= $02C4
   596 = 02C5			COLOR1	= $02C5
   597 = 02C6			COLOR2	= $02C6
   598 = 02C7			COLOR3	= $02C7
   599 = 02C8			COLOR4	= $02C8
   600 = 02C8			COLBAKS	= $02C8
   601 = D000			HPOSP0	= $D000
   602 = D001			HPOSP1	= $D001
   603 = D002			HPOSP2	= $D002
   604 = D003			HPOSP3	= $D003
   605 = D004			HPOSM0	= $D004
   606 = D005			HPOSM1	= $D005
   607 = D006			HPOSM2	= $D006
   608 = D007			HPOSM3	= $D007
   609 = D008			SIZEP0	= $D008
   610 = D009			SIZEP1	= $D009
   611 = D00A			SIZEP2	= $D00A
   612 = D00B			SIZEP3	= $D00B
   613 = D00C			SIZEM	= $D00C
   614 = D00D			GRAFP0	= $D00D
   615 = D00E			GRAFP1	= $D00E
   616 = D00F			GRAFP2	= $D00F
   617 = D010			GRAFP3	= $D010
   618 = D011			GRAFM	= $D011
   619 = D004			P0PF	= $D004
   620 = D014			PAL	= $D014
   621 = D012			COLPM0	= $D012
   622 = D013			COLPM1	= $D013
   623 = D014			COLPM2	= $D014
   624 = D015			COLPM3	= $D015
   625 = D016			COLPF0	= $D016
   626 = D017			COLPF1	= $D017
   627 = D018			COLPF2	= $D018
   628 = D019			COLPF3	= $D019
   629 = D01A			COLBK	= $D01A
   630 = D01B			PRIOR	= $D01B
   631 = D01D			GRACTL	= $D01D
   632 = D01E			HITCLR	= $D01E
   633 = D01F			CONSOL	= $D01F
   634 = D200			AUDF1	= $D200
   635 = D201			AUDC1	= $D201
   636 = D202			AUDF2	= $D202
   637 = D203			AUDC2	= $D203
   638 = D204			AUDF3	= $D204
   639 = D205			AUDC3	= $D205
   640 = D206			AUDF4	= $D206
   641 = D207			AUDC4	= $D207
   642 = D208			AUDCTL	= $D208
   643 = D209			KBCODE	= $D209
   644 = D20E			IRQEN	= $D20E
   645 = D20F			SKSTAT	= $D20F
   646 = D300			PORTA	= $D300
   647 = D301			PORTB	= $D301
   648 = D400			DMACTL	= $D400
   649 = D401			CHACTL	= $D401
   650 = D402			DLISTL	= $D402
   651 = D404			HSCROL	= $D404
   652 = D405			VSCROL	= $D405
   653 = D407			PMBASE	= $D407
   654 = D409			CHBASE	= $D409
   655 = D40A			WSYNC	= $D40A
   656 = D40B			VCOUNT	= $D40B
   657 = D40C			PENH	= $D40C
   658 = D40D			PENV	= $D40D
   659 = D40E			NMIEN	= $D40E
   660 = FFFA			NMIVEC	= $FFFA
   661 = FFFC			RESETVEC	= $FFFC
   662 = FFFE			IRQVEC	= $FFFE
   663
   664 				.endl							; UNIT ATARI
   665
   666 				; ------------------------------------------------------------
   667
   668 2AAD			.local	CRT						; UNIT
   669
   670 2AAD			.local	READKEY						; FUNCTION | ASSEMBLER
   671
   672 				; ---------------------  ASM Block 052  ---------------------
   673
   674 2AAD				m@call @GetKey
Macro: M@CALL [Source: macros.asm]
    12 2AAD 20 0D 27				jsr @GETKEY
Source: artur.a65
   675 2AB0 8D C7 58			sta Result
   676
   677 2AB3			@exit
   678
   679 				; ------------------------------------------------------------
   680
   681 = 58C7			RESULT	= DATAORIGIN+$0037
   682
   683 = 58C7			@VarData	= RESULT
   684 = 0001			@VarDataSize	= 1
   685
   686 2AB3 60				rts						; ret
   687 				.endl
   688
   689 2AB4			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   690
   691 				; ---------------------  ASM Block 056  ---------------------
   692
   693 2AB4 A0 00			ldy #$00	; false
   694 2AB6 AD FC 02			lda kbcodes
   695 2AB9 C9 FF			cmp #$ff
   696 2ABB F0 01			beq skp
   697 2ABD C8				iny		; true
   698
   699 				;	sty kbcodes
   700
   701 2ABE 8C C8 58		skp	sty Result
   702
   703 2AC1			@exit
   704
   705 				; ------------------------------------------------------------
   706
   707 = 58C8			RESULT	= DATAORIGIN+$0038
   708
   709 = 58C8			@VarData	= RESULT
   710 = 0001			@VarDataSize	= 1
   711
   712 2AC1 60				rts						; ret
   713 				.endl
   714
   715 2AC2			.local	TEXTMODE					; PROCEDURE | ASSEMBLER
   716 2AC2 8D C9 58			sta MODE
   717
   718 				; ---------------------  ASM Block 060  ---------------------
   719
   720 2AC5 8A 48			txa:pha
   721
   722 2AC7 20 E1 26			@clrscr
   723
   724 2ACA 68 AA			pla:tax
   725
   726
   727 				; ------------------------------------------------------------
   728
   729 = 58C9			MODE	= DATAORIGIN+$0039
   730
   731 = 58C9			@VarData	= MODE
   732 = 0001			@VarDataSize	= 1
   733
   734 2ACC			@exit
   735 					.ifdef @new
   736 					lda <@VarData
   737 					sta :ztmp
   738 					lda >@VarData
   739 					ldy #@VarDataSize-1
   740 					jmp @FreeMem
   741 					els
   742 2ACC 60				rts						; ret
   743 					eif
   744 				.endl
   745
   746 				; ------------------------------------------------------------
   747
   748 = 58C6			TEXTATTR	= DATAORIGIN+$0036
   749 = D01F			CONSOL	= $D01F
   750 = 0000			CN_START_SELECT_OPTION	= $00
   751 = 0001			CN_SELECT_OPTION	= $01
   752 = 0002			CN_START_OPTION	= $02
   753 = 0003			CN_OPTION	= $03
   754 = 0004			CN_START_SELECT	= $04
   755 = 0005			CN_SELECT	= $05
   756 = 0006			CN_START	= $06
   757 = 0007			CN_NONE	= $07
   758 = 0000			BW40	= $00
   759 = 0001			CO40	= $01
   760 = 0002			BW80	= $02
   761 = 0003			CO80	= $03
   762 = 0007			MONO	= $07
   763 = 0001			C40	= $01
   764 = 0003			C80	= $03
   765 = 0000			BLACK	= $00
   766 = 0001			BLUE	= $01
   767 = 0002			GREEN	= $02
   768 = 0003			CYAN	= $03
   769 = 0004			RED	= $04
   770 = 0005			MAGENTA	= $05
   771 = 0006			BROWN	= $06
   772 = 0007			LIGHTGRAY	= $07
   773 = 0008			DARKGRAY	= $08
   774 = 0009			LIGHTBLUE	= $09
   775 = 000A			LIGHTGREEN	= $0A
   776 = 000B			LIGHTCYAN	= $0B
   777 = 000C			LIGHTRED	= $0C
   778 = 000D			LIGHTMAGENTA	= $0D
   779 = 000E			YELLOW	= $0E
   780 = 000F			WHITE	= $0F
   781 = 0080			BLINK	= $80
   782
   783 				.endl							; UNIT CRT
   784
   785 				; ------------------------------------------------------------
   786
   787 2ACD			.local	DOS						; UNIT
   788
   789 				; ------------------------------------------------------------
   790
   791 = D014			PALNTSC	= $D014
   792
   793 				.endl							; UNIT DOS
   794
   795 				; ------------------------------------------------------------
   796
   797 2ACD			.local	STRUTILS					; UNIT
   798
   799 				; ------------------------------------------------------------
   800
   801 				.endl							; UNIT STRUTILS
   802
   803 				; ------------------------------------------------------------
   804
   805 2ACD			.local	SYSUTILS					; UNIT
   806
   807 2ACD			.local	FINDFIRST					; FUNCTION
   808
   809 				; ------------------------------------------------------------
   810
   811 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   812 				; as Pointer
   813 2ACD B5 94			lda :STACKORIGIN,x
   814 2ACF 85 82			sta :bp2
   815 2AD1 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   816 2AD3 85 83			sta :bp2+1
   817 2AD5 A0 20			ldy #$20
   818 2AD7 B1 82 99 CA 58 88 + 	mva:rpl (:bp2),y adr.FILEMASK,y-
   819 2ADF A9 CA 8D AB 2B A9 + 	mwa #adr.FILEMASK FILEMASK
   820 2AE9 CA				dex
   821 2AEA 30 13			jmi @main
   822
   823 				; ------------------------------------------------------------
   824
   825 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   826 				; as Pointer
   827 2AEC B5 94			lda :STACKORIGIN,x
   828 2AEE 8D EB 58			sta ATTRIBUTES
   829 2AF1 CA				dex
   830 2AF2 30 0B			jmi @main
   831
   832 				; ------------------------------------------------------------
   833
   834 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   835 				; as Pointer
   836 2AF4 B5 94			lda :STACKORIGIN,x
   837 2AF6 8D EC 58			sta SEARCHRESULT
   838 2AF9 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
   839 2AFB 8D ED 58			sta SEARCHRESULT+1
   840 2AFE CA				dex
   841 2AFF			@main
   842
   843 				; AssignFile
   844
   845 				; optimize OK (SYSUTILS), line = 178
   846
   847 2AFF AC AD 2B 84 82 AC + 	mwy F :bp2
   848 2B09 A0 00			ldy #s@file.pfname
   849 2B0B AD AB 2B			lda FILEMASK
   850 2B0E 91 82			sta (:bp2),y
   851 2B10 C8				iny
   852 2B11 AD AC 2B			lda FILEMASK+1
   853 2B14 91 82			sta (:bp2),y
   854 2B16 A0 05			ldy #s@file.status
   855 2B18 A9 00			lda #$00
   856 2B1A 91 82			sta (:bp2),y
   857
   858 				; ---------------------  ASM Block 068  ---------------------
   859
   860 2B1C 8A 48			txa:pha
   861
   862 2B1E 18				clc			; iocheck off
   863 					@openfile f #6
   863 				 LDY F+1\ LDA F\ LDX# 6\ JSR @OPENFILE
   863 2B1F AC AE 2B		 LDY F+1
   863 2B22 AD AD 2B		 LDA F
   863 2B25 A2 06		 LDX# 6
   863 2B27 20 DA 24		 JSR @OPENFILE
   864 2B2A			loop
   865 2B2A AD EC 58 85 82 AD + 	mwa SearchResult :bp2
   866
   867 2B34 A0 01			ldy #SearchResult.ExcludeAttr-DATAORIGIN
   868 2B36 AD EB 58			lda Attributes
   869 2B39 91 82			sta (:bp2),y
   870
   871 2B3B A0 23			ldy #SearchResult.FindHandle-DATAORIGIN
   872
   873 2B3D AD AD 2B			lda f
   874 2B40 91 82			sta (:bp2),y
   875 2B42 C8				iny
   876 2B43 AD AE 2B			lda f+1
   877 2B46 91 82			sta (:bp2),y
   878
   879 2B48 AD AD 2B 85 82 AD + 	mwa f :bp2
   880
   881 2B52 A0 02			ldy #s@file.record
   882 2B54 A9 01 91 82			mva <1 (:bp2),y
   883 2B58 C8				iny
   884 2B59 A9 00 91 82			mva >1 (:bp2),y
   885
   886 2B5D A0 08			ldy #s@file.nrecord
   887 2B5F A9 40 91 82			mva <64 (:bp2),y
   888 2B63 C8				iny
   889 2B64 A9 00 91 82			mva >64 (:bp2),y
   890
   891 2B68 A0 06			ldy #s@file.buffer
   892 2B6A A9 00 91 82			mva <@buf (:bp2),y
   893 2B6E C8				iny
   894 2B6F A9 04 91 82			mva >@buf (:bp2),y
   895
   896 					@ReadDirFileName f
   896 				 LDY F+1\ LDA F\ JSR @READDIRFILENAME
   896 2B73 AC AE 2B		 LDY F+1
   896 2B76 AD AD 2B		 LDA F
   896 2B79 20 5F 26		 JSR @READDIRFILENAME
   897 2B7C 8D EE 58			sta Result
   898
   899 2B7F 18 AD EC 58 69 02 + 	adw SearchResult #SearchResult.Name-DATAORIGIN :bp2
   900
   901 2B8E 20 6F 26			jsr @DirFileName
   902
   903 2B91 AD EC 58 85 82 AD + 	mwa SearchResult :bp2
   904
   905 2B9B A0 00			ldy #SearchResult.Attr-DATAORIGIN
   906 2B9D 8A				txa
   907 2B9E 91 82			sta (:bp2),y
   908
   909 2BA0 2D EB 58			and Attributes
   910 2BA3 0D EE 58			ora Result
   911 2BA6 F0 82			beq loop
   912
   913 2BA8 68 AA			pla:tax
   914
   915 2BAA			@exit
   916
   917 				; ------------------------------------------------------------
   918
   919 = 58CA			adr.FILEMASK	= [DATAORIGIN+$003A] .array [33]
   920 2BAA			.var FILEMASK	= adr.FILEMASK .word
   921 = 58EB			ATTRIBUTES	= DATAORIGIN+$005B
   922 = 58EC			SEARCHRESULT	= DATAORIGIN+$005C
   923 = 5890			SEARCHRESULT.ATTR	= DATAORIGIN+$0000
   924 = 5891			SEARCHRESULT.EXCLUDEATTR	= DATAORIGIN+$0001
   925 = 5892			SEARCHRESULT.NAME	= DATAORIGIN+$0002
   926 = 58B3			SEARCHRESULT.FINDHANDLE	= DATAORIGIN+$0023
   927 = 58EE			RESULT	= DATAORIGIN+$005E
   928 2BAA			.var F	= DATAORIGIN+$005F .word
   929
   930 = 2BAB			@VarData	= FILEMASK
   931 = 0025			@VarDataSize	= 37
   932
   933 2BAA 60				rts						; ret
   934 = 2BAB CA 58		FILEMASK
   934 = 2BAD EF 58		F
   934 				.endl
   935
   936 2BAF			.local	FINDNEXT					; FUNCTION | ASSEMBLER
   937
   938 				; ---------------------  ASM Block 069  ---------------------
   939
   940 2BAF 8A 48			txa:pha
   941
   942 2BB1 AD FB 58 85 82 AD + loop	mwa f :bp2
   943 2BBB A0 23			ldy #f.FindHandle-DATAORIGIN
   944 2BBD B1 82 85 88			mva (:bp2),y edx
   945 2BC1 C8				iny
   946 2BC2 B1 82 85 89			mva (:bp2),y edx+1
   947
   948 					@ReadDirFileName edx
   948 				 LDY EDX+1\ LDA EDX\ JSR @READDIRFILENAME
   948 2BC6 A4 89		 LDY EDX+1
   948 2BC8 A5 88		 LDA EDX
   948 2BCA 20 5F 26		 JSR @READDIRFILENAME
   949 2BCD 8D FD 58			sta Result
   950
   951 2BD0 18 AD FB 58 69 02 + 	adw f #f.Name-DATAORIGIN :bp2
   952
   953 2BDF 20 6F 26			jsr @DirFileName
   954
   955 2BE2 AD FB 58 85 82 AD + 	mwa f :bp2
   956
   957 2BEC A0 00			ldy #f.Attr-DATAORIGIN
   958 2BEE 8A				txa
   959 2BEF 91 82			sta (:bp2),y
   960
   961 2BF1 A0 01			ldy #f.ExcludeAttr-DATAORIGIN
   962 2BF3 31 82			and (:bp2),y
   963 2BF5 0D FD 58			ora Result
   964 2BF8 F0 B7			beq loop
   965
   966 2BFA 68 AA			pla:tax
   967
   968 2BFC			@exit
   969
   970 				; ------------------------------------------------------------
   971
   972 = 58FB			F	= DATAORIGIN+$006B
   973 = 5890			F.ATTR	= DATAORIGIN+$0000
   974 = 5891			F.EXCLUDEATTR	= DATAORIGIN+$0001
   975 = 5892			F.NAME	= DATAORIGIN+$0002
   976 = 58B3			F.FINDHANDLE	= DATAORIGIN+$0023
   977 = 58FD			RESULT	= DATAORIGIN+$006D
   978
   979 = 58FB			@VarData	= F
   980 = 0003			@VarDataSize	= 3
   981
   982 2BFC 60				rts						; ret
   983 				.endl
   984
   985 2BFD			.local	FINDCLOSE					; PROCEDURE | ASSEMBLER
   986
   987 				; ---------------------  ASM Block 070  ---------------------
   988
   989 2BFD 8A 48			txa:pha
   990
   991 2BFF AD FE 58 85 82 AD + 	mwa f :bp2
   992 2C09 A0 23			ldy #f.FindHandle-DATAORIGIN
   993 2C0B B1 82 85 88			mva (:bp2),y edx
   994 2C0F C8				iny
   995 2C10 B1 82 85 89			mva (:bp2),y edx+1
   996
   997 2C14 18				clc			; iocheck off
   998 					@closefile edx
   998 				 LDY EDX+1\ LDA EDX\ JSR @CLOSEFILE
   998 2C15 A4 89		 LDY EDX+1
   998 2C17 A5 88		 LDA EDX
   998 2C19 20 70 25		 JSR @CLOSEFILE
   999
  1000 2C1C 68 AA			pla:tax
  1001
  1002
  1003 				; ------------------------------------------------------------
  1004
  1005 = 58FE			F	= DATAORIGIN+$006E
  1006 = 5890			F.ATTR	= DATAORIGIN+$0000
  1007 = 5891			F.EXCLUDEATTR	= DATAORIGIN+$0001
  1008 = 5892			F.NAME	= DATAORIGIN+$0002
  1009 = 58B3			F.FINDHANDLE	= DATAORIGIN+$0023
  1010
  1011 = 58FE			@VarData	= F
  1012 = 0002			@VarDataSize	= 2
  1013
  1014 2C1E			@exit
  1015 					.ifdef @new
  1016 					lda <@VarData
  1017 					sta :ztmp
  1018 					lda >@VarData
  1019 					ldy #@VarDataSize-1
  1020 					jmp @FreeMem
  1021 					els
  1022 2C1E 60				rts						; ret
  1023 					eif
  1024 				.endl
  1025
  1026 2C1F			.local	FILEEXISTS					; FUNCTION
  1027
  1028 				; optimize OK (SYSUTILS), line = 433
  1029
  1030 2C1F AD 95 58			lda SYSTEM.FILEMODE
  1031 2C22 8D 0F 59			sta FM
  1032 				; AssignFile
  1033
  1034 				; optimize OK (SYSUTILS), line = 436
  1035
  1036 2C25 AC 95 2C 84 82 AC + 	mwy F :bp2
  1037 2C2F A0 00			ldy #s@file.pfname
  1038 2C31 AD 00 59			lda NAME
  1039 2C34 91 82			sta (:bp2),y
  1040 2C36 C8				iny
  1041 2C37 AD 01 59			lda NAME+1
  1042 2C3A 91 82			sta (:bp2),y
  1043 2C3C A0 05			ldy #s@file.status
  1044 2C3E A9 00			lda #$00
  1045 2C40 91 82			sta (:bp2),y
  1046
  1047 				; optimize OK (SYSUTILS), line = 437
  1048
  1049 2C42 A9 04			lda #$04
  1050 2C44 8D 95 58			sta SYSTEM.FILEMODE
  1051 				; Reset
  1052
  1053 				; optimize OK (SYSUTILS), line = 438
  1054
  1055 2C47 A0 02			ldy #s@file.record
  1056 2C49 A9 80			lda #$80
  1057 2C4B 91 82			sta (:bp2),y
  1058 2C4D C8				iny
  1059 2C4E A9 00			lda #$00
  1060 2C50 91 82			sta (:bp2),y
  1061
  1062 2C52 8A 48			txa:pha
  1063 2C54 18				clc
  1064 					@openfile F, MAIN.SYSTEM.FileMode
  1064 				 LDY F+1\ LDA F\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  1064 2C55 AC 96 2C		 LDY F+1
  1064 2C58 AD 95 2C		 LDA F
  1064 2C5B AE 95 58		 LDX MAIN.SYSTEM.FILEMODE
  1064 2C5E 20 DA 24		 JSR @OPENFILE
  1065 2C61 68 AA			pla:tax
  1066
  1067 				; optimize OK (SYSUTILS), line = 439
  1068
  1069 2C63 AD 97 58			lda SYSTEM.IORESULT
  1070 2C66 30 13			jmi l_04DDs
  1071 2C68 AC 01 59			ldy NAME+1
  1072 2C6B 84 81			sty :bp+1
  1073 2C6D AC 00 59			ldy NAME
  1074 2C70 B1 80			lda (:bp),y
  1075 2C72 F0 07			jeq l_04DDs
  1076 2C74 A9 01 8D 02 59 D0 + 	mva:sne #true RESULT
  1077 2C7B			l_04DDs
  1078 2C7B A9 00 8D 02 59		mva #false RESULT
  1079 				; CloseFile
  1080
  1081 2C80 8A 48			txa:pha
  1082 2C82 18				clc
  1083 					@closefile F
  1083 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  1083 2C83 AC 96 2C		 LDY F+1
  1083 2C86 AD 95 2C		 LDA F
  1083 2C89 20 70 25		 JSR @CLOSEFILE
  1084 2C8C 68 AA			pla:tax
  1085
  1086 				; optimize OK (SYSUTILS), line = 443
  1087
  1088 2C8E AD 0F 59			lda FM
  1089 2C91 8D 95 58			sta SYSTEM.FILEMODE
  1090 2C94			@exit
  1091
  1092 				; ------------------------------------------------------------
  1093
  1094 = 5900			NAME	= DATAORIGIN+$0070
  1095 = 5902			RESULT	= DATAORIGIN+$0072
  1096 2C94			.var F	= DATAORIGIN+$0073 .word
  1097 = 590F			FM	= DATAORIGIN+$007F
  1098
  1099 = 5900			@VarData	= NAME
  1100 = 0004			@VarDataSize	= 4
  1101
  1102 2C94 60				rts						; ret
  1103 = 2C95 03 59		F
  1103 				.endl
  1104
  1105 2C97			.local	ANSIUPPERCASE					; FUNCTION | REGISTER
  1106
  1107 				; optimize OK (SYSUTILS), line = 728
  1108
  1109 2C97 A5 88			lda A
  1110 2C99 85 88			sta @move.src
  1111 2C9B A5 89			lda A+1
  1112 2C9D 85 89			sta @move.src+1
  1113 2C9F AC E2 2C 84 82 AC + 	mwy RESULT :bp2
  1114 2CA9 A0 00			ldy #$00
  1115 2CAB B1 88 91 82 C8 D0 + 	mva:rne (@move.src),y (:bp2),y+
  1116
  1117 				; optimize OK (SYSUTILS), line = 730
  1118
  1119 2CB2 A4 89			ldy A+1
  1120 2CB4 84 81			sty :bp+1
  1121 2CB6 A4 88			ldy A
  1122 2CB8 B1 80			lda (:bp),y
  1123 2CBA 8D 10 5A			sta J
  1124
  1125 2CBD			l_0506
  1126 				; --- ForToDoCondition
  1127 2CBD AD 10 5A			lda J
  1128 2CC0 C9 01			cmp #$01
  1129 2CC2 90 1D			jcc l_0514
  1130 2CC4 E8				inx
  1131 2CC5 AD 10 5A 95 94		mva J :STACKORIGIN,x
  1132 2CCA AC 10 5A			ldy J
  1133 2CCD B9 10 59			lda adr.RESULT,y
  1134 2CD0 20 1E 2A			jsr SYSTEM.UPCASE
  1135 2CD3 B4 94			ldy :STACKORIGIN,x
  1136 2CD5 AD BE 58			lda SYSTEM.UPCASE.RESULT
  1137 2CD8 99 10 59			sta adr.RESULT,y
  1138 2CDB CA				dex
  1139
  1140 				; --- ForToDoEpilog
  1141 2CDC CE 10 5A			dec J
  1142 2CDF D0 DC			jne l_0506
  1143 2CE1			l_0514
  1144 2CE1			@exit
  1145
  1146 				; ------------------------------------------------------------
  1147
  1148 = 0088			A	= :EDX
  1149 = 5910			adr.RESULT	= [DATAORIGIN+$0080] .array [256]
  1150 2CE1			.var RESULT	= adr.RESULT .word
  1151 = 5A10			J	= DATAORIGIN+$0180
  1152 = 0001			@FORTMP_0503	= $01
  1153
  1154 = 2CE2			@VarData	= RESULT
  1155 = 0101			@VarDataSize	= 257
  1156
  1157 2CE1 60				rts						; ret
  1158 = 2CE2 10 59		RESULT
  1158 				.endl
  1159
  1160 				; ------------------------------------------------------------
  1161
  1162 = 0001			FAREADONLY	= $01
  1163 = 0002			FAHIDDEN	= $02
  1164 = 0004			FASYSFILE	= $04
  1165 = 0008			FAVOLUMEID	= $08
  1166 = 0010			FADIRECTORY	= $10
  1167 = 0020			FAARCHIVE	= $20
  1168 = 003F			FAANYFILE	= $3F
  1169
  1170 				.endl							; UNIT SYSUTILS
  1171
  1172 				; ------------------------------------------------------------
  1173
  1174 2CE4			.local	B_CRT						; UNIT
  1175
  1176 2CE4			.local	ATASCII2ANTIC_0535				; FUNCTION | OVERLOAD
  1177 2CE4 8D 1A 5A			sta C
  1178
  1179 				; ---------------------  ASM Block 081  ---------------------
  1180
  1181
  1182 2CE7 AD 1A 5A		        lda c
  1183 2CEA 0A			        asl
  1184 2CEB 08			        php
  1185 2CEC C9 C0		        cmp #2*$60
  1186 2CEE B0 06		        bcs @+
  1187 2CF0 E9 3F		        sbc #2*$20-1
  1188 2CF2 B0 02		        bcs @+
  1189 2CF4 69 C0		        adc #2*$60
  1190 2CF6 28			@       plp
  1191 2CF7 6A			        ror
  1192 2CF8 8D 1B 5A		        sta result;
  1193 				    
  1194 2CFB			@exit
  1195
  1196 				; ------------------------------------------------------------
  1197
  1198 = 5A1A			C	= DATAORIGIN+$018A
  1199 = 5A1B			RESULT	= DATAORIGIN+$018B
  1200
  1201 = 5A1A			@VarData	= C
  1202 = 0002			@VarDataSize	= 2
  1203
  1204 2CFB 60				rts						; ret
  1205 				.endl
  1206
  1207 2CFC			.local	ANTIC2ATASCII_0539				; FUNCTION | OVERLOAD
  1208 2CFC 8D 1C 5A			sta C
  1209
  1210 				; ---------------------  ASM Block 082  ---------------------
  1211
  1212
  1213 2CFF AD 1C 5A		        lda c
  1214 2D02 0A			        asl
  1215 2D03 08			        php
  1216 2D04 C9 C0		        cmp #2*$60
  1217 2D06 B0 06		        bcs @+
  1218 2D08 E9 7F		        sbc #2*$40-1
  1219 2D0A B0 02		        bcs @+
  1220 2D0C 69 C0		        adc #2*$60
  1221 2D0E 28			@       plp
  1222 2D0F 6A			        ror
  1223 2D10 8D 1D 5A		        sta result;
  1224 				    
  1225 2D13			@exit
  1226
  1227 				; ------------------------------------------------------------
  1228
  1229 = 5A1C			C	= DATAORIGIN+$018C
  1230 = 5A1D			RESULT	= DATAORIGIN+$018D
  1231
  1232 = 5A1C			@VarData	= C
  1233 = 0002			@VarDataSize	= 2
  1234
  1235 2D13 60				rts						; ret
  1236 				.endl
  1237
  1238 2D14			.local	ATASCII2ANTIC_053D				; FUNCTION | OVERLOAD
  1239
  1240 				; ------------------------------------------------------------
  1241
  1242 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1243 				; as Pointer
  1244 2D14 B5 94			lda :STACKORIGIN,x
  1245 2D16 85 82			sta :bp2
  1246 2D18 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1247 2D1A 85 83			sta :bp2+1
  1248 2D1C A0 00			ldy #$00
  1249 2D1E B1 82 99 1E 5A C8 + 	mva:rne (:bp2),y adr.S,y+
  1250 2D26 A9 1E 8D 67 2D A9 + 	mwa #adr.S S
  1251 2D30 CA				dex
  1252 2D31			@main
  1253
  1254 				; optimize OK (B_CRT), line = 468
  1255
  1256 2D31 AD 1E 5A			lda adr.S+$00
  1257 2D34 8D 1E 5B			sta adr.RESULT+$00
  1258
  1259 				; optimize OK (B_CRT), line = 469
  1260
  1261 2D37 A9 01			lda #$01
  1262 2D39 8D 1E 5C			sta I
  1263 2D3C AD 1E 5A 8D 43 2D		mva adr.S+$00 :@FORTMP?0554_0
  1264
  1265 2D42			l_0557
  1266 				; --- ForToDoCondition
  1267 = 2D43			.def :@FORTMP?0554_0 = *+1
  1268 2D42 A9 00			lda #$00
  1269 2D44 CD 1E 5C			cmp I
  1270 2D47 90 1D			jcc l_0565
  1271
  1272 				; optimize FAIL (1, B_CRT), line = 470
  1273
  1274 2D49 E8				inx
  1275 2D4A AD 1E 5C 95 94		mva I :STACKORIGIN,x
  1276 2D4F AC 1E 5C			ldy I
  1277 2D52 B9 1E 5A			lda adr.S,y
  1278 2D55 20 E4 2C			jsr ATASCII2ANTIC_0535
  1279 2D58 B4 94			ldy :STACKORIGIN,x
  1280 2D5A AD 1B 5A			lda ATASCII2ANTIC_0535.RESULT
  1281 2D5D 99 1E 5B			sta adr.RESULT,y
  1282 2D60 CA				dex
  1283
  1284 				; --- ForToDoEpilog
  1285 2D61 EE 1E 5C			inc I
  1286 2D64 D0 DC			jne l_0557
  1287 2D66			l_0565
  1288 2D66			@exit
  1289
  1290 				; ------------------------------------------------------------
  1291
  1292 = 5A1E			adr.S	= [DATAORIGIN+$018E] .array [256]
  1293 2D66			.var S	= adr.S .word
  1294 = 5B1E			adr.RESULT	= [DATAORIGIN+$028E] .array [256]
  1295 2D66			.var RESULT	= adr.RESULT .word
  1296 = 5C1E			I	= DATAORIGIN+$038E
  1297 = 0000			@FORTMP_0554	= $00
  1298
  1299 = 2D67			@VarData	= S
  1300 = 0201			@VarDataSize	= 513
  1301
  1302 2D66 60				rts						; ret
  1303 = 2D67 1E 5A		S
  1303 = 2D69 1E 5B		RESULT
  1303 				.endl
  1304
  1305 2D6B			.local	ANTIC2ATASCII_0578				; FUNCTION | OVERLOAD
  1306
  1307 				; ------------------------------------------------------------
  1308
  1309 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1310 				; as Pointer
  1311 2D6B B5 94			lda :STACKORIGIN,x
  1312 2D6D 85 82			sta :bp2
  1313 2D6F B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1314 2D71 85 83			sta :bp2+1
  1315 2D73 A0 00			ldy #$00
  1316 2D75 B1 82 99 20 5C C8 + 	mva:rne (:bp2),y adr.S,y+
  1317 2D7D A9 20 8D BE 2D A9 + 	mwa #adr.S S
  1318 2D87 CA				dex
  1319 2D88			@main
  1320
  1321 				; optimize OK (B_CRT), line = 476
  1322
  1323 2D88 AD 20 5C			lda adr.S+$00
  1324 2D8B 8D 20 5D			sta adr.RESULT+$00
  1325
  1326 				; optimize OK (B_CRT), line = 477
  1327
  1328 2D8E A9 01			lda #$01
  1329 2D90 8D 20 5E			sta I
  1330 2D93 AD 20 5C 8D 9A 2D		mva adr.S+$00 :@FORTMP?058F_0
  1331
  1332 2D99			l_0592
  1333 				; --- ForToDoCondition
  1334 = 2D9A			.def :@FORTMP?058F_0 = *+1
  1335 2D99 A9 00			lda #$00
  1336 2D9B CD 20 5E			cmp I
  1337 2D9E 90 1D			jcc l_05A0
  1338
  1339 				; optimize FAIL (1, B_CRT), line = 478
  1340
  1341 2DA0 E8				inx
  1342 2DA1 AD 20 5E 95 94		mva I :STACKORIGIN,x
  1343 2DA6 AC 20 5E			ldy I
  1344 2DA9 B9 20 5C			lda adr.S,y
  1345 2DAC 20 FC 2C			jsr ANTIC2ATASCII_0539
  1346 2DAF B4 94			ldy :STACKORIGIN,x
  1347 2DB1 AD 1D 5A			lda ANTIC2ATASCII_0539.RESULT
  1348 2DB4 99 20 5D			sta adr.RESULT,y
  1349 2DB7 CA				dex
  1350
  1351 				; --- ForToDoEpilog
  1352 2DB8 EE 20 5E			inc I
  1353 2DBB D0 DC			jne l_0592
  1354 2DBD			l_05A0
  1355 2DBD			@exit
  1356
  1357 				; ------------------------------------------------------------
  1358
  1359 = 5C20			adr.S	= [DATAORIGIN+$0390] .array [256]
  1360 2DBD			.var S	= adr.S .word
  1361 = 5D20			adr.RESULT	= [DATAORIGIN+$0490] .array [256]
  1362 2DBD			.var RESULT	= adr.RESULT .word
  1363 = 5E20			I	= DATAORIGIN+$0590
  1364 = 0000			@FORTMP_058F	= $00
  1365
  1366 = 2DBE			@VarData	= S
  1367 = 0201			@VarDataSize	= 513
  1368
  1369 2DBD 60				rts						; ret
  1370 = 2DBE 20 5C		S
  1370 = 2DC0 20 5D		RESULT
  1370 				.endl
  1371
  1372 2DC2			.local	CRT_INIT_05B3					; PROCEDURE | OVERLOAD
  1373
  1374 				; optimize OK (B_CRT), line = 483
  1375
  1376 2DC2 AD 22 5E			lda VRAM_ADDRESS
  1377 2DC5 8D 11 5A			sta CRT_VRAM
  1378 2DC8 AD 23 5E			lda VRAM_ADDRESS+1
  1379 2DCB 8D 12 5A			sta CRT_VRAM+1
  1380
  1381 				; optimize OK (B_CRT), line = 484
  1382
  1383 2DCE AD 24 5E			lda WIDTH
  1384 2DD1 8D 15 5A			sta CRT_SCREENWIDTH
  1385
  1386 				; optimize OK (B_CRT), line = 485
  1387
  1388 2DD4 AD 25 5E			lda HEIGHT
  1389 2DD7 8D 16 5A			sta CRT_SCREENHEIGHT
  1390
  1391 				; optimize OK (B_CRT), line = 486
  1392
  1393 2DDA 85 8C			sta :ecx
  1394 2DDC AD 24 5E			lda WIDTH
  1395 2DDF 85 84			sta :eax
  1396 					.ifdef fmulinit
  1397 					fmulu_8
  1398 					els
  1399 2DE1 20 21 28			imulCL
  1400 					eif
  1401 2DE4 8D 14 5A			sta CRT_SIZE+1
  1402 2DE7 A5 84			lda :eax
  1403 2DE9 8D 13 5A			sta CRT_SIZE
  1404
  1405 				; optimize OK (B_CRT), line = 487
  1406
  1407 2DEC AD 11 5A			lda CRT_VRAM
  1408 2DEF 8D 17 5A			sta CRT_CURSOR
  1409 2DF2 AD 12 5A			lda CRT_VRAM+1
  1410 2DF5 8D 18 5A			sta CRT_CURSOR+1
  1411
  1412 				; optimize OK (B_CRT), line = 488
  1413
  1414 2DF8 A9 00			lda #$00
  1415 2DFA 8D 19 5A			sta CRT_LEFTMARGIN
  1416
  1417 				; ------------------------------------------------------------
  1418
  1419 = 5E22			VRAM_ADDRESS	= DATAORIGIN+$0592
  1420 = 5E24			WIDTH	= DATAORIGIN+$0594
  1421 = 5E25			HEIGHT	= DATAORIGIN+$0595
  1422
  1423 = 5E22			@VarData	= VRAM_ADDRESS
  1424 = 0004			@VarDataSize	= 4
  1425
  1426 2DFD			@exit
  1427 					.ifdef @new
  1428 					lda <@VarData
  1429 					sta :ztmp
  1430 					lda >@VarData
  1431 					ldy #@VarDataSize-1
  1432 					jmp @FreeMem
  1433 					els
  1434 2DFD 60				rts						; ret
  1435 					eif
  1436 				.endl
  1437
  1438 2DFE			.local	CRT_GOTOXY					; PROCEDURE
  1439
  1440 				; optimize OK (B_CRT), line = 516
  1441
  1442 2DFE AD 15 5A			lda CRT_SCREENWIDTH
  1443 2E01 85 8C			sta :ecx
  1444 2E03 AD 27 5E			lda Y
  1445 2E06 85 84			sta :eax
  1446 					.ifdef fmulinit
  1447 					fmulu_8
  1448 					els
  1449 2E08 20 21 28			imulCL
  1450 					eif
  1451 2E0B A5 84			lda :eax
  1452 2E0D 18 6D 26 5E			add X
  1453 2E11 85 9D			sta :STACKORIGIN+9
  1454 2E13 A5 85			lda :eax+1
  1455 2E15 69 00			adc #$00
  1456 2E17 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  1457 2E19 A5 9D			lda :STACKORIGIN+9
  1458 2E1B 18 6D 11 5A			add CRT_VRAM
  1459 2E1F 8D 17 5A			sta CRT_CURSOR
  1460 2E22 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  1461 2E24 6D 12 5A			adc CRT_VRAM+1
  1462 2E27 8D 18 5A			sta CRT_CURSOR+1
  1463
  1464 				; ------------------------------------------------------------
  1465
  1466 = 5E26			X	= DATAORIGIN+$0596
  1467 = 5E27			Y	= DATAORIGIN+$0597
  1468
  1469 = 5E26			@VarData	= X
  1470 = 0002			@VarDataSize	= 2
  1471
  1472 2E2A			@exit
  1473 					.ifdef @new
  1474 					lda <@VarData
  1475 					sta :ztmp
  1476 					lda >@VarData
  1477 					ldy #@VarDataSize-1
  1478 					jmp @FreeMem
  1479 					els
  1480 2E2A 60				rts						; ret
  1481 					eif
  1482 				.endl
  1483
  1484 2E2B			.local	CRT_WRITE_05F8					; PROCEDURE | OVERLOAD
  1485
  1486 				; ------------------------------------------------------------
  1487
  1488 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1489 				; as Pointer
  1490 2E2B B5 94			lda :STACKORIGIN,x
  1491 2E2D 85 82			sta :bp2
  1492 2E2F B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  1493 2E31 85 83			sta :bp2+1
  1494 2E33 A0 00			ldy #$00
  1495 2E35 B1 82 99 28 5E C8 + 	mva:rne (:bp2),y adr.S,y+
  1496 2E3D A9 28 8D 76 2E A9 + 	mwa #adr.S S
  1497 2E47 CA				dex
  1498 2E48			@main
  1499
  1500 				; optimize OK (B_CRT), line = 531
  1501
  1502 2E48 AD 28 5E			lda adr.S+$00
  1503 2E4B 85 84			sta SYSTEM.MOVE_045A.COUNT
  1504 2E4D A9 29			lda <adr.S+$01
  1505 2E4F 85 88			sta SYSTEM.MOVE_045A.SOURCE
  1506 2E51 A9 5E			lda >adr.S+$01
  1507 2E53 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  1508 2E55 AD 17 5A			lda CRT_CURSOR
  1509 2E58 85 8C			sta SYSTEM.MOVE_045A.DEST
  1510 2E5A AD 18 5A			lda CRT_CURSOR+1
  1511 2E5D 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  1512 2E5F A9 00			lda #$00
  1513 2E61 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  1514 2E63				.local +MAIN.SYSTEM.MOVE_045A
  1515 2E63				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 2E63 20 74 27			jsr @move
Source: artur.a65
  1516 					.endl
  1517
  1518 				; optimize OK (B_CRT), line = 532
  1519
  1520 2E66 AD 17 5A			lda CRT_CURSOR
  1521 2E69 18 6D 28 5E			add adr.S+$00
  1522 2E6D 8D 17 5A			sta CRT_CURSOR
  1523 2E70 90 03			scc
  1524 2E72 EE 18 5A			inc CRT_CURSOR+1
  1525
  1526 				; ------------------------------------------------------------
  1527
  1528 = 5E28			adr.S	= [DATAORIGIN+$0598] .array [256]
  1529 2E75			.var S	= adr.S .word
  1530
  1531 = 2E76			@VarData	= S
  1532 = 0100			@VarDataSize	= 256
  1533
  1534 2E75			@exit
  1535 					.ifdef @new
  1536 					lda <@VarData
  1537 					sta :ztmp
  1538 					lda >@VarData
  1539 					ldy #@VarDataSize-1
  1540 					jmp @FreeMem
  1541 					els
  1542 2E75 60				rts						; ret
  1543 					eif
  1544 = 2E76 28 5E		S
  1544 				.endl
  1545
  1546 2E78			.local	CRT_PUT_060B					; PROCEDURE | OVERLOAD
  1547 2E78 8D 28 5F			sta B
  1548
  1549 				; optimize OK (B_CRT), line = 574
  1550
  1551 2E7B AC 18 5A			ldy CRT_CURSOR+1
  1552 2E7E 84 81			sty :bp+1
  1553 2E80 AC 17 5A			ldy CRT_CURSOR
  1554 2E83 AD 28 5F			lda B
  1555 2E86 91 80			sta (:bp),y
  1556
  1557 				; optimize FAIL (0, B_CRT), line = 575
  1558
  1559 2E88 EE 17 5A			inc CRT_CURSOR
  1560 2E8B D0 03			sne
  1561 2E8D EE 18 5A			inc CRT_CURSOR+1
  1562
  1563 				; ------------------------------------------------------------
  1564
  1565 = 5F28			B	= DATAORIGIN+$0698
  1566
  1567 = 5F28			@VarData	= B
  1568 = 0001			@VarDataSize	= 1
  1569
  1570 2E90			@exit
  1571 					.ifdef @new
  1572 					lda <@VarData
  1573 					sta :ztmp
  1574 					lda >@VarData
  1575 					ldy #@VarDataSize-1
  1576 					jmp @FreeMem
  1577 					els
  1578 2E90 60				rts						; ret
  1579 					eif
  1580 				.endl
  1581
  1582 2E91			.local	CRT_KEYPRESSED					; FUNCTION
  1583
  1584 				; optimize OK (B_CRT), line = 592
  1585
  1586 2E91 A9 00			lda #$00
  1587 2E93 8D 29 5F			sta RESULT
  1588
  1589 				; optimize OK (B_CRT), line = 593
  1590
  1591 2E96 AD 0F D2			lda ATARI.SKSTAT
  1592 2E99 29 04			and #$04
  1593 2E9B D0 05			jne l_0636
  1594 2E9D A9 01			lda #$01
  1595 2E9F 8D 29 5F			sta RESULT
  1596 2EA2			l_0636
  1597 2EA2			@exit
  1598
  1599 				; ------------------------------------------------------------
  1600
  1601 = 5F29			RESULT	= DATAORIGIN+$0699
  1602
  1603 = 5F29			@VarData	= RESULT
  1604 = 0001			@VarDataSize	= 1
  1605
  1606 2EA2 60				rts						; ret
  1607 				.endl
  1608
  1609 2EA3			.local	CRT_READKEY					; FUNCTION
  1610
  1611 				; optimize OK (B_CRT), line = 598
  1612
  1613 2EA3 AD 09 D2			lda KBCODE
  1614 2EA6 8D 2A 5F			sta RESULT
  1615
  1616 				; --- RepeatUntilProlog
  1617 2EA9			l_0648
  1618
  1619 				; optimize FAIL ('CRT_KEYPRESSED', B_CRT), line = 599
  1620
  1621 2EA9 20 91 2E			jsr CRT_KEYPRESSED
  1622 2EAC E8				inx
  1623 2EAD AD 29 5F 95 94		mva CRT_KEYPRESSED.RESULT :STACKORIGIN,x
  1624 2EB2 20 42 27			jsr notBOOLEAN
  1625 2EB5 CA				dex
  1626 2EB6 A0 01			ldy #1
  1627 2EB8 AD 2A 5F			lda RESULT
  1628 2EBB CD 09 D2			cmp KBCODE
  1629 2EBE D0 01			bne @+
  1630 2EC0 88				dey
  1631 				@
  1632 2EC1 98				tya
  1633 2EC2 15 95			ora :STACKORIGIN+1,x
  1634 2EC4 F0 E3			jeq l_0648
  1635
  1636 				; --- RepeatUntilProlog
  1637 2EC6			l_065F
  1638
  1639 				; optimize FAIL ('CRT_KEYPRESSED', B_CRT), line = 600
  1640
  1641 2EC6 20 91 2E			jsr CRT_KEYPRESSED
  1642 2EC9 AD 29 5F			lda CRT_KEYPRESSED.RESULT
  1643 2ECC F0 F8			jeq l_065F
  1644
  1645 				; optimize OK (B_CRT), line = 601
  1646
  1647 2ECE AD 09 D2			lda KBCODE
  1648 2ED1 8D 2A 5F			sta RESULT
  1649 2ED4			@exit
  1650
  1651 				; ------------------------------------------------------------
  1652
  1653 = 5F2A			RESULT	= DATAORIGIN+$069A
  1654
  1655 = 5F2A			@VarData	= RESULT
  1656 = 0001			@VarDataSize	= 1
  1657
  1658 2ED4 60				rts						; ret
  1659 				.endl
  1660
  1661 2ED5			.local	CRT_READCHAR					; FUNCTION
  1662
  1663 				; --- RepeatUntilProlog
  1664 2ED5			l_066F
  1665
  1666 				; optimize FAIL (0, B_CRT), line = 607
  1667
  1668 2ED5 20 A3 2E			jsr CRT_READKEY
  1669 2ED8 AC 2A 5F			ldy CRT_READKEY.RESULT
  1670 2EDB B9 DA 23			lda adr.CRT_KEYCODE,y
  1671 2EDE 8D 2B 5F			sta RESULT
  1672
  1673 				; optimize OK (B_CRT), line = 608
  1674
  1675 2EE1 C9 FF			cmp #$FF
  1676 2EE3 F0 F0			jeq l_066F
  1677 2EE5			@exit
  1678
  1679 				; ------------------------------------------------------------
  1680
  1681 = 5F2B			RESULT	= DATAORIGIN+$069B
  1682
  1683 = 5F2B			@VarData	= RESULT
  1684 = 0001			@VarDataSize	= 1
  1685
  1686 2EE5 60				rts						; ret
  1687 				.endl
  1688
  1689 2EE6			.local	CRT_READCHARI					; FUNCTION
  1690
  1691 				; optimize FAIL ('CRT_READCHAR', B_CRT), line = 613
  1692
  1693 2EE6 20 D5 2E			jsr CRT_READCHAR
  1694 2EE9 AD 2B 5F			lda CRT_READCHAR.RESULT
  1695 2EEC 20 E4 2C			jsr ATASCII2ANTIC_0535
  1696 2EEF AD 1B 5A			lda ATASCII2ANTIC_0535.RESULT
  1697 2EF2 8D 2C 5F			sta RESULT
  1698 2EF5			@exit
  1699
  1700 				; ------------------------------------------------------------
  1701
  1702 = 5F2C			RESULT	= DATAORIGIN+$069C
  1703
  1704 = 5F2C			@VarData	= RESULT
  1705 = 0001			@VarDataSize	= 1
  1706
  1707 2EF5 60				rts						; ret
  1708 				.endl
  1709
  1710 2EF6			.local	CRT_READSTRINGI_068D				; FUNCTION | OVERLOAD
  1711 2EF6 8D 2D 5F			sta LIMIT
  1712
  1713 2EF9 A9 00 8D 2E 5F		mva #$00 adr.RESULT
  1714
  1715 				; --- RepeatUntilProlog
  1716 2EFE			l_0691
  1717
  1718 				; optimize FAIL ('CRT_READCHARI', B_CRT), line = 621
  1719
  1720 2EFE 20 E6 2E			jsr CRT_READCHARI
  1721 2F01 AD 2C 5F			lda CRT_READCHARI.RESULT
  1722 2F04 8D 2E 60			sta A
  1723
  1724 				; optimize OK (B_CRT), line = 622
  1725
  1726 2F07 C9 DB			cmp #$DB
  1727 2F09 D0 03			jne l_06A7
  1728 2F0B 4C 6B 2F			jmp @exit					; exit
  1729 2F0E			l_06A7
  1730
  1731 				; optimize OK (B_CRT), line = 623
  1732
  1733 2F0E AD 2E 60			lda A
  1734 2F11 C9 7E			cmp #$7E
  1735 2F13 D0 22			jne l_06CE
  1736 2F15 AD 2E 5F			lda adr.RESULT+$00
  1737 2F18 F0 1D			jeq l_06CE
  1738
  1739 				; optimize FAIL (0, B_CRT), line = 624
  1740
  1741 2F1A AD 17 5A			lda CRT_CURSOR
  1742 2F1D D0 03			bne @+
  1743 2F1F CE 18 5A			dec CRT_CURSOR+1
  1744 				@
  1745 2F22 CE 17 5A			dec CRT_CURSOR
  1746
  1747 				; optimize OK (B_CRT), line = 625
  1748
  1749 2F25 AC 18 5A			ldy CRT_CURSOR+1
  1750 2F28 84 81			sty :bp+1
  1751 2F2A AC 17 5A			ldy CRT_CURSOR
  1752 2F2D A9 00			lda #$00
  1753 2F2F 91 80			sta (:bp),y
  1754
  1755 				; optimize OK (B_CRT), line = 626
  1756
  1757 2F31 CE 2E 5F			dec adr.RESULT+$00
  1758 2F34 4C 68 2F			jmp l_06E2
  1759 2F37			l_06CE
  1760
  1761 				; optimize OK (B_CRT), line = 628
  1762
  1763 2F37 AD 2E 60			lda A
  1764 2F3A C9 C2			cmp #$C2
  1765 2F3C F0 2A			jeq l_0733
  1766 2F3E C9 C1			cmp #$C1
  1767 2F40 F0 26			jeq l_0733
  1768 2F42 C9 7F			cmp #$7F
  1769 2F44 F0 22			jeq l_0733
  1770 2F46 C9 5B			cmp #$5B
  1771 2F48 F0 1E			jeq l_0733
  1772 2F4A C9 7E			cmp #$7E
  1773 2F4C F0 1A			jeq l_0733
  1774 2F4E AD 2E 5F			lda adr.RESULT+$00
  1775 2F51 CD 2D 5F			cmp LIMIT
  1776 2F54 B0 12			jcs l_0733
  1777
  1778 				; optimize OK (B_CRT), line = 634
  1779
  1780 2F56 AD 2E 60			lda A
  1781 2F59 20 78 2E			jsr CRT_PUT_060B
  1782
  1783 				; optimize OK (B_CRT), line = 635
  1784
  1785 2F5C EE 2E 5F			inc adr.RESULT+$00
  1786
  1787 				; optimize OK (B_CRT), line = 636
  1788
  1789 2F5F AC 2E 5F			ldy adr.RESULT+$00
  1790 2F62 AD 2E 60			lda A
  1791 2F65 99 2E 5F			sta adr.RESULT,y
  1792 2F68			l_0733
  1793 2F68			l_06E2
  1794
  1795 				; optimize OK (B_CRT), line = 638
  1796
  1797 2F68 4C FE 2E			jmp l_0691
  1798 2F6B			@exit
  1799
  1800 				; ------------------------------------------------------------
  1801
  1802 = 5F2D			LIMIT	= DATAORIGIN+$069D
  1803 = 5F2E			adr.RESULT	= [DATAORIGIN+$069E] .array [256]
  1804 2F6B			.var RESULT	= adr.RESULT .word
  1805 = 602E			A	= DATAORIGIN+$079E
  1806
  1807 = 5F2D			@VarData	= LIMIT
  1808 = 0102			@VarDataSize	= 258
  1809
  1810 2F6B 60				rts						; ret
  1811 = 2F6C 2E 5F		RESULT
  1811 				.endl
  1812
  1813 2F6E			.local	CRT_READSTRING_074C				; FUNCTION | OVERLOAD
  1814 2F6E 8D 2F 60			sta LIMIT
  1815
  1816 				; optimize OK (B_CRT), line = 648
  1817
  1818 2F71 20 F6 2E			jsr CRT_READSTRINGI_068D
  1819 2F74 E8				inx
  1820 2F75 AD 6C 2F 95 94		mva CRT_READSTRINGI_068D.RESULT :STACKORIGIN,x
  1821 2F7A AD 6D 2F 95 A4		mva CRT_READSTRINGI_068D.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1822 2F7F 20 6B 2D			jsr ANTIC2ATASCII_0578
  1823 2F82 E8				inx
  1824 2F83 AD C0 2D			lda ANTIC2ATASCII_0578.RESULT
  1825 2F86 85 88			sta @move.src
  1826 2F88 AD C1 2D			lda ANTIC2ATASCII_0578.RESULT+1
  1827 2F8B 85 89			sta @move.src+1
  1828 2F8D AC A2 2F 84 82 AC + 	mwy RESULT :bp2
  1829 2F97 A0 00			ldy #$00
  1830 2F99 B1 88 91 82 C8 D0 + 	mva:rne (@move.src),y (:bp2),y+
  1831 2FA0 CA				dex
  1832 2FA1			@exit
  1833
  1834 				; ------------------------------------------------------------
  1835
  1836 = 602F			LIMIT	= DATAORIGIN+$079F
  1837 = 6030			adr.RESULT	= [DATAORIGIN+$07A0] .array [256]
  1838 2FA1			.var RESULT	= adr.RESULT .word
  1839
  1840 = 602F			@VarData	= LIMIT
  1841 = 0101			@VarDataSize	= 257
  1842
  1843 2FA1 60				rts						; ret
  1844 = 2FA2 30 60		RESULT
  1844 				.endl
  1845
  1846 2FA4			.local	CRT_STARTPRESSED				; FUNCTION
  1847
  1848 				; optimize OK (B_CRT), line = 749
  1849
  1850 2FA4 AD 1F D0			lda CONSOL
  1851 2FA7 A0 01			ldy #1
  1852 2FA9 29 01			and #$01
  1853 2FAB F0 01			beq @+
  1854 2FAD 88				dey
  1855 				@
  1856 2FAE 98				tya
  1857 2FAF 8D 30 61			sta RESULT
  1858 2FB2			@exit
  1859
  1860 				; ------------------------------------------------------------
  1861
  1862 = 6130			RESULT	= DATAORIGIN+$08A0
  1863
  1864 = 6130			@VarData	= RESULT
  1865 = 0001			@VarDataSize	= 1
  1866
  1867 2FB2 60				rts						; ret
  1868 				.endl
  1869
  1870 2FB3			.local	CRT_SELECTPRESSED				; FUNCTION
  1871
  1872 				; optimize OK (B_CRT), line = 754
  1873
  1874 2FB3 AD 1F D0			lda CONSOL
  1875 2FB6 A0 01			ldy #1
  1876 2FB8 29 02			and #$02
  1877 2FBA F0 01			beq @+
  1878 2FBC 88				dey
  1879 				@
  1880 2FBD 98				tya
  1881 2FBE 8D 31 61			sta RESULT
  1882 2FC1			@exit
  1883
  1884 				; ------------------------------------------------------------
  1885
  1886 = 6131			RESULT	= DATAORIGIN+$08A1
  1887
  1888 = 6131			@VarData	= RESULT
  1889 = 0001			@VarDataSize	= 1
  1890
  1891 2FC1 60				rts						; ret
  1892 				.endl
  1893
  1894 2FC2			.local	CRT_OPTIONPRESSED				; FUNCTION
  1895
  1896 				; optimize OK (B_CRT), line = 759
  1897
  1898 2FC2 AD 1F D0			lda CONSOL
  1899 2FC5 A0 01			ldy #1
  1900 2FC7 29 04			and #$04
  1901 2FC9 F0 01			beq @+
  1902 2FCB 88				dey
  1903 				@
  1904 2FCC 98				tya
  1905 2FCD 8D 32 61			sta RESULT
  1906 2FD0			@exit
  1907
  1908 				; ------------------------------------------------------------
  1909
  1910 = 6132			RESULT	= DATAORIGIN+$08A2
  1911
  1912 = 6132			@VarData	= RESULT
  1913 = 0001			@VarDataSize	= 1
  1914
  1915 2FD0 60				rts						; ret
  1916 				.endl
  1917
  1918 2FD1			.local	CRT_HELPPRESSED					; FUNCTION
  1919
  1920 				; optimize OK (B_CRT), line = 764
  1921
  1922 2FD1 AD 0F D2			lda ATARI.SKSTAT
  1923 2FD4 29 04			and #$04
  1924 2FD6 D0 10			jne l_07BAs
  1925 2FD8 AD 09 D2			lda KBCODE
  1926 2FDB 29 3F			and #$3F
  1927 2FDD C9 11			cmp #$11
  1928 2FDF D0 07			jne l_07BAs
  1929 2FE1 A9 01 8D 33 61 D0 + 	mva:sne #true RESULT
  1930 2FE8			l_07BAs
  1931 2FE8 A9 00 8D 33 61		mva #false RESULT
  1932 2FED			@exit
  1933
  1934 				; ------------------------------------------------------------
  1935
  1936 = 6133			RESULT	= DATAORIGIN+$08A3
  1937
  1938 = 6133			@VarData	= RESULT
  1939 = 0001			@VarDataSize	= 1
  1940
  1941 2FED 60				rts						; ret
  1942 				.endl
  1943
  1944 				; ------------------------------------------------------------
  1945
  1946 = 0028			DEFAULT_SCREENWIDTH	= $28
  1947 = 0018			DEFAULT_SCREENHEIGHT	= $18
  1948 = 009B			CHAR_RETURN	= $9B
  1949 = 001B			CHAR_ESCAPE	= $1B
  1950 = 007E			CHAR_BACKSPACE	= $7E
  1951 = 007F			CHAR_TAB	= $7F
  1952 = 0081			CHAR_INVERSE	= $81
  1953 = 0082			CHAR_CAPS	= $82
  1954 = 00DB			ICHAR_RETURN	= $DB
  1955 = 005B			ICHAR_ESCAPE	= $5B
  1956 = 007E			ICHAR_BACKSPACE	= $7E
  1957 = 007F			ICHAR_TAB	= $7F
  1958 = 00C1			ICHAR_INVERSE	= $C1
  1959 = 00C2			ICHAR_CAPS	= $C2
  1960 = 23DA			adr.CRT_KEYCODE	= CODEORIGIN+$03DA
  1961 2FEE			.var CRT_KEYCODE	= adr.CRT_KEYCODE .word
  1962 = 5A11			CRT_VRAM	= DATAORIGIN+$0181
  1963 = 5A13			CRT_SIZE	= DATAORIGIN+$0183
  1964 = 5A15			CRT_SCREENWIDTH	= DATAORIGIN+$0185
  1965 = 5A16			CRT_SCREENHEIGHT	= DATAORIGIN+$0186
  1966 = 5A17			CRT_CURSOR	= DATAORIGIN+$0187
  1967 = 5A19			CRT_LEFTMARGIN	= DATAORIGIN+$0189
  1968 = D209			KBCODE	= $D209
  1969 = D01F			CONSOL	= $D01F
  1970
  1971 = 2FEE DA 23		CRT_KEYCODE
  1971 				.endl							; UNIT B_CRT
  1972
  1973 				; ------------------------------------------------------------
  1974
  1975 2FF0			.local	B_SYSTEM					; UNIT
  1976
  1977 				; ------------------------------------------------------------
  1978
  1979 = 6134			__NMIEN	= DATAORIGIN+$08A4
  1980 = 0080			PORTB_SELFTEST_OFF	= $80
  1981 = 0002			PORTB_BASIC_OFF	= $02
  1982 = 0001			PORTB_SYSTEM_ON	= $01
  1983
  1984 				.endl							; UNIT B_SYSTEM
  1985
  1986 				; ------------------------------------------------------------
  1987
  1988 2FF0			.local	B_PMG						; UNIT
  1989
  1990 2FF0			.local	PMG_INIT_07BE					; PROCEDURE | OVERLOAD
  1991
  1992 				; optimize OK (B_PMG), line = 171
  1993
  1994 2FF0 AD 3A 61			lda BASE
  1995 2FF3 8D 07 D4			sta PMG_PMBASE
  1996
  1997 				; optimize OK (B_PMG), line = 172
  1998
  1999 2FF6 A9 00			lda #$00
  2000 2FF8 8D 36 61			sta PMG_BASE
  2001 2FFB AD 3A 61			lda BASE
  2002 2FFE 8D 37 61			sta PMG_BASE+1
  2003
  2004 				; optimize OK (B_PMG), line = 173
  2005
  2006 3001 AD 3C 61			lda GRACTL
  2007 3004 8D 1D D0			sta PMG_GRACTL
  2008
  2009 				; optimize OK (B_PMG), line = 174
  2010
  2011 3007 AD 2F 02			lda PMG_SDMCTL_S
  2012 300A 29 E0			and #$E0
  2013 300C 0D 3B 61			ora SDMCTL
  2014 300F 8D 3D 61			sta SDMCTL_FLAGS
  2015
  2016 				; optimize OK (B_PMG), line = 175
  2017
  2018 3012 8D 00 D4			sta PMG_SDMCTL
  2019
  2020 				; optimize OK (B_PMG), line = 176
  2021
  2022 3015 8D 2F 02			sta PMG_SDMCTL_S
  2023
  2024 				; optimize OK (B_PMG), line = 177
  2025
  2026 3018 AD 3B 61			lda SDMCTL
  2027 301B 29 10			and #$10
  2028 301D F0 12			jeq l_0809
  2029
  2030 				; optimize OK (B_PMG), line = 178
  2031
  2032 301F A9 01			lda #$01
  2033 3021 8D 35 61			sta PMG_ONELINE
  2034
  2035 				; optimize OK (B_PMG), line = 179
  2036
  2037 3024 A9 00			lda #$00
  2038 3026 8D 38 61			sta PMG_SIZE
  2039 3029 A9 08			lda #$08
  2040 302B 8D 39 61			sta PMG_SIZE+1
  2041 302E 4C 3E 30			jmp l_081B
  2042 3031			l_0809
  2043
  2044 				; optimize OK (B_PMG), line = 181
  2045
  2046 3031 A9 00			lda #$00
  2047 3033 8D 35 61			sta PMG_ONELINE
  2048
  2049 				; optimize OK (B_PMG), line = 182
  2050
  2051 3036 8D 38 61			sta PMG_SIZE
  2052 3039 A9 04			lda #$04
  2053 303B 8D 39 61			sta PMG_SIZE+1
  2054 303E			l_081B
  2055
  2056 				; ------------------------------------------------------------
  2057
  2058 = 613A			BASE	= DATAORIGIN+$08AA
  2059 = 613B			SDMCTL	= DATAORIGIN+$08AB
  2060 = 613C			GRACTL	= DATAORIGIN+$08AC
  2061 = 613D			SDMCTL_FLAGS	= DATAORIGIN+$08AD
  2062
  2063 = 613A			@VarData	= BASE
  2064 = 0004			@VarDataSize	= 4
  2065
  2066 303E			@exit
  2067 					.ifdef @new
  2068 					lda <@VarData
  2069 					sta :ztmp
  2070 					lda >@VarData
  2071 					ldy #@VarDataSize-1
  2072 					jmp @FreeMem
  2073 					els
  2074 303E 60				rts						; ret
  2075 					eif
  2076 				.endl
  2077
  2078 303F			.local	PMG_INIT_0824					; PROCEDURE | OVERLOAD
  2079
  2080 				; optimize OK (B_PMG), line = 189
  2081
  2082 303F AD 3E 61			lda BASE
  2083 3042 8D 3A 61			sta PMG_INIT_07BE.BASE
  2084 3045 AD 3F 61			lda SDMCTL
  2085 3048 8D 3B 61			sta PMG_INIT_07BE.SDMCTL
  2086 304B AD 40 61			lda GRACTL
  2087 304E 8D 3C 61			sta PMG_INIT_07BE.GRACTL
  2088 3051 20 F0 2F			jsr PMG_INIT_07BE
  2089
  2090 				; ------------------------------------------------------------
  2091
  2092 = 613E			BASE	= DATAORIGIN+$08AE
  2093 = 613F			SDMCTL	= DATAORIGIN+$08AF
  2094 = 6140			GRACTL	= DATAORIGIN+$08B0
  2095
  2096 = 613E			@VarData	= BASE
  2097 = 0003			@VarDataSize	= 3
  2098
  2099 3054			@exit
  2100 					.ifdef @new
  2101 					lda <@VarData
  2102 					sta :ztmp
  2103 					lda >@VarData
  2104 					ldy #@VarDataSize-1
  2105 					jmp @FreeMem
  2106 					els
  2107 3054 60				rts						; ret
  2108 					eif
  2109 				.endl
  2110
  2111 3055			.local	PMG_INIT_0832					; PROCEDURE | OVERLOAD
  2112 3055 8D 41 61			sta BASE
  2113
  2114 				; optimize OK (B_PMG), line = 195
  2115
  2116 3058 8D 3E 61			sta PMG_INIT_0824.BASE
  2117 305B AD 42 61			lda SDMCTL
  2118 305E 8D 3F 61			sta PMG_INIT_0824.SDMCTL
  2119 3061 20 3F 30			jsr PMG_INIT_0824
  2120
  2121 				; ------------------------------------------------------------
  2122
  2123 = 6141			BASE	= DATAORIGIN+$08B1
  2124 = 6142			SDMCTL	= DATAORIGIN+$08B2
  2125
  2126 = 6141			@VarData	= BASE
  2127 = 0002			@VarDataSize	= 2
  2128
  2129 3064			@exit
  2130 					.ifdef @new
  2131 					lda <@VarData
  2132 					sta :ztmp
  2133 					lda >@VarData
  2134 					ldy #@VarDataSize-1
  2135 					jmp @FreeMem
  2136 					els
  2137 3064 60				rts						; ret
  2138 					eif
  2139 				.endl
  2140
  2141 3065			.local	PMG_DISABLE					; PROCEDURE
  2142
  2143 				; optimize OK (B_PMG), line = 206
  2144
  2145 3065 A9 00			lda #$00
  2146 3067 8D 1D D0			sta PMG_GRACTL
  2147
  2148 				; optimize OK (B_PMG), line = 207
  2149
  2150 306A AD 2F 02			lda PMG_SDMCTL_S
  2151 306D 29 C3			and #$C3
  2152 306F 8D 43 61			sta SDMCTL_FLAGS
  2153
  2154 				; optimize OK (B_PMG), line = 208
  2155
  2156 3072 8D 00 D4			sta PMG_SDMCTL
  2157
  2158 				; optimize OK (B_PMG), line = 209
  2159
  2160 3075 8D 2F 02			sta PMG_SDMCTL_S
  2161
  2162 				; ------------------------------------------------------------
  2163
  2164 = 6143			SDMCTL_FLAGS	= DATAORIGIN+$08B3
  2165
  2166 = 6143			@VarData	= SDMCTL_FLAGS
  2167 = 0001			@VarDataSize	= 1
  2168
  2169 3078			@exit
  2170 					.ifdef @new
  2171 					lda <@VarData
  2172 					sta :ztmp
  2173 					lda >@VarData
  2174 					ldy #@VarDataSize-1
  2175 					jmp @FreeMem
  2176 					els
  2177 3078 60				rts						; ret
  2178 					eif
  2179 				.endl
  2180
  2181 				; ------------------------------------------------------------
  2182
  2183 = 0001			PMG_VDELAY_M0	= $01
  2184 = 0002			PMG_VDELAY_M1	= $02
  2185 = 0004			PMG_VDELAY_M2	= $04
  2186 = 0008			PMG_VDELAY_M3	= $08
  2187 = 0010			PMG_VDELAY_P0	= $10
  2188 = 0020			PMG_VDELAY_P1	= $20
  2189 = 0040			PMG_VDELAY_P2	= $40
  2190 = 0080			PMG_VDELAY_P3	= $80
  2191 = 0000			PMG_SIZE_NORMAL	= $00
  2192 = 0001			PMG_SIZE_X2	= $01
  2193 = 0003			PMG_SIZE_X4	= $03
  2194 = 0001			PMG_MSIZE0_X2	= $01
  2195 = 0003			PMG_MSIZE0_X4	= $03
  2196 = 0004			PMG_MSIZE1_X2	= $04
  2197 = 000C			PMG_MSIZE1_X4	= $0C
  2198 = 0010			PMG_MSIZE2_X2	= $10
  2199 = 0030			PMG_MSIZE2_X4	= $30
  2200 = 0040			PMG_MSIZE3_X2	= $40
  2201 = 00C0			PMG_MSIZE4_X4	= $C0
  2202 = 0001			PMG_GRACTL_MISSILES	= $01
  2203 = 0002			PMG_GRACTL_PLAYERS	= $02
  2204 = 0004			PMG_GRACTL_LATCH	= $04
  2205 = 0003			PMG_GRACTL_DEFAULT	= $03
  2206 = 0004			PMG_SDMCTL_DMA_MISSILE	= $04
  2207 = 0008			PMG_SDMCTL_DMA_PLAYER	= $08
  2208 = 000C			PMG_SDMCTL_DMA_BOTH	= $0C
  2209 = 0010			PMG_SDMCTL_ONELINE	= $10
  2210 = 0000			PMG_SDMCTL_SCREEN_DISABLED	= $00
  2211 = 0001			PMG_SDMCTL_SCREEN_NARROW	= $01
  2212 = 0002			PMG_SDMCTL_SCREEN_NORMAL	= $02
  2213 = 0003			PMG_SDMCTL_SCREEN_WIDE	= $03
  2214 = 000E			PMG_SDMCTL_DEFAULT	= $0E
  2215 = 0001			PMG_COLLISION_PLAYER_TO_P0	= $01
  2216 = 0002			PMG_COLLISION_PLAYER_TO_P1	= $02
  2217 = 0004			PMG_COLLISION_PLAYER_TO_P2	= $04
  2218 = 0008			PMG_COLLISION_PLAYER_TO_P3	= $08
  2219 = 0010			PMG_5PLAYER	= $10
  2220 = 0020			PMG_OVERLAP	= $20
  2221 = D400			PMG_SDMCTL	= $D400
  2222 = 022F			PMG_SDMCTL_S	= $022F
  2223 = D01B			PMG_GPRIOR	= $D01B
  2224 = 026F			PMG_GPRIOR_S	= $026F
  2225 = D012			PMG_PCOLR0	= $D012
  2226 = D013			PMG_PCOLR1	= $D013
  2227 = D014			PMG_PCOLR2	= $D014
  2228 = D015			PMG_PCOLR3	= $D015
  2229 = D012			adr.PMG_PCOLR	= $D012
  2230 3079			.var PMG_PCOLR	= adr.PMG_PCOLR .word
  2231 = 02C0			PMG_PCOLR0_S	= $02C0
  2232 = 02C1			PMG_PCOLR1_S	= $02C1
  2233 = 02C2			PMG_PCOLR2_S	= $02C2
  2234 = 02C3			PMG_PCOLR3_S	= $02C3
  2235 = 02C0			adr.PMG_PCOLR_S	= $02C0
  2236 3079			.var PMG_PCOLR_S	= adr.PMG_PCOLR_S .word
  2237 = D000			PMG_HPOS0	= $D000
  2238 = D001			PMG_HPOS1	= $D001
  2239 = D002			PMG_HPOS2	= $D002
  2240 = D003			PMG_HPOS3	= $D003
  2241 = D000			adr.PMG_HPOS	= $D000
  2242 3079			.var PMG_HPOS	= adr.PMG_HPOS .word
  2243 = D004			PMG_HPOSM0	= $D004
  2244 = D005			PMG_HPOSM1	= $D005
  2245 = D006			PMG_HPOSM2	= $D006
  2246 = D007			PMG_HPOSM3	= $D007
  2247 = D004			adr.PMG_HPOSM	= $D004
  2248 3079			.var PMG_HPOSM	= adr.PMG_HPOSM .word
  2249 = D008			PMG_SIZEP0	= $D008
  2250 = D009			PMG_SIZEP1	= $D009
  2251 = D00A			PMG_SIZEP2	= $D00A
  2252 = D00B			PMG_SIZEP3	= $D00B
  2253 = D008			adr.PMG_SIZEP	= $D008
  2254 3079			.var PMG_SIZEP	= adr.PMG_SIZEP .word
  2255 = D00C			PMG_SIZEM	= $D00C
  2256 = D00D			PMG_GRAFP0	= $D00D
  2257 = D00E			PMG_GRAFP1	= $D00E
  2258 = D00F			PMG_GRAFP2	= $D00F
  2259 = D010			PMG_GRAFP3	= $D010
  2260 = D00D			adr.PMG_GRAFP	= $D00D
  2261 3079			.var PMG_GRAFP	= adr.PMG_GRAFP .word
  2262 = D011			PMG_GRAFM	= $D011
  2263 = D00C			PMG_P0PL	= $D00C
  2264 = D00D			PMG_P1PL	= $D00D
  2265 = D00E			PMG_P2PL	= $D00E
  2266 = D00F			PMG_P3PL	= $D00F
  2267 = D00C			adr.PMG_PPL	= $D00C
  2268 3079			.var PMG_PPL	= adr.PMG_PPL .word
  2269 = D01C			PMG_VDELAY	= $D01C
  2270 = D01D			PMG_GRACTL	= $D01D
  2271 = D01E			PMG_HITCLR	= $D01E
  2272 = D407			PMG_PMBASE	= $D407
  2273 = 6135			PMG_ONELINE	= DATAORIGIN+$08A5
  2274 = 6136			PMG_BASE	= DATAORIGIN+$08A6
  2275 = 6138			PMG_SIZE	= DATAORIGIN+$08A8
  2276
  2277 = 3079 12 D0		PMG_PCOLR
  2277 = 307B C0 02		PMG_PCOLR_S
  2277 = 307D 00 D0		PMG_HPOS
  2277 = 307F 04 D0		PMG_HPOSM
  2277 = 3081 08 D0		PMG_SIZEP
  2277 = 3083 0D D0		PMG_GRAFP
  2277 = 3085 0C D0		PMG_PPL
  2277 				.endl							; UNIT B_PMG
  2278
  2279 				; ------------------------------------------------------------
  2280
  2281 3087			.local	JOYSTICK					; UNIT
  2282
  2283 				; ------------------------------------------------------------
  2284
  2285 = 000F			JOY_NONE	= $0F
  2286 = 000E			JOY_UP	= $0E
  2287 = 000D			JOY_DOWN	= $0D
  2288 = 000B			JOY_LEFT	= $0B
  2289 = 000A			JOY_LEFT_UP	= $0A
  2290 = 0009			JOY_LEFT_DOWN	= $09
  2291 = 0007			JOY_RIGHT	= $07
  2292 = 0006			JOY_RIGHT_UP	= $06
  2293 = 0005			JOY_RIGHT_DOWN	= $05
  2294 = 0278			JOY_1	= $0278
  2295 = 0279			JOY_2	= $0279
  2296 = 0278			adr.STICK	= $0278
  2297 3087			.var STICK	= adr.STICK .word
  2298 = 0278			STICK0	= $0278
  2299 = 0279			STICK1	= $0279
  2300 = 0284			adr.STRIG	= $0284
  2301 3087			.var STRIG	= adr.STRIG .word
  2302 = 0284			STRIG0	= $0284
  2303 = 0285			STRIG1	= $0285
  2304 = 0270			adr.PADDL	= $0270
  2305 3087			.var PADDL	= adr.PADDL .word
  2306 = 0270			PADDL0	= $0270
  2307 = 0271			PADDL1	= $0271
  2308 = 0272			PADDL2	= $0272
  2309 = 0273			PADDL3	= $0273
  2310 = 0274			PADDL4	= $0274
  2311 = 0275			PADDL5	= $0275
  2312 = 0276			PADDL6	= $0276
  2313 = 0277			PADDL7	= $0277
  2314 = 027C			adr.PTRIG	= $027C
  2315 3087			.var PTRIG	= adr.PTRIG .word
  2316 = 027C			PTRIG0	= $027C
  2317 = 027D			PTRIG1	= $027D
  2318 = 027E			PTRIG2	= $027E
  2319 = 027F			PTRIG3	= $027F
  2320 = 0280			PTRIG4	= $0280
  2321 = 0281			PTRIG5	= $0281
  2322 = 0282			PTRIG6	= $0282
  2323 = 0283			PTRIG7	= $0283
  2324 = D010			TRIG0	= $D010
  2325 = D011			TRIG1	= $D011
  2326
  2327 = 3087 78 02		STICK
  2327 = 3089 84 02		STRIG
  2327 = 308B 70 02		PADDL
  2327 = 308D 7C 02		PTRIG
  2327 				.endl							; UNIT JOYSTICK
  2328
  2329 308F			.local	DLI						; PROCEDURE | ASSEMBLER | INTERRUPT
  2330
  2331 				; ---------------------  ASM Block 093  ---------------------
  2332
  2333
  2334 308F 48			    pha ; store registers
  2335 3090 A9 02 8D 18 D0	    mva #2 atari.colpf2
  2336 3095 A9 08 8D 17 D0	    mva #8 atari.colpf1
  2337 309A A9 E0 8D 09 D4	    mva >DEFAULT_CHARSET chbase
  2338 309F A9 B0 8D 03 D0	    mva #176 hposp3
  2339 30A4 A9 03 8D 0B D0	    mva #3 sizep3
  2340
  2341 				    
  2342 30A9 A9 B5 8D 00 02 A9 +     mwa #dli2 atari.vdslst
  2343 30B3 68			    pla ; restore registers
  2344
  2345 30B4 40				rti						; ret
  2346 				.endl
  2347
  2348 30B5			.local	DLI2						; PROCEDURE | ASSEMBLER | INTERRUPT
  2349
  2350 				; ---------------------  ASM Block 094  ---------------------
  2351
  2352
  2353 30B5 48			    pha ; store registers
  2354 30B6 AD 4A 61 8D 18 D0	    mva config.editorBackgroundColor atari.colpf2
  2355 30BC AD 4B 61 8D 17 D0	    mva config.editorForegroundColor atari.colpf1
  2356 30C2 AD 9D 61 8D 09 D4	    mva editorCharset chbase
  2357
  2358 				    
  2359 				    
  2360 30C8 A9 D4 8D 00 02 A9 +     mwa #dli3 atari.vdslst
  2361 30D2 68			    pla ; restore registers
  2362
  2363 30D3 40				rti						; ret
  2364 				.endl
  2365
  2366 30D4			.local	DLI3						; PROCEDURE | ASSEMBLER | INTERRUPT
  2367
  2368 				; ---------------------  ASM Block 095  ---------------------
  2369
  2370
  2371 30D4 48			    pha ; store registers
  2372 30D5 8D 0A D4		    sta wsync
  2373 30D8 A9 02 8D 18 D0	    mva #2 atari.colpf2
  2374 30DD A9 08 8D 17 D0	    mva #8 atari.colpf1
  2375 30E2 AD 9C 61		    lda statusCustomCharset
  2376 30E5 D0 05		    sne
  2377 30E7 A9 E0 8D 09 D4	    mva >DEFAULT_CHARSET chbase
  2378 				    
  2379 30EC AD B5 61 8D 03 D0	    mva brushFramePosX hposp3
  2380 30F2 A9 00 8D 0B D0	    mva #0 sizep3
  2381 				    
  2382 30F7 68			    pla ; restore registers
  2383
  2384 30F8 40				rti						; ret
  2385 				.endl
  2386
  2387 30F9			.local	VBL						; PROCEDURE | ASSEMBLER | INTERRUPT
  2388
  2389 				; ---------------------  ASM Block 096  ---------------------
  2390
  2391
  2392 30F9 48 8A 48 98 48	    phr ; store registers
  2393 				    
  2394 				    
  2395 30FE A9 8F 8D 00 02 A9 +     mwa #dli atari.vdslst
  2396
  2397 				    ; cursor blink
  2398 3108 A5 14		    lda rtclok+2
  2399 310A 4A			    lsr
  2400 310B 29 0F		    and #$0f
  2401 310D AA			    tax 
  2402 310E BD 2D 31		    lda cursorBrightness,x
  2403 3111 8D C0 02		    sta atari.pcolr0
  2404 3114 8D C1 02		    sta atari.pcolr1
  2405 3117 8D C2 02		    sta atari.pcolr2
  2406 311A 8D C3 02		    sta atari.pcolr3
  2407
  2408 				    
  2409 311D AD 8C 61		    lda keyRepeatCounter
  2410 3120 F0 03		    seq
  2411 3122 CE 8C 61		    dec keyRepeatCounter
  2412 				    
  2413
  2414 3125 68 A8 68 AA 68	    plr ; restore registers
  2415 312A 4C 62 E4		    jmp $E462 ; jump to system VBL handler
  2416 312D			cursorBrightness    
  2417 312D 04 05 06 07 08 09 +     dta 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10, 9, 8, 7, 6, 5
  2418
  2419 313D 40				rti						; ret
  2420 				.endl
  2421
  2422 313E			.local	ADJUSTBRUSHFRAME				; PROCEDURE
  2423
  2424 				; optimize OK (artur.pas), line = 77
  2425
  2426 313E AD B4 61			lda BRUSHINDEX
  2427 3141 0A				asl @
  2428 3142 0A				asl @
  2429 3143 85 9E			sta :STACKORIGIN+10
  2430 3145 A9 C9			lda #$C9
  2431 3147 38 E5 9E			sub :STACKORIGIN+10
  2432 314A 8D B5 61			sta BRUSHFRAMEPOSX
  2433 314D			@exit
  2434 					.ifdef @new
  2435 					lda <@VarData
  2436 					sta :ztmp
  2437 					lda >@VarData
  2438 					ldy #@VarDataSize-1
  2439 					jmp @FreeMem
  2440 					els
  2441 314D 60				rts						; ret
  2442 					eif
  2443 				.endl
  2444
  2445 314E			.local	SWAP						; PROCEDURE
  2446
  2447 				; optimize OK (artur.pas), line = 83
  2448
  2449 314E AC B9 62 84 82 AC + 	mwy A :bp2
  2450 3158 A0 00			ldy #$00
  2451 315A B1 82			lda (:bp2),y
  2452 315C 8D BD 62			sta C
  2453
  2454 				; optimize OK (artur.pas), line = 84
  2455
  2456 315F AC BB 62 84 82 AC + 	mwy B :bp2
  2457 3169 A0 00			ldy #$00
  2458 316B B1 82			lda (:bp2),y
  2459 316D AC BA 62 84 81		mvy A+1 :bp+1
  2460 3172 AC B9 62			ldy A
  2461 3175 91 80			sta (:bp),y
  2462
  2463 				; optimize OK (artur.pas), line = 85
  2464
  2465 3177 A0 00			ldy #$00
  2466 3179 AD BD 62			lda C
  2467 317C 91 82			sta (:bp2),y
  2468
  2469 				; ------------------------------------------------------------
  2470
  2471 = 62B9			A	= DATAORIGIN+$0A29
  2472 = 62BB			B	= DATAORIGIN+$0A2B
  2473 = 62BD			C	= DATAORIGIN+$0A2D
  2474
  2475 = 62B9			@VarData	= A
  2476 = 0005			@VarDataSize	= 5
  2477
  2478 317E			@exit
  2479 					.ifdef @new
  2480 					lda <@VarData
  2481 					sta :ztmp
  2482 					lda >@VarData
  2483 					ldy #@VarDataSize-1
  2484 					jmp @FreeMem
  2485 					els
  2486 317E 60				rts						; ret
  2487 					eif
  2488 				.endl
  2489
  2490 317F			.local	ADDDRIVETOS					; PROCEDURE
  2491
  2492 				; optimize OK (artur.pas), line = 91
  2493
  2494 317F AD 51 61			lda adr.S+$00
  2495 3182 18 69 02			add #$02
  2496 3185 8D BE 62			sta L
  2497
  2498 				; optimize OK (artur.pas), line = 92
  2499
  2500 3188 8D 51 61			sta adr.S+$00
  2501
  2502 				; optimize OK (artur.pas), line = 93
  2503
  2504 318B A9 54			lda <adr.S+$03
  2505 318D 85 8C			sta SYSTEM.MOVE_0459.DEST
  2506 318F A9 61			lda >adr.S+$03
  2507 3191 85 8D			sta SYSTEM.MOVE_0459.DEST+1
  2508 3193 A9 52			lda <adr.S+$01
  2509 3195 85 88			sta SYSTEM.MOVE_0459.SOURCE
  2510 3197 A9 61			lda >adr.S+$01
  2511 3199 85 89			sta SYSTEM.MOVE_0459.SOURCE+1
  2512 319B AD BE 62			lda L
  2513 319E 85 84			sta SYSTEM.MOVE_0459.COUNT
  2514 31A0 A9 00			lda #$00
  2515 31A2 85 85			sta SYSTEM.MOVE_0459.COUNT+1
  2516 31A4				.local +MAIN.SYSTEM.MOVE_0459
  2517 31A4				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0459.M@INLINE [Source: artur.a65]
     4 31A4 20 74 27			jsr @move
Source: artur.a65
  2518 					.endl
  2519
  2520 				; optimize OK (artur.pas), line = 94
  2521
  2522 31A7 A9 44			lda #$44
  2523 31A9 8D 52 61			sta adr.S+$01
  2524
  2525 				; optimize OK (artur.pas), line = 95
  2526
  2527 31AC A9 3A			lda #$3A
  2528 31AE 8D 53 61			sta adr.S+$02
  2529
  2530 				; ------------------------------------------------------------
  2531
  2532 = 62BE			L	= DATAORIGIN+$0A2E
  2533
  2534 = 62BE			@VarData	= L
  2535 = 0001			@VarDataSize	= 1
  2536
  2537 31B1			@exit
  2538 					.ifdef @new
  2539 					lda <@VarData
  2540 					sta :ztmp
  2541 					lda >@VarData
  2542 					ldy #@VarDataSize-1
  2543 					jmp @FreeMem
  2544 					els
  2545 31B1 60				rts						; ret
  2546 					eif
  2547 				.endl
  2548
  2549 31B2			.local	HEX2DECDIGIT					; FUNCTION
  2550 31B2 8D BF 62			sta C
  2551
  2552 				; optimize OK (artur.pas), line = 100
  2553
  2554 31B5 A9 FF			lda #$FF
  2555 31B7 8D C0 62			sta RESULT
  2556
  2557 				; optimize OK (artur.pas), line = 101
  2558
  2559 31BA AD BF 62			lda C
  2560 31BD 8D C1 62			sta @CASETMP_0005
  2561 31C0 18				clc						; clear carry for add
  2562 31C1 69 E6			adc #$FF-$19					; make m = $FF
  2563 31C3 69 0A			adc #$19-$10+1					; carry set if in range n to m
  2564 31C5 90 0C			jcc l_08BF
  2565 				@
  2566
  2567 				; optimize OK (artur.pas), line = 102
  2568
  2569 31C7 AD BF 62			lda C
  2570 31CA 38 E9 10			sub #$10
  2571 31CD 8D C0 62			sta RESULT
  2572
  2573 31D0 4C FC 31			jmp a_0005
  2574 31D3			l_08BF
  2575 31D3 AD C1 62			lda @CASETMP_0005
  2576 31D6 18				clc						; clear carry for add
  2577 31D7 69 99			adc #$FF-$66					; make m = $FF
  2578 31D9 69 06			adc #$66-$61+1					; carry set if in range n to m
  2579 31DB 90 0C			jcc l_08D2
  2580 				@
  2581
  2582 				; optimize OK (artur.pas), line = 103
  2583
  2584 31DD AD BF 62			lda C
  2585 31E0 38 E9 57			sub #$57
  2586 31E3 8D C0 62			sta RESULT
  2587
  2588 31E6 4C FC 31			jmp a_0005
  2589 31E9			l_08D2
  2590 31E9 AD C1 62			lda @CASETMP_0005
  2591 31EC 18				clc						; clear carry for add
  2592 31ED 69 D9			adc #$FF-$26					; make m = $FF
  2593 31EF 69 06			adc #$26-$21+1					; carry set if in range n to m
  2594 31F1 90 09			jcc l_08E5
  2595 				@
  2596
  2597 				; optimize OK (artur.pas), line = 104
  2598
  2599 31F3 AD BF 62			lda C
  2600 31F6 38 E9 17			sub #$17
  2601 31F9 8D C0 62			sta RESULT
  2602
  2603 31FC			l_08E5
  2604 31FC			a_0005
  2605 31FC			@exit
  2606
  2607 				; ------------------------------------------------------------
  2608
  2609 = 62BF			C	= DATAORIGIN+$0A2F
  2610 = 62C0			RESULT	= DATAORIGIN+$0A30
  2611 = 62C1			@CASETMP_0005	= DATAORIGIN+$0A31
  2612
  2613 = 62BF			@VarData	= C
  2614 = 0003			@VarDataSize	= 3
  2615
  2616 31FC 60				rts						; ret
  2617 				.endl
  2618
  2619 31FD			.local	PARSEHEX					; PROCEDURE
  2620
  2621 				; optimize OK (artur.pas), line = 111
  2622
  2623 31FD AC C4 62 84 82 AC + 	mwy ERR :bp2
  2624 3207 A0 00			ldy #$00
  2625 3209 98				tya
  2626 320A 91 82			sta (:bp2),y
  2627
  2628 				; optimize OK (artur.pas), line = 112
  2629
  2630 320C AC C2 62 84 82 AC + 	mwy I :bp2
  2631 3216 A0 00			ldy #$00
  2632 3218 91 82			sta (:bp2),y
  2633
  2634 				; optimize OK (artur.pas), line = 113
  2635
  2636 321A 8D C8 62			sta BASE
  2637
  2638 				; optimize OK (artur.pas), line = 114
  2639
  2640 321D AD 51 61			lda adr.S+$00
  2641 3220 8D C6 62			sta POS
  2642
  2643 				; --- RepeatUntilProlog
  2644 3223			l_090E
  2645
  2646 				; optimize OK (artur.pas), line = 116
  2647
  2648 3223 AC C6 62			ldy POS
  2649 3226 B9 51 61			lda adr.S,y
  2650 3229 20 B2 31			jsr HEX2DECDIGIT
  2651 322C AD C0 62			lda HEX2DECDIGIT.RESULT
  2652 322F 8D C7 62			sta DIGIT
  2653
  2654 				; optimize OK (artur.pas), line = 117
  2655
  2656 3232 C9 FF			cmp #$FF
  2657 3234 D0 13			jne l_092A
  2658
  2659 				; optimize OK (artur.pas), line = 118
  2660
  2661 3236 AC C4 62 84 82 AC + 	mwy ERR :bp2
  2662 3240 A0 00			ldy #$00
  2663 3242 A9 01			lda #$01
  2664 3244 91 82			sta (:bp2),y
  2665 3246 4C 91 32			jmp @exit					; exit
  2666 3249			l_092A
  2667
  2668 				; optimize OK (artur.pas), line = 121
  2669
  2670 3249 AC C2 62 84 82 AC + 	mwy I :bp2
  2671 3253 A0 00			ldy #$00
  2672 3255 B1 82			lda (:bp2),y
  2673 3257 85 9D			sta :STACKORIGIN+9
  2674 3259 98				tya
  2675 325A 85 CE			sta :STACKORIGIN+STACKWIDTH*3+10
  2676 325C 85 BE			sta :STACKORIGIN+STACKWIDTH*2+10
  2677 325E 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  2678 3260 AD C7 62			lda DIGIT
  2679 3263 AC C8 62			ldy BASE
  2680 3266 F0 0A			beq l_0000_e
  2681 3268			l_0000_b
  2682 3268 0A				asl @
  2683 3269 26 AE			rol :STACKORIGIN+STACKWIDTH+10
  2684 326B 26 BE			rol :STACKORIGIN+STACKWIDTH*2+10
  2685 326D 26 CE			rol :STACKORIGIN+STACKWIDTH*3+10
  2686 326F 88				dey
  2687 3270 D0 F6			bne l_0000_b
  2688 3272			l_0000_e
  2689 3272 18 65 9D			add :STACKORIGIN+9
  2690 3275 AC C2 62 84 82 AC + 	mwy I :bp2
  2691 327F A0 00			ldy #$00
  2692 3281 91 82			sta (:bp2),y
  2693
  2694 				; optimize OK (artur.pas), line = 122
  2695
  2696 3283 AD C8 62			lda BASE
  2697 3286 18 69 04			add #$04
  2698 3289 8D C8 62			sta BASE
  2699
  2700 				; optimize FAIL (0, artur.pas), line = 123
  2701
  2702 328C CE C6 62			dec POS
  2703
  2704 				; optimize OK (artur.pas), line = 124
  2705
  2706 328F D0 92			jne l_090E
  2707
  2708 				; ------------------------------------------------------------
  2709
  2710 = 62C2			I	= DATAORIGIN+$0A32
  2711 = 62C4			ERR	= DATAORIGIN+$0A34
  2712 = 62C6			POS	= DATAORIGIN+$0A36
  2713 = 62C7			DIGIT	= DATAORIGIN+$0A37
  2714 = 62C8			BASE	= DATAORIGIN+$0A38
  2715
  2716 = 62C2			@VarData	= I
  2717 = 0007			@VarDataSize	= 7
  2718
  2719 3291			@exit
  2720 					.ifdef @new
  2721 					lda <@VarData
  2722 					sta :ztmp
  2723 					lda >@VarData
  2724 					ldy #@VarDataSize-1
  2725 					jmp @FreeMem
  2726 					els
  2727 3291 60				rts						; ret
  2728 					eif
  2729 				.endl
  2730
  2731 3292			.local	READJOYSTICK					; PROCEDURE
  2732
  2733 				; optimize OK (artur.pas), line = 129
  2734
  2735 3292 A9 00			lda #$00
  2736 3294 8D 88 61			sta JOYX
  2737
  2738 				; optimize OK (artur.pas), line = 130
  2739
  2740 3297 8D 89 61			sta JOYY
  2741
  2742 				; optimize OK (artur.pas), line = 131
  2743
  2744 329A AD 78 02			lda +JOYSTICK.STICK0
  2745 329D 29 01			and #$01
  2746 329F D0 05			jne l_0977
  2747 32A1 A9 FF			lda #$FF
  2748 32A3 8D 89 61			sta JOYY
  2749 32A6			l_0977
  2750
  2751 				; optimize OK (artur.pas), line = 132
  2752
  2753 32A6 AD 78 02			lda +JOYSTICK.STICK0
  2754 32A9 29 02			and #$02
  2755 32AB D0 05			jne l_0994
  2756 32AD A9 01			lda #$01
  2757 32AF 8D 89 61			sta JOYY
  2758 32B2			l_0994
  2759
  2760 				; optimize OK (artur.pas), line = 133
  2761
  2762 32B2 AD 78 02			lda +JOYSTICK.STICK0
  2763 32B5 29 04			and #$04
  2764 32B7 D0 05			jne l_09B1
  2765 32B9 A9 FF			lda #$FF
  2766 32BB 8D 88 61			sta JOYX
  2767 32BE			l_09B1
  2768
  2769 				; optimize OK (artur.pas), line = 134
  2770
  2771 32BE AD 78 02			lda +JOYSTICK.STICK0
  2772 32C1 29 08			and #$08
  2773 32C3 D0 05			jne l_09CE
  2774 32C5 A9 01			lda #$01
  2775 32C7 8D 88 61			sta JOYX
  2776 32CA			l_09CE
  2777
  2778 				; optimize OK (artur.pas), line = 135
  2779
  2780 32CA AD 84 02			lda +JOYSTICK.STRIG0
  2781 32CD 8D 8A 61			sta JOYFIRE
  2782 32D0			@exit
  2783 					.ifdef @new
  2784 					lda <@VarData
  2785 					sta :ztmp
  2786 					lda >@VarData
  2787 					ldy #@VarDataSize-1
  2788 					jmp @FreeMem
  2789 					els
  2790 32D0 60				rts						; ret
  2791 					eif
  2792 				.endl
  2793
  2794 32D1			.local	INITPMG						; PROCEDURE
  2795
  2796 				; optimize OK (artur.pas), line = 163
  2797
  2798 32D1 A9 70			lda #$70
  2799 32D3 20 55 30			jsr B_PMG.PMG_INIT_0832
  2800
  2801 				; optimize OK (artur.pas), line = 164
  2802
  2803 32D6 A9 01			lda #$01
  2804 32D8 8D 6F 02			sta B_PMG.PMG_GPRIOR_S
  2805
  2806 				; optimize OK (artur.pas), line = 165
  2807
  2808 32DB AD 06 33			lda PMGSETTINGS
  2809 32DE 85 82			sta :bp2
  2810 32E0 AD 07 33			lda PMGSETTINGS+1
  2811 32E3 85 83			sta :bp2+1
  2812 32E5 A0 0C			ldy #$0C
  2813 32E7 B1 82 99 00 D0 88 + 	mva:rpl (:bp2),y $D000,y-
  2814
  2815 				; optimize OK (artur.pas), line = 166
  2816
  2817 32EF AD 04 33			lda FRAME
  2818 32F2 85 82			sta :bp2
  2819 32F4 AD 05 33			lda FRAME+1
  2820 32F7 85 83			sta :bp2+1
  2821 32F9 A0 05			ldy #$05
  2822 32FB B1 82 99 F0 73 88 + 	mva:rpl (:bp2),y $73F0,y-
  2823
  2824 				; ------------------------------------------------------------
  2825
  2826 = 62C9			adr.FRAME	= [DATAORIGIN+$0A39] .array [6]
  2827 3303			.var FRAME	= adr.FRAME .word
  2828 = 62CF			adr.PMGSETTINGS	= [DATAORIGIN+$0A3F] .array [13]
  2829 3303			.var PMGSETTINGS	= adr.PMGSETTINGS .word
  2830
  2831 = 3304			@VarData	= FRAME
  2832 = 0013			@VarDataSize	= 19
  2833
  2834 3303			@exit
  2835 					.ifdef @new
  2836 					lda <@VarData
  2837 					sta :ztmp
  2838 					lda >@VarData
  2839 					ldy #@VarDataSize-1
  2840 					jmp @FreeMem
  2841 					els
  2842 3303 60				rts						; ret
  2843 					eif
  2844 = 3304 C9 62		FRAME
  2844 = 3306 CF 62		PMGSETTINGS
  2844 				.endl
  2845
  2846 3308			.local	NEXTACTION					; FUNCTION
  2847
  2848 				; optimize OK (artur.pas), line = 176
  2849
  2850 3308 AC 87 62			ldy UNDOACTIONSIDX
  2851 330B C8				iny
  2852 330C 8C DC 62			sty RESULT
  2853
  2854 				; optimize OK (artur.pas), line = 177
  2855
  2856 330F AD DC 62			lda RESULT
  2857 3312 C9 40			cmp #$40
  2858 3314 D0 05			jne l_0A0F
  2859 3316 A9 00			lda #$00
  2860 3318 8D DC 62			sta RESULT
  2861 331B			l_0A0F
  2862 331B			@exit
  2863
  2864 				; ------------------------------------------------------------
  2865
  2866 = 62DC			RESULT	= DATAORIGIN+$0A4C
  2867
  2868 = 62DC			@VarData	= RESULT
  2869 = 0001			@VarDataSize	= 1
  2870
  2871 331B 60				rts						; ret
  2872 				.endl
  2873
  2874 331C			.local	PREVACTION					; FUNCTION
  2875
  2876 				; optimize OK (artur.pas), line = 182
  2877
  2878 331C AD 87 62			lda UNDOACTIONSIDX
  2879 331F 8D DD 62			sta RESULT
  2880
  2881 				; optimize OK (artur.pas), line = 183
  2882
  2883 3322 D0 05			jne l_0A32
  2884 3324 A9 40			lda #$40
  2885 3326 8D DD 62			sta RESULT
  2886 3329			l_0A32
  2887
  2888 				; optimize FAIL (0, artur.pas), line = 184
  2889
  2890 3329 CE DD 62			dec RESULT
  2891 332C			@exit
  2892
  2893 				; ------------------------------------------------------------
  2894
  2895 = 62DD			RESULT	= DATAORIGIN+$0A4D
  2896
  2897 = 62DD			@VarData	= RESULT
  2898 = 0001			@VarDataSize	= 1
  2899
  2900 332C 60				rts						; ret
  2901 				.endl
  2902
  2903 332D			.local	INITUNDOSTORAGE					; PROCEDURE
  2904
  2905 				; optimize OK (artur.pas), line = 190
  2906
  2907 332D A9 00			lda #$00
  2908 332F 8D 87 62			sta UNDOACTIONSIDX
  2909
  2910 				; optimize OK (artur.pas), line = 191
  2911
  2912 3332 AD 89 58			lda UNDOACTIONS
  2913 3335 85 88			sta SYSTEM.FILLBYTE_0457.A
  2914 3337 AD 8A 58			lda UNDOACTIONS+1
  2915 333A 85 89			sta SYSTEM.FILLBYTE_0457.A+1
  2916 333C A9 C0			lda #$C0
  2917 333E 85 8C			sta SYSTEM.FILLBYTE_0457.COUNT
  2918 3340 A9 00			lda #$00
  2919 3342 85 8D			sta SYSTEM.FILLBYTE_0457.COUNT+1
  2920 3344 A9 FF			lda #$FF
  2921 3346 85 84			sta SYSTEM.FILLBYTE_0457.VALUE
  2922 3348				.local +MAIN.SYSTEM.FILLBYTE_0457
  2923 3348				m@INLINE
Macro: MAIN.SYSTEM.FILLBYTE_0457.M@INLINE [Source: artur.a65]
     4 3348 20 C9 27			jsr @fill
Source: artur.a65
  2924 					.endl
  2925
  2926 				; optimize OK (artur.pas), line = 192
  2927
  2928 334B A9 08			lda #$08
  2929 334D 8D 86 62			sta UNDOBUFFERIDX
  2930
  2931 				; optimize OK (artur.pas), line = 193
  2932
  2933 3350 A9 00			lda #$00
  2934 3352 8D DE 62			sta UNDOPTR
  2935 3355 A9 81			lda #$81
  2936 3357 8D DF 62			sta UNDOPTR+1
  2937
  2938 				; --- RepeatUntilProlog
  2939 335A			l_0A53
  2940
  2941 				; optimize FAIL (0, artur.pas), line = 195
  2942
  2943 335A CE 86 62			dec UNDOBUFFERIDX
  2944
  2945 				; optimize OK (artur.pas), line = 196
  2946
  2947 335D AD 86 62			lda UNDOBUFFERIDX
  2948 3360 0A				asl @
  2949 3361 A8				tay
  2950 3362 AD DE 62			lda UNDOPTR
  2951 3365 99 B6 61			sta adr.UNDOBUFFERS,y
  2952 3368 AD DF 62			lda UNDOPTR+1
  2953 336B 99 B7 61			sta adr.UNDOBUFFERS+1,y
  2954
  2955 				; optimize OK (artur.pas), line = 197
  2956
  2957 336E AD DE 62			lda UNDOPTR
  2958 3371 18 69 C0			add #$C0
  2959 3374 8D DE 62			sta UNDOPTR
  2960 3377 AD DF 62			lda UNDOPTR+1
  2961 337A 69 03			adc #$03
  2962 337C 8D DF 62			sta UNDOPTR+1
  2963
  2964 				; optimize OK (artur.pas), line = 198
  2965
  2966 337F AD 86 62			lda UNDOBUFFERIDX
  2967 3382 D0 D6			jne l_0A53
  2968
  2969 				; ------------------------------------------------------------
  2970
  2971 = 62DE			UNDOPTR	= DATAORIGIN+$0A4E
  2972
  2973 = 62DE			@VarData	= UNDOPTR
  2974 = 0002			@VarDataSize	= 2
  2975
  2976 3384			@exit
  2977 					.ifdef @new
  2978 					lda <@VarData
  2979 					sta :ztmp
  2980 					lda >@VarData
  2981 					ldy #@VarDataSize-1
  2982 					jmp @FreeMem
  2983 					els
  2984 3384 60				rts						; ret
  2985 					eif
  2986 				.endl
  2987
  2988 3385			.local	SETUNDOFROMXY					; PROCEDURE
  2989
  2990 				; optimize OK (artur.pas), line = 203
  2991
  2992 3385 AD E0 62			lda IDX
  2993 3388 0A				asl @
  2994 3389 18 6D E0 62			add IDX
  2995 338D A8				tay
  2996 338E AD E1 62			lda X
  2997 3391 99 C6 61			sta adr.UNDOACTIONS,y
  2998
  2999 				; optimize OK (artur.pas), line = 204
  3000
  3001 3394 AD E2 62			lda Y
  3002 3397 99 C7 61			sta adr.UNDOACTIONS+$01,y
  3003
  3004 				; optimize OK (artur.pas), line = 205
  3005
  3006 339A AD E0 62			lda IDX
  3007 339D 0A				asl @
  3008 339E 18 6D E0 62			add IDX
  3009 33A2 85 9D			sta :STACKORIGIN+9
  3010 33A4 AD E2 62			lda Y
  3011 33A7 0A				asl @
  3012 33A8 A8				tay
  3013 33A9 AD E1 62			lda X
  3014 33AC 18 79 89 62			add adr.LINEOFFSET,y
  3015 33B0 85 9E			sta :STACKORIGIN+10
  3016 33B2 A9 7C			lda #$7C
  3017 33B4 79 8A 62			adc adr.LINEOFFSET+1,y
  3018 33B7 85 81			sta :bp+1
  3019 33B9 A4 9E			ldy :STACKORIGIN+10
  3020 33BB B1 80			lda (:bp),y
  3021 33BD A4 9D			ldy :STACKORIGIN+9
  3022 33BF 99 C8 61			sta adr.UNDOACTIONS+$02,y
  3023
  3024 				; ------------------------------------------------------------
  3025
  3026 = 62E0			IDX	= DATAORIGIN+$0A50
  3027 = 62E1			X	= DATAORIGIN+$0A51
  3028 = 62E2			Y	= DATAORIGIN+$0A52
  3029
  3030 = 62E0			@VarData	= IDX
  3031 = 0003			@VarDataSize	= 3
  3032
  3033 33C2			@exit
  3034 					.ifdef @new
  3035 					lda <@VarData
  3036 					sta :ztmp
  3037 					lda >@VarData
  3038 					ldy #@VarDataSize-1
  3039 					jmp @FreeMem
  3040 					els
  3041 33C2 60				rts						; ret
  3042 					eif
  3043 				.endl
  3044
  3045 33C3			.local	STOREUNDOFROMXY					; PROCEDURE
  3046
  3047 				; optimize OK (artur.pas), line = 210
  3048
  3049 33C3 AD 87 62			lda UNDOACTIONSIDX
  3050 33C6 8D E0 62			sta SETUNDOFROMXY.IDX
  3051 33C9 AD E3 62			lda X
  3052 33CC 8D E1 62			sta SETUNDOFROMXY.X
  3053 33CF AD E4 62			lda Y
  3054 33D2 8D E2 62			sta SETUNDOFROMXY.Y
  3055 33D5 20 85 33			jsr SETUNDOFROMXY
  3056
  3057 				; ------------------------------------------------------------
  3058
  3059 = 62E3			X	= DATAORIGIN+$0A53
  3060 = 62E4			Y	= DATAORIGIN+$0A54
  3061
  3062 = 62E3			@VarData	= X
  3063 = 0002			@VarDataSize	= 2
  3064
  3065 33D8			@exit
  3066 					.ifdef @new
  3067 					lda <@VarData
  3068 					sta :ztmp
  3069 					lda >@VarData
  3070 					ldy #@VarDataSize-1
  3071 					jmp @FreeMem
  3072 					els
  3073 33D8 60				rts						; ret
  3074 					eif
  3075 				.endl
  3076
  3077 33D9			.local	STORESCREENTOUNDOBUFFER				; PROCEDURE
  3078 33D9 8D E5 62			sta BUFNUM
  3079
  3080 				; optimize OK (artur.pas), line = 215
  3081
  3082 33DC 0A				asl @
  3083 33DD A8				tay
  3084 33DE B9 B6 61			lda adr.UNDOBUFFERS,y
  3085 33E1 85 8C			sta SYSTEM.MOVE_0458.DEST
  3086 33E3 B9 B7 61			lda adr.UNDOBUFFERS+1,y
  3087 33E6 85 8D			sta SYSTEM.MOVE_0458.DEST+1
  3088 33E8 A9 00			lda #$00
  3089 33EA 85 88			sta SYSTEM.MOVE_0458.SOURCE
  3090 33EC A9 7C			lda #$7C
  3091 33EE 85 89			sta SYSTEM.MOVE_0458.SOURCE+1
  3092 33F0 A9 C0			lda #$C0
  3093 33F2 85 84			sta SYSTEM.MOVE_0458.COUNT
  3094 33F4 A9 03			lda #$03
  3095 33F6 85 85			sta SYSTEM.MOVE_0458.COUNT+1
  3096 33F8				.local +MAIN.SYSTEM.MOVE_0458
  3097 33F8				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0458.M@INLINE [Source: artur.a65]
     4 33F8 20 74 27			jsr @move
Source: artur.a65
  3098 					.endl
  3099
  3100 				; ------------------------------------------------------------
  3101
  3102 = 62E5			BUFNUM	= DATAORIGIN+$0A55
  3103
  3104 = 62E5			@VarData	= BUFNUM
  3105 = 0001			@VarDataSize	= 1
  3106
  3107 33FB			@exit
  3108 					.ifdef @new
  3109 					lda <@VarData
  3110 					sta :ztmp
  3111 					lda >@VarData
  3112 					ldy #@VarDataSize-1
  3113 					jmp @FreeMem
  3114 					els
  3115 33FB 60				rts						; ret
  3116 					eif
  3117 				.endl
  3118
  3119 33FC			.local	RESTORESCREENFROMUNDOBUFFER			; PROCEDURE
  3120 33FC 8D E6 62			sta BUFNUM
  3121
  3122 				; optimize OK (artur.pas), line = 220
  3123
  3124 33FF 0A				asl @
  3125 3400 A8				tay
  3126 3401 B9 B6 61			lda adr.UNDOBUFFERS,y
  3127 3404 85 88			sta SYSTEM.MOVE_0458.SOURCE
  3128 3406 B9 B7 61			lda adr.UNDOBUFFERS+1,y
  3129 3409 85 89			sta SYSTEM.MOVE_0458.SOURCE+1
  3130 340B A9 00			lda #$00
  3131 340D 85 8C			sta SYSTEM.MOVE_0458.DEST
  3132 340F A9 7C			lda #$7C
  3133 3411 85 8D			sta SYSTEM.MOVE_0458.DEST+1
  3134 3413 A9 C0			lda #$C0
  3135 3415 85 84			sta SYSTEM.MOVE_0458.COUNT
  3136 3417 A9 03			lda #$03
  3137 3419 85 85			sta SYSTEM.MOVE_0458.COUNT+1
  3138 341B				.local +MAIN.SYSTEM.MOVE_0458
  3139 341B				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0458.M@INLINE [Source: artur.a65]
     4 341B 20 74 27			jsr @move
Source: artur.a65
  3140 					.endl
  3141
  3142 				; ------------------------------------------------------------
  3143
  3144 = 62E6			BUFNUM	= DATAORIGIN+$0A56
  3145
  3146 = 62E6			@VarData	= BUFNUM
  3147 = 0001			@VarDataSize	= 1
  3148
  3149 341E			@exit
  3150 					.ifdef @new
  3151 					lda <@VarData
  3152 					sta :ztmp
  3153 					lda >@VarData
  3154 					ldy #@VarDataSize-1
  3155 					jmp @FreeMem
  3156 					els
  3157 341E 60				rts						; ret
  3158 					eif
  3159 				.endl
  3160
  3161 341F			.local	REMOVEBUFFERFROMUNDOACTIONS			; PROCEDURE
  3162 341F 8D E7 62			sta BUFNUM
  3163
  3164 				; optimize OK (artur.pas), line = 226
  3165
  3166 3422 AD 87 62			lda UNDOACTIONSIDX
  3167 3425 8D E8 62			sta UNDOPTR
  3168
  3169 				; --- RepeatUntilProlog
  3170 3428			l_0AEA
  3171
  3172 				; optimize OK (artur.pas), line = 228
  3173
  3174 3428 AD E8 62			lda UNDOPTR
  3175 342B D0 05			jne l_0AFC
  3176 342D A9 40			lda #$40
  3177 342F 8D E8 62			sta UNDOPTR
  3178 3432			l_0AFC
  3179
  3180 				; optimize FAIL (0, artur.pas), line = 229
  3181
  3182 3432 CE E8 62			dec UNDOPTR
  3183
  3184 				; optimize OK (artur.pas), line = 230
  3185
  3186 3435 AD E8 62			lda UNDOPTR
  3187 3438 0A				asl @
  3188 3439 18 6D E8 62			add UNDOPTR
  3189 343D A8				tay
  3190 343E B9 C6 61			lda adr.UNDOACTIONS,y
  3191 3441 8D E9 62			sta ACTION
  3192
  3193 				; optimize OK (artur.pas), line = 231
  3194
  3195 3444 C9 FE			cmp #$FE
  3196 3446 D0 10			jne l_0B2A
  3197
  3198 				; optimize OK (artur.pas), line = 232
  3199
  3200 3448 B9 C7 61			lda adr.UNDOACTIONS+$01,y
  3201 344B CD E7 62			cmp BUFNUM
  3202 344E D0 08			jne l_0B4A
  3203
  3204 				; optimize OK (artur.pas), line = 233
  3205
  3206 3450 A9 FF			lda #$FF
  3207 3452 99 C6 61			sta adr.UNDOACTIONS,y
  3208
  3209 				; optimize OK (artur.pas), line = 234
  3210
  3211 3455 8D E9 62			sta ACTION
  3212 3458			l_0B4A
  3213 3458			l_0B2A
  3214
  3215 				; optimize OK (artur.pas), line = 236
  3216
  3217 3458 AD E9 62			lda ACTION
  3218 345B C9 FF			cmp #$FF
  3219 345D F0 08			jeq l_0AEAx
  3220 345F AD E8 62			lda UNDOPTR
  3221 3462 CD 87 62			cmp UNDOACTIONSIDX
  3222 3465 D0 C1			jne l_0AEA
  3223 3467			l_0AEAx
  3224
  3225 				; ------------------------------------------------------------
  3226
  3227 = 62E7			BUFNUM	= DATAORIGIN+$0A57
  3228 = 62E8			UNDOPTR	= DATAORIGIN+$0A58
  3229 = 62E9			ACTION	= DATAORIGIN+$0A59
  3230
  3231 = 62E7			@VarData	= BUFNUM
  3232 = 0003			@VarDataSize	= 3
  3233
  3234 3467			@exit
  3235 					.ifdef @new
  3236 					lda <@VarData
  3237 					sta :ztmp
  3238 					lda >@VarData
  3239 					ldy #@VarDataSize-1
  3240 					jmp @FreeMem
  3241 					els
  3242 3467 60				rts						; ret
  3243 					eif
  3244 				.endl
  3245
  3246 3468			.local	STOREUNDOBUFFER					; PROCEDURE
  3247
  3248 				; optimize OK (artur.pas), line = 241
  3249
  3250 3468 AD 86 62			lda UNDOBUFFERIDX
  3251 346B 20 D9 33			jsr STORESCREENTOUNDOBUFFER
  3252
  3253 				; optimize OK (artur.pas), line = 242
  3254
  3255 346E AD 86 62			lda UNDOBUFFERIDX
  3256 3471 20 1F 34			jsr REMOVEBUFFERFROMUNDOACTIONS
  3257
  3258 				; optimize OK (artur.pas), line = 243
  3259
  3260 3474 AD 87 62			lda UNDOACTIONSIDX
  3261 3477 0A				asl @
  3262 3478 18 6D 87 62			add UNDOACTIONSIDX
  3263 347C A8				tay
  3264 347D A9 FE			lda #$FE
  3265 347F 99 C6 61			sta adr.UNDOACTIONS,y
  3266
  3267 				; optimize OK (artur.pas), line = 244
  3268
  3269 3482 AD 86 62			lda UNDOBUFFERIDX
  3270 3485 99 C7 61			sta adr.UNDOACTIONS+$01,y
  3271
  3272 				; optimize FAIL (0, artur.pas), line = 245
  3273
  3274 3488 EE 86 62			inc UNDOBUFFERIDX
  3275
  3276 				; optimize OK (artur.pas), line = 246
  3277
  3278 348B AD 86 62			lda UNDOBUFFERIDX
  3279 348E C9 08			cmp #$08
  3280 3490 D0 05			jne l_0BBF
  3281 3492 A9 00			lda #$00
  3282 3494 8D 86 62			sta UNDOBUFFERIDX
  3283 3497			l_0BBF
  3284 3497			@exit
  3285 					.ifdef @new
  3286 					lda <@VarData
  3287 					sta :ztmp
  3288 					lda >@VarData
  3289 					ldy #@VarDataSize-1
  3290 					jmp @FreeMem
  3291 					els
  3292 3497 60				rts						; ret
  3293 					eif
  3294 				.endl
  3295
  3296 3498			.local	RESTORECHARFROMUNDO				; PROCEDURE
  3297 3498 8D EA 62			sta IDX
  3298
  3299 				; optimize OK (artur.pas), line = 252
  3300
  3301 349B 0A				asl @
  3302 349C 18 6D EA 62			add IDX
  3303 34A0 A8				tay
  3304 34A1 B9 C6 61			lda adr.UNDOACTIONS,y
  3305 34A4 8D EB 62			sta RX
  3306
  3307 				; optimize OK (artur.pas), line = 253
  3308
  3309 34A7 B9 C7 61			lda adr.UNDOACTIONS+$01,y
  3310 34AA 8D EC 62			sta RY
  3311
  3312 				; optimize OK (artur.pas), line = 254
  3313
  3314 34AD B9 C8 61			lda adr.UNDOACTIONS+$02,y
  3315 34B0 8D ED 62			sta RC
  3316
  3317 				; optimize OK (artur.pas), line = 255
  3318
  3319 34B3 AD EC 62			lda RY
  3320 34B6 0A				asl @
  3321 34B7 A8				tay
  3322 34B8 AD EB 62			lda RX
  3323 34BB 18 79 89 62			add adr.LINEOFFSET,y
  3324 34BF 85 9E			sta :STACKORIGIN+10
  3325 34C1 A9 7C			lda #$7C
  3326 34C3 79 8A 62			adc adr.LINEOFFSET+1,y
  3327 34C6 85 81			sta :bp+1
  3328 34C8 A4 9E			ldy :STACKORIGIN+10
  3329 34CA AD ED 62			lda RC
  3330 34CD 91 80			sta (:bp),y
  3331
  3332 				; ------------------------------------------------------------
  3333
  3334 = 62EA			IDX	= DATAORIGIN+$0A5A
  3335 = 62EB			RX	= DATAORIGIN+$0A5B
  3336 = 62EC			RY	= DATAORIGIN+$0A5C
  3337 = 62ED			RC	= DATAORIGIN+$0A5D
  3338
  3339 = 62EA			@VarData	= IDX
  3340 = 0004			@VarDataSize	= 4
  3341
  3342 34CF			@exit
  3343 					.ifdef @new
  3344 					lda <@VarData
  3345 					sta :ztmp
  3346 					lda >@VarData
  3347 					ldy #@VarDataSize-1
  3348 					jmp @FreeMem
  3349 					els
  3350 34CF 60				rts						; ret
  3351 					eif
  3352 				.endl
  3353
  3354 34D0			.local	RESTORE						; PROCEDURE
  3355 34D0 8D EE 62			sta ACTIONIDX
  3356
  3357 				; optimize OK (artur.pas), line = 260
  3358
  3359 34D3 0A				asl @
  3360 34D4 18 6D EE 62			add ACTIONIDX
  3361 34D8 A8				tay
  3362 34D9 B9 C6 61			lda adr.UNDOACTIONS,y
  3363 34DC C9 FE			cmp #$FE
  3364 34DE D0 18			jne l_0C31
  3365
  3366 				; optimize FAIL ('STOREUNDOBUFFER', artur.pas), line = 261
  3367
  3368 34E0 20 68 34			jsr STOREUNDOBUFFER
  3369
  3370 				; optimize OK (artur.pas), line = 262
  3371
  3372 34E3 AD EE 62			lda ACTIONIDX
  3373 34E6 8D 87 62			sta UNDOACTIONSIDX
  3374
  3375 				; optimize OK (artur.pas), line = 263
  3376
  3377 34E9 0A				asl @
  3378 34EA 18 6D EE 62			add ACTIONIDX
  3379 34EE A8				tay
  3380 34EF B9 C7 61			lda adr.UNDOACTIONS+$01,y
  3381 34F2 20 FC 33			jsr RESTORESCREENFROMUNDOBUFFER
  3382 34F5 4C 19 35			jmp l_0C51
  3383 34F8			l_0C31
  3384
  3385 				; optimize OK (artur.pas), line = 265
  3386
  3387 34F8 AD EE 62			lda ACTIONIDX
  3388 34FB 0A				asl @
  3389 34FC 18 6D EE 62			add ACTIONIDX
  3390 3500 A8				tay
  3391 3501 B9 C7 61			lda adr.UNDOACTIONS+$01,y
  3392 3504 8D E4 62			sta STOREUNDOFROMXY.Y
  3393 3507 B9 C6 61			lda adr.UNDOACTIONS,y
  3394 350A 8D E3 62			sta STOREUNDOFROMXY.X
  3395 350D 20 C3 33			jsr STOREUNDOFROMXY
  3396
  3397 				; optimize OK (artur.pas), line = 266
  3398
  3399 3510 AD EE 62			lda ACTIONIDX
  3400 3513 8D 87 62			sta UNDOACTIONSIDX
  3401
  3402 				; optimize OK (artur.pas), line = 267
  3403
  3404 3516 20 98 34			jsr RESTORECHARFROMUNDO
  3405 3519			l_0C51
  3406
  3407 				; ------------------------------------------------------------
  3408
  3409 = 62EE			ACTIONIDX	= DATAORIGIN+$0A5E
  3410
  3411 = 62EE			@VarData	= ACTIONIDX
  3412 = 0001			@VarDataSize	= 1
  3413
  3414 3519			@exit
  3415 					.ifdef @new
  3416 					lda <@VarData
  3417 					sta :ztmp
  3418 					lda >@VarData
  3419 					ldy #@VarDataSize-1
  3420 					jmp @FreeMem
  3421 					els
  3422 3519 60				rts						; ret
  3423 					eif
  3424 				.endl
  3425
  3426 351A			.local	STOREUNDOACTION					; PROCEDURE
  3427 351A 8D EF 62			sta WHOLESCREEN
  3428
  3429 				; optimize OK (artur.pas), line = 273
  3430
  3431 351D A9 00			lda #$00
  3432 351F 8D 88 62			sta REDOCOUNT
  3433
  3434 				; optimize OK (artur.pas), line = 274
  3435
  3436 3522 AD EF 62			lda WHOLESCREEN
  3437 3525 F0 06			jeq l_0C8C
  3438
  3439 				; optimize FAIL ('STOREUNDOBUFFER', artur.pas), line = 275
  3440
  3441 3527 20 68 34			jsr STOREUNDOBUFFER
  3442 352A 4C 3C 35			jmp l_0C97
  3443 352D			l_0C8C
  3444 352D AD 93 61			lda CURSORX
  3445 3530 8D E3 62			sta STOREUNDOFROMXY.X
  3446 3533 AD 94 61			lda CURSORY
  3447 3536 8D E4 62			sta STOREUNDOFROMXY.Y
  3448 3539 20 C3 33			jsr STOREUNDOFROMXY
  3449 353C			l_0C97
  3450
  3451 				; optimize FAIL ('NEXTACTION', artur.pas), line = 276
  3452
  3453 353C 20 08 33			jsr NEXTACTION
  3454 353F AD DC 62			lda NEXTACTION.RESULT
  3455 3542 8D 87 62			sta UNDOACTIONSIDX
  3456
  3457 				; ------------------------------------------------------------
  3458
  3459 = 62EF			WHOLESCREEN	= DATAORIGIN+$0A5F
  3460
  3461 = 62EF			@VarData	= WHOLESCREEN
  3462 = 0001			@VarDataSize	= 1
  3463
  3464 3545			@exit
  3465 					.ifdef @new
  3466 					lda <@VarData
  3467 					sta :ztmp
  3468 					lda >@VarData
  3469 					ldy #@VarDataSize-1
  3470 					jmp @FreeMem
  3471 					els
  3472 3545 60				rts						; ret
  3473 					eif
  3474 				.endl
  3475
  3476 3546			.local	TRYUNDO						; PROCEDURE
  3477
  3478 				; optimize FAIL ('PREVACTION', artur.pas), line = 282
  3479
  3480 3546 20 1C 33			jsr PREVACTION
  3481 3549 AD DD 62			lda PREVACTION.RESULT
  3482 354C 8D F0 62			sta PREV
  3483
  3484 				; optimize OK (artur.pas), line = 283
  3485
  3486 354F 0A				asl @
  3487 3550 18 6D F0 62			add PREV
  3488 3554 A8				tay
  3489 3555 B9 C6 61			lda adr.UNDOACTIONS,y
  3490 3558 C9 FF			cmp #$FF
  3491 355A F0 1F			jeq l_0CC7
  3492
  3493 				; optimize OK (artur.pas), line = 284
  3494
  3495 355C AD F0 62			lda PREV
  3496 355F 20 D0 34			jsr RESTORE
  3497
  3498 				; optimize OK (artur.pas), line = 285
  3499
  3500 3562 AD F0 62			lda PREV
  3501 3565 0A				asl @
  3502 3566 18 6D F0 62			add PREV
  3503 356A A8				tay
  3504 356B B9 C6 61			lda adr.UNDOACTIONS,y
  3505 356E C9 FE			cmp #$FE
  3506 3570 D0 06			jne l_0CE9
  3507 3572 B9 C7 61			lda adr.UNDOACTIONS+$01,y
  3508 3575 8D 86 62			sta UNDOBUFFERIDX
  3509 3578			l_0CE9
  3510
  3511 				; optimize FAIL (0, artur.pas), line = 286
  3512
  3513 3578 EE 88 62			inc REDOCOUNT
  3514 357B			l_0CC7
  3515
  3516 				; ------------------------------------------------------------
  3517
  3518 = 62F0			PREV	= DATAORIGIN+$0A60
  3519
  3520 = 62F0			@VarData	= PREV
  3521 = 0001			@VarDataSize	= 1
  3522
  3523 357B			@exit
  3524 					.ifdef @new
  3525 					lda <@VarData
  3526 					sta :ztmp
  3527 					lda >@VarData
  3528 					ldy #@VarDataSize-1
  3529 					jmp @FreeMem
  3530 					els
  3531 357B 60				rts						; ret
  3532 					eif
  3533 				.endl
  3534
  3535 357C			.local	TRYREDO						; PROCEDURE
  3536
  3537 				; optimize FAIL ('NEXTACTION', artur.pas), line = 293
  3538
  3539 357C 20 08 33			jsr NEXTACTION
  3540 357F AD DC 62			lda NEXTACTION.RESULT
  3541 3582 8D F1 62			sta NEXT
  3542
  3543 				; optimize OK (artur.pas), line = 294
  3544
  3545 3585 AD 88 62			lda REDOCOUNT
  3546 3588 F0 19			jeq l_0D1D
  3547
  3548 				; optimize OK (artur.pas), line = 295
  3549
  3550 358A AD F1 62			lda NEXT
  3551 358D 0A				asl @
  3552 358E 18 6D F1 62			add NEXT
  3553 3592 A8				tay
  3554 3593 B9 C6 61			lda adr.UNDOACTIONS,y
  3555 3596 C9 FF			cmp #$FF
  3556 3598 F0 09			jeq l_0D3B
  3557
  3558 				; optimize OK (artur.pas), line = 296
  3559
  3560 359A AD F1 62			lda NEXT
  3561 359D 20 D0 34			jsr RESTORE
  3562
  3563 				; optimize FAIL (0, artur.pas), line = 297
  3564
  3565 35A0 CE 88 62			dec REDOCOUNT
  3566 35A3			l_0D3B
  3567 35A3			l_0D1D
  3568
  3569 				; ------------------------------------------------------------
  3570
  3571 = 62F1			NEXT	= DATAORIGIN+$0A61
  3572
  3573 = 62F1			@VarData	= NEXT
  3574 = 0001			@VarDataSize	= 1
  3575
  3576 35A3			@exit
  3577 					.ifdef @new
  3578 					lda <@VarData
  3579 					sta :ztmp
  3580 					lda >@VarData
  3581 					ldy #@VarDataSize-1
  3582 					jmp @FreeMem
  3583 					els
  3584 35A3 60				rts						; ret
  3585 					eif
  3586 				.endl
  3587
  3588 35A4			.local	CLEAREDIT					; PROCEDURE
  3589
  3590 				; optimize OK (artur.pas), line = 309
  3591
  3592 35A4 A9 00			lda #$00
  3593 35A6 85 88			sta SYSTEM.FILLBYTE_0457.A
  3594 35A8 A9 7C			lda #$7C
  3595 35AA 85 89			sta SYSTEM.FILLBYTE_0457.A+1
  3596 35AC A9 C0			lda #$C0
  3597 35AE 85 8C			sta SYSTEM.FILLBYTE_0457.COUNT
  3598 35B0 A9 03			lda #$03
  3599 35B2 85 8D			sta SYSTEM.FILLBYTE_0457.COUNT+1
  3600 35B4 A9 00			lda #$00
  3601 35B6 85 84			sta SYSTEM.FILLBYTE_0457.VALUE
  3602 35B8				.local +MAIN.SYSTEM.FILLBYTE_0457
  3603 35B8				m@INLINE
Macro: MAIN.SYSTEM.FILLBYTE_0457.M@INLINE [Source: artur.a65]
     4 35B8 20 C9 27			jsr @fill
Source: artur.a65
  3604 					.endl
  3605 35BB			@exit
  3606 					.ifdef @new
  3607 					lda <@VarData
  3608 					sta :ztmp
  3609 					lda >@VarData
  3610 					ldy #@VarDataSize-1
  3611 					jmp @FreeMem
  3612 					els
  3613 35BB 60				rts						; ret
  3614 					eif
  3615 				.endl
  3616
  3617 35BC			.local	CLEARBUFFER					; PROCEDURE
  3618
  3619 				; optimize OK (artur.pas), line = 314
  3620
  3621 35BC A9 00			lda #$00
  3622 35BE 85 88			sta SYSTEM.FILLBYTE_0457.A
  3623 35C0 A9 78			lda #$78
  3624 35C2 85 89			sta SYSTEM.FILLBYTE_0457.A+1
  3625 35C4 A9 C0			lda #$C0
  3626 35C6 85 8C			sta SYSTEM.FILLBYTE_0457.COUNT
  3627 35C8 A9 03			lda #$03
  3628 35CA 85 8D			sta SYSTEM.FILLBYTE_0457.COUNT+1
  3629 35CC A9 00			lda #$00
  3630 35CE 85 84			sta SYSTEM.FILLBYTE_0457.VALUE
  3631 35D0				.local +MAIN.SYSTEM.FILLBYTE_0457
  3632 35D0				m@INLINE
Macro: MAIN.SYSTEM.FILLBYTE_0457.M@INLINE [Source: artur.a65]
     4 35D0 20 C9 27			jsr @fill
Source: artur.a65
  3633 					.endl
  3634 35D3			@exit
  3635 					.ifdef @new
  3636 					lda <@VarData
  3637 					sta :ztmp
  3638 					lda >@VarData
  3639 					ldy #@VarDataSize-1
  3640 					jmp @FreeMem
  3641 					els
  3642 35D3 60				rts						; ret
  3643 					eif
  3644 				.endl
  3645
  3646 35D4			.local	STOREEDITINBUFFER				; PROCEDURE
  3647
  3648 				; optimize OK (artur.pas), line = 319
  3649
  3650 35D4 A9 00			lda #$00
  3651 35D6 85 88			sta SYSTEM.MOVE_0458.SOURCE
  3652 35D8 A9 7C			lda #$7C
  3653 35DA 85 89			sta SYSTEM.MOVE_0458.SOURCE+1
  3654 35DC A9 00			lda #$00
  3655 35DE 85 8C			sta SYSTEM.MOVE_0458.DEST
  3656 35E0 A9 78			lda #$78
  3657 35E2 85 8D			sta SYSTEM.MOVE_0458.DEST+1
  3658 35E4 A9 C0			lda #$C0
  3659 35E6 85 84			sta SYSTEM.MOVE_0458.COUNT
  3660 35E8 A9 03			lda #$03
  3661 35EA 85 85			sta SYSTEM.MOVE_0458.COUNT+1
  3662 35EC				.local +MAIN.SYSTEM.MOVE_0458
  3663 35EC				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0458.M@INLINE [Source: artur.a65]
     4 35EC 20 74 27			jsr @move
Source: artur.a65
  3664 					.endl
  3665 35EF			@exit
  3666 					.ifdef @new
  3667 					lda <@VarData
  3668 					sta :ztmp
  3669 					lda >@VarData
  3670 					ldy #@VarDataSize-1
  3671 					jmp @FreeMem
  3672 					els
  3673 35EF 60				rts						; ret
  3674 					eif
  3675 				.endl
  3676
  3677 35F0			.local	RESTOREEDITFROMBUFFER				; PROCEDURE
  3678
  3679 				; optimize OK (artur.pas), line = 324
  3680
  3681 35F0 A9 00			lda #$00
  3682 35F2 85 88			sta SYSTEM.MOVE_0458.SOURCE
  3683 35F4 A9 78			lda #$78
  3684 35F6 85 89			sta SYSTEM.MOVE_0458.SOURCE+1
  3685 35F8 A9 00			lda #$00
  3686 35FA 85 8C			sta SYSTEM.MOVE_0458.DEST
  3687 35FC A9 7C			lda #$7C
  3688 35FE 85 8D			sta SYSTEM.MOVE_0458.DEST+1
  3689 3600 A9 C0			lda #$C0
  3690 3602 85 84			sta SYSTEM.MOVE_0458.COUNT
  3691 3604 A9 03			lda #$03
  3692 3606 85 85			sta SYSTEM.MOVE_0458.COUNT+1
  3693 3608				.local +MAIN.SYSTEM.MOVE_0458
  3694 3608				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0458.M@INLINE [Source: artur.a65]
     4 3608 20 74 27			jsr @move
Source: artur.a65
  3695 					.endl
  3696 360B			@exit
  3697 					.ifdef @new
  3698 					lda <@VarData
  3699 					sta :ztmp
  3700 					lda >@VarData
  3701 					ldy #@VarDataSize-1
  3702 					jmp @FreeMem
  3703 					els
  3704 360B 60				rts						; ret
  3705 					eif
  3706 				.endl
  3707
  3708 360C			.local	DRAWRECT					; PROCEDURE
  3709
  3710 				; optimize OK (artur.pas), line = 330
  3711
  3712 360C AD F3 62			lda Y
  3713 360F 0A				asl @
  3714 3610 A8				tay
  3715 3611 B9 89 62			lda adr.LINEOFFSET,y
  3716 3614 18 6D F2 62			add X
  3717 3618 8D F7 62			sta CARRET
  3718 361B B9 8A 62			lda adr.LINEOFFSET+1,y
  3719 361E 69 7C			adc #$7C
  3720 3620 8D F8 62			sta CARRET+1
  3721
  3722 				; --- RepeatUntilProlog
  3723 3623			l_0D7F
  3724
  3725 				; optimize OK (artur.pas), line = 332
  3726
  3727 3623 AD F7 62			lda CARRET
  3728 3626 85 88			sta SYSTEM.FILLBYTE_0457.A
  3729 3628 AD F8 62			lda CARRET+1
  3730 362B 85 89			sta SYSTEM.FILLBYTE_0457.A+1
  3731 362D AD F4 62			lda W
  3732 3630 85 8C			sta SYSTEM.FILLBYTE_0457.COUNT
  3733 3632 A9 00			lda #$00
  3734 3634 85 8D			sta SYSTEM.FILLBYTE_0457.COUNT+1
  3735 3636 AD F6 62			lda C
  3736 3639 85 84			sta SYSTEM.FILLBYTE_0457.VALUE
  3737 363B				.local +MAIN.SYSTEM.FILLBYTE_0457
  3738 363B				m@INLINE
Macro: MAIN.SYSTEM.FILLBYTE_0457.M@INLINE [Source: artur.a65]
     4 363B 20 C9 27			jsr @fill
Source: artur.a65
  3739 					.endl
  3740
  3741 				; optimize OK (artur.pas), line = 333
  3742
  3743 363E AD F7 62			lda CARRET
  3744 3641 18 69 28			add #$28
  3745 3644 8D F7 62			sta CARRET
  3746 3647 90 03			scc
  3747 3649 EE F8 62			inc CARRET+1
  3748
  3749 				; optimize FAIL (0, artur.pas), line = 334
  3750
  3751 364C CE F5 62			dec H
  3752
  3753 				; optimize OK (artur.pas), line = 335
  3754
  3755 364F D0 D2			jne l_0D7F
  3756
  3757 				; ------------------------------------------------------------
  3758
  3759 = 62F2			X	= DATAORIGIN+$0A62
  3760 = 62F3			Y	= DATAORIGIN+$0A63
  3761 = 62F4			W	= DATAORIGIN+$0A64
  3762 = 62F5			H	= DATAORIGIN+$0A65
  3763 = 62F6			C	= DATAORIGIN+$0A66
  3764 = 62F7			CARRET	= DATAORIGIN+$0A67
  3765
  3766 = 62F2			@VarData	= X
  3767 = 0007			@VarDataSize	= 7
  3768
  3769 3651			@exit
  3770 					.ifdef @new
  3771 					lda <@VarData
  3772 					sta :ztmp
  3773 					lda >@VarData
  3774 					ldy #@VarDataSize-1
  3775 					jmp @FreeMem
  3776 					els
  3777 3651 60				rts						; ret
  3778 					eif
  3779 				.endl
  3780
  3781 3652			.local	READCURSORCHAR					; PROCEDURE
  3782
  3783 				; optimize OK (artur.pas), line = 340
  3784
  3785 3652 AC 95 61			ldy CURSOR
  3786 3655 A9 7C			lda #$7C
  3787 3657 18 6D 96 61			add CURSOR+1
  3788 365B 85 81			sta :bp+1
  3789 365D B1 80			lda (:bp),y
  3790 365F 8D 97 61			sta CURSORCHAR
  3791
  3792 				; optimize OK (artur.pas), line = 341
  3793
  3794 3662 AD 4D 61			lda CONFIG.KEYCODEDISPLAY
  3795 3665 C9 02			cmp #$02
  3796 3667 D0 0C			jne l_0DC2
  3797 3669 AD 97 61			lda CURSORCHAR
  3798 366C 20 FC 2C			jsr B_CRT.ANTIC2ATASCII_0539
  3799 366F AD 1D 5A			lda B_CRT.ANTIC2ATASCII_0539.RESULT
  3800 3672 8D 97 61			sta CURSORCHAR
  3801 3675			l_0DC2
  3802 3675			@exit
  3803 					.ifdef @new
  3804 					lda <@VarData
  3805 					sta :ztmp
  3806 					lda >@VarData
  3807 					ldy #@VarDataSize-1
  3808 					jmp @FreeMem
  3809 					els
  3810 3675 60				rts						; ret
  3811 					eif
  3812 				.endl
  3813
  3814 3676			.local	UPDATEXYK					; PROCEDURE
  3815
  3816 				; optimize FAIL ('SYSTEM.STR_0449', artur.pas), line = 346
  3817
  3818 3676 E8				inx
  3819 3677 AD 7F 58 95 94		mva S :STACKORIGIN,x
  3820 367C AD 80 58 95 A4		mva S+1 :STACKORIGIN+STACKWIDTH,x
  3821 3681 E8				inx
  3822 3682 AD 93 61 95 94		mva CURSORX :STACKORIGIN,x
  3823 3687 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3824 368B A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  3825 368F A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  3826 3693 20 3E 2A			jsr SYSTEM.STR_0449
  3827
  3828 				; optimize FAIL ('B_CRT.ATASCII2ANTIC_053D', artur.pas), line = 347
  3829
  3830 3696 E8				inx
  3831 3697 AD 7F 58 95 94		mva S :STACKORIGIN,x
  3832 369C AD 80 58 95 A4		mva S+1 :STACKORIGIN+STACKWIDTH,x
  3833 36A1 20 14 2D			jsr B_CRT.ATASCII2ANTIC_053D
  3834 36A4 E8				inx
  3835 36A5 AD 69 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT
  3836 36A8 85 88			sta @move.src
  3837 36AA AD 6A 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
  3838 36AD 85 89			sta @move.src+1
  3839 					@moveSTRING S #41
  3839 				 MWA S @MOVE.DST\ MWA #41 @MOVE.CNT\ JSR @MOVESTRING
  3839 36AF AD 7F 58 85 8C AD +  MWA S @MOVE.DST
  3839 36B9 A9 29 85 84 A9 00 +  MWA #41 @MOVE.CNT
  3839 36C1 20 11 28		 JSR @MOVESTRING
  3840 36C4 CA				dex
  3841
  3842 				; optimize OK (artur.pas), line = 348
  3843
  3844 36C5 A9 00			lda #$00
  3845 36C7 8D CC 7F			sta $7FCC
  3846
  3847 				; optimize OK (artur.pas), line = 349
  3848
  3849 36CA AD 51 61			lda adr.S+$00
  3850 36CD 85 84			sta SYSTEM.MOVE_045A.COUNT
  3851 36CF A9 52			lda <adr.S+$01
  3852 36D1 85 88			sta SYSTEM.MOVE_045A.SOURCE
  3853 36D3 A9 61			lda >adr.S+$01
  3854 36D5 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  3855 36D7 A9 CB			lda #$CB
  3856 36D9 85 8C			sta SYSTEM.MOVE_045A.DEST
  3857 36DB A9 7F			lda #$7F
  3858 36DD 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  3859 36DF A9 00			lda #$00
  3860 36E1 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  3861 36E3				.local +MAIN.SYSTEM.MOVE_045A
  3862 36E3				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 36E3 20 74 27			jsr @move
Source: artur.a65
  3863 					.endl
  3864
  3865 				; optimize FAIL ('SYSTEM.STR_0449', artur.pas), line = 351
  3866
  3867 36E6 E8				inx
  3868 36E7 AD 7F 58 95 94		mva S :STACKORIGIN,x
  3869 36EC AD 80 58 95 A4		mva S+1 :STACKORIGIN+STACKWIDTH,x
  3870 36F1 E8				inx
  3871 36F2 AD 94 61 95 94		mva CURSORY :STACKORIGIN,x
  3872 36F7 A9 00 95 A4			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3873 36FB A9 00 95 B4			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
  3874 36FF A9 00 95 C4			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
  3875 3703 20 3E 2A			jsr SYSTEM.STR_0449
  3876
  3877 				; optimize FAIL ('B_CRT.ATASCII2ANTIC_053D', artur.pas), line = 352
  3878
  3879 3706 E8				inx
  3880 3707 AD 7F 58 95 94		mva S :STACKORIGIN,x
  3881 370C AD 80 58 95 A4		mva S+1 :STACKORIGIN+STACKWIDTH,x
  3882 3711 20 14 2D			jsr B_CRT.ATASCII2ANTIC_053D
  3883 3714 E8				inx
  3884 3715 AD 69 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT
  3885 3718 85 88			sta @move.src
  3886 371A AD 6A 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
  3887 371D 85 89			sta @move.src+1
  3888 					@moveSTRING S #41
  3888 				 MWA S @MOVE.DST\ MWA #41 @MOVE.CNT\ JSR @MOVESTRING
  3888 371F AD 7F 58 85 8C AD +  MWA S @MOVE.DST
  3888 3729 A9 29 85 84 A9 00 +  MWA #41 @MOVE.CNT
  3888 3731 20 11 28		 JSR @MOVESTRING
  3889 3734 CA				dex
  3890
  3891 				; optimize OK (artur.pas), line = 353
  3892
  3893 3735 A9 00			lda #$00
  3894 3737 8D D0 7F			sta $7FD0
  3895
  3896 				; optimize OK (artur.pas), line = 354
  3897
  3898 373A AD 51 61			lda adr.S+$00
  3899 373D 85 84			sta SYSTEM.MOVE_045A.COUNT
  3900 373F A9 52			lda <adr.S+$01
  3901 3741 85 88			sta SYSTEM.MOVE_045A.SOURCE
  3902 3743 A9 61			lda >adr.S+$01
  3903 3745 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  3904 3747 A9 CF			lda #$CF
  3905 3749 85 8C			sta SYSTEM.MOVE_045A.DEST
  3906 374B A9 7F			lda #$7F
  3907 374D 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  3908 374F A9 00			lda #$00
  3909 3751 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  3910 3753				.local +MAIN.SYSTEM.MOVE_045A
  3911 3753				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 3753 20 74 27			jsr @move
Source: artur.a65
  3912 					.endl
  3913
  3914 				; optimize OK (artur.pas), line = 356
  3915
  3916 3756 AD 4D 61			lda CONFIG.KEYCODEDISPLAY
  3917 3759 F0 64			jeq l_0E08
  3918
  3919 				; optimize OK (artur.pas), line = 357
  3920
  3921 375B A9 AB			lda #$AB
  3922 375D 8D D2 7F			sta $7FD2
  3923
  3924 				; optimize OK (artur.pas), line = 358
  3925
  3926 3760 AD 97 61			lda CURSORCHAR
  3927 3763 85 88			sta SYSTEM.HEXSTR.VALUE
  3928 3765 A9 00			lda #$00
  3929 3767 85 89			sta SYSTEM.HEXSTR.VALUE+1
  3930 3769 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  3931 376B 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  3932 376D A9 02			lda #$02
  3933 376F 85 8C			sta SYSTEM.HEXSTR.DIGITS
  3934 3771 20 F6 29			jsr SYSTEM.HEXSTR
  3935 3774 E8				inx
  3936 3775 AD 05 2A 95 94		mva SYSTEM.HEXSTR.RESULT :STACKORIGIN,x
  3937 377A AD 06 2A 95 A4		mva SYSTEM.HEXSTR.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  3938 377F 20 14 2D			jsr B_CRT.ATASCII2ANTIC_053D
  3939 3782 E8				inx
  3940 3783 AD 69 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT
  3941 3786 85 88			sta @move.src
  3942 3788 AD 6A 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
  3943 378B 85 89			sta @move.src+1
  3944 					@moveSTRING S #41
  3944 				 MWA S @MOVE.DST\ MWA #41 @MOVE.CNT\ JSR @MOVESTRING
  3944 378D AD 7F 58 85 8C AD +  MWA S @MOVE.DST
  3944 3797 A9 29 85 84 A9 00 +  MWA #41 @MOVE.CNT
  3944 379F 20 11 28		 JSR @MOVESTRING
  3945 37A2 CA				dex
  3946
  3947 				; optimize OK (artur.pas), line = 359
  3948
  3949 37A3 AD 51 61			lda adr.S+$00
  3950 37A6 85 84			sta SYSTEM.MOVE_045A.COUNT
  3951 37A8 A9 52			lda <adr.S+$01
  3952 37AA 85 88			sta SYSTEM.MOVE_045A.SOURCE
  3953 37AC A9 61			lda >adr.S+$01
  3954 37AE 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  3955 37B0 A9 D3			lda #$D3
  3956 37B2 85 8C			sta SYSTEM.MOVE_045A.DEST
  3957 37B4 A9 7F			lda #$7F
  3958 37B6 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  3959 37B8 A9 00			lda #$00
  3960 37BA 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  3961 37BC				.local +MAIN.SYSTEM.MOVE_045A
  3962 37BC				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 37BC 20 74 27			jsr @move
Source: artur.a65
  3963 					.endl
  3964 37BF			l_0E08
  3965 37BF			@exit
  3966 					.ifdef @new
  3967 					lda <@VarData
  3968 					sta :ztmp
  3969 					lda >@VarData
  3970 					ldy #@VarDataSize-1
  3971 					jmp @FreeMem
  3972 					els
  3973 37BF 60				rts						; ret
  3974 					eif
  3975 				.endl
  3976
  3977 37C0			.local	SHOWSTATUS					; PROCEDURE
  3978
  3979 				; optimize FAIL ('SYSTEM.PAUSE_0479', artur.pas), line = 365
  3980
  3981 37C0 20 A2 2A			jsr SYSTEM.PAUSE_0479
  3982
  3983 				; optimize OK (artur.pas), line = 366
  3984
  3985 37C3 A9 00			lda #$00
  3986 37C5 A0 27			ldy #$27
  3987 37C7 99 C0 7F 88 10 FA		sta:rpl $7FC0,y-
  3988 37CD A0 ED			ldy #256-19
  3989 37CF B9 28 1F 99 64 60 + 	mva:rne CODEORIGIN+$0015+19-256,y adr.S+19-256,y+
  3990
  3991 				; optimize OK (artur.pas), line = 368
  3992
  3993 37D8 AD 51 61			lda adr.S+$00
  3994 37DB 85 84			sta SYSTEM.MOVE_045A.COUNT
  3995 37DD A9 52			lda <adr.S+$01
  3996 37DF 85 88			sta SYSTEM.MOVE_045A.SOURCE
  3997 37E1 A9 61			lda >adr.S+$01
  3998 37E3 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  3999 37E5 A9 C0			lda #$C0
  4000 37E7 85 8C			sta SYSTEM.MOVE_045A.DEST
  4001 37E9 A9 7F			lda #$7F
  4002 37EB 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4003 37ED A9 00			lda #$00
  4004 37EF 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4005 37F1				.local +MAIN.SYSTEM.MOVE_045A
  4006 37F1				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 37F1 20 74 27			jsr @move
Source: artur.a65
  4007 					.endl
  4008 37F4 A0 FA			ldy #256-6
  4009 37F6 B9 2F 1F 99 57 60 + 	mva:rne CODEORIGIN+$0029+6-256,y adr.S+6-256,y+
  4010
  4011 				; optimize OK (artur.pas), line = 371
  4012
  4013 37FF AD 91 61			lda MODE
  4014 3802 C9 01			cmp #$01
  4015 3804 D0 0B			jne l_0E3D
  4016 3806 A0 FA			ldy #256-6
  4017 3808 B9 36 1F 99 57 60 + 	mva:rne CODEORIGIN+$0030+6-256,y adr.S+6-256,y+
  4018 3811			l_0E3D
  4019
  4020 				; optimize OK (artur.pas), line = 372
  4021
  4022 3811 AD 91 61			lda MODE
  4023 3814 C9 02			cmp #$02
  4024 3816 D0 0B			jne l_0E52
  4025 3818 A0 FA			ldy #256-6
  4026 381A B9 3D 1F 99 57 60 + 	mva:rne CODEORIGIN+$0037+6-256,y adr.S+6-256,y+
  4027 3823			l_0E52
  4028
  4029 				; optimize OK (artur.pas), line = 373
  4030
  4031 3823 AD 51 61			lda adr.S+$00
  4032 3826 85 84			sta SYSTEM.MOVE_045A.COUNT
  4033 3828 A9 52			lda <adr.S+$01
  4034 382A 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4035 382C A9 61			lda >adr.S+$01
  4036 382E 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4037 3830 A9 C4			lda #$C4
  4038 3832 85 8C			sta SYSTEM.MOVE_045A.DEST
  4039 3834 A9 7F			lda #$7F
  4040 3836 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4041 3838 A9 00			lda #$00
  4042 383A 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4043 383C				.local +MAIN.SYSTEM.MOVE_045A
  4044 383C				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 383C 20 74 27			jsr @move
Source: artur.a65
  4045 					.endl
  4046
  4047 				; optimize FAIL ('UPDATEXYK', artur.pas), line = 375
  4048
  4049 383F 20 76 36			jsr UPDATEXYK
  4050
  4051 				; optimize OK (artur.pas), line = 377
  4052
  4053 3842 A9 11			lda #$11
  4054 3844 8D 4E 61			sta B
  4055
  4056 3847			l_0E66
  4057 				; --- ForToDoCondition
  4058 3847 AC 4E 61			ldy B
  4059 384A B9 A2 61			lda adr.BRUSHHISTORY,y
  4060 384D 85 9D			sta :STACKORIGIN+9
  4061 384F A9 E7			lda #$E7
  4062 3851 38 ED 4E 61			sub B
  4063 3855 A8				tay
  4064 3856 A9 7F			lda #$7F
  4065 3858 E9 00			sbc #$00
  4066 385A 85 81			sta :bp+1
  4067 385C A5 9D			lda :STACKORIGIN+9
  4068 385E 91 80			sta (:bp),y
  4069 3860 CE 4E 61			dec B
  4070 3863 10 E2			jpl l_0E66
  4071 3865			l_0E74
  4072
  4073 				; optimize OK (artur.pas), line = 378
  4074
  4075 3865 AD 8B 61			lda BRUSH
  4076 3868 8D E7 7F			sta $7FE7
  4077
  4078 				; ------------------------------------------------------------
  4079
  4080 = 0000			@FORTMP_0E63	= $00
  4081 386B			@exit
  4082 					.ifdef @new
  4083 					lda <@VarData
  4084 					sta :ztmp
  4085 					lda >@VarData
  4086 					ldy #@VarDataSize-1
  4087 					jmp @FreeMem
  4088 					els
  4089 386B 60				rts						; ret
  4090 					eif
  4091 				.endl
  4092
  4093 386C			.local	SHOWMENUBAR					; PROCEDURE
  4094
  4095 				; optimize OK (artur.pas), line = 383
  4096
  4097 386C A9 00			lda #$00
  4098 386E A0 27			ldy #$27
  4099 3870 99 C0 7B 88 10 FA		sta:rpl $7BC0,y-
  4100
  4101 				; optimize OK (artur.pas), line = 384
  4102
  4103 3876 AD 91 61			lda MODE
  4104 3879 F0 03 4C FD 38		jne l_0EAE
  4105 387E A0 D7			ldy #256-41
  4106 3880 B9 67 1F 99 7A 60 + 	mva:rne CODEORIGIN+$003E+41-256,y adr.S+41-256,y+
  4107
  4108 				; optimize OK (artur.pas), line = 386
  4109
  4110 3889 AD 51 61			lda adr.S+$00
  4111 388C 85 84			sta SYSTEM.MOVE_045A.COUNT
  4112 388E A9 52			lda <adr.S+$01
  4113 3890 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4114 3892 A9 61			lda >adr.S+$01
  4115 3894 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4116 3896 A9 C0			lda #$C0
  4117 3898 85 8C			sta SYSTEM.MOVE_045A.DEST
  4118 389A A9 7B			lda #$7B
  4119 389C 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4120 389E A9 00			lda #$00
  4121 38A0 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4122 38A2				.local +MAIN.SYSTEM.MOVE_045A
  4123 38A2				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 38A2 20 74 27			jsr @move
Source: artur.a65
  4124 					.endl
  4125
  4126 				; optimize OK (artur.pas), line = 387
  4127
  4128 38A5 AD 9B 61			lda CURSORFORWARD
  4129 38A8 F0 27			jeq l_0EC2
  4130 38AA A0 F9			ldy #256-7
  4131 38AC B9 6F 1F 99 58 60 + 	mva:rne CODEORIGIN+$0068+7-256,y adr.S+7-256,y+
  4132
  4133 				; optimize OK (artur.pas), line = 389
  4134
  4135 38B5 AD 51 61			lda adr.S+$00
  4136 38B8 85 84			sta SYSTEM.MOVE_045A.COUNT
  4137 38BA A9 52			lda <adr.S+$01
  4138 38BC 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4139 38BE A9 61			lda >adr.S+$01
  4140 38C0 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4141 38C2 A9 DA			lda #$DA
  4142 38C4 85 8C			sta SYSTEM.MOVE_045A.DEST
  4143 38C6 A9 7B			lda #$7B
  4144 38C8 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4145 38CA A9 00			lda #$00
  4146 38CC 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4147 38CE				.local +MAIN.SYSTEM.MOVE_045A
  4148 38CE				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 38CE 20 74 27			jsr @move
Source: artur.a65
  4149 					.endl
  4150 38D1			l_0EC2
  4151
  4152 				; optimize OK (artur.pas), line = 391
  4153
  4154 38D1 AD 9A 61			lda INVERT
  4155 38D4 F0 27			jeq l_0ED8
  4156 38D6 A0 F8			ldy #256-8
  4157 38D8 B9 78 1F 99 59 60 + 	mva:rne CODEORIGIN+$0070+8-256,y adr.S+8-256,y+
  4158
  4159 				; optimize OK (artur.pas), line = 393
  4160
  4161 38E1 AD 51 61			lda adr.S+$00
  4162 38E4 85 84			sta SYSTEM.MOVE_045A.COUNT
  4163 38E6 A9 52			lda <adr.S+$01
  4164 38E8 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4165 38EA A9 61			lda >adr.S+$01
  4166 38EC 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4167 38EE A9 E1			lda #$E1
  4168 38F0 85 8C			sta SYSTEM.MOVE_045A.DEST
  4169 38F2 A9 7B			lda #$7B
  4170 38F4 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4171 38F6 A9 00			lda #$00
  4172 38F8 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4173 38FA				.local +MAIN.SYSTEM.MOVE_045A
  4174 38FA				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 38FA 20 74 27			jsr @move
Source: artur.a65
  4175 					.endl
  4176 38FD			l_0ED8
  4177 38FD			l_0EAE
  4178
  4179 				; optimize OK (artur.pas), line = 396
  4180
  4181 38FD AD 91 61			lda MODE
  4182 3900 C9 01			cmp #$01
  4183 3902 F0 03 4C E4 39		jne l_0EF6
  4184 3907 A0 D7			ldy #256-41
  4185 3909 B9 A2 1F 99 7A 60 + 	mva:rne CODEORIGIN+$0079+41-256,y adr.S+41-256,y+
  4186
  4187 				; optimize OK (artur.pas), line = 402
  4188
  4189 3912 AD 51 61			lda adr.S+$00
  4190 3915 85 84			sta SYSTEM.MOVE_045A.COUNT
  4191 3917 A9 52			lda <adr.S+$01
  4192 3919 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4193 391B A9 61			lda >adr.S+$01
  4194 391D 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4195 391F A9 C0			lda #$C0
  4196 3921 85 8C			sta SYSTEM.MOVE_045A.DEST
  4197 3923 A9 7B			lda #$7B
  4198 3925 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4199 3927 A9 00			lda #$00
  4200 3929 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4201 392B				.local +MAIN.SYSTEM.MOVE_045A
  4202 392B				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 392B 20 74 27			jsr @move
Source: artur.a65
  4203 					.endl
  4204
  4205 				; optimize OK (artur.pas), line = 403
  4206
  4207 392E AD 92 61			lda DRAWTOOL
  4208 3931 D0 27			jne l_0F10
  4209 3933 A0 FB			ldy #256-5
  4210 3935 B9 A8 1F 99 56 60 + 	mva:rne CODEORIGIN+$00A3+5-256,y adr.S+5-256,y+
  4211
  4212 				; optimize OK (artur.pas), line = 405
  4213
  4214 393E AD 51 61			lda adr.S+$00
  4215 3941 85 84			sta SYSTEM.MOVE_045A.COUNT
  4216 3943 A9 52			lda <adr.S+$01
  4217 3945 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4218 3947 A9 61			lda >adr.S+$01
  4219 3949 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4220 394B A9 CD			lda #$CD
  4221 394D 85 8C			sta SYSTEM.MOVE_045A.DEST
  4222 394F A9 7B			lda #$7B
  4223 3951 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4224 3953 A9 00			lda #$00
  4225 3955 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4226 3957				.local +MAIN.SYSTEM.MOVE_045A
  4227 3957				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 3957 20 74 27			jsr @move
Source: artur.a65
  4228 					.endl
  4229 395A			l_0F10
  4230
  4231 				; optimize OK (artur.pas), line = 407
  4232
  4233 395A AD 92 61			lda DRAWTOOL
  4234 395D C9 01			cmp #$01
  4235 395F D0 27			jne l_0F2C
  4236 3961 A0 FB			ldy #256-5
  4237 3963 B9 AE 1F 99 56 60 + 	mva:rne CODEORIGIN+$00A9+5-256,y adr.S+5-256,y+
  4238
  4239 				; optimize OK (artur.pas), line = 409
  4240
  4241 396C AD 51 61			lda adr.S+$00
  4242 396F 85 84			sta SYSTEM.MOVE_045A.COUNT
  4243 3971 A9 52			lda <adr.S+$01
  4244 3973 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4245 3975 A9 61			lda >adr.S+$01
  4246 3977 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4247 3979 A9 D4			lda #$D4
  4248 397B 85 8C			sta SYSTEM.MOVE_045A.DEST
  4249 397D A9 7B			lda #$7B
  4250 397F 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4251 3981 A9 00			lda #$00
  4252 3983 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4253 3985				.local +MAIN.SYSTEM.MOVE_045A
  4254 3985				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 3985 20 74 27			jsr @move
Source: artur.a65
  4255 					.endl
  4256 3988			l_0F2C
  4257
  4258 				; optimize OK (artur.pas), line = 411
  4259
  4260 3988 AD 92 61			lda DRAWTOOL
  4261 398B C9 02			cmp #$02
  4262 398D D0 27			jne l_0F48
  4263 398F A0 FA			ldy #256-6
  4264 3991 B9 B5 1F 99 57 60 + 	mva:rne CODEORIGIN+$00AF+6-256,y adr.S+6-256,y+
  4265
  4266 				; optimize OK (artur.pas), line = 413
  4267
  4268 399A AD 51 61			lda adr.S+$00
  4269 399D 85 84			sta SYSTEM.MOVE_045A.COUNT
  4270 399F A9 52			lda <adr.S+$01
  4271 39A1 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4272 39A3 A9 61			lda >adr.S+$01
  4273 39A5 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4274 39A7 A9 DB			lda #$DB
  4275 39A9 85 8C			sta SYSTEM.MOVE_045A.DEST
  4276 39AB A9 7B			lda #$7B
  4277 39AD 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4278 39AF A9 00			lda #$00
  4279 39B1 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4280 39B3				.local +MAIN.SYSTEM.MOVE_045A
  4281 39B3				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 39B3 20 74 27			jsr @move
Source: artur.a65
  4282 					.endl
  4283 39B6			l_0F48
  4284
  4285 				; optimize OK (artur.pas), line = 415
  4286
  4287 39B6 AD 92 61			lda DRAWTOOL
  4288 39B9 C9 03			cmp #$03
  4289 39BB D0 27			jne l_0F64
  4290 39BD A0 FA			ldy #256-6
  4291 39BF B9 BC 1F 99 57 60 + 	mva:rne CODEORIGIN+$00B6+6-256,y adr.S+6-256,y+
  4292
  4293 				; optimize OK (artur.pas), line = 417
  4294
  4295 39C8 AD 51 61			lda adr.S+$00
  4296 39CB 85 84			sta SYSTEM.MOVE_045A.COUNT
  4297 39CD A9 52			lda <adr.S+$01
  4298 39CF 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4299 39D1 A9 61			lda >adr.S+$01
  4300 39D3 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4301 39D5 A9 E3			lda #$E3
  4302 39D7 85 8C			sta SYSTEM.MOVE_045A.DEST
  4303 39D9 A9 7B			lda #$7B
  4304 39DB 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4305 39DD A9 00			lda #$00
  4306 39DF 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4307 39E1				.local +MAIN.SYSTEM.MOVE_045A
  4308 39E1				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 39E1 20 74 27			jsr @move
Source: artur.a65
  4309 					.endl
  4310 39E4			l_0F64
  4311 39E4			l_0EF6
  4312
  4313 				; optimize OK (artur.pas), line = 420
  4314
  4315 39E4 AD 91 61			lda MODE
  4316 39E7 C9 02			cmp #$02
  4317 39E9 D0 58			jne l_0F82
  4318
  4319 				; optimize OK (artur.pas), line = 421
  4320
  4321 39EB AD 9F 61			lda P2X
  4322 39EE C9 FF			cmp #$FF
  4323 39F0 D0 2A			jne l_0F95
  4324 39F2 A0 E0			ldy #256-32
  4325 39F4 B9 DD 1F 99 71 60 + 	mva:rne CODEORIGIN+$00BD+32-256,y adr.S+32-256,y+
  4326
  4327 				; optimize OK (artur.pas), line = 423
  4328
  4329 39FD AD 51 61			lda adr.S+$00
  4330 3A00 85 84			sta SYSTEM.MOVE_045A.COUNT
  4331 3A02 A9 52			lda <adr.S+$01
  4332 3A04 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4333 3A06 A9 61			lda >adr.S+$01
  4334 3A08 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4335 3A0A A9 C0			lda #$C0
  4336 3A0C 85 8C			sta SYSTEM.MOVE_045A.DEST
  4337 3A0E A9 7B			lda #$7B
  4338 3A10 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4339 3A12 A9 00			lda #$00
  4340 3A14 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4341 3A16				.local +MAIN.SYSTEM.MOVE_045A
  4342 3A16				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 3A16 20 74 27			jsr @move
Source: artur.a65
  4343 					.endl
  4344 3A19 4C 43 3A			jmp l_0FA6
  4345 3A1C			l_0F95
  4346 3A1C A0 DF			ldy #256-33
  4347 3A1E B9 FF 1F 99 72 60 + 	mva:rne CODEORIGIN+$00DE+33-256,y adr.S+33-256,y+
  4348
  4349 				; optimize OK (artur.pas), line = 430
  4350
  4351 3A27 AD 51 61			lda adr.S+$00
  4352 3A2A 85 84			sta SYSTEM.MOVE_045A.COUNT
  4353 3A2C A9 52			lda <adr.S+$01
  4354 3A2E 85 88			sta SYSTEM.MOVE_045A.SOURCE
  4355 3A30 A9 61			lda >adr.S+$01
  4356 3A32 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  4357 3A34 A9 C0			lda #$C0
  4358 3A36 85 8C			sta SYSTEM.MOVE_045A.DEST
  4359 3A38 A9 7B			lda #$7B
  4360 3A3A 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  4361 3A3C A9 00			lda #$00
  4362 3A3E 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  4363 3A40				.local +MAIN.SYSTEM.MOVE_045A
  4364 3A40				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 3A40 20 74 27			jsr @move
Source: artur.a65
  4365 					.endl
  4366 3A43			l_0FA6
  4367 3A43			l_0F82
  4368 3A43			@exit
  4369 					.ifdef @new
  4370 					lda <@VarData
  4371 					sta :ztmp
  4372 					lda >@VarData
  4373 					ldy #@VarDataSize-1
  4374 					jmp @FreeMem
  4375 					els
  4376 3A43 60				rts						; ret
  4377 					eif
  4378 				.endl
  4379
  4380 3A44			.local	XORCURSOR					; PROCEDURE
  4381
  4382 				; optimize OK (artur.pas), line = 444
  4383
  4384 3A44 AD F9 62			lda X
  4385 3A47 4A				lsr @
  4386 3A48 4A				lsr @
  4387 3A49 4A				lsr @
  4388 3A4A 8D FB 62			sta PX
  4389
  4390 				; optimize OK (artur.pas), line = 445
  4391
  4392 3A4D 85 85			sta :eax+1
  4393 3A4F A9 00			lda #$00
  4394 3A51 46 85			lsr :eax+1
  4395 3A53 6A				ror @
  4396 3A54 18 69 80			add #$80
  4397 3A57 85 9D			sta :STACKORIGIN+9
  4398 3A59 A9 71			lda #$71
  4399 3A5B 65 85			adc :eax+1
  4400 3A5D 85 AD			sta :STACKORIGIN+STACKWIDTH+9
  4401 3A5F A9 00			lda #$00
  4402 3A61 85 AE			sta :STACKORIGIN+STACKWIDTH+10
  4403 3A63 AD FA 62			lda Y
  4404 3A66 0A				asl @
  4405 3A67 26 AE			rol :STACKORIGIN+STACKWIDTH+10
  4406 3A69 0A				asl @
  4407 3A6A 26 AE			rol :STACKORIGIN+STACKWIDTH+10
  4408 3A6C 85 9E			sta :STACKORIGIN+10
  4409 3A6E A5 9D			lda :STACKORIGIN+9
  4410 3A70 18 65 9E			add :STACKORIGIN+10
  4411 3A73 A8				tay
  4412 3A74 A5 AD			lda :STACKORIGIN+STACKWIDTH+9
  4413 3A76 65 AE			adc :STACKORIGIN+STACKWIDTH+10
  4414 3A78 8D FE 62			sta CURSOR_PMG+1
  4415 3A7B 98				tya
  4416 3A7C 18 69 0F			add #$0F
  4417 3A7F 8D FD 62			sta CURSOR_PMG
  4418 3A82 90 03			scc
  4419 3A84 EE FE 62			inc CURSOR_PMG+1
  4420
  4421 				; optimize OK (artur.pas), line = 446
  4422
  4423 3A87 AD F9 62			lda X
  4424 3A8A 29 07			and #$07
  4425 3A8C 8D FB 62			sta PX
  4426
  4427 				; optimize FAIL (50, artur.pas), line = 447
  4428
  4429 3A8F E8				inx
  4430 3A90 A9 80 95 94			mva #$80 :STACKORIGIN,x
  4431 3A94 E8				inx
  4432 3A95 AD FB 62 95 94		mva PX :STACKORIGIN,x
  4433 3A9A 20 30 27			jsr shrAL_CL.BYTE
  4434 3A9D CA				dex
  4435 3A9E B5 94			lda :STACKORIGIN,x
  4436 3AA0 8D FC 62			sta CURSOR_MASK
  4437 3AA3 CA				dex
  4438
  4439 				; optimize OK (artur.pas), line = 448
  4440
  4441 3AA4 A9 04			lda #$04
  4442 3AA6 8D FB 62			sta PX
  4443
  4444 				; --- RepeatUntilProlog
  4445 3AA9			l_0FF6
  4446
  4447 				; optimize OK (artur.pas), line = 450
  4448
  4449 3AA9 AC FE 62			ldy CURSOR_PMG+1
  4450 3AAC 84 81			sty :bp+1
  4451 3AAE AC FD 62			ldy CURSOR_PMG
  4452 3AB1 B1 80			lda (:bp),y
  4453 3AB3 4D FC 62			eor CURSOR_MASK
  4454 3AB6 91 80			sta (:bp),y
  4455
  4456 				; optimize FAIL (0, artur.pas), line = 451
  4457
  4458 3AB8 EE FD 62			inc CURSOR_PMG
  4459 3ABB D0 03			sne
  4460 3ABD EE FE 62			inc CURSOR_PMG+1
  4461
  4462 				; optimize FAIL (0, artur.pas), line = 452
  4463
  4464 3AC0 CE FB 62			dec PX
  4465
  4466 				; optimize OK (artur.pas), line = 453
  4467
  4468 3AC3 D0 E4			jne l_0FF6
  4469
  4470 				; ------------------------------------------------------------
  4471
  4472 = 62F9			X	= DATAORIGIN+$0A69
  4473 = 62FA			Y	= DATAORIGIN+$0A6A
  4474 = 62FB			PX	= DATAORIGIN+$0A6B
  4475 = 62FC			CURSOR_MASK	= DATAORIGIN+$0A6C
  4476 = 62FD			CURSOR_PMG	= DATAORIGIN+$0A6D
  4477
  4478 = 62F9			@VarData	= X
  4479 = 0006			@VarDataSize	= 6
  4480
  4481 3AC5			@exit
  4482 					.ifdef @new
  4483 					lda <@VarData
  4484 					sta :ztmp
  4485 					lda >@VarData
  4486 					ldy #@VarDataSize-1
  4487 					jmp @FreeMem
  4488 					els
  4489 3AC5 60				rts						; ret
  4490 					eif
  4491 				.endl
  4492
  4493 3AC6			.local	ERASEALLCURSORS					; PROCEDURE
  4494
  4495 				; optimize OK (artur.pas), line = 458
  4496
  4497 3AC6 A9 80			lda #$80
  4498 3AC8 85 88			sta SYSTEM.FILLBYTE_0457.A
  4499 3ACA A9 71			lda #$71
  4500 3ACC 85 89			sta SYSTEM.FILLBYTE_0457.A+1
  4501 3ACE A9 70			lda #$70
  4502 3AD0 85 8C			sta SYSTEM.FILLBYTE_0457.COUNT
  4503 3AD2 A9 02			lda #$02
  4504 3AD4 85 8D			sta SYSTEM.FILLBYTE_0457.COUNT+1
  4505 3AD6 A9 00			lda #$00
  4506 3AD8 85 84			sta SYSTEM.FILLBYTE_0457.VALUE
  4507 3ADA				.local +MAIN.SYSTEM.FILLBYTE_0457
  4508 3ADA				m@INLINE
Macro: MAIN.SYSTEM.FILLBYTE_0457.M@INLINE [Source: artur.a65]
     4 3ADA 20 C9 27			jsr @fill
Source: artur.a65
  4509 					.endl
  4510 3ADD			@exit
  4511 					.ifdef @new
  4512 					lda <@VarData
  4513 					sta :ztmp
  4514 					lda >@VarData
  4515 					ldy #@VarDataSize-1
  4516 					jmp @FreeMem
  4517 					els
  4518 3ADD 60				rts						; ret
  4519 					eif
  4520 				.endl
  4521
  4522 3ADE			.local	INITCURSOR					; PROCEDURE
  4523
  4524 				; optimize OK (artur.pas), line = 463
  4525
  4526 3ADE A9 00			lda #$00
  4527 3AE0 8D 93 61			sta CURSORX
  4528
  4529 				; optimize OK (artur.pas), line = 464
  4530
  4531 3AE3 8D 94 61			sta CURSORY
  4532
  4533 				; optimize OK (artur.pas), line = 465
  4534
  4535 3AE6 8D 95 61			sta CURSOR
  4536 3AE9 8D 96 61			sta CURSOR+1
  4537
  4538 				; optimize OK (artur.pas), line = 466
  4539
  4540 3AEC AD 93 61			lda CURSORX
  4541 3AEF 8D F9 62			sta XORCURSOR.X
  4542 3AF2 AD 94 61			lda CURSORY
  4543 3AF5 8D FA 62			sta XORCURSOR.Y
  4544 3AF8 20 44 3A			jsr XORCURSOR
  4545 3AFB			@exit
  4546 					.ifdef @new
  4547 					lda <@VarData
  4548 					sta :ztmp
  4549 					lda >@VarData
  4550 					ldy #@VarDataSize-1
  4551 					jmp @FreeMem
  4552 					els
  4553 3AFB 60				rts						; ret
  4554 					eif
  4555 				.endl
  4556
  4557 3AFC			.local	DRAWSELECTION					; PROCEDURE
  4558
  4559 				; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 472
  4560
  4561 3AFC 20 C6 3A			jsr ERASEALLCURSORS
  4562
  4563 				; optimize OK (artur.pas), line = 473
  4564
  4565 3AFF AD 01 63			lda PC2X
  4566 3B02 CD FF 62			cmp PC1X
  4567 3B05 B0 17			jcs l_104F
  4568 3B07 A9 FF			lda <PC1X
  4569 3B09 8D B9 62			sta SWAP.A
  4570 3B0C A9 62			lda >PC1X
  4571 3B0E 8D BA 62			sta SWAP.A+1
  4572 3B11 A9 01			lda <PC2X
  4573 3B13 8D BB 62			sta SWAP.B
  4574 3B16 A9 63			lda >PC2X
  4575 3B18 8D BC 62			sta SWAP.B+1
  4576 3B1B 20 4E 31			jsr SWAP
  4577 3B1E			l_104F
  4578
  4579 				; optimize OK (artur.pas), line = 474
  4580
  4581 3B1E AD 02 63			lda PC2Y
  4582 3B21 CD 00 63			cmp PC1Y
  4583 3B24 B0 17			jcs l_1069
  4584 3B26 A9 00			lda <PC1Y
  4585 3B28 8D B9 62			sta SWAP.A
  4586 3B2B A9 63			lda >PC1Y
  4587 3B2D 8D BA 62			sta SWAP.A+1
  4588 3B30 A9 02			lda <PC2Y
  4589 3B32 8D BB 62			sta SWAP.B
  4590 3B35 A9 63			lda >PC2Y
  4591 3B37 8D BC 62			sta SWAP.B+1
  4592 3B3A 20 4E 31			jsr SWAP
  4593 3B3D			l_1069
  4594
  4595 				; optimize OK (artur.pas), line = 475
  4596
  4597 3B3D AD FF 62			lda PC1X
  4598 3B40 8D 03 63			sta X
  4599
  4600 3B43			l_107C
  4601 				; --- ForToDoCondition
  4602 3B43 AD 03 63			lda X
  4603 3B46 CD 01 63			cmp PC2X
  4604 3B49 90 02			scc
  4605 3B4B D0 28			jne l_108A
  4606
  4607 				; optimize OK (artur.pas), line = 476
  4608
  4609 3B4D 8D F9 62			sta XORCURSOR.X
  4610 3B50 AD 00 63			lda PC1Y
  4611 3B53 8D FA 62			sta XORCURSOR.Y
  4612 3B56 20 44 3A			jsr XORCURSOR
  4613
  4614 				; optimize OK (artur.pas), line = 477
  4615
  4616 3B59 AD 00 63			lda PC1Y
  4617 3B5C CD 02 63			cmp PC2Y
  4618 3B5F F0 0F			jeq l_10A5
  4619 3B61 AD 03 63			lda X
  4620 3B64 8D F9 62			sta XORCURSOR.X
  4621 3B67 AD 02 63			lda PC2Y
  4622 3B6A 8D FA 62			sta XORCURSOR.Y
  4623 3B6D 20 44 3A			jsr XORCURSOR
  4624 3B70			l_10A5
  4625
  4626 				; --- ForToDoEpilog
  4627 3B70 EE 03 63			inc X
  4628 3B73 D0 CE			jne l_107C
  4629 3B75			l_108A
  4630
  4631 				; optimize OK (artur.pas), line = 479
  4632
  4633 3B75 AC 00 63			ldy PC1Y
  4634 3B78 C8				iny
  4635 3B79 8C 04 63			sty Y
  4636 3B7C AC 02 63			ldy PC2Y
  4637 3B7F 88				dey
  4638 3B80 8C 84 3B			sty :@FORTMP?10C6_0
  4639
  4640 3B83			l_10C9
  4641 				; --- ForToDoCondition
  4642 = 3B84			.def :@FORTMP?10C6_0 = *+1
  4643 3B83 A9 00			lda #$00
  4644 3B85 CD 04 63			cmp Y
  4645 3B88 90 2B			jcc l_10D7
  4646
  4647 				; optimize OK (artur.pas), line = 480
  4648
  4649 3B8A AD FF 62			lda PC1X
  4650 3B8D 8D F9 62			sta XORCURSOR.X
  4651 3B90 AD 04 63			lda Y
  4652 3B93 8D FA 62			sta XORCURSOR.Y
  4653 3B96 20 44 3A			jsr XORCURSOR
  4654
  4655 				; optimize OK (artur.pas), line = 481
  4656
  4657 3B99 AD FF 62			lda PC1X
  4658 3B9C CD 01 63			cmp PC2X
  4659 3B9F F0 0F			jeq l_10F2
  4660 3BA1 AD 01 63			lda PC2X
  4661 3BA4 8D F9 62			sta XORCURSOR.X
  4662 3BA7 AD 04 63			lda Y
  4663 3BAA 8D FA 62			sta XORCURSOR.Y
  4664 3BAD 20 44 3A			jsr XORCURSOR
  4665 3BB0			l_10F2
  4666
  4667 				; --- ForToDoEpilog
  4668 3BB0 EE 04 63			inc Y
  4669 3BB3 D0 CE			jne l_10C9
  4670 3BB5			l_10D7
  4671
  4672 				; ------------------------------------------------------------
  4673
  4674 = 62FF			PC1X	= DATAORIGIN+$0A6F
  4675 = 6300			PC1Y	= DATAORIGIN+$0A70
  4676 = 6301			PC2X	= DATAORIGIN+$0A71
  4677 = 6302			PC2Y	= DATAORIGIN+$0A72
  4678 = 6303			X	= DATAORIGIN+$0A73
  4679 = 6304			Y	= DATAORIGIN+$0A74
  4680 = 0000			@FORTMP_10C6	= $00
  4681
  4682 = 62FF			@VarData	= PC1X
  4683 = 0006			@VarDataSize	= 6
  4684
  4685 3BB5			@exit
  4686 					.ifdef @new
  4687 					lda <@VarData
  4688 					sta :ztmp
  4689 					lda >@VarData
  4690 					ldy #@VarDataSize-1
  4691 					jmp @FreeMem
  4692 					els
  4693 3BB5 60				rts						; ret
  4694 					eif
  4695 				.endl
  4696
  4697 3BB6			.local	DRAWLINE					; PROCEDURE
  4698
  4699 				; optimize OK (artur.pas), line = 493
  4700
  4701 3BB6 A0 01			ldy #1
  4702 3BB8 AD 9F 61			lda P2X
  4703 3BBB C9 FF			cmp #$FF
  4704 3BBD F0 01			beq @+
  4705 3BBF 88				dey
  4706 				@
  4707 3BC0 98				tya
  4708 3BC1 8D 13 63			sta CUR
  4709
  4710 				; optimize OK (artur.pas), line = 495
  4711
  4712 3BC4 D0 05			jne l_1120
  4713 3BC6 A9 01			lda #$01
  4714 3BC8 20 1A 35			jsr STOREUNDOACTION
  4715 3BCB			l_1120
  4716
  4717 				; optimize OK (artur.pas), line = 497
  4718
  4719 3BCB AD 93 61			lda CURSORX
  4720 3BCE 8D 9F 61			sta P2X
  4721
  4722 				; optimize OK (artur.pas), line = 498
  4723
  4724 3BD1 AD 94 61			lda CURSORY
  4725 3BD4 8D A1 61			sta P2Y
  4726
  4727 				; optimize OK (artur.pas), line = 499
  4728
  4729 3BD7 AD 9F 61			lda P2X
  4730 3BDA 38 ED 9E 61			sub P1X
  4731 3BDE 8D 06 63			sta DELTAX
  4732
  4733 				; optimize OK (artur.pas), line = 500
  4734
  4735 3BE1 10 09			jpl l_114F
  4736 3BE3 A9 00			lda #$00
  4737 3BE5 38 ED 06 63			sub DELTAX
  4738 3BE9 8D 06 63			sta DELTAX
  4739 3BEC			l_114F
  4740
  4741 				; optimize OK (artur.pas), line = 501
  4742
  4743 3BEC AD A1 61			lda P2Y
  4744 3BEF 38 ED A0 61			sub P1Y
  4745 3BF3 8D 07 63			sta DELTAY
  4746
  4747 				; optimize OK (artur.pas), line = 502
  4748
  4749 3BF6 10 09			jpl l_1179
  4750 3BF8 A9 00			lda #$00
  4751 3BFA 38 ED 07 63			sub DELTAY
  4752 3BFE 8D 07 63			sta DELTAY
  4753 3C01			l_1179
  4754
  4755 				; optimize OK (artur.pas), line = 504
  4756
  4757 3C01 AD 06 63			lda DELTAX
  4758 3C04 38 ED 07 63			sub DELTAY
  4759 3C08 50 02			svc
  4760 3C0A 49 80			eor #$80
  4761 3C0C 30 39			jmi l_1199
  4762
  4763 				; optimize OK (artur.pas), line = 506
  4764
  4765 3C0E AC 06 63			ldy DELTAX
  4766 3C11 C8				iny
  4767 3C12 8C 0F 63			sty NUMPIXELS
  4768
  4769 				; optimize OK (artur.pas), line = 507
  4770
  4771 3C15 AD 07 63			lda DELTAY
  4772 3C18 0A				asl @
  4773 3C19 38 ED 06 63			sub DELTAX
  4774 3C1D 8D 08 63			sta D
  4775
  4776 				; optimize OK (artur.pas), line = 508
  4777
  4778 3C20 AD 07 63			lda DELTAY
  4779 3C23 0A				asl @
  4780 3C24 8D 09 63			sta DINC1
  4781
  4782 				; optimize OK (artur.pas), line = 509
  4783
  4784 3C27 AD 07 63			lda DELTAY
  4785 3C2A 38 ED 06 63			sub DELTAX
  4786 3C2E 0A				asl @
  4787 3C2F 8D 0A 63			sta DINC2
  4788
  4789 				; optimize OK (artur.pas), line = 510
  4790
  4791 3C32 A9 01			lda #$01
  4792 3C34 8D 0B 63			sta XINC1
  4793
  4794 				; optimize OK (artur.pas), line = 511
  4795
  4796 3C37 8D 0C 63			sta XINC2
  4797
  4798 				; optimize OK (artur.pas), line = 512
  4799
  4800 3C3A A9 00			lda #$00
  4801 3C3C 8D 0D 63			sta YINC1
  4802
  4803 				; optimize OK (artur.pas), line = 513
  4804
  4805 3C3F A9 01			lda #$01
  4806 3C41 8D 0E 63			sta YINC2
  4807 3C44 4C 7B 3C			jmp l_11E7
  4808 3C47			l_1199
  4809
  4810 				; optimize OK (artur.pas), line = 516
  4811
  4812 3C47 AC 07 63			ldy DELTAY
  4813 3C4A C8				iny
  4814 3C4B 8C 0F 63			sty NUMPIXELS
  4815
  4816 				; optimize OK (artur.pas), line = 517
  4817
  4818 3C4E AD 06 63			lda DELTAX
  4819 3C51 0A				asl @
  4820 3C52 38 ED 07 63			sub DELTAY
  4821 3C56 8D 08 63			sta D
  4822
  4823 				; optimize OK (artur.pas), line = 518
  4824
  4825 3C59 AD 06 63			lda DELTAX
  4826 3C5C 0A				asl @
  4827 3C5D 8D 09 63			sta DINC1
  4828
  4829 				; optimize OK (artur.pas), line = 519
  4830
  4831 3C60 AD 06 63			lda DELTAX
  4832 3C63 38 ED 07 63			sub DELTAY
  4833 3C67 0A				asl @
  4834 3C68 8D 0A 63			sta DINC2
  4835
  4836 				; optimize OK (artur.pas), line = 520
  4837
  4838 3C6B A9 00			lda #$00
  4839 3C6D 8D 0B 63			sta XINC1
  4840
  4841 				; optimize OK (artur.pas), line = 521
  4842
  4843 3C70 A9 01			lda #$01
  4844 3C72 8D 0C 63			sta XINC2
  4845
  4846 				; optimize OK (artur.pas), line = 522
  4847
  4848 3C75 8D 0D 63			sta YINC1
  4849
  4850 				; optimize OK (artur.pas), line = 523
  4851
  4852 3C78 8D 0E 63			sta YINC2
  4853 3C7B			l_11E7
  4854
  4855 				; optimize OK (artur.pas), line = 526
  4856
  4857 3C7B AD 9F 61			lda P2X
  4858 3C7E CD 9E 61			cmp P1X
  4859 3C81 B0 12			jcs l_123F
  4860
  4861 				; optimize OK (artur.pas), line = 527
  4862
  4863 3C83 A9 00			lda #$00
  4864 3C85 38 ED 0B 63			sub XINC1
  4865 3C89 8D 0B 63			sta XINC1
  4866
  4867 				; optimize OK (artur.pas), line = 528
  4868
  4869 3C8C A9 00			lda #$00
  4870 3C8E 38 ED 0C 63			sub XINC2
  4871 3C92 8D 0C 63			sta XINC2
  4872 3C95			l_123F
  4873
  4874 				; optimize OK (artur.pas), line = 530
  4875
  4876 3C95 AD A1 61			lda P2Y
  4877 3C98 CD A0 61			cmp P1Y
  4878 3C9B B0 12			jcs l_1268
  4879
  4880 				; optimize OK (artur.pas), line = 531
  4881
  4882 3C9D A9 00			lda #$00
  4883 3C9F 38 ED 0D 63			sub YINC1
  4884 3CA3 8D 0D 63			sta YINC1
  4885
  4886 				; optimize OK (artur.pas), line = 532
  4887
  4888 3CA6 A9 00			lda #$00
  4889 3CA8 38 ED 0E 63			sub YINC2
  4890 3CAC 8D 0E 63			sta YINC2
  4891 3CAF			l_1268
  4892
  4893 				; optimize OK (artur.pas), line = 535
  4894
  4895 3CAF AD 9E 61			lda P1X
  4896 3CB2 8D 10 63			sta X
  4897
  4898 				; optimize OK (artur.pas), line = 536
  4899
  4900 3CB5 AD A0 61			lda P1Y
  4901 3CB8 8D 11 63			sta Y
  4902
  4903 				; optimize OK (artur.pas), line = 538
  4904
  4905 3CBB A9 01			lda #$01
  4906 3CBD 8D 12 63			sta I
  4907
  4908 3CC0			l_1294
  4909 				; --- ForToDoCondition
  4910 3CC0 AD 12 63			lda I
  4911 3CC3 CD 0F 63			cmp NUMPIXELS
  4912 3CC6 90 05			scc
  4913 3CC8 F0 03 4C 51 3D		jne l_12A2
  4914
  4915 				; optimize OK (artur.pas), line = 539
  4916
  4917 3CCD AD 13 63			lda CUR
  4918 3CD0 F0 1A			jeq l_12AE
  4919
  4920 				; optimize OK (artur.pas), line = 540
  4921
  4922 3CD2 AD 12 63			lda I
  4923 3CD5 CD 0F 63			cmp NUMPIXELS
  4924 3CD8 B0 0F			jcs l_12C3
  4925 3CDA AD 10 63			lda X
  4926 3CDD 8D F9 62			sta XORCURSOR.X
  4927 3CE0 AD 11 63			lda Y
  4928 3CE3 8D FA 62			sta XORCURSOR.Y
  4929 3CE6 20 44 3A			jsr XORCURSOR
  4930 3CE9			l_12C3
  4931 3CE9 4C 08 3D			jmp l_12D6
  4932 3CEC			l_12AE
  4933
  4934 				; optimize OK (artur.pas), line = 541
  4935
  4936 3CEC AD 11 63			lda Y
  4937 3CEF 0A				asl @
  4938 3CF0 A8				tay
  4939 3CF1 B9 89 62			lda adr.LINEOFFSET,y
  4940 3CF4 18 6D 10 63			add X
  4941 3CF8 85 9E			sta :STACKORIGIN+10
  4942 3CFA B9 8A 62			lda adr.LINEOFFSET+1,y
  4943 3CFD 69 7C			adc #$7C
  4944 3CFF 85 81			sta :bp+1
  4945 3D01 A4 9E			ldy :STACKORIGIN+10
  4946 3D03 AD 8B 61			lda BRUSH
  4947 3D06 91 80			sta (:bp),y
  4948 3D08			l_12D6
  4949
  4950 				; optimize OK (artur.pas), line = 542
  4951
  4952 3D08 AD 08 63			lda D
  4953 3D0B 10 1E			jpl l_12FB
  4954
  4955 				; optimize OK (artur.pas), line = 543
  4956
  4957 3D0D 18 6D 09 63			add DINC1
  4958 3D11 8D 08 63			sta D
  4959
  4960 				; optimize OK (artur.pas), line = 544
  4961
  4962 3D14 AD 10 63			lda X
  4963 3D17 18 6D 0B 63			add XINC1
  4964 3D1B 8D 10 63			sta X
  4965
  4966 				; optimize OK (artur.pas), line = 545
  4967
  4968 3D1E AD 11 63			lda Y
  4969 3D21 18 6D 0D 63			add YINC1
  4970 3D25 8D 11 63			sta Y
  4971 3D28 4C 49 3D			jmp l_1329
  4972 3D2B			l_12FB
  4973
  4974 				; optimize OK (artur.pas), line = 548
  4975
  4976 3D2B AD 08 63			lda D
  4977 3D2E 18 6D 0A 63			add DINC2
  4978 3D32 8D 08 63			sta D
  4979
  4980 				; optimize OK (artur.pas), line = 549
  4981
  4982 3D35 AD 10 63			lda X
  4983 3D38 18 6D 0C 63			add XINC2
  4984 3D3C 8D 10 63			sta X
  4985
  4986 				; optimize OK (artur.pas), line = 550
  4987
  4988 3D3F AD 11 63			lda Y
  4989 3D42 18 6D 0E 63			add YINC2
  4990 3D46 8D 11 63			sta Y
  4991 3D49			l_1329
  4992
  4993 				; --- ForToDoEpilog
  4994 3D49 EE 12 63			inc I
  4995 3D4C F0 03 4C C0 3C		jne l_1294
  4996 3D51			l_12A2
  4997
  4998 				; optimize OK (artur.pas), line = 553
  4999
  5000 3D51 AD 13 63			lda CUR
  5001 3D54 F0 05			jeq l_135E
  5002 3D56 A9 FF			lda #$FF
  5003 3D58 8D 9F 61			sta P2X
  5004 3D5B			l_135E
  5005
  5006 				; ------------------------------------------------------------
  5007
  5008 = 6306			DELTAX	= DATAORIGIN+$0A76
  5009 = 6307			DELTAY	= DATAORIGIN+$0A77
  5010 = 6308			D	= DATAORIGIN+$0A78
  5011 = 6309			DINC1	= DATAORIGIN+$0A79
  5012 = 630A			DINC2	= DATAORIGIN+$0A7A
  5013 = 630B			XINC1	= DATAORIGIN+$0A7B
  5014 = 630C			XINC2	= DATAORIGIN+$0A7C
  5015 = 630D			YINC1	= DATAORIGIN+$0A7D
  5016 = 630E			YINC2	= DATAORIGIN+$0A7E
  5017 = 630F			NUMPIXELS	= DATAORIGIN+$0A7F
  5018 = 6310			X	= DATAORIGIN+$0A80
  5019 = 6311			Y	= DATAORIGIN+$0A81
  5020 = 6312			I	= DATAORIGIN+$0A82
  5021 = 6313			CUR	= DATAORIGIN+$0A83
  5022
  5023 = 6306			@VarData	= DELTAX
  5024 = 000E			@VarDataSize	= 14
  5025
  5026 3D5B			@exit
  5027 					.ifdef @new
  5028 					lda <@VarData
  5029 					sta :ztmp
  5030 					lda >@VarData
  5031 					ldy #@VarDataSize-1
  5032 					jmp @FreeMem
  5033 					els
  5034 3D5B 60				rts						; ret
  5035 					eif
  5036 				.endl
  5037
  5038 3D5C			.local	MOVECURSOR					; PROCEDURE
  5039
  5040 				; optimize FAIL ('SYSTEM.PAUSE_0479', artur.pas), line = 559
  5041
  5042 3D5C 20 A2 2A			jsr SYSTEM.PAUSE_0479
  5043
  5044 				; optimize OK (artur.pas), line = 560
  5045
  5046 3D5F A9 00			lda #$00
  5047 3D61 8D 16 63			sta SELECTIONMODE
  5048
  5049 				; optimize OK (artur.pas), line = 561
  5050
  5051 3D64 AD 93 61			lda CURSORX
  5052 3D67 8D F9 62			sta XORCURSOR.X
  5053 3D6A AD 94 61			lda CURSORY
  5054 3D6D 8D FA 62			sta XORCURSOR.Y
  5055 3D70 20 44 3A			jsr XORCURSOR
  5056
  5057 				; optimize OK (artur.pas), line = 563
  5058
  5059 3D73 AD 93 61			lda CURSORX
  5060 3D76 18 6D 14 63			add DX
  5061 3D7A 8D 93 61			sta CURSORX
  5062
  5063 				; optimize OK (artur.pas), line = 564
  5064
  5065 3D7D C9 FF			cmp #$FF
  5066 3D7F D0 05			jne l_1393
  5067 3D81 A9 27			lda #$27
  5068 3D83 8D 93 61			sta CURSORX
  5069 3D86			l_1393
  5070
  5071 				; optimize OK (artur.pas), line = 565
  5072
  5073 3D86 AD 93 61			lda CURSORX
  5074 3D89 C9 28			cmp #$28
  5075 3D8B D0 05			jne l_13AC
  5076 3D8D A9 00			lda #$00
  5077 3D8F 8D 93 61			sta CURSORX
  5078 3D92			l_13AC
  5079
  5080 				; optimize OK (artur.pas), line = 566
  5081
  5082 3D92 AD 94 61			lda CURSORY
  5083 3D95 18 6D 15 63			add DY
  5084 3D99 8D 94 61			sta CURSORY
  5085
  5086 				; optimize OK (artur.pas), line = 567
  5087
  5088 3D9C C9 FF			cmp #$FF
  5089 3D9E D0 05			jne l_13D1
  5090 3DA0 A9 17			lda #$17
  5091 3DA2 8D 94 61			sta CURSORY
  5092 3DA5			l_13D1
  5093
  5094 				; optimize OK (artur.pas), line = 568
  5095
  5096 3DA5 AD 94 61			lda CURSORY
  5097 3DA8 C9 18			cmp #$18
  5098 3DAA D0 05			jne l_13EA
  5099 3DAC A9 00			lda #$00
  5100 3DAE 8D 94 61			sta CURSORY
  5101 3DB1			l_13EA
  5102
  5103 				; optimize OK (artur.pas), line = 569
  5104
  5105 3DB1 AD 94 61			lda CURSORY
  5106 3DB4 0A				asl @
  5107 3DB5 A8				tay
  5108 3DB6 B9 89 62			lda adr.LINEOFFSET,y
  5109 3DB9 18 6D 93 61			add CURSORX
  5110 3DBD 8D 95 61			sta CURSOR
  5111 3DC0 B9 8A 62			lda adr.LINEOFFSET+1,y
  5112 3DC3 69 00			adc #$00
  5113 3DC5 8D 96 61			sta CURSOR+1
  5114
  5115 				; optimize OK (artur.pas), line = 573
  5116
  5117 3DC8 AD 91 61			lda MODE
  5118 3DCB C9 01			cmp #$01
  5119 3DCD F0 04			jeq l_141Dx
  5120 3DCF C9 02			cmp #$02
  5121 3DD1 D0 45			jne l_141D
  5122 3DD3			l_141Dx
  5123
  5124 				; optimize OK (artur.pas), line = 574
  5125
  5126 3DD3 AD 9E 61			lda P1X
  5127 3DD6 C9 FF			cmp #$FF
  5128 3DD8 F0 3E			jeq l_143C
  5129 3DDA AD 9F 61			lda P2X
  5130 3DDD C9 FF			cmp #$FF
  5131 3DDF D0 37			jne l_143C
  5132
  5133 				; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 575
  5134
  5135 3DE1 20 C6 3A			jsr ERASEALLCURSORS
  5136
  5137 				; optimize OK (artur.pas), line = 576
  5138
  5139 3DE4 AD 91 61			lda MODE
  5140 3DE7 C9 01			cmp #$01
  5141 3DE9 D0 0D			jne l_145C
  5142 3DEB AD 92 61			lda DRAWTOOL
  5143 3DEE C9 01			cmp #$01
  5144 3DF0 D0 06			jne l_145C
  5145
  5146 				; optimize FAIL ('DRAWLINE', artur.pas), line = 577
  5147
  5148 3DF2 20 B6 3B			jsr DRAWLINE
  5149 3DF5 4C 18 3E			jmp l_1467
  5150 3DF8			l_145C
  5151
  5152 				; optimize OK (artur.pas), line = 578
  5153
  5154 3DF8 AD 9E 61			lda P1X
  5155 3DFB 8D FF 62			sta DRAWSELECTION.PC1X
  5156 3DFE AD A0 61			lda P1Y
  5157 3E01 8D 00 63			sta DRAWSELECTION.PC1Y
  5158 3E04 AD 93 61			lda CURSORX
  5159 3E07 8D 01 63			sta DRAWSELECTION.PC2X
  5160 3E0A AD 94 61			lda CURSORY
  5161 3E0D 8D 02 63			sta DRAWSELECTION.PC2Y
  5162 3E10 20 FC 3A			jsr DRAWSELECTION
  5163
  5164 				; optimize OK (artur.pas), line = 579
  5165
  5166 3E13 A9 01			lda #$01
  5167 3E15 8D 16 63			sta SELECTIONMODE
  5168 3E18			l_1467
  5169 3E18			l_143C
  5170 3E18			l_141D
  5171
  5172 				; optimize OK (artur.pas), line = 583
  5173
  5174 3E18 AD 16 63			lda SELECTIONMODE
  5175 3E1B D0 0F			jne l_148B
  5176 3E1D AD 93 61			lda CURSORX
  5177 3E20 8D F9 62			sta XORCURSOR.X
  5178 3E23 AD 94 61			lda CURSORY
  5179 3E26 8D FA 62			sta XORCURSOR.Y
  5180 3E29 20 44 3A			jsr XORCURSOR
  5181 3E2C			l_148B
  5182
  5183 				; optimize FAIL ('READCURSORCHAR', artur.pas), line = 584
  5184
  5185 3E2C 20 52 36			jsr READCURSORCHAR
  5186
  5187 				; optimize FAIL ('UPDATEXYK', artur.pas), line = 585
  5188
  5189 3E2F 20 76 36			jsr UPDATEXYK
  5190
  5191 				; optimize OK (artur.pas), line = 586
  5192
  5193 3E32 A9 00			lda #$00
  5194 3E34 8D 98 61			sta KEYDOWN
  5195
  5196 				; ------------------------------------------------------------
  5197
  5198 = 6314			DX	= DATAORIGIN+$0A84
  5199 = 6315			DY	= DATAORIGIN+$0A85
  5200 = 6316			SELECTIONMODE	= DATAORIGIN+$0A86
  5201
  5202 = 6314			@VarData	= DX
  5203 = 0003			@VarDataSize	= 3
  5204
  5205 3E37			@exit
  5206 					.ifdef @new
  5207 					lda <@VarData
  5208 					sta :ztmp
  5209 					lda >@VarData
  5210 					ldy #@VarDataSize-1
  5211 					jmp @FreeMem
  5212 					els
  5213 3E37 60				rts						; ret
  5214 					eif
  5215 				.endl
  5216
  5217 3E38			.local	CLEARSELECTION					; PROCEDURE
  5218
  5219 				; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 591
  5220
  5221 3E38 20 C6 3A			jsr ERASEALLCURSORS
  5222
  5223 				; optimize OK (artur.pas), line = 592
  5224
  5225 3E3B A9 FF			lda #$FF
  5226 3E3D 8D 9E 61			sta P1X
  5227 3E40 8D 9F 61			sta P2X
  5228
  5229 				; optimize OK (artur.pas), line = 593
  5230
  5231 3E43 AD 93 61			lda CURSORX
  5232 3E46 8D F9 62			sta XORCURSOR.X
  5233 3E49 AD 94 61			lda CURSORY
  5234 3E4C 8D FA 62			sta XORCURSOR.Y
  5235 3E4F 20 44 3A			jsr XORCURSOR
  5236 3E52			@exit
  5237 					.ifdef @new
  5238 					lda <@VarData
  5239 					sta :ztmp
  5240 					lda >@VarData
  5241 					ldy #@VarDataSize-1
  5242 					jmp @FreeMem
  5243 					els
  5244 3E52 60				rts						; ret
  5245 					eif
  5246 				.endl
  5247
  5248 3E53			.local	CHECKCURSORKEYS					; PROCEDURE
  5249 3E53 8D 17 63			sta OFFSET
  5250
  5251 				; optimize OK (artur.pas), line = 598
  5252
  5253 3E56 A9 06			lda #$06
  5254 3E58 18 6D 17 63			add OFFSET
  5255 3E5C CD 7B 61			cmp KEY
  5256 3E5F D0 0D			jne l_14CB
  5257 3E61 A9 FF			lda #$FF
  5258 3E63 8D 14 63			sta MOVECURSOR.DX
  5259 3E66 A9 00			lda #$00
  5260 3E68 8D 15 63			sta MOVECURSOR.DY
  5261 3E6B 20 5C 3D			jsr MOVECURSOR
  5262 3E6E			l_14CB
  5263
  5264 				; optimize OK (artur.pas), line = 599
  5265
  5266 3E6E A9 07			lda #$07
  5267 3E70 18 6D 17 63			add OFFSET
  5268 3E74 CD 7B 61			cmp KEY
  5269 3E77 D0 0D			jne l_14E9
  5270 3E79 A9 01			lda #$01
  5271 3E7B 8D 14 63			sta MOVECURSOR.DX
  5272 3E7E A9 00			lda #$00
  5273 3E80 8D 15 63			sta MOVECURSOR.DY
  5274 3E83 20 5C 3D			jsr MOVECURSOR
  5275 3E86			l_14E9
  5276
  5277 				; optimize OK (artur.pas), line = 600
  5278
  5279 3E86 A9 0E			lda #$0E
  5280 3E88 18 6D 17 63			add OFFSET
  5281 3E8C CD 7B 61			cmp KEY
  5282 3E8F D0 0D			jne l_1507
  5283 3E91 A9 00			lda #$00
  5284 3E93 8D 14 63			sta MOVECURSOR.DX
  5285 3E96 A9 FF			lda #$FF
  5286 3E98 8D 15 63			sta MOVECURSOR.DY
  5287 3E9B 20 5C 3D			jsr MOVECURSOR
  5288 3E9E			l_1507
  5289
  5290 				; optimize OK (artur.pas), line = 601
  5291
  5292 3E9E A9 0F			lda #$0F
  5293 3EA0 18 6D 17 63			add OFFSET
  5294 3EA4 CD 7B 61			cmp KEY
  5295 3EA7 D0 0D			jne l_1525
  5296 3EA9 A9 00			lda #$00
  5297 3EAB 8D 14 63			sta MOVECURSOR.DX
  5298 3EAE A9 01			lda #$01
  5299 3EB0 8D 15 63			sta MOVECURSOR.DY
  5300 3EB3 20 5C 3D			jsr MOVECURSOR
  5301 3EB6			l_1525
  5302
  5303 				; ------------------------------------------------------------
  5304
  5305 = 6317			OFFSET	= DATAORIGIN+$0A87
  5306
  5307 = 6317			@VarData	= OFFSET
  5308 = 0001			@VarDataSize	= 1
  5309
  5310 3EB6			@exit
  5311 					.ifdef @new
  5312 					lda <@VarData
  5313 					sta :ztmp
  5314 					lda >@VarData
  5315 					ldy #@VarDataSize-1
  5316 					jmp @FreeMem
  5317 					els
  5318 3EB6 60				rts						; ret
  5319 					eif
  5320 				.endl
  5321
  5322 3EB7			.local	WRITESXY					; PROCEDURE
  5323
  5324 				; optimize OK (artur.pas), line = 613
  5325
  5326 3EB7 AD 19 63			lda Y
  5327 3EBA 0A				asl @
  5328 3EBB A8				tay
  5329 3EBC B9 89 62			lda adr.LINEOFFSET,y
  5330 3EBF 18 6D 18 63			add X
  5331 3EC3 8D 1A 63			sta CARRET
  5332 3EC6 B9 8A 62			lda adr.LINEOFFSET+1,y
  5333 3EC9 69 7C			adc #$7C
  5334 3ECB 8D 1B 63			sta CARRET+1
  5335
  5336 				; optimize OK (artur.pas), line = 614
  5337
  5338 3ECE AD 51 61			lda adr.S+$00
  5339 3ED1 85 84			sta SYSTEM.MOVE_045A.COUNT
  5340 3ED3 A9 52			lda <adr.S+$01
  5341 3ED5 85 88			sta SYSTEM.MOVE_045A.SOURCE
  5342 3ED7 A9 61			lda >adr.S+$01
  5343 3ED9 85 89			sta SYSTEM.MOVE_045A.SOURCE+1
  5344 3EDB AD 1A 63			lda CARRET
  5345 3EDE 85 8C			sta SYSTEM.MOVE_045A.DEST
  5346 3EE0 AD 1B 63			lda CARRET+1
  5347 3EE3 85 8D			sta SYSTEM.MOVE_045A.DEST+1
  5348 3EE5 A9 00			lda #$00
  5349 3EE7 85 85			sta SYSTEM.MOVE_045A.COUNT+1
  5350 3EE9				.local +MAIN.SYSTEM.MOVE_045A
  5351 3EE9				m@INLINE
Macro: MAIN.SYSTEM.MOVE_045A.M@INLINE [Source: artur.a65]
     4 3EE9 20 74 27			jsr @move
Source: artur.a65
  5352 					.endl
  5353
  5354 				; ------------------------------------------------------------
  5355
  5356 = 6318			X	= DATAORIGIN+$0A88
  5357 = 6319			Y	= DATAORIGIN+$0A89
  5358 = 631A			CARRET	= DATAORIGIN+$0A8A
  5359
  5360 = 6318			@VarData	= X
  5361 = 0004			@VarDataSize	= 4
  5362
  5363 3EEC			@exit
  5364 					.ifdef @new
  5365 					lda <@VarData
  5366 					sta :ztmp
  5367 					lda >@VarData
  5368 					ldy #@VarDataSize-1
  5369 					jmp @FreeMem
  5370 					els
  5371 3EEC 60				rts						; ret
  5372 					eif
  5373 				.endl
  5374
  5375 3EED			.local	GETHEXVAL					; FUNCTION
  5376
  5377 				; optimize OK (artur.pas), line = 620
  5378
  5379 3EED AD 1E 63			lda DEFAULT
  5380 3EF0 8D 1F 63			sta RESULT
  5381
  5382 				; optimize OK (artur.pas), line = 621
  5383
  5384 3EF3 AD 1C 63			lda X
  5385 3EF6 8D 26 5E			sta B_CRT.CRT_GOTOXY.X
  5386 3EF9 AD 1D 63			lda Y
  5387 3EFC 8D 27 5E			sta B_CRT.CRT_GOTOXY.Y
  5388 3EFF 20 FE 2D			jsr B_CRT.CRT_GOTOXY
  5389
  5390 				; optimize FAIL ('B_CRT.CRT_WRITE_05F8', artur.pas), line = 622
  5391
  5392 3F02 E8				inx
  5393 3F03 A9 00 95 94			mva #$00 :STACKORIGIN,x
  5394 3F07 A9 21 95 A4			mva #$21 :STACKORIGIN+STACKWIDTH,x
  5395 3F0B 20 2B 2E			jsr B_CRT.CRT_WRITE_05F8
  5396
  5397 				; optimize OK (artur.pas), line = 623
  5398
  5399 3F0E AD 1C 63			lda X
  5400 3F11 8D F9 62			sta XORCURSOR.X
  5401 3F14 AD 1D 63			lda Y
  5402 3F17 8D FA 62			sta XORCURSOR.Y
  5403 3F1A 20 44 3A			jsr XORCURSOR
  5404
  5405 				; optimize OK (artur.pas), line = 624
  5406
  5407 3F1D AD 1C 63			lda X
  5408 3F20 18 69 01			add #$01
  5409 3F23 8D F9 62			sta XORCURSOR.X
  5410 3F26 AD 1D 63			lda Y
  5411 3F29 8D FA 62			sta XORCURSOR.Y
  5412 3F2C 20 44 3A			jsr XORCURSOR
  5413
  5414 				; optimize OK (artur.pas), line = 625
  5415
  5416 3F2F AD 1C 63			lda X
  5417 3F32 8D 26 5E			sta B_CRT.CRT_GOTOXY.X
  5418 3F35 AD 1D 63			lda Y
  5419 3F38 8D 27 5E			sta B_CRT.CRT_GOTOXY.Y
  5420 3F3B 20 FE 2D			jsr B_CRT.CRT_GOTOXY
  5421
  5422 				; optimize OK (artur.pas), line = 626
  5423
  5424 3F3E A9 02			lda #$02
  5425 3F40 20 F6 2E			jsr B_CRT.CRT_READSTRINGI_068D
  5426 3F43 E8				inx
  5427 3F44 AD 6C 2F			lda B_CRT.CRT_READSTRINGI_068D.RESULT
  5428 3F47 85 88			sta @move.src
  5429 3F49 AD 6D 2F			lda B_CRT.CRT_READSTRINGI_068D.RESULT+1
  5430 3F4C 85 89			sta @move.src+1
  5431 					@moveSTRING S #41
  5431 				 MWA S @MOVE.DST\ MWA #41 @MOVE.CNT\ JSR @MOVESTRING
  5431 3F4E AD 7F 58 85 8C AD +  MWA S @MOVE.DST
  5431 3F58 A9 29 85 84 A9 00 +  MWA #41 @MOVE.CNT
  5431 3F60 20 11 28		 JSR @MOVESTRING
  5432 3F63 CA				dex
  5433
  5434 				; optimize OK (artur.pas), line = 627
  5435
  5436 3F64 A9 21			lda <I
  5437 3F66 8D C2 62			sta PARSEHEX.I
  5438 3F69 A9 63			lda >I
  5439 3F6B 8D C3 62			sta PARSEHEX.I+1
  5440 3F6E A9 20			lda <ERR
  5441 3F70 8D C4 62			sta PARSEHEX.ERR
  5442 3F73 A9 63			lda >ERR
  5443 3F75 8D C5 62			sta PARSEHEX.ERR+1
  5444 3F78 20 FD 31			jsr PARSEHEX
  5445
  5446 				; optimize OK (artur.pas), line = 628
  5447
  5448 3F7B AD 20 63			lda ERR
  5449 3F7E D0 06			jne l_158C
  5450 3F80 AD 21 63			lda I
  5451 3F83 8D 1F 63			sta RESULT
  5452 3F86			l_158C
  5453
  5454 				; optimize OK (artur.pas), line = 629
  5455
  5456 3F86 AD 1C 63			lda X
  5457 3F89 8D F9 62			sta XORCURSOR.X
  5458 3F8C AD 1D 63			lda Y
  5459 3F8F 8D FA 62			sta XORCURSOR.Y
  5460 3F92 20 44 3A			jsr XORCURSOR
  5461
  5462 				; optimize OK (artur.pas), line = 630
  5463
  5464 3F95 AD 1C 63			lda X
  5465 3F98 18 69 01			add #$01
  5466 3F9B 8D F9 62			sta XORCURSOR.X
  5467 3F9E AD 1D 63			lda Y
  5468 3FA1 8D FA 62			sta XORCURSOR.Y
  5469 3FA4 20 44 3A			jsr XORCURSOR
  5470 3FA7			@exit
  5471
  5472 				; ------------------------------------------------------------
  5473
  5474 = 631C			X	= DATAORIGIN+$0A8C
  5475 = 631D			Y	= DATAORIGIN+$0A8D
  5476 = 631E			DEFAULT	= DATAORIGIN+$0A8E
  5477 = 631F			RESULT	= DATAORIGIN+$0A8F
  5478 = 6320			ERR	= DATAORIGIN+$0A90
  5479 = 6321			I	= DATAORIGIN+$0A91
  5480
  5481 = 631C			@VarData	= X
  5482 = 0006			@VarDataSize	= 6
  5483
  5484 3FA7 60				rts						; ret
  5485 				.endl
  5486
  5487 3FA8			.local	GETFILENAME					; PROCEDURE
  5488
  5489 				; optimize OK (artur.pas), line = 639
  5490
  5491 3FA8 AD 22 63			lda X
  5492 3FAB 8D F2 62			sta DRAWRECT.X
  5493 3FAE AD 23 63			lda Y
  5494 3FB1 8D F3 62			sta DRAWRECT.Y
  5495 3FB4 A9 17			lda #$17
  5496 3FB6 8D F4 62			sta DRAWRECT.W
  5497 3FB9 A9 06			lda #$06
  5498 3FBB 8D F5 62			sta DRAWRECT.H
  5499 3FBE A9 00			lda #$00
  5500 3FC0 8D F6 62			sta DRAWRECT.C
  5501 3FC3 20 0C 36			jsr DRAWRECT
  5502 3FC6 A0 F0			ldy #256-16
  5503 3FC8 B9 14 20 99 61 60 + 	mva:rne CODEORIGIN+$0104+16-256,y adr.S+16-256,y+
  5504
  5505 				; optimize FAIL (0, artur.pas), line = 641
  5506
  5507 3FD1 EE 22 63			inc X
  5508 3FD4 EE 22 63			inc X
  5509 3FD7 EE 23 63			inc Y
  5510
  5511 				; optimize OK (artur.pas), line = 642
  5512
  5513 3FDA AD 22 63			lda X
  5514 3FDD 8D 18 63			sta WRITESXY.X
  5515 3FE0 AD 23 63			lda Y
  5516 3FE3 8D 19 63			sta WRITESXY.Y
  5517 3FE6 20 B7 3E			jsr WRITESXY
  5518
  5519 				; optimize FAIL (0, artur.pas), line = 643
  5520
  5521 3FE9 EE 23 63			inc Y
  5522 3FEC EE 23 63			inc Y
  5523
  5524 				; optimize OK (artur.pas), line = 644
  5525
  5526 3FEF AD 22 63			lda X
  5527 3FF2 8D 24 63			sta I
  5528 3FF5 18 69 0D			add #$0D
  5529 3FF8 8D FC 3F			sta :@FORTMP?15DE_0
  5530
  5531 3FFB			l_15E1
  5532 				; --- ForToDoCondition
  5533 = 3FFC			.def :@FORTMP?15DE_0 = *+1
  5534 3FFB A9 00			lda #$00
  5535 3FFD CD 24 63			cmp I
  5536 4000 90 14			jcc l_15EF
  5537 4002 AD 24 63			lda I
  5538 4005 8D F9 62			sta XORCURSOR.X
  5539 4008 AD 23 63			lda Y
  5540 400B 8D FA 62			sta XORCURSOR.Y
  5541 400E 20 44 3A			jsr XORCURSOR
  5542
  5543 				; --- ForToDoEpilog
  5544 4011 EE 24 63			inc I
  5545 4014 D0 E5			jne l_15E1
  5546 4016			l_15EF
  5547
  5548 				; optimize OK (artur.pas), line = 645
  5549
  5550 4016 AD 22 63			lda X
  5551 4019 8D 26 5E			sta B_CRT.CRT_GOTOXY.X
  5552 401C AD 23 63			lda Y
  5553 401F 8D 27 5E			sta B_CRT.CRT_GOTOXY.Y
  5554 4022 20 FE 2D			jsr B_CRT.CRT_GOTOXY
  5555 4025 A0 F3			ldy #256-13
  5556 4027 B9 22 20 99 5E 60 + 	mva:rne CODEORIGIN+$0115+13-256,y adr.S+13-256,y+
  5557
  5558 				; optimize OK (artur.pas), line = 647
  5559
  5560 4030 A9 0C			lda #$0C
  5561 4032 20 6E 2F			jsr B_CRT.CRT_READSTRING_074C
  5562 4035 E8				inx
  5563 4036 AD A2 2F			lda B_CRT.CRT_READSTRING_074C.RESULT
  5564 4039 85 88			sta @move.src
  5565 403B AD A3 2F			lda B_CRT.CRT_READSTRING_074C.RESULT+1
  5566 403E 85 89			sta @move.src+1
  5567 					@moveSTRING S #41
  5567 				 MWA S @MOVE.DST\ MWA #41 @MOVE.CNT\ JSR @MOVESTRING
  5567 4040 AD 7F 58 85 8C AD +  MWA S @MOVE.DST
  5567 404A A9 29 85 84 A9 00 +  MWA #41 @MOVE.CNT
  5567 4052 20 11 28		 JSR @MOVESTRING
  5568 4055 CA				dex
  5569
  5570 				; optimize OK (artur.pas), line = 648
  5571
  5572 4056 AD 22 63			lda X
  5573 4059 8D 24 63			sta I
  5574 405C 18 69 0D			add #$0D
  5575 405F 8D 63 40			sta :@FORTMP?1612_0
  5576
  5577 4062			l_1615
  5578 				; --- ForToDoCondition
  5579 = 4063			.def :@FORTMP?1612_0 = *+1
  5580 4062 A9 00			lda #$00
  5581 4064 CD 24 63			cmp I
  5582 4067 90 14			jcc l_1623
  5583 4069 AD 24 63			lda I
  5584 406C 8D F9 62			sta XORCURSOR.X
  5585 406F AD 23 63			lda Y
  5586 4072 8D FA 62			sta XORCURSOR.Y
  5587 4075 20 44 3A			jsr XORCURSOR
  5588
  5589 				; --- ForToDoEpilog
  5590 4078 EE 24 63			inc I
  5591 407B D0 E5			jne l_1615
  5592 407D			l_1623
  5593
  5594 				; optimize FAIL (0, artur.pas), line = 649
  5595
  5596 407D EE 23 63			inc Y
  5597
  5598 				; optimize OK (artur.pas), line = 650
  5599
  5600 4080 AD 22 63			lda X
  5601 4083 8D 26 5E			sta B_CRT.CRT_GOTOXY.X
  5602 4086 AD 23 63			lda Y
  5603 4089 8D 27 5E			sta B_CRT.CRT_GOTOXY.Y
  5604 408C 20 FE 2D			jsr B_CRT.CRT_GOTOXY
  5605
  5606 				; optimize FAIL ('CRT.KEYPRESSED', artur.pas), line = 651
  5607
  5608 408F 20 B4 2A			jsr CRT.KEYPRESSED
  5609 4092 AD C8 58			lda CRT.KEYPRESSED.RESULT
  5610 4095 F0 0A			jeq l_1644
  5611 4097 20 AD 2A			jsr CRT.READKEY
  5612 409A E8				inx
  5613 409B AD C7 58 95 94		mva CRT.READKEY.RESULT :STACKORIGIN,x
  5614 40A0 CA				dex
  5615 40A1			l_1644
  5616
  5617 				; optimize OK (artur.pas), line = 652
  5618
  5619 40A1 AD 7F 58			lda S
  5620 40A4 85 88			sta SYSUTILS.ANSIUPPERCASE.A
  5621 40A6 AD 80 58			lda S+1
  5622 40A9 85 89			sta SYSUTILS.ANSIUPPERCASE.A+1
  5623 40AB 20 97 2C			jsr SYSUTILS.ANSIUPPERCASE
  5624 40AE E8				inx
  5625 40AF AD E2 2C			lda SYSUTILS.ANSIUPPERCASE.RESULT
  5626 40B2 85 88			sta @move.src
  5627 40B4 AD E3 2C			lda SYSUTILS.ANSIUPPERCASE.RESULT+1
  5628 40B7 85 89			sta @move.src+1
  5629 					@moveSTRING S #41
  5629 				 MWA S @MOVE.DST\ MWA #41 @MOVE.CNT\ JSR @MOVESTRING
  5629 40B9 AD 7F 58 85 8C AD +  MWA S @MOVE.DST
  5629 40C3 A9 29 85 84 A9 00 +  MWA #41 @MOVE.CNT
  5629 40CB 20 11 28		 JSR @MOVESTRING
  5630 40CE CA				dex
  5631
  5632 				; optimize FAIL ('ADDDRIVETOS', artur.pas), line = 653
  5633
  5634 40CF 20 7F 31			jsr ADDDRIVETOS
  5635
  5636 				; ------------------------------------------------------------
  5637
  5638 = 6322			X	= DATAORIGIN+$0A92
  5639 = 6323			Y	= DATAORIGIN+$0A93
  5640 = 0017			FIL_W	= $17
  5641 = 0006			FIL_H	= $06
  5642 = 6324			I	= DATAORIGIN+$0A94
  5643 = 0000			@FORTMP_15DE	= $00
  5644 = 0000			@FORTMP_1612	= $00
  5645
  5646 = 6322			@VarData	= X
  5647 = 0003			@VarDataSize	= 3
  5648
  5649 40D2			@exit
  5650 					.ifdef @new
  5651 					lda <@VarData
  5652 					sta :ztmp
  5653 					lda >@VarData
  5654 					ldy #@VarDataSize-1
  5655 					jmp @FreeMem
  5656 					els
  5657 40D2 60				rts						; ret
  5658 					eif
  5659 				.endl
  5660
  5661 40D3			.local	SELECTTOOL					; PROCEDURE
  5662 40D3 8D 27 63			sta TOOL
  5663
  5664 				; optimize OK (artur.pas), line = 658
  5665
  5666 40D6 8D 92 61			sta DRAWTOOL
  5667
  5668 				; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 659
  5669
  5670 40D9 20 6C 38			jsr SHOWMENUBAR
  5671
  5672 				; optimize OK (artur.pas), line = 660
  5673
  5674 40DC A9 00			lda #$00
  5675 40DE 8D 98 61			sta KEYDOWN
  5676
  5677 				; optimize FAIL ('CLEARSELECTION', artur.pas), line = 661
  5678
  5679 40E1 20 38 3E			jsr CLEARSELECTION
  5680
  5681 				; ------------------------------------------------------------
  5682
  5683 = 6327			TOOL	= DATAORIGIN+$0A97
  5684
  5685 = 6327			@VarData	= TOOL
  5686 = 0001			@VarDataSize	= 1
  5687
  5688 40E4			@exit
  5689 					.ifdef @new
  5690 					lda <@VarData
  5691 					sta :ztmp
  5692 					lda >@VarData
  5693 					ldy #@VarDataSize-1
  5694 					jmp @FreeMem
  5695 					els
  5696 40E4 60				rts						; ret
  5697 					eif
  5698 				.endl
  5699
  5700 40E5			.local	NEXTMODE					; PROCEDURE
  5701
  5702 				; optimize FAIL (0, artur.pas), line = 666
  5703
  5704 40E5 EE 91 61			inc MODE
  5705
  5706 				; optimize OK (artur.pas), line = 667
  5707
  5708 40E8 AD 91 61			lda MODE
  5709 40EB C9 03			cmp #$03
  5710 40ED D0 05			jne l_1676
  5711 40EF A9 00			lda #$00
  5712 40F1 8D 91 61			sta MODE
  5713 40F4			l_1676
  5714
  5715 				; optimize OK (artur.pas), line = 668
  5716
  5717 40F4 A9 0A			lda #$0A
  5718 40F6 8D 8C 61			sta KEYREPEATCOUNTER
  5719
  5720 				; optimize FAIL ('CLEARSELECTION', artur.pas), line = 669
  5721
  5722 40F9 20 38 3E			jsr CLEARSELECTION
  5723
  5724 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 670
  5725
  5726 40FC 20 C0 37			jsr SHOWSTATUS
  5727
  5728 				; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 671
  5729
  5730 40FF 20 6C 38			jsr SHOWMENUBAR
  5731 4102			@exit
  5732 					.ifdef @new
  5733 					lda <@VarData
  5734 					sta :ztmp
  5735 					lda >@VarData
  5736 					ldy #@VarDataSize-1
  5737 					jmp @FreeMem
  5738 					els
  5739 4102 60				rts						; ret
  5740 					eif
  5741 				.endl
  5742
  5743 4103			.local	OPENMODAL					; PROCEDURE
  5744
  5745 				; optimize OK (artur.pas), line = 676
  5746
  5747 4103 A9 0A			lda #$0A
  5748 4105 8D 8C 61			sta KEYREPEATCOUNTER
  5749
  5750 				; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 677
  5751
  5752 4108 20 C6 3A			jsr ERASEALLCURSORS
  5753
  5754 				; optimize OK (artur.pas), line = 678
  5755
  5756 410B A9 E0			lda #$E0
  5757 410D 8D 9D 61			sta EDITORCHARSET
  5758
  5759 				; optimize FAIL ('STOREEDITINBUFFER', artur.pas), line = 679
  5760
  5761 4110 20 D4 35			jsr STOREEDITINBUFFER
  5762 4113			@exit
  5763 					.ifdef @new
  5764 					lda <@VarData
  5765 					sta :ztmp
  5766 					lda >@VarData
  5767 					ldy #@VarDataSize-1
  5768 					jmp @FreeMem
  5769 					els
  5770 4113 60				rts						; ret
  5771 					eif
  5772 				.endl
  5773
  5774 4114			.local	CLOSEMODAL					; PROCEDURE
  5775
  5776 				; optimize FAIL ('RESTOREEDITFROMBUFFER', artur.pas), line = 684
  5777
  5778 4114 20 F0 35			jsr RESTOREEDITFROMBUFFER
  5779
  5780 				; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 685
  5781
  5782 4117 20 C6 3A			jsr ERASEALLCURSORS
  5783
  5784 				; optimize OK (artur.pas), line = 686
  5785
  5786 411A A9 00			lda #$00
  5787 411C 8D 14 63			sta MOVECURSOR.DX
  5788 411F 8D 15 63			sta MOVECURSOR.DY
  5789 4122 20 5C 3D			jsr MOVECURSOR
  5790
  5791 				; optimize OK (artur.pas), line = 687
  5792
  5793 4125 AD 9F 61			lda P2X
  5794 4128 C9 FF			cmp #$FF
  5795 412A F0 1B			jeq l_16AD
  5796 412C AD 9E 61			lda P1X
  5797 412F 8D FF 62			sta DRAWSELECTION.PC1X
  5798 4132 AD A0 61			lda P1Y
  5799 4135 8D 00 63			sta DRAWSELECTION.PC1Y
  5800 4138 AD 9F 61			lda P2X
  5801 413B 8D 01 63			sta DRAWSELECTION.PC2X
  5802 413E AD A1 61			lda P2Y
  5803 4141 8D 02 63			sta DRAWSELECTION.PC2Y
  5804 4144 20 FC 3A			jsr DRAWSELECTION
  5805 4147			l_16AD
  5806
  5807 				; optimize OK (artur.pas), line = 688
  5808
  5809 4147 AD 93 61			lda CURSORX
  5810 414A 8D F9 62			sta XORCURSOR.X
  5811 414D AD 94 61			lda CURSORY
  5812 4150 8D FA 62			sta XORCURSOR.Y
  5813 4153 20 44 3A			jsr XORCURSOR
  5814
  5815 				; optimize OK (artur.pas), line = 689
  5816
  5817 4156 A9 74			lda #$74
  5818 4158 8D 9D 61			sta EDITORCHARSET
  5819
  5820 				; optimize OK (artur.pas), line = 690
  5821
  5822 415B A9 0A			lda #$0A
  5823 415D 8D 8C 61			sta KEYREPEATCOUNTER
  5824 4160			@exit
  5825 					.ifdef @new
  5826 					lda <@VarData
  5827 					sta :ztmp
  5828 					lda >@VarData
  5829 					ldy #@VarDataSize-1
  5830 					jmp @FreeMem
  5831 					els
  5832 4160 60				rts						; ret
  5833 					eif
  5834 				.endl
  5835
  5836 4161			.local	HISTORYBACK					; PROCEDURE
  5837
  5838 				; optimize FAIL (0, artur.pas), line = 700
  5839
  5840 4161 EE B4 61			inc BRUSHINDEX
  5841
  5842 				; optimize OK (artur.pas), line = 701
  5843
  5844 4164 AD B4 61			lda BRUSHINDEX
  5845 4167 C9 12			cmp #$12
  5846 4169 90 05			jcc l_16E6
  5847 416B A9 00			lda #$00
  5848 416D 8D B4 61			sta BRUSHINDEX
  5849 4170			l_16E6
  5850
  5851 				; optimize OK (artur.pas), line = 702
  5852
  5853 4170 AC B4 61			ldy BRUSHINDEX
  5854 4173 B9 A2 61			lda adr.BRUSHHISTORY,y
  5855 4176 8D 8B 61			sta BRUSH
  5856
  5857 				; optimize FAIL ('ADJUSTBRUSHFRAME', artur.pas), line = 703
  5858
  5859 4179 20 3E 31			jsr ADJUSTBRUSHFRAME
  5860 417C			@exit
  5861 					.ifdef @new
  5862 					lda <@VarData
  5863 					sta :ztmp
  5864 					lda >@VarData
  5865 					ldy #@VarDataSize-1
  5866 					jmp @FreeMem
  5867 					els
  5868 417C 60				rts						; ret
  5869 					eif
  5870 				.endl
  5871
  5872 417D			.local	HISTORYFWD					; PROCEDURE
  5873
  5874 				; optimize OK (artur.pas), line = 708
  5875
  5876 417D AD B4 61			lda BRUSHINDEX
  5877 4180 D0 05			jne l_170D
  5878 4182 A9 12			lda #$12
  5879 4184 8D B4 61			sta BRUSHINDEX
  5880 4187			l_170D
  5881
  5882 				; optimize FAIL (0, artur.pas), line = 709
  5883
  5884 4187 CE B4 61			dec BRUSHINDEX
  5885
  5886 				; optimize OK (artur.pas), line = 710
  5887
  5888 418A AC B4 61			ldy BRUSHINDEX
  5889 418D B9 A2 61			lda adr.BRUSHHISTORY,y
  5890 4190 8D 8B 61			sta BRUSH
  5891
  5892 				; optimize FAIL ('ADJUSTBRUSHFRAME', artur.pas), line = 711
  5893
  5894 4193 20 3E 31			jsr ADJUSTBRUSHFRAME
  5895 4196			@exit
  5896 					.ifdef @new
  5897 					lda <@VarData
  5898 					sta :ztmp
  5899 					lda >@VarData
  5900 					ldy #@VarDataSize-1
  5901 					jmp @FreeMem
  5902 					els
  5903 4196 60				rts						; ret
  5904 					eif
  5905 				.endl
  5906
  5907 4197			.local	INJECTBRUSH					; PROCEDURE
  5908 4197 8D 28 63			sta C
  5909
  5910 				; optimize OK (artur.pas), line = 717
  5911
  5912 419A A9 00			lda #$00
  5913 419C 8D 29 63			sta I
  5914
  5915 				; optimize OK (artur.pas), line = 718
  5916
  5917 419F A8				tay
  5918 41A0 B9 A2 61			lda adr.BRUSHHISTORY,y
  5919 41A3 8D 2A 63			sta PREV
  5920
  5921 				; optimize OK (artur.pas), line = 719
  5922
  5923 41A6 AD 28 63			lda C
  5924 41A9 99 A2 61			sta adr.BRUSHHISTORY,y
  5925
  5926 				; --- RepeatUntilProlog
  5927 41AC			l_173D
  5928
  5929 				; optimize OK (artur.pas), line = 721
  5930
  5931 41AC AD 2A 63			lda PREV
  5932 41AF CD 28 63			cmp C
  5933 41B2 D0 03			jne l_1751
  5934 41B4 4C D6 41			jmp @exit					; exit
  5935 41B7			l_1751
  5936
  5937 				; optimize FAIL (0, artur.pas), line = 722
  5938
  5939 41B7 EE 29 63			inc I
  5940
  5941 				; optimize OK (artur.pas), line = 723
  5942
  5943 41BA AC 29 63			ldy I
  5944 41BD B9 A2 61			lda adr.BRUSHHISTORY,y
  5945 41C0 8D 4E 61			sta B
  5946
  5947 				; optimize OK (artur.pas), line = 724
  5948
  5949 41C3 AD 2A 63			lda PREV
  5950 41C6 99 A2 61			sta adr.BRUSHHISTORY,y
  5951
  5952 				; optimize OK (artur.pas), line = 725
  5953
  5954 41C9 AD 4E 61			lda B
  5955 41CC 8D 2A 63			sta PREV
  5956
  5957 				; optimize OK (artur.pas), line = 726
  5958
  5959 41CF AD 29 63			lda I
  5960 41D2 C9 12			cmp #$12
  5961 41D4 90 D6			jcc l_173D
  5962
  5963 				; ------------------------------------------------------------
  5964
  5965 = 6328			C	= DATAORIGIN+$0A98
  5966 = 6329			I	= DATAORIGIN+$0A99
  5967 = 632A			PREV	= DATAORIGIN+$0A9A
  5968
  5969 = 6328			@VarData	= C
  5970 = 0003			@VarDataSize	= 3
  5971
  5972 41D6			@exit
  5973 					.ifdef @new
  5974 					lda <@VarData
  5975 					sta :ztmp
  5976 					lda >@VarData
  5977 					ldy #@VarDataSize-1
  5978 					jmp @FreeMem
  5979 					els
  5980 41D6 60				rts						; ret
  5981 					eif
  5982 				.endl
  5983
  5984 41D7			.local	USEBRUSH					; PROCEDURE
  5985 41D7 8D 2B 63			sta C
  5986
  5987 				; optimize OK (artur.pas), line = 731
  5988
  5989 41DA CD A2 61			cmp adr.BRUSHHISTORY+$00
  5990 41DD D0 03			jne l_1796
  5991 41DF 4C F9 41			jmp @exit					; exit
  5992 41E2			l_1796
  5993
  5994 				; optimize OK (artur.pas), line = 732
  5995
  5996 41E2 AD 2B 63			lda C
  5997 41E5 20 97 41			jsr INJECTBRUSH
  5998
  5999 				; optimize OK (artur.pas), line = 733
  6000
  6001 41E8 A9 00			lda #$00
  6002 41EA 8D B4 61			sta BRUSHINDEX
  6003
  6004 				; optimize OK (artur.pas), line = 734
  6005
  6006 41ED AD 2B 63			lda C
  6007 41F0 8D 8B 61			sta BRUSH
  6008
  6009 				; optimize FAIL ('ADJUSTBRUSHFRAME', artur.pas), line = 735
  6010
  6011 41F3 20 3E 31			jsr ADJUSTBRUSHFRAME
  6012
  6013 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 736
  6014
  6015 41F6 20 C0 37			jsr SHOWSTATUS
  6016
  6017 				; ------------------------------------------------------------
  6018
  6019 = 632B			C	= DATAORIGIN+$0A9B
  6020
  6021 = 632B			@VarData	= C
  6022 = 0001			@VarDataSize	= 1
  6023
  6024 41F9			@exit
  6025 					.ifdef @new
  6026 					lda <@VarData
  6027 					sta :ztmp
  6028 					lda >@VarData
  6029 					ldy #@VarDataSize-1
  6030 					jmp @FreeMem
  6031 					els
  6032 41F9 60				rts						; ret
  6033 					eif
  6034 				.endl
  6035
  6036 41FA			.local	POKEBRUSH					; PROCEDURE
  6037
  6038 				; optimize OK (artur.pas), line = 741
  6039
  6040 41FA A9 00			lda #$00
  6041 41FC 20 1A 35			jsr STOREUNDOACTION
  6042
  6043 				; optimize OK (artur.pas), line = 742
  6044
  6045 41FF AC 95 61			ldy CURSOR
  6046 4202 A9 7C			lda #$7C
  6047 4204 18 6D 96 61			add CURSOR+1
  6048 4208 85 81			sta :bp+1
  6049 420A AD 8B 61			lda BRUSH
  6050 420D 91 80			sta (:bp),y
  6051
  6052 				; optimize FAIL ('READCURSORCHAR', artur.pas), line = 743
  6053
  6054 420F 20 52 36			jsr READCURSORCHAR
  6055 4212			@exit
  6056 					.ifdef @new
  6057 					lda <@VarData
  6058 					sta :ztmp
  6059 					lda >@VarData
  6060 					ldy #@VarDataSize-1
  6061 					jmp @FreeMem
  6062 					els
  6063 4212 60				rts						; ret
  6064 					eif
  6065 				.endl
  6066
  6067 4213			.local	SETBRUSHFROMKEY					; PROCEDURE
  6068
  6069 				; optimize OK (artur.pas), line = 748
  6070
  6071 4213 AC 85 58 84 82 AC + 	mwy KEYCHARS :bp2
  6072 421D AC 7B 61			ldy KEY
  6073 4220 B1 82			lda (:bp2),y
  6074 4222 20 E4 2C			jsr B_CRT.ATASCII2ANTIC_0535
  6075 4225 AD 1B 5A			lda B_CRT.ATASCII2ANTIC_0535.RESULT
  6076 4228 8D 4E 61			sta B
  6077
  6078 				; optimize OK (artur.pas), line = 749
  6079
  6080 422B AD 9A 61			lda INVERT
  6081 422E F0 08			jeq l_17D4
  6082 4230 AD 4E 61			lda B
  6083 4233 49 80			eor #$80
  6084 4235 8D 4E 61			sta B
  6085 4238			l_17D4
  6086
  6087 				; optimize OK (artur.pas), line = 750
  6088
  6089 4238 AD 4E 61			lda B
  6090 423B 8D 8B 61			sta BRUSH
  6091 423E			@exit
  6092 					.ifdef @new
  6093 					lda <@VarData
  6094 					sta :ztmp
  6095 					lda >@VarData
  6096 					ldy #@VarDataSize-1
  6097 					jmp @FreeMem
  6098 					els
  6099 423E 60				rts						; ret
  6100 					eif
  6101 				.endl
  6102
  6103 423F			.local	WRITESPACE					; PROCEDURE
  6104
  6105 				; optimize OK (artur.pas), line = 755
  6106
  6107 423F AD 8B 61			lda BRUSH
  6108 4242 8D 4E 61			sta B
  6109
  6110 				; optimize OK (artur.pas), line = 756
  6111
  6112 4245 A9 00			lda #$00
  6113 4247 8D 8B 61			sta BRUSH
  6114
  6115 				; optimize OK (artur.pas), line = 757
  6116
  6117 424A AD 9A 61			lda INVERT
  6118 424D F0 05			jeq l_1801
  6119 424F A9 80			lda #$80
  6120 4251 8D 8B 61			sta BRUSH
  6121 4254			l_1801
  6122
  6123 				; optimize OK (artur.pas), line = 758
  6124
  6125 4254 A9 00			lda #$00
  6126 4256 20 1A 35			jsr STOREUNDOACTION
  6127
  6128 				; optimize FAIL ('POKEBRUSH', artur.pas), line = 759
  6129
  6130 4259 20 FA 41			jsr POKEBRUSH
  6131
  6132 				; optimize OK (artur.pas), line = 760
  6133
  6134 425C AD 4E 61			lda B
  6135 425F 8D 8B 61			sta BRUSH
  6136
  6137 				; optimize OK (artur.pas), line = 761
  6138
  6139 4262 A9 00			lda #$00
  6140 4264 8D 98 61			sta KEYDOWN
  6141 4267			@exit
  6142 					.ifdef @new
  6143 					lda <@VarData
  6144 					sta :ztmp
  6145 					lda >@VarData
  6146 					ldy #@VarDataSize-1
  6147 					jmp @FreeMem
  6148 					els
  6149 4267 60				rts						; ret
  6150 					eif
  6151 				.endl
  6152
  6153 4268			.local	BRUSHSELECTOR					; FUNCTION
  6154
  6155 4268 4C A2 42			jmp l_1819
  6156
  6157 426B			.local	UPDATEBRUSHCURSOR				; PROCEDURE
  6158
  6159 				; optimize OK (artur.pas), line = 777
  6160
  6161 426B AD 30 63			lda CX
  6162 426E 8D F9 62			sta XORCURSOR.X
  6163 4271 AD 31 63			lda CY
  6164 4274 8D FA 62			sta XORCURSOR.Y
  6165 4277 20 44 3A			jsr XORCURSOR
  6166
  6167 				; optimize OK (artur.pas), line = 778
  6168
  6169 427A AD 2F 63			lda CBRUSH
  6170 427D 29 0F			and #$0F
  6171 427F 18 69 0C			add #$0C
  6172 4282 8D 30 63			sta CX
  6173
  6174 				; optimize OK (artur.pas), line = 779
  6175
  6176 4285 AD 2F 63			lda CBRUSH
  6177 4288 4A				lsr @
  6178 4289 4A				lsr @
  6179 428A 4A				lsr @
  6180 428B 4A				lsr @
  6181 428C 18 69 05			add #$05
  6182 428F 8D 31 63			sta CY
  6183
  6184 				; optimize OK (artur.pas), line = 780
  6185
  6186 4292 AD 30 63			lda CX
  6187 4295 8D F9 62			sta XORCURSOR.X
  6188 4298 AD 31 63			lda CY
  6189 429B 8D FA 62			sta XORCURSOR.Y
  6190 429E 20 44 3A			jsr XORCURSOR
  6191 42A1			@exit
  6192 					.ifdef @new
  6193 					lda <@VarData
  6194 					sta :ztmp
  6195 					lda >@VarData
  6196 					ldy #@VarDataSize-1
  6197 					jmp @FreeMem
  6198 					els
  6199 42A1 60				rts						; ret
  6200 					eif
  6201 				.endl
  6202 42A2			l_1819
  6203
  6204 				; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 784
  6205
  6206 42A2 20 C6 3A			jsr ERASEALLCURSORS
  6207
  6208 				; optimize OK (artur.pas), line = 785
  6209
  6210 42A5 AD 8B 61			lda BRUSH
  6211 42A8 8D 2C 63			sta RESULT
  6212
  6213 				; optimize OK (artur.pas), line = 786
  6214
  6215 42AB 8D 2F 63			sta CBRUSH
  6216
  6217 				; optimize OK (artur.pas), line = 787
  6218
  6219 42AE A9 0A			lda #$0A
  6220 42B0 8D 8C 61			sta KEYREPEATCOUNTER
  6221
  6222 				; optimize FAIL ('STOREEDITINBUFFER', artur.pas), line = 788
  6223
  6224 42B3 20 D4 35			jsr STOREEDITINBUFFER
  6225
  6226 				; optimize OK (artur.pas), line = 789
  6227
  6228 42B6 A9 0B			lda #$0B
  6229 42B8 8D F2 62			sta DRAWRECT.X
  6230 42BB A9 02			lda #$02
  6231 42BD 8D F3 62			sta DRAWRECT.Y
  6232 42C0 A9 12			lda #$12
  6233 42C2 8D F4 62			sta DRAWRECT.W
  6234 42C5 A9 14			lda #$14
  6235 42C7 8D F5 62			sta DRAWRECT.H
  6236 42CA A9 80			lda #$80
  6237 42CC 8D F6 62			sta DRAWRECT.C
  6238 42CF 20 0C 36			jsr DRAWRECT
  6239 42D2 A0 F3			ldy #256-13
  6240 42D4 B9 30 20 99 5E 60 + 	mva:rne CODEORIGIN+$0123+13-256,y adr.S+13-256,y+
  6241
  6242 				; optimize OK (artur.pas), line = 791
  6243
  6244 42DD A9 0C			lda #$0C
  6245 42DF 8D 18 63			sta WRITESXY.X
  6246 42E2 A9 03			lda #$03
  6247 42E4 8D 19 63			sta WRITESXY.Y
  6248 42E7 20 B7 3E			jsr WRITESXY
  6249
  6250 				; optimize OK (artur.pas), line = 794
  6251
  6252 42EA A9 0C			lda #$0C
  6253 42EC 18 6D 93 62			add adr.LINEOFFSET+$0A
  6254 42F0 8D 2D 63			sta VRAM
  6255 42F3 A9 7C			lda #$7C
  6256 42F5 6D 94 62			adc adr.LINEOFFSET+1+$0A
  6257 42F8 8D 2E 63			sta VRAM+1
  6258
  6259 				; optimize OK (artur.pas), line = 795
  6260
  6261 42FB A9 00			lda #$00
  6262 42FD 8D 4E 61			sta B
  6263
  6264 				; --- RepeatUntilProlog
  6265 4300			l_1881
  6266
  6267 				; optimize OK (artur.pas), line = 797
  6268
  6269 4300 AC 2E 63			ldy VRAM+1
  6270 4303 84 81			sty :bp+1
  6271 4305 AC 2D 63			ldy VRAM
  6272 4308 AD 4E 61			lda B
  6273 430B 91 80			sta (:bp),y
  6274
  6275 				; optimize FAIL (0, artur.pas), line = 798
  6276
  6277 430D EE 4E 61			inc B
  6278
  6279 				; optimize FAIL (0, artur.pas), line = 799
  6280
  6281 4310 EE 2D 63			inc VRAM
  6282 4313 D0 03			sne
  6283 4315 EE 2E 63			inc VRAM+1
  6284
  6285 				; optimize OK (artur.pas), line = 800
  6286
  6287 4318 AD 4E 61			lda B
  6288 431B 29 0F			and #$0F
  6289 431D D0 0E			jne l_18A5
  6290 431F AD 2D 63			lda VRAM
  6291 4322 18 69 18			add #$18
  6292 4325 8D 2D 63			sta VRAM
  6293 4328 90 03			scc
  6294 432A EE 2E 63			inc VRAM+1
  6295 432D			l_18A5
  6296
  6297 				; optimize OK (artur.pas), line = 801
  6298
  6299 432D AD 4E 61			lda B
  6300 4330 D0 CE			jne l_1881
  6301
  6302 				; optimize OK (artur.pas), line = 803
  6303
  6304 4332 AD 8B 61			lda BRUSH
  6305 4335 8D 2F 63			sta CBRUSH
  6306
  6307 				; optimize OK (artur.pas), line = 804
  6308
  6309 4338 29 0F			and #$0F
  6310 433A 18 69 0C			add #$0C
  6311 433D 8D 30 63			sta CX
  6312
  6313 				; optimize OK (artur.pas), line = 805
  6314
  6315 4340 AD 2F 63			lda CBRUSH
  6316 4343 4A				lsr @
  6317 4344 4A				lsr @
  6318 4345 4A				lsr @
  6319 4346 4A				lsr @
  6320 4347 18 69 05			add #$05
  6321 434A 8D 31 63			sta CY
  6322
  6323 				; optimize OK (artur.pas), line = 806
  6324
  6325 434D AD 30 63			lda CX
  6326 4350 8D F9 62			sta XORCURSOR.X
  6327 4353 AD 31 63			lda CY
  6328 4356 8D FA 62			sta XORCURSOR.Y
  6329 4359 20 44 3A			jsr XORCURSOR
  6330
  6331 				; optimize OK (artur.pas), line = 808
  6332
  6333 435C A9 00			lda #$00
  6334 435E 8D 34 63			sta DONE
  6335
  6336 				; --- RepeatUntilProlog
  6337 4361			l_18EC
  6338
  6339 				; optimize FAIL ('READJOYSTICK', artur.pas), line = 811
  6340
  6341 4361 20 92 32			jsr READJOYSTICK
  6342
  6343 				; optimize OK (artur.pas), line = 813
  6344
  6345 4364 AD 8C 61			lda KEYREPEATCOUNTER
  6346 4367 F0 03 4C B7 44		jne l_18FF
  6347
  6348 				; optimize FAIL ('CRT.KEYPRESSED', artur.pas), line = 814
  6349
  6350 436C 20 B4 2A			jsr CRT.KEYPRESSED
  6351 436F AD C8 58			lda CRT.KEYPRESSED.RESULT
  6352 4372 D0 03 4C 6B 44		jeq l_190A
  6353
  6354 				; optimize FAIL ('CRT.READKEY', artur.pas), line = 815
  6355
  6356 4377 20 AD 2A			jsr CRT.READKEY
  6357 437A AD C7 58			lda CRT.READKEY.RESULT
  6358 437D 8D 7A 61			sta C
  6359
  6360 				; optimize OK (artur.pas), line = 816
  6361
  6362 4380 C9 1B			cmp #$1B
  6363 4382 D0 05			jne l_1921
  6364 4384 A9 01			lda #$01
  6365 4386 8D 34 63			sta DONE
  6366 4389			l_1921
  6367
  6368 				; optimize OK (artur.pas), line = 817
  6369
  6370 4389 AD 09 D2			lda ATARI.KBCODE
  6371 438C C9 0C			cmp #$0C
  6372 438E F0 04			jeq l_1946x
  6373 4390 C9 3C			cmp #$3C
  6374 4392 D0 1B			jne l_1946
  6375 4394			l_1946x
  6376
  6377 				; optimize OK (artur.pas), line = 818
  6378
  6379 4394 AD 2F 63			lda CBRUSH
  6380 4397 10 05			jpl l_1959
  6381 4399 A9 01			lda #$01
  6382 439B 8D 9A 61			sta INVERT
  6383 439E			l_1959
  6384
  6385 				; optimize OK (artur.pas), line = 819
  6386
  6387 439E AD 2F 63			lda CBRUSH
  6388 43A1 20 D7 41			jsr USEBRUSH
  6389
  6390 				; optimize OK (artur.pas), line = 820
  6391
  6392 43A4 AD 2F 63			lda CBRUSH
  6393 43A7 8D 2C 63			sta RESULT
  6394
  6395 				; optimize OK (artur.pas), line = 821
  6396
  6397 43AA A9 01			lda #$01
  6398 43AC 8D 34 63			sta DONE
  6399 43AF			l_1946
  6400
  6401 				; optimize OK (artur.pas), line = 823
  6402
  6403 43AF A9 00			lda #$00
  6404 43B1 8D 33 63			sta MOVED
  6405
  6406 				; optimize OK (artur.pas), line = 824
  6407
  6408 43B4 AD 09 D2			lda ATARI.KBCODE
  6409 43B7 C9 21			cmp #$21
  6410 43B9 D0 0B			jne l_1986
  6411
  6412 				; optimize OK (artur.pas), line = 825
  6413
  6414 43BB AD 2F 63			lda CBRUSH
  6415 43BE 20 D7 41			jsr USEBRUSH
  6416
  6417 				; optimize OK (artur.pas), line = 826
  6418
  6419 43C1 A9 01			lda #$01
  6420 43C3 8D 33 63			sta MOVED
  6421 43C6			l_1986
  6422
  6423 				; optimize OK (artur.pas), line = 828
  6424
  6425 43C6 A9 80			lda #$80
  6426 43C8 8D 32 63			sta KOFFSET
  6427
  6428 				; optimize OK (artur.pas), line = 829
  6429
  6430 43CB AD 4C 61			lda CONFIG.ARROWSRAW
  6431 43CE F0 05			jeq l_19A1
  6432 43D0 A9 00			lda #$00
  6433 43D2 8D 32 63			sta KOFFSET
  6434 43D5			l_19A1
  6435
  6436 				; optimize OK (artur.pas), line = 830
  6437
  6438 43D5 A9 06			lda #$06
  6439 43D7 18 6D 32 63			add KOFFSET
  6440 43DB CD 09 D2			cmp ATARI.KBCODE
  6441 43DE D0 08			jne l_19C0
  6442
  6443 				; optimize FAIL (0, artur.pas), line = 831
  6444
  6445 43E0 CE 2F 63			dec CBRUSH
  6446
  6447 				; optimize OK (artur.pas), line = 832
  6448
  6449 43E3 A9 01			lda #$01
  6450 43E5 8D 33 63			sta MOVED
  6451 43E8			l_19C0
  6452
  6453 				; optimize OK (artur.pas), line = 834
  6454
  6455 43E8 A9 07			lda #$07
  6456 43EA 18 6D 32 63			add KOFFSET
  6457 43EE CD 09 D2			cmp ATARI.KBCODE
  6458 43F1 D0 08			jne l_19E3
  6459
  6460 				; optimize FAIL (0, artur.pas), line = 835
  6461
  6462 43F3 EE 2F 63			inc CBRUSH
  6463
  6464 				; optimize OK (artur.pas), line = 836
  6465
  6466 43F6 A9 01			lda #$01
  6467 43F8 8D 33 63			sta MOVED
  6468 43FB			l_19E3
  6469
  6470 				; optimize OK (artur.pas), line = 838
  6471
  6472 43FB A9 0E			lda #$0E
  6473 43FD 18 6D 32 63			add KOFFSET
  6474 4401 CD 09 D2			cmp ATARI.KBCODE
  6475 4404 D0 0E			jne l_1A06
  6476
  6477 				; optimize OK (artur.pas), line = 839
  6478
  6479 4406 AD 2F 63			lda CBRUSH
  6480 4409 38 E9 10			sub #$10
  6481 440C 8D 2F 63			sta CBRUSH
  6482
  6483 				; optimize OK (artur.pas), line = 840
  6484
  6485 440F A9 01			lda #$01
  6486 4411 8D 33 63			sta MOVED
  6487 4414			l_1A06
  6488
  6489 				; optimize OK (artur.pas), line = 842
  6490
  6491 4414 A9 0F			lda #$0F
  6492 4416 18 6D 32 63			add KOFFSET
  6493 441A CD 09 D2			cmp ATARI.KBCODE
  6494 441D D0 0E			jne l_1A26
  6495
  6496 				; optimize OK (artur.pas), line = 843
  6497
  6498 441F AD 2F 63			lda CBRUSH
  6499 4422 18 69 10			add #$10
  6500 4425 8D 2F 63			sta CBRUSH
  6501
  6502 				; optimize OK (artur.pas), line = 844
  6503
  6504 4428 A9 01			lda #$01
  6505 442A 8D 33 63			sta MOVED
  6506 442D			l_1A26
  6507
  6508 				; optimize OK (artur.pas), line = 846
  6509
  6510 442D AD 33 63			lda MOVED
  6511 4430 F0 06			jeq l_1A3A
  6512
  6513 				; optimize FAIL ('UPDATEBRUSHCURSOR', artur.pas), line = 847
  6514
  6515 4432 20 6B 42			jsr UPDATEBRUSHCURSOR
  6516 4435 4C 66 44			jmp l_1A45
  6517 4438			l_1A3A
  6518
  6519 				; optimize OK (artur.pas), line = 848
  6520
  6521 4438 AC 85 58 84 82 AC + 	mwy KEYCHARS :bp2
  6522 4442 AC 09 D2			ldy ATARI.KBCODE
  6523 4445 B1 82			lda (:bp2),y
  6524 4447 20 E4 2C			jsr B_CRT.ATASCII2ANTIC_0535
  6525 444A AD 1B 5A			lda B_CRT.ATASCII2ANTIC_0535.RESULT
  6526 444D 8D 4E 61			sta B
  6527
  6528 				; optimize OK (artur.pas), line = 849
  6529
  6530 4450 AD 9A 61			lda INVERT
  6531 4453 F0 08			jeq l_1A5B
  6532 4455 AD 4E 61			lda B
  6533 4458 49 80			eor #$80
  6534 445A 8D 4E 61			sta B
  6535 445D			l_1A5B
  6536
  6537 				; optimize OK (artur.pas), line = 850
  6538
  6539 445D AD 4E 61			lda B
  6540 4460 8D 8B 61			sta BRUSH
  6541
  6542 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 851
  6543
  6544 4463 20 C0 37			jsr SHOWSTATUS
  6545 4466			l_1A45
  6546
  6547 				; optimize OK (artur.pas), line = 853
  6548
  6549 4466 A9 0A			lda #$0A
  6550 4468 8D 8C 61			sta KEYREPEATCOUNTER
  6551 446B			l_190A
  6552
  6553 				; optimize OK (artur.pas), line = 856
  6554
  6555 446B AD 88 61			lda JOYX
  6556 446E D0 05			jne l_1A93x
  6557 4470 AD 89 61			lda JOYY
  6558 4473 F0 23			jeq l_1A93
  6559 4475			l_1A93x
  6560
  6561 				; optimize OK (artur.pas), line = 857
  6562
  6563 4475 AD 89 61			lda JOYY
  6564 4478 0A				asl @
  6565 4479 0A				asl @
  6566 447A 0A				asl @
  6567 447B 0A				asl @
  6568 447C 8D 89 61			sta JOYY
  6569
  6570 				; optimize OK (artur.pas), line = 858
  6571
  6572 447F AD 2F 63			lda CBRUSH
  6573 4482 18 6D 89 61			add JOYY
  6574 4486 8D 2F 63			sta CBRUSH
  6575
  6576 				; optimize OK (artur.pas), line = 859
  6577
  6578 4489 18 6D 88 61			add JOYX
  6579 448D 8D 2F 63			sta CBRUSH
  6580
  6581 				; optimize FAIL ('UPDATEBRUSHCURSOR', artur.pas), line = 860
  6582
  6583 4490 20 6B 42			jsr UPDATEBRUSHCURSOR
  6584
  6585 				; optimize OK (artur.pas), line = 861
  6586
  6587 4493 A9 04			lda #$04
  6588 4495 8D 8C 61			sta KEYREPEATCOUNTER
  6589 4498			l_1A93
  6590
  6591 				; optimize OK (artur.pas), line = 863
  6592
  6593 4498 AD 8A 61			lda JOYFIRE
  6594 449B D0 1A			jne l_1ACF
  6595
  6596 				; optimize OK (artur.pas), line = 864
  6597
  6598 449D AD 2F 63			lda CBRUSH
  6599 44A0 10 05			jpl l_1AE2
  6600 44A2 A9 01			lda #$01
  6601 44A4 8D 9A 61			sta INVERT
  6602 44A7			l_1AE2
  6603
  6604 				; optimize OK (artur.pas), line = 865
  6605
  6606 44A7 AD 2F 63			lda CBRUSH
  6607 44AA 8D 2C 63			sta RESULT
  6608
  6609 				; optimize OK (artur.pas), line = 866
  6610
  6611 44AD A9 14			lda #$14
  6612 44AF 8D 8C 61			sta KEYREPEATCOUNTER
  6613
  6614 				; optimize OK (artur.pas), line = 867
  6615
  6616 44B2 A9 01			lda #$01
  6617 44B4 8D 34 63			sta DONE
  6618 44B7			l_1ACF
  6619 44B7			l_18FF
  6620
  6621 				; optimize OK (artur.pas), line = 873
  6622
  6623 44B7 AD 34 63			lda DONE
  6624 44BA D0 03 4C 61 43		jeq l_18EC
  6625
  6626 				; optimize OK (artur.pas), line = 875
  6627
  6628 44BF AD 30 63			lda CX
  6629 44C2 8D F9 62			sta XORCURSOR.X
  6630 44C5 AD 31 63			lda CY
  6631 44C8 8D FA 62			sta XORCURSOR.Y
  6632 44CB 20 44 3A			jsr XORCURSOR
  6633
  6634 				; optimize FAIL ('CLOSEMODAL', artur.pas), line = 876
  6635
  6636 44CE 20 14 41			jsr CLOSEMODAL
  6637 44D1			@exit
  6638
  6639 				; ------------------------------------------------------------
  6640
  6641 = 632C			RESULT	= DATAORIGIN+$0A9C
  6642 = 000B			BRS_X	= $0B
  6643 = 0002			BRS_Y	= $02
  6644 = 0012			BRS_W	= $12
  6645 = 0014			BRS_H	= $14
  6646 = 632D			VRAM	= DATAORIGIN+$0A9D
  6647 = 632F			CBRUSH	= DATAORIGIN+$0A9F
  6648 = 6330			CX	= DATAORIGIN+$0AA0
  6649 = 6331			CY	= DATAORIGIN+$0AA1
  6650 = 6332			KOFFSET	= DATAORIGIN+$0AA2
  6651 = 6333			MOVED	= DATAORIGIN+$0AA3
  6652 = 6334			DONE	= DATAORIGIN+$0AA4
  6653
  6654 = 632C			@VarData	= RESULT
  6655 = 0009			@VarDataSize	= 9
  6656
  6657 44D1 60				rts						; ret
  6658 				.endl
  6659
  6660 44D2			.local	SORTPOINTSANDGETCORNER				; FUNCTION
  6661
  6662 				; optimize OK (artur.pas), line = 886
  6663
  6664 44D2 AD 9F 61			lda P2X
  6665 44D5 CD 9E 61			cmp P1X
  6666 44D8 B0 17			jcs l_1B22
  6667 44DA A9 9E			lda <P1X
  6668 44DC 8D B9 62			sta SWAP.A
  6669 44DF A9 61			lda >P1X
  6670 44E1 8D BA 62			sta SWAP.A+1
  6671 44E4 A9 9F			lda <P2X
  6672 44E6 8D BB 62			sta SWAP.B
  6673 44E9 A9 61			lda >P2X
  6674 44EB 8D BC 62			sta SWAP.B+1
  6675 44EE 20 4E 31			jsr SWAP
  6676 44F1			l_1B22
  6677
  6678 				; optimize OK (artur.pas), line = 887
  6679
  6680 44F1 AD A1 61			lda P2Y
  6681 44F4 CD A0 61			cmp P1Y
  6682 44F7 B0 17			jcs l_1B3C
  6683 44F9 A9 A0			lda <P1Y
  6684 44FB 8D B9 62			sta SWAP.A
  6685 44FE A9 61			lda >P1Y
  6686 4500 8D BA 62			sta SWAP.A+1
  6687 4503 A9 A1			lda <P2Y
  6688 4505 8D BB 62			sta SWAP.B
  6689 4508 A9 61			lda >P2Y
  6690 450A 8D BC 62			sta SWAP.B+1
  6691 450D 20 4E 31			jsr SWAP
  6692 4510			l_1B3C
  6693
  6694 				; optimize OK (artur.pas), line = 888
  6695
  6696 4510 AD A0 61			lda P1Y
  6697 4513 0A				asl @
  6698 4514 A8				tay
  6699 4515 B9 89 62			lda adr.LINEOFFSET,y
  6700 4518 18 6D 9E 61			add P1X
  6701 451C 8D 35 63			sta RESULT
  6702 451F B9 8A 62			lda adr.LINEOFFSET+1,y
  6703 4522 69 7C			adc #$7C
  6704 4524 8D 36 63			sta RESULT+1
  6705 4527			@exit
  6706
  6707 				; ------------------------------------------------------------
  6708
  6709 = 6335			RESULT	= DATAORIGIN+$0AA5
  6710
  6711 = 6335			@VarData	= RESULT
  6712 = 0002			@VarDataSize	= 2
  6713
  6714 4527 60				rts						; ret
  6715 				.endl
  6716
  6717 4528			.local	INVERTBLOCK					; PROCEDURE
  6718
  6719 				; optimize OK (artur.pas), line = 895
  6720
  6721 4528 A9 01			lda #$01
  6722 452A 20 1A 35			jsr STOREUNDOACTION
  6723
  6724 				; optimize FAIL ('SORTPOINTSANDGETCORNER', artur.pas), line = 896
  6725
  6726 452D 20 D2 44			jsr SORTPOINTSANDGETCORNER
  6727 4530 E8				inx
  6728 4531 AD 35 63			lda SORTPOINTSANDGETCORNER.RESULT
  6729 4534 38 ED 9E 61			sub P1X
  6730 4538 8D 39 63			sta VRAM
  6731 453B AD 36 63			lda SORTPOINTSANDGETCORNER.RESULT+1
  6732 453E E9 00			sbc #$00
  6733 4540 8D 3A 63			sta VRAM+1
  6734 4543 CA				dex
  6735
  6736 				; optimize OK (artur.pas), line = 897
  6737
  6738 4544 AD A0 61			lda P1Y
  6739 4547 8D 38 63			sta Y
  6740
  6741 454A			l_1B71
  6742 				; --- ForToDoCondition
  6743 454A AD 38 63			lda Y
  6744 454D CD A1 61			cmp P2Y
  6745 4550 90 02			scc
  6746 4552 D0 3B			jne l_1B7F
  6747
  6748 				; optimize OK (artur.pas), line = 898
  6749
  6750 4554 AD 9E 61			lda P1X
  6751 4557 8D 37 63			sta X
  6752
  6753 455A			l_1B8C
  6754 				; --- ForToDoCondition
  6755 455A AD 37 63			lda X
  6756 455D CD 9F 61			cmp P2X
  6757 4560 90 02			scc
  6758 4562 D0 18			jne l_1B9A
  6759
  6760 				; optimize OK (artur.pas), line = 899
  6761
  6762 4564 AC 39 63 84 82 AC + 	mwy VRAM :bp2
  6763 456E AC 37 63			ldy X
  6764 4571 B1 82			lda (:bp2),y
  6765 4573 49 80			eor #$80
  6766 4575 91 82			sta (:bp2),y
  6767
  6768 				; --- ForToDoEpilog
  6769 4577 EE 37 63			inc X
  6770 457A D0 DE			jne l_1B8C
  6771 457C			l_1B9A
  6772
  6773 				; optimize OK (artur.pas), line = 901
  6774
  6775 457C AD 39 63			lda VRAM
  6776 457F 18 69 28			add #$28
  6777 4582 8D 39 63			sta VRAM
  6778 4585 90 03			scc
  6779 4587 EE 3A 63			inc VRAM+1
  6780
  6781 				; --- ForToDoEpilog
  6782 458A EE 38 63			inc Y
  6783 458D D0 BB			jne l_1B71
  6784 458F			l_1B7F
  6785
  6786 				; ------------------------------------------------------------
  6787
  6788 = 6337			X	= DATAORIGIN+$0AA7
  6789 = 6338			Y	= DATAORIGIN+$0AA8
  6790 = 6339			VRAM	= DATAORIGIN+$0AA9
  6791
  6792 = 6337			@VarData	= X
  6793 = 0004			@VarDataSize	= 4
  6794
  6795 458F			@exit
  6796 					.ifdef @new
  6797 					lda <@VarData
  6798 					sta :ztmp
  6799 					lda >@VarData
  6800 					ldy #@VarDataSize-1
  6801 					jmp @FreeMem
  6802 					els
  6803 458F 60				rts						; ret
  6804 					eif
  6805 				.endl
  6806
  6807 4590			.local	CALCULATEWIDTHANDHEIGHT				; PROCEDURE
  6808
  6809 				; optimize OK (artur.pas), line = 907
  6810
  6811 4590 AD 9F 61			lda P2X
  6812 4593 38 ED 9E 61			sub P1X
  6813 4597 18 69 01			add #$01
  6814 459A 8D 50 61			sta W
  6815
  6816 				; optimize OK (artur.pas), line = 908
  6817
  6818 459D AD A1 61			lda P2Y
  6819 45A0 38 ED A0 61			sub P1Y
  6820 45A4 18 69 01			add #$01
  6821 45A7 8D 4F 61			sta H
  6822 45AA			@exit
  6823 					.ifdef @new
  6824 					lda <@VarData
  6825 					sta :ztmp
  6826 					lda >@VarData
  6827 					ldy #@VarDataSize-1
  6828 					jmp @FreeMem
  6829 					els
  6830 45AA 60				rts						; ret
  6831 					eif
  6832 				.endl
  6833
  6834 45AB			.local	DRAWBLOCK					; PROCEDURE
  6835
  6836 				; optimize OK (artur.pas), line = 914
  6837
  6838 45AB A9 01			lda #$01
  6839 45AD 20 1A 35			jsr STOREUNDOACTION
  6840
  6841 				; optimize FAIL ('SORTPOINTSANDGETCORNER', artur.pas), line = 915
  6842
  6843 45B0 20 D2 44			jsr SORTPOINTSANDGETCORNER
  6844 45B3 AD 35 63			lda SORTPOINTSANDGETCORNER.RESULT
  6845 45B6 8D 3B 63			sta VRAM
  6846 45B9 AD 36 63			lda SORTPOINTSANDGETCORNER.RESULT+1
  6847 45BC 8D 3C 63			sta VRAM+1
  6848
  6849 				; optimize FAIL ('CALCULATEWIDTHANDHEIGHT', artur.pas), line = 916
  6850
  6851 45BF 20 90 45			jsr CALCULATEWIDTHANDHEIGHT
  6852
  6853 				; optimize OK (artur.pas), line = 917
  6854
  6855 45C2 AD 9E 61			lda P1X
  6856 45C5 8D F2 62			sta DRAWRECT.X
  6857 45C8 AD A0 61			lda P1Y
  6858 45CB 8D F3 62			sta DRAWRECT.Y
  6859 45CE AD 50 61			lda W
  6860 45D1 8D F4 62			sta DRAWRECT.W
  6861 45D4 AD 4F 61			lda H
  6862 45D7 8D F5 62			sta DRAWRECT.H
  6863 45DA AD 8B 61			lda BRUSH
  6864 45DD 8D F6 62			sta DRAWRECT.C
  6865 45E0 20 0C 36			jsr DRAWRECT
  6866
  6867 				; ------------------------------------------------------------
  6868
  6869 = 633B			VRAM	= DATAORIGIN+$0AAB
  6870
  6871 = 633B			@VarData	= VRAM
  6872 = 0002			@VarDataSize	= 2
  6873
  6874 45E3			@exit
  6875 					.ifdef @new
  6876 					lda <@VarData
  6877 					sta :ztmp
  6878 					lda >@VarData
  6879 					ldy #@VarDataSize-1
  6880 					jmp @FreeMem
  6881 					els
  6882 45E3 60				rts						; ret
  6883 					eif
  6884 				.endl
  6885
  6886 45E4			.local	COPYBLOCK					; PROCEDURE
  6887 45E4 8D 3D 63			sta MOVEBLOCK
  6888
  6889 				; optimize OK (artur.pas), line = 923
  6890
  6891 45E7 A9 01			lda #$01
  6892 45E9 20 1A 35			jsr STOREUNDOACTION
  6893
  6894 				; optimize FAIL ('SORTPOINTSANDGETCORNER', artur.pas), line = 924
  6895
  6896 45EC 20 D2 44			jsr SORTPOINTSANDGETCORNER
  6897 45EF E8				inx
  6898 45F0 AD 35 63			lda SORTPOINTSANDGETCORNER.RESULT
  6899 45F3 38 E9 00			sub #$00
  6900 45F6 95 94			sta :STACKORIGIN,x
  6901 45F8 AD 36 63			lda SORTPOINTSANDGETCORNER.RESULT+1
  6902 45FB E9 7C			sbc #$7C
  6903 45FD 95 A4			sta :STACKORIGIN+STACKWIDTH,x
  6904 45FF B5 94			lda :STACKORIGIN,x
  6905 4601 8D 40 63			sta BRAM
  6906 4604 B5 A4			lda :STACKORIGIN+STACKWIDTH,x
  6907 4606 18 69 78			add #$78
  6908 4609 8D 41 63			sta BRAM+1
  6909 460C CA				dex
  6910
  6911 				; optimize OK (artur.pas), line = 925
  6912
  6913 460D AD 95 61			lda CURSOR
  6914 4610 8D 3E 63			sta VRAM
  6915 4613 A9 7C			lda #$7C
  6916 4615 18 6D 96 61			add CURSOR+1
  6917 4619 8D 3F 63			sta VRAM+1
  6918
  6919 				; optimize FAIL ('CALCULATEWIDTHANDHEIGHT', artur.pas), line = 926
  6920
  6921 461C 20 90 45			jsr CALCULATEWIDTHANDHEIGHT
  6922
  6923 				; optimize OK (artur.pas), line = 927
  6924
  6925 461F AD 93 61			lda CURSORX
  6926 4622 18 6D 50 61			add W
  6927 4626 C9 28			cmp #$28
  6928 4628 90 09			jcc l_1C2E
  6929 462A A9 28			lda #$28
  6930 462C 38 ED 93 61			sub CURSORX
  6931 4630 8D 50 61			sta W
  6932 4633			l_1C2E
  6933
  6934 				; optimize OK (artur.pas), line = 928
  6935
  6936 4633 AD 94 61			lda CURSORY
  6937 4636 18 6D 4F 61			add H
  6938 463A C9 18			cmp #$18
  6939 463C 90 09			jcc l_1C53
  6940 463E A9 18			lda #$18
  6941 4640 38 ED 94 61			sub CURSORY
  6942 4644 8D 4F 61			sta H
  6943 4647			l_1C53
  6944
  6945 				; optimize FAIL ('STOREEDITINBUFFER', artur.pas), line = 929
  6946
  6947 4647 20 D4 35			jsr STOREEDITINBUFFER
  6948
  6949 				; optimize OK (artur.pas), line = 930
  6950
  6951 464A AD 3D 63			lda MOVEBLOCK
  6952 464D F0 70			jeq l_1C6D
  6953
  6954 				; optimize OK (artur.pas), line = 931
  6955
  6956 464F AD 9E 61			lda P1X
  6957 4652 8D F2 62			sta DRAWRECT.X
  6958 4655 AD A0 61			lda P1Y
  6959 4658 8D F3 62			sta DRAWRECT.Y
  6960 465B AD 50 61			lda W
  6961 465E 8D F4 62			sta DRAWRECT.W
  6962 4661 AD 4F 61			lda H
  6963 4664 8D F5 62			sta DRAWRECT.H
  6964 4667 A9 00			lda #$00
  6965 4669 8D F6 62			sta DRAWRECT.C
  6966 466C 20 0C 36			jsr DRAWRECT
  6967
  6968 				; optimize OK (artur.pas), line = 932
  6969
  6970 466F AD 93 61			lda CURSORX
  6971 4672 8D 9E 61			sta P1X
  6972
  6973 				; optimize OK (artur.pas), line = 933
  6974
  6975 4675 AD 94 61			lda CURSORY
  6976 4678 8D A0 61			sta P1Y
  6977
  6978 				; optimize OK (artur.pas), line = 934
  6979
  6980 467B AD 93 61			lda CURSORX
  6981 467E 18 6D 50 61			add W
  6982 4682 38 E9 01			sub #$01
  6983 4685 8D 9F 61			sta P2X
  6984
  6985 				; optimize OK (artur.pas), line = 935
  6986
  6987 4688 AD 94 61			lda CURSORY
  6988 468B 18 6D 4F 61			add H
  6989 468F 38 E9 01			sub #$01
  6990 4692 8D A1 61			sta P2Y
  6991
  6992 				; optimize OK (artur.pas), line = 936
  6993
  6994 4695 AD 9E 61			lda P1X
  6995 4698 8D FF 62			sta DRAWSELECTION.PC1X
  6996 469B AD A0 61			lda P1Y
  6997 469E 8D 00 63			sta DRAWSELECTION.PC1Y
  6998 46A1 AD 9F 61			lda P2X
  6999 46A4 8D 01 63			sta DRAWSELECTION.PC2X
  7000 46A7 AD A1 61			lda P2Y
  7001 46AA 8D 02 63			sta DRAWSELECTION.PC2Y
  7002 46AD 20 FC 3A			jsr DRAWSELECTION
  7003
  7004 				; optimize OK (artur.pas), line = 937
  7005
  7006 46B0 AD 93 61			lda CURSORX
  7007 46B3 8D F9 62			sta XORCURSOR.X
  7008 46B6 AD 94 61			lda CURSORY
  7009 46B9 8D FA 62			sta XORCURSOR.Y
  7010 46BC 20 44 3A			jsr XORCURSOR
  7011 46BF			l_1C6D
  7012
  7013 				; --- RepeatUntilProlog
  7014 46BF			l_1CBF
  7015
  7016 				; optimize OK (artur.pas), line = 940
  7017
  7018 46BF AD 40 63			lda BRAM
  7019 46C2 85 88			sta SYSTEM.MOVE_0458.SOURCE
  7020 46C4 AD 41 63			lda BRAM+1
  7021 46C7 85 89			sta SYSTEM.MOVE_0458.SOURCE+1
  7022 46C9 AD 3E 63			lda VRAM
  7023 46CC 85 8C			sta SYSTEM.MOVE_0458.DEST
  7024 46CE AD 3F 63			lda VRAM+1
  7025 46D1 85 8D			sta SYSTEM.MOVE_0458.DEST+1
  7026 46D3 AD 50 61			lda W
  7027 46D6 85 84			sta SYSTEM.MOVE_0458.COUNT
  7028 46D8 A9 00			lda #$00
  7029 46DA 85 85			sta SYSTEM.MOVE_0458.COUNT+1
  7030 46DC				.local +MAIN.SYSTEM.MOVE_0458
  7031 46DC				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0458.M@INLINE [Source: artur.a65]
     4 46DC 20 74 27			jsr @move
Source: artur.a65
  7032 					.endl
  7033
  7034 				; optimize OK (artur.pas), line = 941
  7035
  7036 46DF AD 3E 63			lda VRAM
  7037 46E2 18 69 28			add #$28
  7038 46E5 8D 3E 63			sta VRAM
  7039 46E8 90 03			scc
  7040 46EA EE 3F 63			inc VRAM+1
  7041
  7042 				; optimize OK (artur.pas), line = 942
  7043
  7044 46ED AD 40 63			lda BRAM
  7045 46F0 18 69 28			add #$28
  7046 46F3 8D 40 63			sta BRAM
  7047 46F6 90 03			scc
  7048 46F8 EE 41 63			inc BRAM+1
  7049
  7050 				; optimize OK (artur.pas), line = 943
  7051
  7052 46FB AD 3F 63			lda VRAM+1
  7053 46FE C9 7F			cmp #$7F
  7054 4700 D0 05			bne @+
  7055 4702 AD 3E 63			lda VRAM
  7056 4705 C9 C0			cmp #$C0
  7057 				@
  7058 4707 90 11			jcc l_1CDA
  7059 4709 AD 3E 63			lda VRAM
  7060 470C 38 E9 C0			sub #$C0
  7061 470F 8D 3E 63			sta VRAM
  7062 4712 AD 3F 63			lda VRAM+1
  7063 4715 E9 03			sbc #$03
  7064 4717 8D 3F 63			sta VRAM+1
  7065 471A			l_1CDA
  7066
  7067 				; optimize FAIL (0, artur.pas), line = 944
  7068
  7069 471A CE 4F 61			dec H
  7070
  7071 				; optimize OK (artur.pas), line = 945
  7072
  7073 471D D0 A0			jne l_1CBF
  7074
  7075 				; ------------------------------------------------------------
  7076
  7077 = 633D			MOVEBLOCK	= DATAORIGIN+$0AAD
  7078 = 633E			VRAM	= DATAORIGIN+$0AAE
  7079 = 6340			BRAM	= DATAORIGIN+$0AB0
  7080
  7081 = 633D			@VarData	= MOVEBLOCK
  7082 = 0005			@VarDataSize	= 5
  7083
  7084 471F			@exit
  7085 					.ifdef @new
  7086 					lda <@VarData
  7087 					sta :ztmp
  7088 					lda >@VarData
  7089 					ldy #@VarDataSize-1
  7090 					jmp @FreeMem
  7091 					els
  7092 471F 60				rts						; ret
  7093 					eif
  7094 				.endl
  7095
  7096 4720			.local	DRAWFRAME					; PROCEDURE
  7097
  7098 				; optimize OK (artur.pas), line = 951
  7099
  7100 4720 A9 01			lda #$01
  7101 4722 20 1A 35			jsr STOREUNDOACTION
  7102
  7103 				; optimize FAIL ('SORTPOINTSANDGETCORNER', artur.pas), line = 952
  7104
  7105 4725 20 D2 44			jsr SORTPOINTSANDGETCORNER
  7106 4728 AD 35 63			lda SORTPOINTSANDGETCORNER.RESULT
  7107 472B 8D 42 63			sta VRAM
  7108 472E AD 36 63			lda SORTPOINTSANDGETCORNER.RESULT+1
  7109 4731 8D 43 63			sta VRAM+1
  7110
  7111 				; optimize FAIL ('CALCULATEWIDTHANDHEIGHT', artur.pas), line = 953
  7112
  7113 4734 20 90 45			jsr CALCULATEWIDTHANDHEIGHT
  7114
  7115 				; optimize OK (artur.pas), line = 954
  7116
  7117 4737 AD 42 63			lda VRAM
  7118 473A 85 88			sta SYSTEM.FILLBYTE_0457.A
  7119 473C AD 43 63			lda VRAM+1
  7120 473F 85 89			sta SYSTEM.FILLBYTE_0457.A+1
  7121 4741 AD 50 61			lda W
  7122 4744 85 8C			sta SYSTEM.FILLBYTE_0457.COUNT
  7123 4746 A9 00			lda #$00
  7124 4748 85 8D			sta SYSTEM.FILLBYTE_0457.COUNT+1
  7125 474A AD 8B 61			lda BRUSH
  7126 474D 85 84			sta SYSTEM.FILLBYTE_0457.VALUE
  7127 474F				.local +MAIN.SYSTEM.FILLBYTE_0457
  7128 474F				m@INLINE
Macro: MAIN.SYSTEM.FILLBYTE_0457.M@INLINE [Source: artur.a65]
     4 474F 20 C9 27			jsr @fill
Source: artur.a65
  7129 					.endl
  7130
  7131 				; optimize FAIL (0, artur.pas), line = 955
  7132
  7133 4752 CE 4F 61			dec H
  7134
  7135 				; --- WhileProlog
  7136 4755 4C 8E 47			jmp l_1D09
  7137 4758			l_1D0A
  7138
  7139 				; optimize OK (artur.pas), line = 957
  7140
  7141 4758 AC 43 63			ldy VRAM+1
  7142 475B 84 81			sty :bp+1
  7143 475D AC 42 63			ldy VRAM
  7144 4760 AD 8B 61			lda BRUSH
  7145 4763 91 80			sta (:bp),y
  7146
  7147 				; optimize OK (artur.pas), line = 958
  7148
  7149 4765 98				tya
  7150 4766 18 6D 50 61			add W
  7151 476A A8				tay
  7152 476B AD 43 63			lda VRAM+1
  7153 476E 69 00			adc #$00
  7154 4770 85 81			sta :bp+1
  7155 4772 98				tya
  7156 4773 D0 02			sne
  7157 4775 C6 81			dec :bp+1
  7158 4777 88				dey
  7159 4778 AD 8B 61			lda BRUSH
  7160 477B 91 80			sta (:bp),y
  7161
  7162 				; optimize OK (artur.pas), line = 959
  7163
  7164 477D AD 42 63			lda VRAM
  7165 4780 18 69 28			add #$28
  7166 4783 8D 42 63			sta VRAM
  7167 4786 90 03			scc
  7168 4788 EE 43 63			inc VRAM+1
  7169
  7170 				; optimize FAIL (0, artur.pas), line = 960
  7171
  7172 478B CE 4F 61			dec H
  7173 478E			l_1D09
  7174
  7175 				; optimize OK (artur.pas), line = 956
  7176
  7177 478E AD 4F 61			lda H
  7178 4791 D0 C5			jne l_1D0A
  7179
  7180 				; optimize OK (artur.pas), line = 962
  7181
  7182 4793 AD 42 63			lda VRAM
  7183 4796 85 88			sta SYSTEM.FILLBYTE_0457.A
  7184 4798 AD 43 63			lda VRAM+1
  7185 479B 85 89			sta SYSTEM.FILLBYTE_0457.A+1
  7186 479D AD 50 61			lda W
  7187 47A0 85 8C			sta SYSTEM.FILLBYTE_0457.COUNT
  7188 47A2 A9 00			lda #$00
  7189 47A4 85 8D			sta SYSTEM.FILLBYTE_0457.COUNT+1
  7190 47A6 AD 8B 61			lda BRUSH
  7191 47A9 85 84			sta SYSTEM.FILLBYTE_0457.VALUE
  7192 47AB				.local +MAIN.SYSTEM.FILLBYTE_0457
  7193 47AB				m@INLINE
Macro: MAIN.SYSTEM.FILLBYTE_0457.M@INLINE [Source: artur.a65]
     4 47AB 20 C9 27			jsr @fill
Source: artur.a65
  7194 					.endl
  7195
  7196 				; ------------------------------------------------------------
  7197
  7198 = 6342			VRAM	= DATAORIGIN+$0AB2
  7199
  7200 = 6342			@VarData	= VRAM
  7201 = 0002			@VarDataSize	= 2
  7202
  7203 47AE			@exit
  7204 					.ifdef @new
  7205 					lda <@VarData
  7206 					sta :ztmp
  7207 					lda >@VarData
  7208 					ldy #@VarDataSize-1
  7209 					jmp @FreeMem
  7210 					els
  7211 47AE 60				rts						; ret
  7212 					eif
  7213 				.endl
  7214
  7215 47AF			.local	IOSTATUS					; PROCEDURE
  7216
  7217 47AF A9 00 8D 51 61		mva #$00 adr.S
  7218
  7219 				; optimize OK (artur.pas), line = 973
  7220
  7221 47B4 AD 97 58			lda SYSTEM.IORESULT
  7222 47B7 8D 44 63			sta @CASETMP_0006
  7223 47BA C9 85			cmp #$85
  7224 47BC D0 0E			jne l_1D49
  7225 				@
  7226 47BE A0 F2			ldy #256-14
  7227 47C0 B9 3F 20 99 5F 60 + 	mva:rne CODEORIGIN+$0131+14-256,y adr.S+14-256,y+
  7228
  7229 47C9 4C 07 48			jmp a_0006
  7230 47CC			l_1D49
  7231 47CC C9 88			cmp #$88
  7232 47CE F0 04			beq @+
  7233 47D0 C9 8B			cmp #$8B
  7234 47D2 D0 0E			jne l_1D54
  7235 				@
  7236 47D4 A0 F2			ldy #256-14
  7237 47D6 B9 4E 20 99 5F 60 + 	mva:rne CODEORIGIN+$0140+14-256,y adr.S+14-256,y+
  7238
  7239 47DF 4C 07 48			jmp a_0006
  7240 47E2			l_1D54
  7241 47E2 C9 A8			cmp #$A8
  7242 47E4 D0 0E			jne l_1D5D
  7243 				@
  7244 47E6 A0 F2			ldy #256-14
  7245 47E8 B9 4E 20 99 5F 60 + 	mva:rne CODEORIGIN+$0140+14-256,y adr.S+14-256,y+
  7246
  7247 47F1 4C 07 48			jmp a_0006
  7248 47F4			l_1D5D
  7249 47F4 C9 01			cmp #$01
  7250 47F6 F0 04			beq @+
  7251 47F8 C9 03			cmp #$03
  7252 47FA D0 0B			jne l_1D68
  7253 				@
  7254 47FC A0 F7			ldy #256-9
  7255 47FE B9 58 20 99 5A 60 + 	mva:rne CODEORIGIN+$014F+9-256,y adr.S+9-256,y+
  7256
  7257 4807			l_1D68
  7258 4807			a_0006
  7259
  7260 				; optimize FAIL ('B_CRT.CRT_WRITE_05F8', artur.pas), line = 982
  7261
  7262 4807 E8				inx
  7263 4808 AD 7F 58 95 94		mva S :STACKORIGIN,x
  7264 480D AD 80 58 95 A4		mva S+1 :STACKORIGIN+STACKWIDTH,x
  7265 4812 20 2B 2E			jsr B_CRT.CRT_WRITE_05F8
  7266
  7267 				; optimize FAIL ('CRT.READKEY', artur.pas), line = 983
  7268
  7269 4815 20 AD 2A			jsr CRT.READKEY
  7270 4818 AD C7 58 95 95		mva CRT.READKEY.RESULT :STACKORIGIN+1,x
  7271 				; CloseFile
  7272
  7273 481D 8A 48			txa:pha
  7274 481F 18				clc
  7275 					@closefile AFILE
  7275 				 LDY AFILE+1\ LDA AFILE\ JSR @CLOSEFILE
  7275 4820 AC 82 58		 LDY AFILE+1
  7275 4823 AD 81 58		 LDA AFILE
  7275 4826 20 70 25		 JSR @CLOSEFILE
  7276 4829 68 AA			pla:tax
  7277
  7278 				; ------------------------------------------------------------
  7279
  7280 = 6344			@CASETMP_0006	= DATAORIGIN+$0AB4
  7281
  7282 = 6344			@VarData	= @CASETMP_0006
  7283 = 0001			@VarDataSize	= 1
  7284
  7285 482B			@exit
  7286 					.ifdef @new
  7287 					lda <@VarData
  7288 					sta :ztmp
  7289 					lda >@VarData
  7290 					ldy #@VarDataSize-1
  7291 					jmp @FreeMem
  7292 					els
  7293 482B 60				rts						; ret
  7294 					eif
  7295 				.endl
  7296
  7297 482C			.local	LOADDATA					; PROCEDURE
  7298
  7299 				; AssignFile
  7300
  7301 				; optimize OK (artur.pas), line = 989
  7302
  7303 482C AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7304 4836 A0 00			ldy #s@file.pfname
  7305 4838 AD 7F 58			lda S
  7306 483B 91 82			sta (:bp2),y
  7307 483D C8				iny
  7308 483E AD 80 58			lda S+1
  7309 4841 91 82			sta (:bp2),y
  7310 4843 A0 05			ldy #s@file.status
  7311 4845 A9 00			lda #$00
  7312 4847 91 82			sta (:bp2),y
  7313 				; Reset
  7314
  7315 				; optimize OK (artur.pas), line = 990
  7316
  7317 4849 A0 02			ldy #s@file.record
  7318 484B A9 01			lda #$01
  7319 484D 91 82			sta (:bp2),y
  7320 484F C8				iny
  7321 4850 A9 00			lda #$00
  7322 4852 91 82			sta (:bp2),y
  7323
  7324 4854 8A 48			txa:pha
  7325 4856 18				clc
  7326 					@openfile AFILE, MAIN.SYSTEM.FileMode
  7326 				 LDY AFILE+1\ LDA AFILE\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  7326 4857 AC 82 58		 LDY AFILE+1
  7326 485A AD 81 58		 LDA AFILE
  7326 485D AE 95 58		 LDX MAIN.SYSTEM.FILEMODE
  7326 4860 20 DA 24		 JSR @OPENFILE
  7327 4863 68 AA			pla:tax
  7328
  7329 				; BlockRead
  7330
  7331 				; optimize OK (artur.pas), line = 991
  7332
  7333 4865 AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7334 486F A0 06			ldy #s@file.buffer
  7335 4871 AD 45 63			lda BUF
  7336 4874 91 82			sta (:bp2),y
  7337 4876 C8				iny
  7338 4877 AD 46 63			lda BUF+1
  7339 487A 91 82			sta (:bp2),y
  7340 487C A0 08			ldy #s@file.nrecord
  7341 487E AD 47 63			lda SIZE
  7342 4881 91 82			sta (:bp2),y
  7343 4883 C8				iny
  7344 4884 AD 48 63			lda SIZE+1
  7345 4887 91 82			sta (:bp2),y
  7346
  7347 4889 8A 48			txa:pha
  7348 488B 18				clc
  7349 					@readfile AFILE, #7
  7349 				 LDY AFILE+1\ LDA AFILE\ LDX# 7\ JSR @READFILE
  7349 488C AC 82 58		 LDY AFILE+1
  7349 488F AD 81 58		 LDA AFILE
  7349 4892 A2 07		 LDX# 7
  7349 4894 20 9D 25		 JSR @READFILE
  7350 4897 68 AA			pla:tax
  7351
  7352 				; optimize FAIL ('IOSTATUS', artur.pas), line = 992
  7353
  7354 4899 20 AF 47			jsr IOSTATUS
  7355
  7356 				; ------------------------------------------------------------
  7357
  7358 = 6345			BUF	= DATAORIGIN+$0AB5
  7359 = 6347			SIZE	= DATAORIGIN+$0AB7
  7360
  7361 = 6345			@VarData	= BUF
  7362 = 0004			@VarDataSize	= 4
  7363
  7364 489C			@exit
  7365 					.ifdef @new
  7366 					lda <@VarData
  7367 					sta :ztmp
  7368 					lda >@VarData
  7369 					ldy #@VarDataSize-1
  7370 					jmp @FreeMem
  7371 					els
  7372 489C 60				rts						; ret
  7373 					eif
  7374 				.endl
  7375
  7376 489D			.local	SAVEDATA					; PROCEDURE
  7377
  7378 				; AssignFile
  7379
  7380 				; optimize OK (artur.pas), line = 997
  7381
  7382 489D AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7383 48A7 A0 00			ldy #s@file.pfname
  7384 48A9 AD 7F 58			lda S
  7385 48AC 91 82			sta (:bp2),y
  7386 48AE C8				iny
  7387 48AF AD 80 58			lda S+1
  7388 48B2 91 82			sta (:bp2),y
  7389 48B4 A0 05			ldy #s@file.status
  7390 48B6 A9 00			lda #$00
  7391 48B8 91 82			sta (:bp2),y
  7392 				; Rewrite
  7393
  7394 				; optimize OK (artur.pas), line = 998
  7395
  7396 48BA A0 02			ldy #s@file.record
  7397 48BC A9 01			lda #$01
  7398 48BE 91 82			sta (:bp2),y
  7399 48C0 C8				iny
  7400 48C1 A9 00			lda #$00
  7401 48C3 91 82			sta (:bp2),y
  7402
  7403 48C5 8A 48			txa:pha
  7404 48C7 18				clc
  7405 					@openfile AFILE, #8
  7405 				 LDY AFILE+1\ LDA AFILE\ LDX# 8\ JSR @OPENFILE
  7405 48C8 AC 82 58		 LDY AFILE+1
  7405 48CB AD 81 58		 LDA AFILE
  7405 48CE A2 08		 LDX# 8
  7405 48D0 20 DA 24		 JSR @OPENFILE
  7406 48D3 68 AA			pla:tax
  7407
  7408 				; BlockWrite
  7409
  7410 				; optimize OK (artur.pas), line = 999
  7411
  7412 48D5 AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7413 48DF A0 06			ldy #s@file.buffer
  7414 48E1 AD 49 63			lda BUF
  7415 48E4 91 82			sta (:bp2),y
  7416 48E6 C8				iny
  7417 48E7 AD 4A 63			lda BUF+1
  7418 48EA 91 82			sta (:bp2),y
  7419 48EC A0 08			ldy #s@file.nrecord
  7420 48EE AD 4B 63			lda SIZE
  7421 48F1 91 82			sta (:bp2),y
  7422 48F3 C8				iny
  7423 48F4 AD 4C 63			lda SIZE+1
  7424 48F7 91 82			sta (:bp2),y
  7425
  7426 48F9 8A 48			txa:pha
  7427 48FB 18				clc
  7428 					@readfile AFILE, #11
  7428 				 LDY AFILE+1\ LDA AFILE\ LDX# 11\ JSR @READFILE
  7428 48FC AC 82 58		 LDY AFILE+1
  7428 48FF AD 81 58		 LDA AFILE
  7428 4902 A2 0B		 LDX# 11
  7428 4904 20 9D 25		 JSR @READFILE
  7429 4907 68 AA			pla:tax
  7430
  7431 				; optimize FAIL ('IOSTATUS', artur.pas), line = 1000
  7432
  7433 4909 20 AF 47			jsr IOSTATUS
  7434
  7435 				; ------------------------------------------------------------
  7436
  7437 = 6349			BUF	= DATAORIGIN+$0AB9
  7438 = 634B			SIZE	= DATAORIGIN+$0ABB
  7439
  7440 = 6349			@VarData	= BUF
  7441 = 0004			@VarDataSize	= 4
  7442
  7443 490C			@exit
  7444 					.ifdef @new
  7445 					lda <@VarData
  7446 					sta :ztmp
  7447 					lda >@VarData
  7448 					ldy #@VarDataSize-1
  7449 					jmp @FreeMem
  7450 					els
  7451 490C 60				rts						; ret
  7452 					eif
  7453 				.endl
  7454
  7455 490D			.local	LOADCONFIG					; PROCEDURE
  7456
  7457 490D A0 F3			ldy #256-13
  7458 490F B9 66 20 99 5E 60 + 	mva:rne CODEORIGIN+$0159+13-256,y adr.S+13-256,y+
  7459
  7460 				; optimize FAIL ('ADDDRIVETOS', artur.pas), line = 1006
  7461
  7462 4918 20 7F 31			jsr ADDDRIVETOS
  7463
  7464 				; optimize OK (artur.pas), line = 1007
  7465
  7466 491B AD 7F 58			lda S
  7467 491E 8D 00 59			sta SYSUTILS.FILEEXISTS.NAME
  7468 4921 AD 80 58			lda S+1
  7469 4924 8D 01 59			sta SYSUTILS.FILEEXISTS.NAME+1
  7470 4927 20 1F 2C			jsr SYSUTILS.FILEEXISTS
  7471 492A AD 02 59			lda SYSUTILS.FILEEXISTS.RESULT
  7472 492D F0 79			jeq l_1DBD
  7473 				; AssignFile
  7474
  7475 				; optimize OK (artur.pas), line = 1008
  7476
  7477 492F AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7478 4939 A0 00			ldy #s@file.pfname
  7479 493B AD 7F 58			lda S
  7480 493E 91 82			sta (:bp2),y
  7481 4940 C8				iny
  7482 4941 AD 80 58			lda S+1
  7483 4944 91 82			sta (:bp2),y
  7484 4946 A0 05			ldy #s@file.status
  7485 4948 A9 00			lda #$00
  7486 494A 91 82			sta (:bp2),y
  7487 				; Reset
  7488
  7489 				; optimize OK (artur.pas), line = 1009
  7490
  7491 494C A0 02			ldy #s@file.record
  7492 494E A9 01			lda #$01
  7493 4950 91 82			sta (:bp2),y
  7494 4952 C8				iny
  7495 4953 A9 00			lda #$00
  7496 4955 91 82			sta (:bp2),y
  7497
  7498 4957 8A 48			txa:pha
  7499 4959 18				clc
  7500 					@openfile AFILE, MAIN.SYSTEM.FileMode
  7500 				 LDY AFILE+1\ LDA AFILE\ LDX MAIN.SYSTEM.FILEMODE\ JSR @OPENFILE
  7500 495A AC 82 58		 LDY AFILE+1
  7500 495D AD 81 58		 LDA AFILE
  7500 4960 AE 95 58		 LDX MAIN.SYSTEM.FILEMODE
  7500 4963 20 DA 24		 JSR @OPENFILE
  7501 4966 68 AA			pla:tax
  7502
  7503 				; BlockRead
  7504
  7505 				; optimize OK (artur.pas), line = 1010
  7506
  7507 4968 AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7508 4972 A0 06			ldy #s@file.buffer
  7509 4974 AD 7D 58			lda CONFIG
  7510 4977 91 82			sta (:bp2),y
  7511 4979 C8				iny
  7512 497A AD 7E 58			lda CONFIG+1
  7513 497D 91 82			sta (:bp2),y
  7514 497F A0 08			ldy #s@file.nrecord
  7515 4981 A9 04			lda #$04
  7516 4983 91 82			sta (:bp2),y
  7517 4985 C8				iny
  7518 4986 A9 00			lda #$00
  7519 4988 91 82			sta (:bp2),y
  7520
  7521 498A 8A 48			txa:pha
  7522 498C 18				clc
  7523 					@readfile AFILE, #7
  7523 				 LDY AFILE+1\ LDA AFILE\ LDX# 7\ JSR @READFILE
  7523 498D AC 82 58		 LDY AFILE+1
  7523 4990 AD 81 58		 LDA AFILE
  7523 4993 A2 07		 LDX# 7
  7523 4995 20 9D 25		 JSR @READFILE
  7524 4998 68 AA			pla:tax
  7525
  7526 				; CloseFile
  7527
  7528 499A 8A 48			txa:pha
  7529 499C 18				clc
  7530 					@closefile AFILE
  7530 				 LDY AFILE+1\ LDA AFILE\ JSR @CLOSEFILE
  7530 499D AC 82 58		 LDY AFILE+1
  7530 49A0 AD 81 58		 LDA AFILE
  7530 49A3 20 70 25		 JSR @CLOSEFILE
  7531 49A6 68 AA			pla:tax
  7532
  7533 49A8			l_1DBD
  7534 49A8			@exit
  7535 					.ifdef @new
  7536 					lda <@VarData
  7537 					sta :ztmp
  7538 					lda >@VarData
  7539 					ldy #@VarDataSize-1
  7540 					jmp @FreeMem
  7541 					els
  7542 49A8 60				rts						; ret
  7543 					eif
  7544 				.endl
  7545
  7546 49A9			.local	SAVECONFIG					; PROCEDURE
  7547
  7548 49A9 A0 F3			ldy #256-13
  7549 49AB B9 66 20 99 5E 60 + 	mva:rne CODEORIGIN+$0159+13-256,y adr.S+13-256,y+
  7550
  7551 				; optimize FAIL ('ADDDRIVETOS', artur.pas), line = 1018
  7552
  7553 49B4 20 7F 31			jsr ADDDRIVETOS
  7554
  7555 				; optimize OK (artur.pas), line = 1019
  7556
  7557 49B7 AD 7D 58			lda CONFIG
  7558 49BA 8D 49 63			sta SAVEDATA.BUF
  7559 49BD AD 7E 58			lda CONFIG+1
  7560 49C0 8D 4A 63			sta SAVEDATA.BUF+1
  7561 49C3 A9 04			lda #$04
  7562 49C5 8D 4B 63			sta SAVEDATA.SIZE
  7563 49C8 A9 00			lda #$00
  7564 49CA 8D 4C 63			sta SAVEDATA.SIZE+1
  7565 49CD 20 9D 48			jsr SAVEDATA
  7566 49D0			@exit
  7567 					.ifdef @new
  7568 					lda <@VarData
  7569 					sta :ztmp
  7570 					lda >@VarData
  7571 					ldy #@VarDataSize-1
  7572 					jmp @FreeMem
  7573 					els
  7574 49D0 60				rts						; ret
  7575 					eif
  7576 				.endl
  7577
  7578 49D1			.local	SAVEBLOCK					; PROCEDURE
  7579
  7580 				; optimize FAIL ('OPENMODAL', artur.pas), line = 1031
  7581
  7582 49D1 20 03 41			jsr OPENMODAL
  7583
  7584 				; optimize OK (artur.pas), line = 1032
  7585
  7586 49D4 A9 05			lda #$05
  7587 49D6 8D F2 62			sta DRAWRECT.X
  7588 49D9 A9 02			lda #$02
  7589 49DB 8D F3 62			sta DRAWRECT.Y
  7590 49DE A9 1E			lda #$1E
  7591 49E0 8D F4 62			sta DRAWRECT.W
  7592 49E3 A9 0C			lda #$0C
  7593 49E5 8D F5 62			sta DRAWRECT.H
  7594 49E8 A9 80			lda #$80
  7595 49EA 8D F6 62			sta DRAWRECT.C
  7596 49ED 20 0C 36			jsr DRAWRECT
  7597 49F0 A0 EE			ldy #256-18
  7598 49F2 B9 79 20 99 63 60 + 	mva:rne CODEORIGIN+$0167+18-256,y adr.S+18-256,y+
  7599
  7600 				; optimize OK (artur.pas), line = 1034
  7601
  7602 49FB A9 06			lda #$06
  7603 49FD 8D 18 63			sta WRITESXY.X
  7604 4A00 A9 03			lda #$03
  7605 4A02 8D 19 63			sta WRITESXY.Y
  7606 4A05 20 B7 3E			jsr WRITESXY
  7607 4A08 A0 E3			ldy #256-29
  7608 4A0A B9 97 20 99 6E 60 + 	mva:rne CODEORIGIN+$017A+29-256,y adr.S+29-256,y+
  7609
  7610 				; optimize OK (artur.pas), line = 1036
  7611
  7612 4A13 A9 06			lda #$06
  7613 4A15 8D 18 63			sta WRITESXY.X
  7614 4A18 A9 04			lda #$04
  7615 4A1A 8D 19 63			sta WRITESXY.Y
  7616 4A1D 20 B7 3E			jsr WRITESXY
  7617
  7618 				; optimize OK (artur.pas), line = 1037
  7619
  7620 4A20 A9 06			lda #$06
  7621 4A22 8D 26 5E			sta B_CRT.CRT_GOTOXY.X
  7622 4A25 8D 27 5E			sta B_CRT.CRT_GOTOXY.Y
  7623 4A28 20 FE 2D			jsr B_CRT.CRT_GOTOXY
  7624
  7625 				; optimize OK (artur.pas), line = 1038
  7626
  7627 4A2B A9 06			lda #$06
  7628 4A2D 8D 22 63			sta GETFILENAME.X
  7629 4A30 8D 23 63			sta GETFILENAME.Y
  7630 4A33 20 A8 3F			jsr GETFILENAME
  7631 				; AssignFile
  7632
  7633 				; optimize OK (artur.pas), line = 1040
  7634
  7635 4A36 AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7636 4A40 A0 00			ldy #s@file.pfname
  7637 4A42 AD 7F 58			lda S
  7638 4A45 91 82			sta (:bp2),y
  7639 4A47 C8				iny
  7640 4A48 AD 80 58			lda S+1
  7641 4A4B 91 82			sta (:bp2),y
  7642 4A4D A0 05			ldy #s@file.status
  7643 4A4F A9 00			lda #$00
  7644 4A51 91 82			sta (:bp2),y
  7645 				; Rewrite
  7646
  7647 				; optimize OK (artur.pas), line = 1041
  7648
  7649 4A53 A0 02			ldy #s@file.record
  7650 4A55 A9 01			lda #$01
  7651 4A57 91 82			sta (:bp2),y
  7652 4A59 C8				iny
  7653 4A5A A9 00			lda #$00
  7654 4A5C 91 82			sta (:bp2),y
  7655
  7656 4A5E 8A 48			txa:pha
  7657 4A60 18				clc
  7658 					@openfile AFILE, #8
  7658 				 LDY AFILE+1\ LDA AFILE\ LDX# 8\ JSR @OPENFILE
  7658 4A61 AC 82 58		 LDY AFILE+1
  7658 4A64 AD 81 58		 LDA AFILE
  7658 4A67 A2 08		 LDX# 8
  7658 4A69 20 DA 24		 JSR @OPENFILE
  7659 4A6C 68 AA			pla:tax
  7660
  7661 				; optimize FAIL ('SORTPOINTSANDGETCORNER', artur.pas), line = 1043
  7662
  7663 4A6E 20 D2 44			jsr SORTPOINTSANDGETCORNER
  7664 4A71 E8				inx
  7665 4A72 AD 35 63			lda SORTPOINTSANDGETCORNER.RESULT
  7666 4A75 38 E9 00			sub #$00
  7667 4A78 8D 4D 63			sta PTR
  7668 4A7B AD 36 63			lda SORTPOINTSANDGETCORNER.RESULT+1
  7669 4A7E E9 7C			sbc #$7C
  7670 4A80 8D 4E 63			sta PTR+1
  7671 4A83 CA				dex
  7672
  7673 				; optimize FAIL ('CALCULATEWIDTHANDHEIGHT', artur.pas), line = 1044
  7674
  7675 4A84 20 90 45			jsr CALCULATEWIDTHANDHEIGHT
  7676
  7677 				; --- RepeatUntilProlog
  7678 4A87			l_1E0D
  7679 				; BlockWrite
  7680
  7681 				; optimize OK (artur.pas), line = 1046
  7682
  7683 4A87 AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7684 4A91 A0 06			ldy #s@file.buffer
  7685 4A93 AD DE 4A			lda VRAM
  7686 4A96 18 6D 4D 63			add PTR
  7687 4A9A 91 82			sta (:bp2),y
  7688 4A9C C8				iny
  7689 4A9D AD DF 4A			lda VRAM+1
  7690 4AA0 6D 4E 63			adc PTR+1
  7691 4AA3 91 82			sta (:bp2),y
  7692 4AA5 A0 08			ldy #s@file.nrecord
  7693 4AA7 AD 50 61			lda W
  7694 4AAA 91 82			sta (:bp2),y
  7695 4AAC C8				iny
  7696 4AAD A9 00			lda #$00
  7697 4AAF 91 82			sta (:bp2),y
  7698
  7699 4AB1 8A 48			txa:pha
  7700 4AB3 18				clc
  7701 					@readfile AFILE, #11
  7701 				 LDY AFILE+1\ LDA AFILE\ LDX# 11\ JSR @READFILE
  7701 4AB4 AC 82 58		 LDY AFILE+1
  7701 4AB7 AD 81 58		 LDA AFILE
  7701 4ABA A2 0B		 LDX# 11
  7701 4ABC 20 9D 25		 JSR @READFILE
  7702 4ABF 68 AA			pla:tax
  7703
  7704 				; optimize FAIL (0, artur.pas), line = 1047
  7705
  7706 4AC1 CE 4F 61			dec H
  7707
  7708 				; optimize OK (artur.pas), line = 1048
  7709
  7710 4AC4 AD 4D 63			lda PTR
  7711 4AC7 18 69 28			add #$28
  7712 4ACA 8D 4D 63			sta PTR
  7713 4ACD 90 03			scc
  7714 4ACF EE 4E 63			inc PTR+1
  7715
  7716 				; optimize OK (artur.pas), line = 1049
  7717
  7718 4AD2 AD 4F 61			lda H
  7719 4AD5 D0 B0			jne l_1E0D
  7720
  7721 				; optimize FAIL ('IOSTATUS', artur.pas), line = 1051
  7722
  7723 4AD7 20 AF 47			jsr IOSTATUS
  7724
  7725 				; optimize FAIL ('CLOSEMODAL', artur.pas), line = 1052
  7726
  7727 4ADA 20 14 41			jsr CLOSEMODAL
  7728
  7729 				; ------------------------------------------------------------
  7730
  7731 = 7800			adr.VRAM	= $7800
  7732 4ADD			.var VRAM	= adr.VRAM .word
  7733 = 634D			PTR	= DATAORIGIN+$0ABD
  7734 = 0005			SVB_X	= $05
  7735 = 0002			SVB_Y	= $02
  7736 = 001E			SVB_W	= $1E
  7737 = 000C			SVB_H	= $0C
  7738
  7739 = 4ADE			@VarData	= VRAM
  7740 = 0003			@VarDataSize	= 3
  7741
  7742 4ADD			@exit
  7743 					.ifdef @new
  7744 					lda <@VarData
  7745 					sta :ztmp
  7746 					lda >@VarData
  7747 					ldy #@VarDataSize-1
  7748 					jmp @FreeMem
  7749 					els
  7750 4ADD 60				rts						; ret
  7751 					eif
  7752 = 4ADE 00 78		VRAM
  7752 				.endl
  7753
  7754 4AE0			.local	SAVEBINARY					; PROCEDURE
  7755
  7756 				; AssignFile
  7757
  7758 				; optimize OK (artur.pas), line = 1060
  7759
  7760 4AE0 AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7761 4AEA A0 00			ldy #s@file.pfname
  7762 4AEC AD 7F 58			lda S
  7763 4AEF 91 82			sta (:bp2),y
  7764 4AF1 C8				iny
  7765 4AF2 AD 80 58			lda S+1
  7766 4AF5 91 82			sta (:bp2),y
  7767 4AF7 A0 05			ldy #s@file.status
  7768 4AF9 A9 00			lda #$00
  7769 4AFB 91 82			sta (:bp2),y
  7770 				; Rewrite
  7771
  7772 				; optimize OK (artur.pas), line = 1061
  7773
  7774 4AFD A0 02			ldy #s@file.record
  7775 4AFF A9 01			lda #$01
  7776 4B01 91 82			sta (:bp2),y
  7777 4B03 C8				iny
  7778 4B04 A9 00			lda #$00
  7779 4B06 91 82			sta (:bp2),y
  7780
  7781 4B08 8A 48			txa:pha
  7782 4B0A 18				clc
  7783 					@openfile AFILE, #8
  7783 				 LDY AFILE+1\ LDA AFILE\ LDX# 8\ JSR @OPENFILE
  7783 4B0B AC 82 58		 LDY AFILE+1
  7783 4B0E AD 81 58		 LDA AFILE
  7783 4B11 A2 08		 LDX# 8
  7783 4B13 20 DA 24		 JSR @OPENFILE
  7784 4B16 68 AA			pla:tax
  7785
  7786 				; BlockWrite
  7787
  7788 				; optimize OK (artur.pas), line = 1063
  7789
  7790 4B18 AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7791 4B22 A0 06			ldy #s@file.buffer
  7792 4B24 AD B3 4B			lda HEADER
  7793 4B27 91 82			sta (:bp2),y
  7794 4B29 C8				iny
  7795 4B2A AD B4 4B			lda HEADER+1
  7796 4B2D 91 82			sta (:bp2),y
  7797 4B2F A0 08			ldy #s@file.nrecord
  7798 4B31 A9 69			lda #$69
  7799 4B33 91 82			sta (:bp2),y
  7800 4B35 C8				iny
  7801 4B36 A9 00			lda #$00
  7802 4B38 91 82			sta (:bp2),y
  7803
  7804 4B3A 8A 48			txa:pha
  7805 4B3C 18				clc
  7806 					@readfile AFILE, #11
  7806 				 LDY AFILE+1\ LDA AFILE\ LDX# 11\ JSR @READFILE
  7806 4B3D AC 82 58		 LDY AFILE+1
  7806 4B40 AD 81 58		 LDA AFILE
  7806 4B43 A2 0B		 LDX# 11
  7806 4B45 20 9D 25		 JSR @READFILE
  7807 4B48 68 AA			pla:tax
  7808
  7809 				; BlockWrite
  7810
  7811 				; optimize OK (artur.pas), line = 1064
  7812
  7813 4B4A AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7814 4B54 A0 06			ldy #s@file.buffer
  7815 4B56 AD B5 4B			lda CHARSET
  7816 4B59 91 82			sta (:bp2),y
  7817 4B5B C8				iny
  7818 4B5C AD B6 4B			lda CHARSET+1
  7819 4B5F 91 82			sta (:bp2),y
  7820 4B61 A0 08			ldy #s@file.nrecord
  7821 4B63 A9 C0			lda #$C0
  7822 4B65 91 82			sta (:bp2),y
  7823 4B67 C8				iny
  7824 4B68 A9 07			lda #$07
  7825 4B6A 91 82			sta (:bp2),y
  7826
  7827 4B6C 8A 48			txa:pha
  7828 4B6E 18				clc
  7829 					@readfile AFILE, #11
  7829 				 LDY AFILE+1\ LDA AFILE\ LDX# 11\ JSR @READFILE
  7829 4B6F AC 82 58		 LDY AFILE+1
  7829 4B72 AD 81 58		 LDA AFILE
  7829 4B75 A2 0B		 LDX# 11
  7829 4B77 20 9D 25		 JSR @READFILE
  7830 4B7A 68 AA			pla:tax
  7831
  7832 				; BlockWrite
  7833
  7834 				; optimize OK (artur.pas), line = 1065
  7835
  7836 4B7C AC 81 58 84 82 AC + 	mwy AFILE :bp2
  7837 4B86 A0 06			ldy #s@file.buffer
  7838 4B88 A9 4A			lda <CONFIG.EDITORBACKGROUNDCOLOR
  7839 4B8A 91 82			sta (:bp2),y
  7840 4B8C C8				iny
  7841 4B8D A9 61			lda >CONFIG.EDITORBACKGROUNDCOLOR
  7842 4B8F 91 82			sta (:bp2),y
  7843 4B91 A0 08			ldy #s@file.nrecord
  7844 4B93 A9 02			lda #$02
  7845 4B95 91 82			sta (:bp2),y
  7846 4B97 C8				iny
  7847 4B98 A9 00			lda #$00
  7848 4B9A 91 82			sta (:bp2),y
  7849
  7850 4B9C 8A 48			txa:pha
  7851 4B9E 18				clc
  7852 					@readfile AFILE, #11
  7852 				 LDY AFILE+1\ LDA AFILE\ LDX# 11\ JSR @READFILE
  7852 4B9F AC 82 58		 LDY AFILE+1
  7852 4BA2 AD 81 58		 LDA AFILE
  7852 4BA5 A2 0B		 LDX# 11
  7852 4BA7 20 9D 25		 JSR @READFILE
  7853 4BAA 68 AA			pla:tax
  7854
  7855 				; optimize FAIL ('IOSTATUS', artur.pas), line = 1067
  7856
  7857 4BAC 20 AF 47			jsr IOSTATUS
  7858
  7859 				; optimize FAIL ('CLOSEMODAL', artur.pas), line = 1069
  7860
  7861 4BAF 20 14 41			jsr CLOSEMODAL
  7862
  7863 				; ------------------------------------------------------------
  7864
  7865 = 7100			adr.HEADER	= $7100
  7866 4BB2			.var HEADER	= adr.HEADER .word
  7867 = 7400			adr.CHARSET	= $7400
  7868 4BB2			.var CHARSET	= adr.CHARSET .word
  7869
  7870 = 4BB3			@VarData	= HEADER
  7871 = 0002			@VarDataSize	= 2
  7872
  7873 4BB2			@exit
  7874 					.ifdef @new
  7875 					lda <@VarData
  7876 					sta :ztmp
  7877 					lda >@VarData
  7878 					ldy #@VarDataSize-1
  7879 					jmp @FreeMem
  7880 					els
  7881 4BB2 60				rts						; ret
  7882 					eif
  7883 = 4BB3 00 71		HEADER
  7883 = 4BB5 00 74		CHARSET
  7883 				.endl
  7884
  7885 4BB7			.local	SHOWHELP					; PROCEDURE
  7886
  7887 				; optimize FAIL ('OPENMODAL', artur.pas), line = 1084
  7888
  7889 4BB7 20 03 41			jsr OPENMODAL
  7890
  7891 				; optimize OK (artur.pas), line = 1085
  7892
  7893 4BBA A9 05			lda #$05
  7894 4BBC 8D F2 62			sta DRAWRECT.X
  7895 4BBF A9 02			lda #$02
  7896 4BC1 8D F3 62			sta DRAWRECT.Y
  7897 4BC4 A9 1E			lda #$1E
  7898 4BC6 8D F4 62			sta DRAWRECT.W
  7899 4BC9 A9 14			lda #$14
  7900 4BCB 8D F5 62			sta DRAWRECT.H
  7901 4BCE A9 80			lda #$80
  7902 4BD0 8D F6 62			sta DRAWRECT.C
  7903 4BD3 20 0C 36			jsr DRAWRECT
  7904 4BD6 A0 E3			ldy #256-29
  7905 4BD8 B9 B5 20 99 6E 60 + 	mva:rne CODEORIGIN+$0198+29-256,y adr.S+29-256,y+
  7906
  7907 				; optimize OK (artur.pas), line = 1087
  7908
  7909 4BE1 A9 06			lda #$06
  7910 4BE3 8D 18 63			sta WRITESXY.X
  7911 4BE6 A9 03			lda #$03
  7912 4BE8 8D 19 63			sta WRITESXY.Y
  7913 4BEB 20 B7 3E			jsr WRITESXY
  7914
  7915 				; optimize OK (artur.pas), line = 1088
  7916
  7917 4BEE AD 7B 58			lda VERSION
  7918 4BF1 85 88			sta SYSTEM.MOVE_0459.SOURCE
  7919 4BF3 AD 7C 58			lda VERSION+1
  7920 4BF6 85 89			sta SYSTEM.MOVE_0459.SOURCE+1
  7921 4BF8 AD 7F 58			lda S
  7922 4BFB 85 8C			sta SYSTEM.MOVE_0459.DEST
  7923 4BFD AD 80 58			lda S+1
  7924 4C00 85 8D			sta SYSTEM.MOVE_0459.DEST+1
  7925 4C02 A9 0A			lda #$0A
  7926 4C04 85 84			sta SYSTEM.MOVE_0459.COUNT
  7927 4C06 A9 00			lda #$00
  7928 4C08 85 85			sta SYSTEM.MOVE_0459.COUNT+1
  7929 4C0A				.local +MAIN.SYSTEM.MOVE_0459
  7930 4C0A				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0459.M@INLINE [Source: artur.a65]
     4 4C0A 20 74 27			jsr @move
Source: artur.a65
  7931 					.endl
  7932
  7933 				; optimize OK (artur.pas), line = 1089
  7934
  7935 4C0D A9 10			lda #$10
  7936 4C0F 8D 18 63			sta WRITESXY.X
  7937 4C12 A9 03			lda #$03
  7938 4C14 8D 19 63			sta WRITESXY.Y
  7939 4C17 20 B7 3E			jsr WRITESXY
  7940 4C1A A0 E3			ldy #256-29
  7941 4C1C B9 97 20 99 6E 60 + 	mva:rne CODEORIGIN+$017A+29-256,y adr.S+29-256,y+
  7942
  7943 				; optimize OK (artur.pas), line = 1091
  7944
  7945 4C25 A9 06			lda #$06
  7946 4C27 8D 18 63			sta WRITESXY.X
  7947 4C2A A9 04			lda #$04
  7948 4C2C 8D 19 63			sta WRITESXY.Y
  7949 4C2F 20 B7 3E			jsr WRITESXY
  7950 4C32 A0 ED			ldy #256-19
  7951 4C34 B9 C9 20 99 64 60 + 	mva:rne CODEORIGIN+$01B6+19-256,y adr.S+19-256,y+
  7952
  7953 				; optimize OK (artur.pas), line = 1093
  7954
  7955 4C3D A9 06			lda #$06
  7956 4C3F 8D 18 63			sta WRITESXY.X
  7957 4C42 A9 05			lda #$05
  7958 4C44 8D 19 63			sta WRITESXY.Y
  7959 4C47 20 B7 3E			jsr WRITESXY
  7960 4C4A A0 EE			ldy #256-18
  7961 4C4C B9 DC 20 99 63 60 + 	mva:rne CODEORIGIN+$01CA+18-256,y adr.S+18-256,y+
  7962
  7963 				; optimize OK (artur.pas), line = 1095
  7964
  7965 4C55 A9 06			lda #$06
  7966 4C57 8D 18 63			sta WRITESXY.X
  7967 4C5A A9 08			lda #$08
  7968 4C5C 8D 19 63			sta WRITESXY.Y
  7969 4C5F 20 B7 3E			jsr WRITESXY
  7970 4C62 A0 EB			ldy #256-21
  7971 4C64 B9 F2 20 99 66 60 + 	mva:rne CODEORIGIN+$01DD+21-256,y adr.S+21-256,y+
  7972
  7973 				; optimize OK (artur.pas), line = 1097
  7974
  7975 4C6D A9 06			lda #$06
  7976 4C6F 8D 18 63			sta WRITESXY.X
  7977 4C72 A9 0A			lda #$0A
  7978 4C74 8D 19 63			sta WRITESXY.Y
  7979 4C77 20 B7 3E			jsr WRITESXY
  7980 4C7A A0 EE			ldy #256-18
  7981 4C7C B9 05 21 99 63 60 + 	mva:rne CODEORIGIN+$01F3+18-256,y adr.S+18-256,y+
  7982
  7983 				; optimize OK (artur.pas), line = 1099
  7984
  7985 4C85 A9 06			lda #$06
  7986 4C87 8D 18 63			sta WRITESXY.X
  7987 4C8A A9 0C			lda #$0C
  7988 4C8C 8D 19 63			sta WRITESXY.Y
  7989 4C8F 20 B7 3E			jsr WRITESXY
  7990 4C92 A0 EB			ldy #256-21
  7991 4C94 B9 1B 21 99 66 60 + 	mva:rne CODEORIGIN+$0206+21-256,y adr.S+21-256,y+
  7992
  7993 				; optimize OK (artur.pas), line = 1101
  7994
  7995 4C9D A9 06			lda #$06
  7996 4C9F 8D 18 63			sta WRITESXY.X
  7997 4CA2 A9 0E			lda #$0E
  7998 4CA4 8D 19 63			sta WRITESXY.Y
  7999 4CA7 20 B7 3E			jsr WRITESXY
  8000 4CAA A0 F2			ldy #256-14
  8001 4CAC B9 2A 21 99 5F 60 + 	mva:rne CODEORIGIN+$021C+14-256,y adr.S+14-256,y+
  8002
  8003 				; optimize OK (artur.pas), line = 1104
  8004
  8005 4CB5 A9 06			lda #$06
  8006 4CB7 8D 18 63			sta WRITESXY.X
  8007 4CBA A9 14			lda #$14
  8008 4CBC 8D 19 63			sta WRITESXY.Y
  8009 4CBF 20 B7 3E			jsr WRITESXY
  8010
  8011 				; --- RepeatUntilProlog
  8012 4CC2			l_1E86
  8013
  8014 				; optimize FAIL ('B_CRT.CRT_HELPPRESSED', artur.pas), line = 1107
  8015
  8016 4CC2 20 D1 2F			jsr B_CRT.CRT_HELPPRESSED
  8017 4CC5 E8				inx
  8018 4CC6 AD 33 61 95 94		mva B_CRT.CRT_HELPPRESSED.RESULT :STACKORIGIN,x
  8019 4CCB CA				dex
  8020 4CCC A0 01			ldy #1
  8021 4CCE AD 8C 61			lda KEYREPEATCOUNTER
  8022 4CD1 F0 01			beq @+
  8023 4CD3 88				dey
  8024 				@
  8025 4CD4 98				tya
  8026 4CD5 35 95			and :STACKORIGIN+1,x
  8027 4CD7 F0 03			jeq l_1E9C
  8028 4CD9 4C E4 4C			jmp b_1E86					; break
  8029 4CDC			l_1E9C
  8030
  8031 				; optimize FAIL ('CRT.KEYPRESSED', artur.pas), line = 1108
  8032
  8033 4CDC 20 B4 2A			jsr CRT.KEYPRESSED
  8034 4CDF AD C8 58			lda CRT.KEYPRESSED.RESULT
  8035 4CE2 F0 DE			jeq l_1E86
  8036 4CE4			b_1E86
  8037
  8038 				; optimize FAIL ('CLOSEMODAL', artur.pas), line = 1109
  8039
  8040 4CE4 20 14 41			jsr CLOSEMODAL
  8041
  8042 				; optimize FAIL ('CRT.KEYPRESSED', artur.pas), line = 1110
  8043
  8044 4CE7 20 B4 2A			jsr CRT.KEYPRESSED
  8045 4CEA AD C8 58			lda CRT.KEYPRESSED.RESULT
  8046 4CED F0 0A			jeq l_1EAF
  8047 4CEF 20 AD 2A			jsr CRT.READKEY
  8048 4CF2 E8				inx
  8049 4CF3 AD C7 58 95 94		mva CRT.READKEY.RESULT :STACKORIGIN,x
  8050 4CF8 CA				dex
  8051 4CF9			l_1EAF
  8052
  8053 				; ------------------------------------------------------------
  8054
  8055 = 0005			HLP_X	= $05
  8056 = 0002			HLP_Y	= $02
  8057 = 001E			HLP_W	= $1E
  8058 = 0014			HLP_H	= $14
  8059 4CF9			@exit
  8060 					.ifdef @new
  8061 					lda <@VarData
  8062 					sta :ztmp
  8063 					lda >@VarData
  8064 					ldy #@VarDataSize-1
  8065 					jmp @FreeMem
  8066 					els
  8067 4CF9 60				rts						; ret
  8068 					eif
  8069 				.endl
  8070
  8071 4CFA			.local	HASEXT						; FUNCTION
  8072
  8073 				; optimize OK (artur.pas), line = 1116
  8074
  8075 4CFA A9 00			lda #$00
  8076 4CFC 8D 53 63			sta RESULT
  8077
  8078 				; optimize OK (artur.pas), line = 1117
  8079
  8080 4CFF A9 01			lda #$01
  8081 4D01 8D 54 63			sta I
  8082
  8083 				; optimize OK (artur.pas), line = 1118
  8084
  8085 4D04 8D 55 63			sta EI
  8086
  8087 				; --- RepeatUntilProlog
  8088 4D07			l_1EC4
  8089
  8090 				; optimize OK (artur.pas), line = 1120
  8091
  8092 4D07 AC 4F 63 84 82 AC + 	mwy S :bp2
  8093 4D11 AC 54 63			ldy I
  8094 4D14 B1 82			lda (:bp2),y
  8095 4D16 C9 0E			cmp #$0E
  8096 4D18 D0 05			jne l_1ED9
  8097 4D1A A9 01			lda #$01
  8098 4D1C 8D 53 63			sta RESULT
  8099 4D1F			l_1ED9
  8100
  8101 				; optimize FAIL (0, artur.pas), line = 1121
  8102
  8103 4D1F EE 54 63			inc I
  8104
  8105 				; optimize OK (artur.pas), line = 1122
  8106
  8107 4D22 AD 54 63			lda I
  8108 4D25 C9 0A			cmp #$0A
  8109 4D27 F0 08			jeq l_1EC4x
  8110 4D29 AD 53 63 D0 03		lda:sne RESULT
  8111 4D2E 4C 07 4D			jmp l_1EC4
  8112 4D31			l_1EC4x
  8113
  8114 				; optimize OK (artur.pas), line = 1123
  8115
  8116 4D31 AD 53 63			lda RESULT
  8117 4D34 F0 37			jeq l_1F03
  8118
  8119 				; --- RepeatUntilProlog
  8120 4D36			l_1F05
  8121
  8122 				; optimize OK (artur.pas), line = 1125
  8123
  8124 4D36 AC 4F 63 84 82 AC + 	mwy S :bp2
  8125 4D40 AC 54 63			ldy I
  8126 4D43 B1 82			lda (:bp2),y
  8127 4D45 AC 51 63 84 82 AC + 	mwy E :bp2
  8128 4D4F AC 55 63			ldy EI
  8129 4D52 D1 82			cmp (:bp2),y
  8130 4D54 F0 05			jeq l_1F1F
  8131 4D56 A9 00			lda #$00
  8132 4D58 8D 53 63			sta RESULT
  8133 4D5B			l_1F1F
  8134
  8135 				; optimize FAIL (0, artur.pas), line = 1126
  8136
  8137 4D5B EE 54 63			inc I
  8138
  8139 				; optimize FAIL (0, artur.pas), line = 1127
  8140
  8141 4D5E EE 55 63			inc EI
  8142
  8143 				; optimize OK (artur.pas), line = 1128
  8144
  8145 4D61 AD 53 63			lda RESULT
  8146 4D64 F0 07			jeq l_1F05x
  8147 4D66 AD 55 63			lda EI
  8148 4D69 C9 04			cmp #$04
  8149 4D6B D0 C9			jne l_1F05
  8150 4D6D			l_1F05x
  8151 4D6D			l_1F03
  8152 4D6D			@exit
  8153
  8154 				; ------------------------------------------------------------
  8155
  8156 = 634F			S	= DATAORIGIN+$0ABF
  8157 = 6351			E	= DATAORIGIN+$0AC1
  8158 = 6353			RESULT	= DATAORIGIN+$0AC3
  8159 = 6354			I	= DATAORIGIN+$0AC4
  8160 = 6355			EI	= DATAORIGIN+$0AC5
  8161
  8162 = 634F			@VarData	= S
  8163 = 0007			@VarDataSize	= 7
  8164
  8165 4D6D 60				rts						; ret
  8166 				.endl
  8167
  8168 4D6E			.local	SHOWIOMENU					; PROCEDURE
  8169
  8170 4D6E 4C BC 4E			jmp l_1F4A
  8171
  8172 4D71			.local	SHOWDIR						; PROCEDURE
  8173 4D71 8D 7E 63			sta PAGE
  8174
  8175 				; optimize OK (artur.pas), line = 1150
  8176
  8177 4D74 0A				asl @
  8178 4D75 0A				asl @
  8179 4D76 0A				asl @
  8180 4D77 0A				asl @
  8181 4D78 8D 84 63			sta SKIP
  8182
  8183 				; optimize OK (artur.pas), line = 1151
  8184
  8185 4D7B A9 1A			lda #$1A
  8186 4D7D 8D F2 62			sta DRAWRECT.X
  8187 4D80 A9 04			lda #$04
  8188 4D82 8D F3 62			sta DRAWRECT.Y
  8189 4D85 A9 0C			lda #$0C
  8190 4D87 8D F4 62			sta DRAWRECT.W
  8191 4D8A A9 10			lda #$10
  8192 4D8C 8D F5 62			sta DRAWRECT.H
  8193 4D8F A9 00			lda #$00
  8194 4D91 8D F6 62			sta DRAWRECT.C
  8195 4D94 20 0C 36			jsr DRAWRECT
  8196 4D97 A0 F3			ldy #256-13
  8197 4D99 B9 38 21 99 5E 60 + 	mva:rne CODEORIGIN+$022B+13-256,y adr.S+13-256,y+
  8198
  8199 				; optimize OK (artur.pas), line = 1153
  8200
  8201 4DA2 A9 1A			lda #$1A
  8202 4DA4 8D 18 63			sta WRITESXY.X
  8203 4DA7 A9 15			lda #$15
  8204 4DA9 8D 19 63			sta WRITESXY.Y
  8205 4DAC 20 B7 3E			jsr WRITESXY
  8206
  8207 				; optimize FAIL ('SYSUTILS.FINDFIRST', artur.pas), line = 1154
  8208
  8209 4DAF E8				inx
  8210 4DB0 AD 16 51 95 94		mva INFO :STACKORIGIN,x
  8211 4DB5 AD 17 51 95 A4		mva INFO+1 :STACKORIGIN+STACKWIDTH,x
  8212 4DBA E8				inx
  8213 4DBB A9 3F 95 94			mva #$3F :STACKORIGIN,x
  8214 4DBF E8				inx
  8215 4DC0 A9 39 95 94			mva #$39 :STACKORIGIN,x
  8216 4DC4 A9 22 95 A4			mva #$22 :STACKORIGIN+STACKWIDTH,x
  8217 4DC8 20 CD 2A			jsr SYSUTILS.FINDFIRST
  8218 4DCB AD EE 58			lda SYSUTILS.FINDFIRST.RESULT
  8219 4DCE F0 03 4C 81 4E		jne l_1F74
  8220 				@
  8221
  8222 				; optimize OK (artur.pas), line = 1155
  8223
  8224 4DD3 A9 00			lda #$00
  8225 4DD5 8D 7F 63			sta ROW
  8226 4DD8 A0 FC			ldy #256-4
  8227 4DDA B9 44 21 99 84 62 + 	mva:rne CODEORIGIN+$0240+4-256,y adr.EXT+4-256,y+
  8228
  8229 				; --- RepeatUntilProlog
  8230 4DE3			l_1F7A
  8231
  8232 				; optimize FAIL ('B_CRT.ATASCII2ANTIC_053D', artur.pas), line = 1158
  8233
  8234 4DE3 E8				inx
  8235 4DE4 AD 18 51 95 94		mva INFO.NAME :STACKORIGIN,x
  8236 4DE9 AD 19 51 95 A4		mva INFO.NAME+1 :STACKORIGIN+STACKWIDTH,x
  8237 4DEE 20 14 2D			jsr B_CRT.ATASCII2ANTIC_053D
  8238 4DF1 E8				inx
  8239 4DF2 AD 69 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT
  8240 4DF5 85 88			sta @move.src
  8241 4DF7 AD 6A 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
  8242 4DFA 85 89			sta @move.src+1
  8243 					@moveSTRING S #41
  8243 				 MWA S @MOVE.DST\ MWA #41 @MOVE.CNT\ JSR @MOVESTRING
  8243 4DFC AD 7F 58 85 8C AD +  MWA S @MOVE.DST
  8243 4E06 A9 29 85 84 A9 00 +  MWA #41 @MOVE.CNT
  8243 4E0E 20 11 28		 JSR @MOVESTRING
  8244 4E11 CA				dex
  8245
  8246 				; optimize OK (artur.pas), line = 1159
  8247
  8248 4E12 AD 7F 58			lda S
  8249 4E15 8D 4F 63			sta HASEXT.S
  8250 4E18 AD 80 58			lda S+1
  8251 4E1B 8D 50 63			sta HASEXT.S+1
  8252 4E1E AD BA 4E			lda EXT
  8253 4E21 8D 51 63			sta HASEXT.E
  8254 4E24 AD BB 4E			lda EXT+1
  8255 4E27 8D 52 63			sta HASEXT.E+1
  8256 4E2A 20 FA 4C			jsr HASEXT
  8257 4E2D AD 53 63			lda HASEXT.RESULT
  8258 4E30 D0 1F			jne l_1F8E
  8259
  8260 				; optimize OK (artur.pas), line = 1160
  8261
  8262 4E32 AD 84 63			lda SKIP
  8263 4E35 D0 17			jne l_1FA1
  8264
  8265 				; optimize OK (artur.pas), line = 1161
  8266
  8267 4E37 A9 04			lda #$04
  8268 4E39 18 6D 7F 63			add ROW
  8269 4E3D 8D 19 63			sta WRITESXY.Y
  8270 4E40 A9 1A			lda #$1A
  8271 4E42 8D 18 63			sta WRITESXY.X
  8272 4E45 20 B7 3E			jsr WRITESXY
  8273
  8274 				; optimize FAIL (0, artur.pas), line = 1162
  8275
  8276 4E48 EE 7F 63			inc ROW
  8277 4E4B 4C 51 4E			jmp l_1FBC
  8278 4E4E			l_1FA1
  8279
  8280 				; optimize FAIL (0, artur.pas), line = 1163
  8281
  8282 4E4E CE 84 63			dec SKIP
  8283 4E51			l_1FBC
  8284 4E51			l_1F8E
  8285
  8286 				; optimize OK (artur.pas), line = 1165
  8287
  8288 4E51 AD 16 51			lda INFO
  8289 4E54 8D FB 58			sta SYSUTILS.FINDNEXT.F
  8290 4E57 AD 17 51			lda INFO+1
  8291 4E5A 8D FC 58			sta SYSUTILS.FINDNEXT.F+1
  8292 4E5D 20 AF 2B			jsr SYSUTILS.FINDNEXT
  8293 4E60 AD FD 58			lda SYSUTILS.FINDNEXT.RESULT
  8294 4E63 8D 7D 63			sta NEXT
  8295
  8296 				; optimize OK (artur.pas), line = 1166
  8297
  8298 4E66 D0 0A			jne l_1F7Ax
  8299 4E68 AD 7F 63			lda ROW
  8300 4E6B C9 10			cmp #$10
  8301 4E6D F0 03 4C E3 4D		jne l_1F7A
  8302 4E72			l_1F7Ax
  8303
  8304 				; optimize OK (artur.pas), line = 1167
  8305
  8306 4E72 AD 16 51			lda INFO
  8307 4E75 8D FE 58			sta SYSUTILS.FINDCLOSE.F
  8308 4E78 AD 17 51			lda INFO+1
  8309 4E7B 8D FF 58			sta SYSUTILS.FINDCLOSE.F+1
  8310 4E7E 20 FD 2B			jsr SYSUTILS.FINDCLOSE
  8311 4E81			l_1F74
  8312
  8313 				; optimize OK (artur.pas), line = 1169
  8314
  8315 4E81 AD 7D 63			lda NEXT
  8316 4E84 D0 17			jne l_1FF8
  8317 4E86 A9 01 8D 51 61		mva #$01 adr.S
  8318 4E8B A9 1E 8D 52 61		mva #$1E adr.S+1
  8319
  8320 				; optimize OK (artur.pas), line = 1171
  8321
  8322 4E90 A9 25			lda #$25
  8323 4E92 8D 18 63			sta WRITESXY.X
  8324 4E95 A9 15			lda #$15
  8325 4E97 8D 19 63			sta WRITESXY.Y
  8326 4E9A 20 B7 3E			jsr WRITESXY
  8327 4E9D			l_1FF8
  8328
  8329 				; optimize OK (artur.pas), line = 1173
  8330
  8331 4E9D AD 7E 63			lda PAGE
  8332 4EA0 F0 17			jeq l_2010
  8333 4EA2 A9 01 8D 51 61		mva #$01 adr.S
  8334 4EA7 A9 1C 8D 52 61		mva #$1C adr.S+1
  8335
  8336 				; optimize OK (artur.pas), line = 1175
  8337
  8338 4EAC A9 1A			lda #$1A
  8339 4EAE 8D 18 63			sta WRITESXY.X
  8340 4EB1 A9 15			lda #$15
  8341 4EB3 8D 19 63			sta WRITESXY.Y
  8342 4EB6 20 B7 3E			jsr WRITESXY
  8343 4EB9			l_2010
  8344
  8345 				; ------------------------------------------------------------
  8346
  8347 = 637E			PAGE	= DATAORIGIN+$0AEE
  8348 = 637F			ROW	= DATAORIGIN+$0AEF
  8349 = 6380			adr.EXT	= [DATAORIGIN+$0AF0] .array [4]
  8350 4EB9			.var EXT	= adr.EXT .word
  8351 = 6384			SKIP	= DATAORIGIN+$0AF4
  8352
  8353 = 637E			@VarData	= PAGE
  8354 = 0007			@VarDataSize	= 7
  8355
  8356 4EB9			@exit
  8357 					.ifdef @new
  8358 					lda <@VarData
  8359 					sta :ztmp
  8360 					lda >@VarData
  8361 					ldy #@VarDataSize-1
  8362 					jmp @FreeMem
  8363 					els
  8364 4EB9 60				rts						; ret
  8365 					eif
  8366 = 4EBA 80 63		EXT
  8366 				.endl
  8367 4EBC			l_1F4A
  8368
  8369 				; optimize FAIL ('OPENMODAL', artur.pas), line = 1182
  8370
  8371 4EBC 20 03 41			jsr OPENMODAL
  8372
  8373 				; optimize OK (artur.pas), line = 1183
  8374
  8375 4EBF A9 01			lda #$01
  8376 4EC1 8D F2 62			sta DRAWRECT.X
  8377 4EC4 8D F3 62			sta DRAWRECT.Y
  8378 4EC7 A9 26			lda #$26
  8379 4EC9 8D F4 62			sta DRAWRECT.W
  8380 4ECC A9 16			lda #$16
  8381 4ECE 8D F5 62			sta DRAWRECT.H
  8382 4ED1 A9 80			lda #$80
  8383 4ED3 8D F6 62			sta DRAWRECT.C
  8384 4ED6 20 0C 36			jsr DRAWRECT
  8385 4ED9 A0 E1			ldy #256-31
  8386 4EDB B9 64 21 99 70 60 + 	mva:rne CODEORIGIN+$0245+31-256,y adr.S+31-256,y+
  8387
  8388 				; optimize OK (artur.pas), line = 1185
  8389
  8390 4EE4 A9 02			lda #$02
  8391 4EE6 8D 18 63			sta WRITESXY.X
  8392 4EE9 8D 19 63			sta WRITESXY.Y
  8393 4EEC 20 B7 3E			jsr WRITESXY
  8394 4EEF A0 DB			ldy #256-37
  8395 4EF1 B9 8A 21 99 76 60 + 	mva:rne CODEORIGIN+$0265+37-256,y adr.S+37-256,y+
  8396
  8397 				; optimize OK (artur.pas), line = 1187
  8398
  8399 4EFA A9 02			lda #$02
  8400 4EFC 8D 18 63			sta WRITESXY.X
  8401 4EFF A9 03			lda #$03
  8402 4F01 8D 19 63			sta WRITESXY.Y
  8403 4F04 20 B7 3E			jsr WRITESXY
  8404 4F07 A0 EE			ldy #256-18
  8405 4F09 B9 9D 21 99 63 60 + 	mva:rne CODEORIGIN+$028B+18-256,y adr.S+18-256,y+
  8406
  8407 				; optimize OK (artur.pas), line = 1189
  8408
  8409 4F12 A9 02			lda #$02
  8410 4F14 8D 18 63			sta WRITESXY.X
  8411 4F17 A9 05			lda #$05
  8412 4F19 8D 19 63			sta WRITESXY.Y
  8413 4F1C 20 B7 3E			jsr WRITESXY
  8414 4F1F A0 ED			ldy #256-19
  8415 4F21 B9 B1 21 99 64 60 + 	mva:rne CODEORIGIN+$029E+19-256,y adr.S+19-256,y+
  8416
  8417 				; optimize OK (artur.pas), line = 1191
  8418
  8419 4F2A A9 02			lda #$02
  8420 4F2C 8D 18 63			sta WRITESXY.X
  8421 4F2F A9 07			lda #$07
  8422 4F31 8D 19 63			sta WRITESXY.Y
  8423 4F34 20 B7 3E			jsr WRITESXY
  8424 4F37 A0 ED			ldy #256-19
  8425 4F39 B9 C5 21 99 64 60 + 	mva:rne CODEORIGIN+$02B2+19-256,y adr.S+19-256,y+
  8426
  8427 				; optimize OK (artur.pas), line = 1193
  8428
  8429 4F42 A9 02			lda #$02
  8430 4F44 8D 18 63			sta WRITESXY.X
  8431 4F47 A9 09			lda #$09
  8432 4F49 8D 19 63			sta WRITESXY.Y
  8433 4F4C 20 B7 3E			jsr WRITESXY
  8434 4F4F A0 E9			ldy #256-23
  8435 4F51 B9 DD 21 99 68 60 + 	mva:rne CODEORIGIN+$02C6+23-256,y adr.S+23-256,y+
  8436
  8437 				; optimize OK (artur.pas), line = 1195
  8438
  8439 4F5A A9 02			lda #$02
  8440 4F5C 8D 18 63			sta WRITESXY.X
  8441 4F5F A9 0B			lda #$0B
  8442 4F61 8D 19 63			sta WRITESXY.Y
  8443 4F64 20 B7 3E			jsr WRITESXY
  8444 4F67 A0 EC			ldy #256-20
  8445 4F69 B9 F2 21 99 65 60 + 	mva:rne CODEORIGIN+$02DE+20-256,y adr.S+20-256,y+
  8446
  8447 				; optimize OK (artur.pas), line = 1197
  8448
  8449 4F72 A9 02			lda #$02
  8450 4F74 8D 18 63			sta WRITESXY.X
  8451 4F77 A9 0D			lda #$0D
  8452 4F79 8D 19 63			sta WRITESXY.Y
  8453 4F7C 20 B7 3E			jsr WRITESXY
  8454 4F7F A0 E8			ldy #256-24
  8455 4F81 B9 0B 22 99 69 60 + 	mva:rne CODEORIGIN+$02F3+24-256,y adr.S+24-256,y+
  8456
  8457 				; optimize OK (artur.pas), line = 1199
  8458
  8459 4F8A A9 02			lda #$02
  8460 4F8C 8D 18 63			sta WRITESXY.X
  8461 4F8F A9 0F			lda #$0F
  8462 4F91 8D 19 63			sta WRITESXY.Y
  8463 4F94 20 B7 3E			jsr WRITESXY
  8464 4F97 A0 F4			ldy #256-12
  8465 4F99 B9 18 22 99 5D 60 + 	mva:rne CODEORIGIN+$030C+12-256,y adr.S+12-256,y+
  8466
  8467 				; optimize OK (artur.pas), line = 1201
  8468
  8469 4FA2 A9 02			lda #$02
  8470 4FA4 8D 18 63			sta WRITESXY.X
  8471 4FA7 A9 11			lda #$11
  8472 4FA9 8D 19 63			sta WRITESXY.Y
  8473 4FAC 20 B7 3E			jsr WRITESXY
  8474 4FAF A0 EC			ldy #256-20
  8475 4FB1 B9 2D 22 99 65 60 + 	mva:rne CODEORIGIN+$0319+20-256,y adr.S+20-256,y+
  8476
  8477 				; optimize OK (artur.pas), line = 1203
  8478
  8479 4FBA A9 02			lda #$02
  8480 4FBC 8D 18 63			sta WRITESXY.X
  8481 4FBF A9 15			lda #$15
  8482 4FC1 8D 19 63			sta WRITESXY.Y
  8483 4FC4 20 B7 3E			jsr WRITESXY
  8484
  8485 				; optimize OK (artur.pas), line = 1205
  8486
  8487 4FC7 A9 00			lda #$00
  8488 4FC9 8D 56 63			sta DONE
  8489
  8490 				; optimize OK (artur.pas), line = 1206
  8491
  8492 4FCC 8D 7C 63			sta DIRPAGE
  8493
  8494 				; optimize OK (artur.pas), line = 1207
  8495
  8496 4FCF 8D 7D 63			sta NEXT
  8497
  8498 				; optimize OK (artur.pas), line = 1208
  8499
  8500 4FD2 AD 7C 63			lda DIRPAGE
  8501 4FD5 20 71 4D			jsr SHOWDIR
  8502
  8503 				; --- RepeatUntilProlog
  8504 4FD8			l_204D
  8505
  8506 				; optimize FAIL ('CRT.READKEY', artur.pas), line = 1211
  8507
  8508 4FD8 20 AD 2A			jsr CRT.READKEY
  8509 4FDB AD C7 58			lda CRT.READKEY.RESULT
  8510 4FDE 8D 7A 61			sta C
  8511
  8512 				; optimize OK (artur.pas), line = 1212
  8513
  8514 4FE1 C9 6E			cmp #$6E
  8515 4FE3 D0 08			jne l_2063
  8516
  8517 				; optimize FAIL ('CLEARBUFFER', artur.pas), line = 1213
  8518
  8519 4FE5 20 BC 35			jsr CLEARBUFFER
  8520
  8521 				; optimize OK (artur.pas), line = 1214
  8522
  8523 4FE8 A9 01			lda #$01
  8524 4FEA 8D 56 63			sta DONE
  8525 4FED			l_2063
  8526
  8527 				; optimize OK (artur.pas), line = 1216
  8528
  8529 4FED AD 7A 61			lda C
  8530 4FF0 C9 6C			cmp #$6C
  8531 4FF2 D0 2C			jne l_207D
  8532
  8533 				; optimize OK (artur.pas), line = 1217
  8534
  8535 4FF4 A9 02			lda #$02
  8536 4FF6 8D 22 63			sta GETFILENAME.X
  8537 4FF9 A9 08			lda #$08
  8538 4FFB 8D 23 63			sta GETFILENAME.Y
  8539 4FFE 20 A8 3F			jsr GETFILENAME
  8540
  8541 				; optimize OK (artur.pas), line = 1218
  8542
  8543 5001 A9 00			lda #$00
  8544 5003 8D 45 63			sta LOADDATA.BUF
  8545 5006 A9 78			lda #$78
  8546 5008 8D 46 63			sta LOADDATA.BUF+1
  8547 500B A9 C0			lda #$C0
  8548 500D 8D 47 63			sta LOADDATA.SIZE
  8549 5010 A9 03			lda #$03
  8550 5012 8D 48 63			sta LOADDATA.SIZE+1
  8551 5015 20 2C 48			jsr LOADDATA
  8552
  8553 				; optimize FAIL ('INITUNDOSTORAGE', artur.pas), line = 1219
  8554
  8555 5018 20 2D 33			jsr INITUNDOSTORAGE
  8556
  8557 				; optimize OK (artur.pas), line = 1220
  8558
  8559 501B A9 01			lda #$01
  8560 501D 8D 56 63			sta DONE
  8561 5020			l_207D
  8562
  8563 				; optimize OK (artur.pas), line = 1222
  8564
  8565 5020 AD 7A 61			lda C
  8566 5023 C9 73			cmp #$73
  8567 5025 D0 29			jne l_209D
  8568
  8569 				; optimize OK (artur.pas), line = 1223
  8570
  8571 5027 A9 02			lda #$02
  8572 5029 8D 22 63			sta GETFILENAME.X
  8573 502C A9 0A			lda #$0A
  8574 502E 8D 23 63			sta GETFILENAME.Y
  8575 5031 20 A8 3F			jsr GETFILENAME
  8576
  8577 				; optimize OK (artur.pas), line = 1224
  8578
  8579 5034 A9 00			lda #$00
  8580 5036 8D 49 63			sta SAVEDATA.BUF
  8581 5039 A9 78			lda #$78
  8582 503B 8D 4A 63			sta SAVEDATA.BUF+1
  8583 503E A9 C0			lda #$C0
  8584 5040 8D 4B 63			sta SAVEDATA.SIZE
  8585 5043 A9 03			lda #$03
  8586 5045 8D 4C 63			sta SAVEDATA.SIZE+1
  8587 5048 20 9D 48			jsr SAVEDATA
  8588
  8589 				; optimize OK (artur.pas), line = 1225
  8590
  8591 504B A9 01			lda #$01
  8592 504D 8D 56 63			sta DONE
  8593 5050			l_209D
  8594
  8595 				; optimize OK (artur.pas), line = 1227
  8596
  8597 5050 AD 7A 61			lda C
  8598 5053 C9 78			cmp #$78
  8599 5055 D0 15			jne l_20BC
  8600
  8601 				; optimize OK (artur.pas), line = 1228
  8602
  8603 5057 A9 02			lda #$02
  8604 5059 8D 22 63			sta GETFILENAME.X
  8605 505C A9 0C			lda #$0C
  8606 505E 8D 23 63			sta GETFILENAME.Y
  8607 5061 20 A8 3F			jsr GETFILENAME
  8608
  8609 				; optimize FAIL ('SAVEBINARY', artur.pas), line = 1229
  8610
  8611 5064 20 E0 4A			jsr SAVEBINARY
  8612
  8613 				; optimize OK (artur.pas), line = 1230
  8614
  8615 5067 A9 01			lda #$01
  8616 5069 8D 56 63			sta DONE
  8617 506C			l_20BC
  8618
  8619 				; optimize OK (artur.pas), line = 1232
  8620
  8621 506C AD 7A 61			lda C
  8622 506F C9 63			cmp #$63
  8623 5071 D0 29			jne l_20D9
  8624
  8625 				; optimize OK (artur.pas), line = 1233
  8626
  8627 5073 A9 02			lda #$02
  8628 5075 8D 22 63			sta GETFILENAME.X
  8629 5078 A9 0E			lda #$0E
  8630 507A 8D 23 63			sta GETFILENAME.Y
  8631 507D 20 A8 3F			jsr GETFILENAME
  8632
  8633 				; optimize OK (artur.pas), line = 1234
  8634
  8635 5080 A9 00			lda #$00
  8636 5082 8D 45 63			sta LOADDATA.BUF
  8637 5085 A9 74			lda #$74
  8638 5087 8D 46 63			sta LOADDATA.BUF+1
  8639 508A A9 00			lda #$00
  8640 508C 8D 47 63			sta LOADDATA.SIZE
  8641 508F A9 04			lda #$04
  8642 5091 8D 48 63			sta LOADDATA.SIZE+1
  8643 5094 20 2C 48			jsr LOADDATA
  8644
  8645 				; optimize OK (artur.pas), line = 1235
  8646
  8647 5097 A9 01			lda #$01
  8648 5099 8D 56 63			sta DONE
  8649 509C			l_20D9
  8650
  8651 				; optimize OK (artur.pas), line = 1237
  8652
  8653 509C AD 7A 61			lda C
  8654 509F C9 64			cmp #$64
  8655 50A1 D0 20			jne l_20F8
  8656
  8657 				; optimize OK (artur.pas), line = 1238
  8658
  8659 50A3 A9 00			lda #$00
  8660 50A5 85 88			sta SYSTEM.MOVE_0458.SOURCE
  8661 50A7 A9 E0			lda #$E0
  8662 50A9 85 89			sta SYSTEM.MOVE_0458.SOURCE+1
  8663 50AB A9 00			lda #$00
  8664 50AD 85 8C			sta SYSTEM.MOVE_0458.DEST
  8665 50AF A9 74			lda #$74
  8666 50B1 85 8D			sta SYSTEM.MOVE_0458.DEST+1
  8667 50B3 A9 00			lda #$00
  8668 50B5 85 84			sta SYSTEM.MOVE_0458.COUNT
  8669 50B7 A9 04			lda #$04
  8670 50B9 85 85			sta SYSTEM.MOVE_0458.COUNT+1
  8671 50BB				.local +MAIN.SYSTEM.MOVE_0458
  8672 50BB				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0458.M@INLINE [Source: artur.a65]
     4 50BB 20 74 27			jsr @move
Source: artur.a65
  8673 					.endl
  8674
  8675 				; optimize OK (artur.pas), line = 1239
  8676
  8677 50BE A9 01			lda #$01
  8678 50C0 8D 56 63			sta DONE
  8679 50C3			l_20F8
  8680
  8681 				; optimize OK (artur.pas), line = 1241
  8682
  8683 50C3 AD 7A 61			lda C
  8684 50C6 C9 71			cmp #$71
  8685 50C8 D0 0A			jne l_2115
  8686
  8687 				; optimize OK (artur.pas), line = 1242
  8688
  8689 50CA A9 FF			lda #$FF
  8690 50CC 8D 91 61			sta MODE
  8691
  8692 				; optimize OK (artur.pas), line = 1243
  8693
  8694 50CF A9 01			lda #$01
  8695 50D1 8D 56 63			sta DONE
  8696 50D4			l_2115
  8697
  8698 				; optimize OK (artur.pas), line = 1245
  8699
  8700 50D4 AD 7A 61			lda C
  8701 50D7 C9 3E			cmp #$3E
  8702 50D9 D0 0E			jne l_2132
  8703 50DB AD 7D 63			lda NEXT
  8704 50DE D0 09			jne l_2145
  8705
  8706 				; optimize FAIL (0, artur.pas), line = 1246
  8707
  8708 50E0 EE 7C 63			inc DIRPAGE
  8709
  8710 				; optimize OK (artur.pas), line = 1247
  8711
  8712 50E3 AD 7C 63			lda DIRPAGE
  8713 50E6 20 71 4D			jsr SHOWDIR
  8714 50E9			l_2145
  8715 50E9			l_2132
  8716
  8717 				; optimize OK (artur.pas), line = 1249
  8718
  8719 50E9 AD 7A 61			lda C
  8720 50EC C9 3C			cmp #$3C
  8721 50EE D0 0E			jne l_2164
  8722 50F0 AD 7C 63			lda DIRPAGE
  8723 50F3 F0 09			jeq l_2177
  8724
  8725 				; optimize FAIL (0, artur.pas), line = 1250
  8726
  8727 50F5 CE 7C 63			dec DIRPAGE
  8728
  8729 				; optimize OK (artur.pas), line = 1251
  8730
  8731 50F8 AD 7C 63			lda DIRPAGE
  8732 50FB 20 71 4D			jsr SHOWDIR
  8733 50FE			l_2177
  8734 50FE			l_2164
  8735
  8736 				; optimize OK (artur.pas), line = 1253
  8737
  8738 50FE AD 7A 61			lda C
  8739 5101 C9 1B			cmp #$1B
  8740 5103 D0 05			jne l_2196
  8741 5105 A9 01			lda #$01
  8742 5107 8D 56 63			sta DONE
  8743 510A			l_2196
  8744
  8745 				; optimize OK (artur.pas), line = 1254
  8746
  8747 510A AD 56 63			lda DONE
  8748 510D D0 03 4C D8 4F		jeq l_204D
  8749
  8750 				; optimize FAIL ('CLOSEMODAL', artur.pas), line = 1255
  8751
  8752 5112 20 14 41			jsr CLOSEMODAL
  8753
  8754 				; ------------------------------------------------------------
  8755
  8756 = 0001			IO_X	= $01
  8757 = 0001			IO_Y	= $01
  8758 = 0026			IO_W	= $26
  8759 = 0016			IO_H	= $16
  8760 = 6356			DONE	= DATAORIGIN+$0AC6
  8761 = 6357			adr.INFO	= [DATAORIGIN+$0AC7] .array [7] ; type unknown
  8762 5115			.var INFO	= adr.INFO .word
  8763 = 6357			INFO.ATTR	= DATAORIGIN+$0AC7
  8764 = 6358			INFO.EXCLUDEATTR	= DATAORIGIN+$0AC8
  8765 = 6359			adr.INFO.NAME	= [DATAORIGIN+$0AC9] .array [33]
  8766 5115			.var INFO.NAME	= adr.INFO.NAME .word
  8767 = 637A			INFO.FINDHANDLE	= DATAORIGIN+$0AEA
  8768 = 637C			DIRPAGE	= DATAORIGIN+$0AEC
  8769 = 637D			NEXT	= DATAORIGIN+$0AED
  8770
  8771 = 6356			@VarData	= DONE
  8772 = 0028			@VarDataSize	= 40
  8773
  8774 5115			@exit
  8775 					.ifdef @new
  8776 					lda <@VarData
  8777 					sta :ztmp
  8778 					lda >@VarData
  8779 					ldy #@VarDataSize-1
  8780 					jmp @FreeMem
  8781 					els
  8782 5115 60				rts						; ret
  8783 					eif
  8784 = 5116 57 63		INFO
  8784 = 5118 59 63		INFO.NAME
  8784 				.endl
  8785
  8786 511A			.local	SHOWSETTINGS					; PROCEDURE
  8787
  8788 				; optimize FAIL ('OPENMODAL', artur.pas), line = 1265
  8789
  8790 511A 20 03 41			jsr OPENMODAL
  8791
  8792 				; optimize OK (artur.pas), line = 1266
  8793
  8794 511D A9 05			lda #$05
  8795 511F 8D F2 62			sta DRAWRECT.X
  8796 5122 A9 02			lda #$02
  8797 5124 8D F3 62			sta DRAWRECT.Y
  8798 5127 A9 1E			lda #$1E
  8799 5129 8D F4 62			sta DRAWRECT.W
  8800 512C A9 14			lda #$14
  8801 512E 8D F5 62			sta DRAWRECT.H
  8802 5131 A9 80			lda #$80
  8803 5133 8D F6 62			sta DRAWRECT.C
  8804 5136 20 0C 36			jsr DRAWRECT
  8805 5139 A0 F0			ldy #256-16
  8806 513B B9 3E 22 99 61 60 + 	mva:rne CODEORIGIN+$032E+16-256,y adr.S+16-256,y+
  8807
  8808 				; optimize OK (artur.pas), line = 1268
  8809
  8810 5144 A9 06			lda #$06
  8811 5146 8D 18 63			sta WRITESXY.X
  8812 5149 A9 03			lda #$03
  8813 514B 8D 19 63			sta WRITESXY.Y
  8814 514E 20 B7 3E			jsr WRITESXY
  8815 5151 A0 E3			ldy #256-29
  8816 5153 B9 97 20 99 6E 60 + 	mva:rne CODEORIGIN+$017A+29-256,y adr.S+29-256,y+
  8817
  8818 				; optimize OK (artur.pas), line = 1270
  8819
  8820 515C A9 06			lda #$06
  8821 515E 8D 18 63			sta WRITESXY.X
  8822 5161 A9 04			lda #$04
  8823 5163 8D 19 63			sta WRITESXY.Y
  8824 5166 20 B7 3E			jsr WRITESXY
  8825
  8826 				; --- RepeatUntilProlog
  8827 5169			l_21B7
  8828 5169 A0 EC			ldy #256-20
  8829 516B B9 53 22 99 65 60 + 	mva:rne CODEORIGIN+$033F+20-256,y adr.S+20-256,y+
  8830
  8831 				; optimize OK (artur.pas), line = 1274
  8832
  8833 5174 A9 06			lda #$06
  8834 5176 8D 18 63			sta WRITESXY.X
  8835 5179 8D 19 63			sta WRITESXY.Y
  8836 517C 20 B7 3E			jsr WRITESXY
  8837
  8838 				; optimize OK (artur.pas), line = 1275
  8839
  8840 517F AD 4A 61			lda CONFIG.EDITORBACKGROUNDCOLOR
  8841 5182 85 88			sta SYSTEM.HEXSTR.VALUE
  8842 5184 A9 00			lda #$00
  8843 5186 85 89			sta SYSTEM.HEXSTR.VALUE+1
  8844 5188 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  8845 518A 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  8846 518C A9 02			lda #$02
  8847 518E 85 8C			sta SYSTEM.HEXSTR.DIGITS
  8848 5190 20 F6 29			jsr SYSTEM.HEXSTR
  8849 5193 E8				inx
  8850 5194 AD 05 2A 95 94		mva SYSTEM.HEXSTR.RESULT :STACKORIGIN,x
  8851 5199 AD 06 2A 95 A4		mva SYSTEM.HEXSTR.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  8852 519E 20 14 2D			jsr B_CRT.ATASCII2ANTIC_053D
  8853 51A1 E8				inx
  8854 51A2 AD 69 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT
  8855 51A5 85 88			sta @move.src
  8856 51A7 AD 6A 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
  8857 51AA 85 89			sta @move.src+1
  8858 					@moveSTRING S #41
  8858 				 MWA S @MOVE.DST\ MWA #41 @MOVE.CNT\ JSR @MOVESTRING
  8858 51AC AD 7F 58 85 8C AD +  MWA S @MOVE.DST
  8858 51B6 A9 29 85 84 A9 00 +  MWA #41 @MOVE.CNT
  8858 51BE 20 11 28		 JSR @MOVESTRING
  8859 51C1 CA				dex
  8860
  8861 				; optimize OK (artur.pas), line = 1276
  8862
  8863 51C2 A9 19			lda #$19
  8864 51C4 8D 18 63			sta WRITESXY.X
  8865 51C7 A9 06			lda #$06
  8866 51C9 8D 19 63			sta WRITESXY.Y
  8867 51CC 20 B7 3E			jsr WRITESXY
  8868 51CF A0 EC			ldy #256-20
  8869 51D1 B9 68 22 99 65 60 + 	mva:rne CODEORIGIN+$0354+20-256,y adr.S+20-256,y+
  8870
  8871 				; optimize OK (artur.pas), line = 1279
  8872
  8873 51DA A9 06			lda #$06
  8874 51DC 8D 18 63			sta WRITESXY.X
  8875 51DF A9 08			lda #$08
  8876 51E1 8D 19 63			sta WRITESXY.Y
  8877 51E4 20 B7 3E			jsr WRITESXY
  8878
  8879 				; optimize OK (artur.pas), line = 1280
  8880
  8881 51E7 AD 4B 61			lda CONFIG.EDITORFOREGROUNDCOLOR
  8882 51EA 85 88			sta SYSTEM.HEXSTR.VALUE
  8883 51EC A9 00			lda #$00
  8884 51EE 85 89			sta SYSTEM.HEXSTR.VALUE+1
  8885 51F0 85 8A			sta SYSTEM.HEXSTR.VALUE+2
  8886 51F2 85 8B			sta SYSTEM.HEXSTR.VALUE+3
  8887 51F4 A9 02			lda #$02
  8888 51F6 85 8C			sta SYSTEM.HEXSTR.DIGITS
  8889 51F8 20 F6 29			jsr SYSTEM.HEXSTR
  8890 51FB E8				inx
  8891 51FC AD 05 2A 95 94		mva SYSTEM.HEXSTR.RESULT :STACKORIGIN,x
  8892 5201 AD 06 2A 95 A4		mva SYSTEM.HEXSTR.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  8893 5206 20 14 2D			jsr B_CRT.ATASCII2ANTIC_053D
  8894 5209 E8				inx
  8895 520A AD 69 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT
  8896 520D 85 88			sta @move.src
  8897 520F AD 6A 2D			lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
  8898 5212 85 89			sta @move.src+1
  8899 					@moveSTRING S #41
  8899 				 MWA S @MOVE.DST\ MWA #41 @MOVE.CNT\ JSR @MOVESTRING
  8899 5214 AD 7F 58 85 8C AD +  MWA S @MOVE.DST
  8899 521E A9 29 85 84 A9 00 +  MWA #41 @MOVE.CNT
  8899 5226 20 11 28		 JSR @MOVESTRING
  8900 5229 CA				dex
  8901
  8902 				; optimize OK (artur.pas), line = 1281
  8903
  8904 522A A9 19			lda #$19
  8905 522C 8D 18 63			sta WRITESXY.X
  8906 522F A9 08			lda #$08
  8907 5231 8D 19 63			sta WRITESXY.Y
  8908 5234 20 B7 3E			jsr WRITESXY
  8909 5237 A0 EA			ldy #256-22
  8910 5239 B9 7F 22 99 67 60 + 	mva:rne CODEORIGIN+$0369+22-256,y adr.S+22-256,y+
  8911
  8912 				; optimize OK (artur.pas), line = 1284
  8913
  8914 5242 A9 06			lda #$06
  8915 5244 8D 18 63			sta WRITESXY.X
  8916 5247 A9 0A			lda #$0A
  8917 5249 8D 19 63			sta WRITESXY.Y
  8918 524C 20 B7 3E			jsr WRITESXY
  8919
  8920 				; optimize OK (artur.pas), line = 1285
  8921
  8922 524F AD 4C 61			lda CONFIG.ARROWSRAW
  8923 5252 F0 0E			jeq l_21DE
  8924 5254 A0 FC			ldy #256-4
  8925 5256 B9 84 22 99 55 60 + 	mva:rne CODEORIGIN+$0380+4-256,y adr.S+4-256,y+
  8926 525F 4C 6D 52			jmp l_21E8
  8927 5262			l_21DE
  8928 5262 A0 FC			ldy #256-4
  8929 5264 B9 89 22 99 55 60 + 	mva:rne CODEORIGIN+$0385+4-256,y adr.S+4-256,y+
  8930 526D			l_21E8
  8931
  8932 				; optimize OK (artur.pas), line = 1287
  8933
  8934 526D A9 1B			lda #$1B
  8935 526F 8D 18 63			sta WRITESXY.X
  8936 5272 A9 0A			lda #$0A
  8937 5274 8D 19 63			sta WRITESXY.Y
  8938 5277 20 B7 3E			jsr WRITESXY
  8939 527A A0 ED			ldy #256-19
  8940 527C B9 9D 22 99 64 60 + 	mva:rne CODEORIGIN+$038A+19-256,y adr.S+19-256,y+
  8941
  8942 				; optimize OK (artur.pas), line = 1290
  8943
  8944 5285 A9 06			lda #$06
  8945 5287 8D 18 63			sta WRITESXY.X
  8946 528A A9 0C			lda #$0C
  8947 528C 8D 19 63			sta WRITESXY.Y
  8948 528F 20 B7 3E			jsr WRITESXY
  8949 5292 A0 F8			ldy #256-8
  8950 5294 B9 A6 22 99 59 60 + 	mva:rne CODEORIGIN+$039E+8-256,y adr.S+8-256,y+
  8951
  8952 				; optimize OK (artur.pas), line = 1292
  8953
  8954 529D AD 4D 61			lda CONFIG.KEYCODEDISPLAY
  8955 52A0 C9 02			cmp #$02
  8956 52A2 D0 0B			jne l_2200
  8957 52A4 A0 F8			ldy #256-8
  8958 52A6 B9 AF 22 99 59 60 + 	mva:rne CODEORIGIN+$03A7+8-256,y adr.S+8-256,y+
  8959 52AF			l_2200
  8960
  8961 				; optimize OK (artur.pas), line = 1293
  8962
  8963 52AF AD 4D 61			lda CONFIG.KEYCODEDISPLAY
  8964 52B2 C9 01			cmp #$01
  8965 52B4 D0 0B			jne l_2215
  8966 52B6 A0 F8			ldy #256-8
  8967 52B8 B9 B8 22 99 59 60 + 	mva:rne CODEORIGIN+$03B0+8-256,y adr.S+8-256,y+
  8968 52C1			l_2215
  8969
  8970 				; optimize OK (artur.pas), line = 1294
  8971
  8972 52C1 A9 18			lda #$18
  8973 52C3 8D 18 63			sta WRITESXY.X
  8974 52C6 A9 0C			lda #$0C
  8975 52C8 8D 19 63			sta WRITESXY.Y
  8976 52CB 20 B7 3E			jsr WRITESXY
  8977 52CE A0 F4			ldy #256-12
  8978 52D0 B9 C5 22 99 5D 60 + 	mva:rne CODEORIGIN+$03B9+12-256,y adr.S+12-256,y+
  8979
  8980 				; optimize OK (artur.pas), line = 1297
  8981
  8982 52D9 A9 06			lda #$06
  8983 52DB 8D 18 63			sta WRITESXY.X
  8984 52DE A9 0E			lda #$0E
  8985 52E0 8D 19 63			sta WRITESXY.Y
  8986 52E3 20 B7 3E			jsr WRITESXY
  8987 52E6 A0 ED			ldy #256-19
  8988 52E8 B9 D9 22 99 64 60 + 	mva:rne CODEORIGIN+$03C6+19-256,y adr.S+19-256,y+
  8989
  8990 				; optimize OK (artur.pas), line = 1300
  8991
  8992 52F1 A9 06			lda #$06
  8993 52F3 8D 18 63			sta WRITESXY.X
  8994 52F6 A9 14			lda #$14
  8995 52F8 8D 19 63			sta WRITESXY.Y
  8996 52FB 20 B7 3E			jsr WRITESXY
  8997
  8998 				; optimize FAIL ('CRT.READKEY', artur.pas), line = 1302
  8999
  9000 52FE 20 AD 2A			jsr CRT.READKEY
  9001 5301 AD C7 58			lda CRT.READKEY.RESULT
  9002 5304 8D 7A 61			sta C
  9003
  9004 				; optimize OK (artur.pas), line = 1303
  9005
  9006 5307 C9 61			cmp #$61
  9007 5309 D0 0C			jne l_2237
  9008 530B A0 01			ldy #1
  9009 530D AD 4C 61			lda CONFIG.ARROWSRAW
  9010 5310 F0 01			beq @+
  9011 5312 88				dey
  9012 				@
  9013 5313 98				tya
  9014 5314 8D 4C 61			sta CONFIG.ARROWSRAW
  9015 5317			l_2237
  9016
  9017 				; optimize OK (artur.pas), line = 1304
  9018
  9019 5317 AD 7A 61			lda C
  9020 531A C9 62			cmp #$62
  9021 531C D0 19			jne l_2255
  9022 531E A9 19			lda #$19
  9023 5320 8D 1C 63			sta GETHEXVAL.X
  9024 5323 A9 06			lda #$06
  9025 5325 8D 1D 63			sta GETHEXVAL.Y
  9026 5328 AD 4A 61			lda CONFIG.EDITORBACKGROUNDCOLOR
  9027 532B 8D 1E 63			sta GETHEXVAL.DEFAULT
  9028 532E 20 ED 3E			jsr GETHEXVAL
  9029 5331 AD 1F 63			lda GETHEXVAL.RESULT
  9030 5334 8D 4A 61			sta CONFIG.EDITORBACKGROUNDCOLOR
  9031 5337			l_2255
  9032
  9033 				; optimize OK (artur.pas), line = 1305
  9034
  9035 5337 AD 7A 61			lda C
  9036 533A C9 66			cmp #$66
  9037 533C D0 19			jne l_2273
  9038 533E A9 19			lda #$19
  9039 5340 8D 1C 63			sta GETHEXVAL.X
  9040 5343 A9 08			lda #$08
  9041 5345 8D 1D 63			sta GETHEXVAL.Y
  9042 5348 AD 4B 61			lda CONFIG.EDITORFOREGROUNDCOLOR
  9043 534B 8D 1E 63			sta GETHEXVAL.DEFAULT
  9044 534E 20 ED 3E			jsr GETHEXVAL
  9045 5351 AD 1F 63			lda GETHEXVAL.RESULT
  9046 5354 8D 4B 61			sta CONFIG.EDITORFOREGROUNDCOLOR
  9047 5357			l_2273
  9048
  9049 				; optimize OK (artur.pas), line = 1306
  9050
  9051 5357 AD 7A 61			lda C
  9052 535A C9 63			cmp #$63
  9053 535C D0 0F			jne l_2291
  9054
  9055 				; optimize FAIL (0, artur.pas), line = 1307
  9056
  9057 535E EE 4D 61			inc CONFIG.KEYCODEDISPLAY
  9058
  9059 				; optimize OK (artur.pas), line = 1308
  9060
  9061 5361 AD 4D 61			lda CONFIG.KEYCODEDISPLAY
  9062 5364 C9 03			cmp #$03
  9063 5366 D0 05			jne l_22A8
  9064 5368 A9 00			lda #$00
  9065 536A 8D 4D 61			sta CONFIG.KEYCODEDISPLAY
  9066 536D			l_22A8
  9067 536D			l_2291
  9068
  9069 				; optimize OK (artur.pas), line = 1310
  9070
  9071 536D AD 7A 61			lda C
  9072 5370 C9 73			cmp #$73
  9073 5372 D0 15			jne l_22C3
  9074
  9075 				; optimize OK (artur.pas), line = 1311
  9076
  9077 5374 A9 06			lda #$06
  9078 5376 8D 26 5E			sta B_CRT.CRT_GOTOXY.X
  9079 5379 A9 0E			lda #$0E
  9080 537B 8D 27 5E			sta B_CRT.CRT_GOTOXY.Y
  9081 537E 20 FE 2D			jsr B_CRT.CRT_GOTOXY
  9082
  9083 				; optimize FAIL ('SAVECONFIG', artur.pas), line = 1312
  9084
  9085 5381 20 A9 49			jsr SAVECONFIG
  9086
  9087 				; optimize OK (artur.pas), line = 1313
  9088
  9089 5384 A9 1B			lda #$1B
  9090 5386 8D 7A 61			sta C
  9091 5389			l_22C3
  9092
  9093 				; optimize OK (artur.pas), line = 1315
  9094
  9095 5389 AD 7A 61			lda C
  9096 538C C9 1B			cmp #$1B
  9097 538E F0 03 4C 69 51		jne l_21B7
  9098
  9099 				; optimize FAIL ('CLOSEMODAL', artur.pas), line = 1317
  9100
  9101 5393 20 14 41			jsr CLOSEMODAL
  9102
  9103 				; ------------------------------------------------------------
  9104
  9105 = 0005			OPT_X	= $05
  9106 = 0002			OPT_Y	= $02
  9107 = 001E			OPT_W	= $1E
  9108 = 0014			OPT_H	= $14
  9109 5396			@exit
  9110 					.ifdef @new
  9111 					lda <@VarData
  9112 					sta :ztmp
  9113 					lda >@VarData
  9114 					ldy #@VarDataSize-1
  9115 					jmp @FreeMem
  9116 					els
  9117 5396 60				rts						; ret
  9118 					eif
  9119 				.endl
  9120 5397			l_03E1
  9121
  9122 				; optimize FAIL ('SYSTEM.PAUSE_0479', artur.pas), line = 1332
  9123
  9124 5397 20 A2 2A			jsr SYSTEM.PAUSE_0479
  9125
  9126 539A AD 24 02			lda VVBLKD
  9127 539D 8D 8D 61			sta OLDVBL
  9128 53A0 AD 25 02			lda VVBLKD+1
  9129 53A3 8D 8E 61			sta OLDVBL+1
  9130
  9131 53A6 AD 00 02			lda VDSLST
  9132 53A9 8D 8F 61			sta OLDDLI
  9133 53AC AD 01 02			lda VDSLST+1
  9134 53AF 8D 90 61			sta OLDDLI+1
  9135
  9136 				; optimize OK (artur.pas), line = 1335
  9137
  9138 53B2 A9 F9			lda <VBL
  9139 53B4 A0 05			ldy #5
  9140 53B6 8D 0A D4			sta wsync
  9141 53B9 88				dey
  9142 53BA D0 FD			rne
  9143 53BC 8D 24 02			sta VVBLKD
  9144 53BF A9 30			lda >VBL
  9145 53C1 8D 25 02			sta VVBLKD+1
  9146
  9147 				; optimize OK (artur.pas), line = 1336
  9148
  9149 53C4 A9 8F 8D 00 02		mva <DLI VDSLST
  9150 53C9 A9 30 8D 01 02		mva >DLI VDSLST+1
  9151
  9152 				; optimize OK (artur.pas), line = 1337
  9153
  9154 53CE A9 00			lda #$00
  9155 53D0 8D 30 02			sta ATARI.SDLSTL
  9156 53D3 A9 70			lda #$70
  9157 53D5 8D 31 02			sta ATARI.SDLSTL+1
  9158
  9159 				; optimize OK (artur.pas), line = 1338
  9160
  9161 53D8 A9 C0			lda #$C0
  9162 53DA 8D 0E D4			sta ATARI.NMIEN
  9163
  9164 				; optimize OK (artur.pas), line = 1339
  9165
  9166 53DD A9 00			lda #$00
  9167 53DF 8D 22 5E			sta B_CRT.CRT_INIT_05B3.VRAM_ADDRESS
  9168 53E2 A9 7C			lda #$7C
  9169 53E4 8D 23 5E			sta B_CRT.CRT_INIT_05B3.VRAM_ADDRESS+1
  9170 53E7 A9 28			lda #$28
  9171 53E9 8D 24 5E			sta B_CRT.CRT_INIT_05B3.WIDTH
  9172 53EC A9 18			lda #$18
  9173 53EE 8D 25 5E			sta B_CRT.CRT_INIT_05B3.HEIGHT
  9174 53F1 20 C2 2D			jsr B_CRT.CRT_INIT_05B3
  9175
  9176 				; optimize OK (artur.pas), line = 1341
  9177
  9178 53F4 A9 00			lda #$00
  9179 53F6 85 88			sta SYSTEM.MOVE_0458.SOURCE
  9180 53F8 A9 E0			lda #$E0
  9181 53FA 85 89			sta SYSTEM.MOVE_0458.SOURCE+1
  9182 53FC A9 00			lda #$00
  9183 53FE 85 8C			sta SYSTEM.MOVE_0458.DEST
  9184 5400 A9 74			lda #$74
  9185 5402 85 8D			sta SYSTEM.MOVE_0458.DEST+1
  9186 5404 A9 00			lda #$00
  9187 5406 85 84			sta SYSTEM.MOVE_0458.COUNT
  9188 5408 A9 04			lda #$04
  9189 540A 85 85			sta SYSTEM.MOVE_0458.COUNT+1
  9190 540C				.local +MAIN.SYSTEM.MOVE_0458
  9191 540C				m@INLINE
Macro: MAIN.SYSTEM.MOVE_0458.M@INLINE [Source: artur.a65]
     4 540C 20 74 27			jsr @move
Source: artur.a65
  9192 					.endl
  9193
  9194 				; optimize OK (artur.pas), line = 1342
  9195
  9196 540F A9 74			lda #$74
  9197 5411 8D 9D 61			sta EDITORCHARSET
  9198
  9199 				; optimize OK (artur.pas), line = 1343
  9200
  9201 5414 A9 0A			lda #$0A
  9202 5416 8D D9 02			sta $02D9
  9203
  9204 				; optimize OK (artur.pas), line = 1344
  9205
  9206 5419 A9 05			lda #$05
  9207 541B 8D DA 02			sta $02DA
  9208
  9209 				; optimize OK (artur.pas), line = 1346
  9210
  9211 541E A9 92			lda #$92
  9212 5420 8D 4A 61			sta CONFIG.EDITORBACKGROUNDCOLOR
  9213
  9214 				; optimize OK (artur.pas), line = 1347
  9215
  9216 5423 A9 9A			lda #$9A
  9217 5425 8D 4B 61			sta CONFIG.EDITORFOREGROUNDCOLOR
  9218
  9219 				; optimize FAIL ('CLEAREDIT', artur.pas), line = 1349
  9220
  9221 5428 20 A4 35			jsr CLEAREDIT
  9222
  9223 				; optimize FAIL ('INITPMG', artur.pas), line = 1350
  9224
  9225 542B 20 D1 32			jsr INITPMG
  9226
  9227 				; optimize FAIL ('INITCURSOR', artur.pas), line = 1351
  9228
  9229 542E 20 DE 3A			jsr INITCURSOR
  9230
  9231 				; optimize FAIL ('INITUNDOSTORAGE', artur.pas), line = 1352
  9232
  9233 5431 20 2D 33			jsr INITUNDOSTORAGE
  9234
  9235 				; optimize FAIL ('LOADCONFIG', artur.pas), line = 1353
  9236
  9237 5434 20 0D 49			jsr LOADCONFIG
  9238
  9239 				; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1355
  9240
  9241 5437 20 6C 38			jsr SHOWMENUBAR
  9242
  9243 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1356
  9244
  9245 543A 20 C0 37			jsr SHOWSTATUS
  9246
  9247 				; optimize FAIL ('SHOWHELP', artur.pas), line = 1357
  9248
  9249 543D 20 B7 4B			jsr SHOWHELP
  9250
  9251 				; --- RepeatUntilProlog
  9252 5440			l_2309
  9253
  9254 				; optimize FAIL ('SYSTEM.PAUSE_0479', artur.pas), line = 1360
  9255
  9256 5440 20 A2 2A			jsr SYSTEM.PAUSE_0479
  9257
  9258 				; optimize OK (artur.pas), line = 1364
  9259
  9260 5443 AD 8C 61			lda KEYREPEATCOUNTER
  9261 5446 F0 03 4C 6C 55		jne l_231C
  9262
  9263 				; optimize FAIL ('B_CRT.CRT_STARTPRESSED', artur.pas), line = 1365
  9264
  9265 544B 20 A4 2F			jsr B_CRT.CRT_STARTPRESSED
  9266 544E AD 30 61			lda B_CRT.CRT_STARTPRESSED.RESULT
  9267 5451 F0 03			jeq l_2327
  9268 5453 20 6E 4D			jsr SHOWIOMENU
  9269 5456			l_2327
  9270
  9271 				; optimize FAIL ('B_CRT.CRT_SELECTPRESSED', artur.pas), line = 1366
  9272
  9273 5456 20 B3 2F			jsr B_CRT.CRT_SELECTPRESSED
  9274 5459 AD 31 61			lda B_CRT.CRT_SELECTPRESSED.RESULT
  9275 545C F0 03			jeq l_2335
  9276 545E 20 E5 40			jsr NEXTMODE
  9277 5461			l_2335
  9278
  9279 				; optimize FAIL ('B_CRT.CRT_OPTIONPRESSED', artur.pas), line = 1367
  9280
  9281 5461 20 C2 2F			jsr B_CRT.CRT_OPTIONPRESSED
  9282 5464 AD 32 61			lda B_CRT.CRT_OPTIONPRESSED.RESULT
  9283 5467 F0 03			jeq l_2343
  9284 5469 20 1A 51			jsr SHOWSETTINGS
  9285 546C			l_2343
  9286
  9287 				; optimize FAIL ('B_CRT.CRT_HELPPRESSED', artur.pas), line = 1368
  9288
  9289 546C 20 D1 2F			jsr B_CRT.CRT_HELPPRESSED
  9290 546F AD 33 61			lda B_CRT.CRT_HELPPRESSED.RESULT
  9291 5472 F0 03			jeq l_2351
  9292 5474 20 B7 4B			jsr SHOWHELP
  9293 5477			l_2351
  9294
  9295 				; optimize OK (artur.pas), line = 1370
  9296
  9297 5477 AD 98 61			lda KEYDOWN
  9298 547A D0 03 4C 4B 55		jeq l_2361
  9299
  9300 				; optimize OK (artur.pas), line = 1372
  9301
  9302 547F A9 80			lda #$80
  9303 5481 20 53 3E			jsr CHECKCURSORKEYS
  9304
  9305 				; optimize OK (artur.pas), line = 1373
  9306
  9307 5484 AD 4C 61			lda CONFIG.ARROWSRAW
  9308 5487 F0 05			jeq l_2370
  9309 5489 A9 00			lda #$00
  9310 548B 20 53 3E			jsr CHECKCURSORKEYS
  9311 548E			l_2370
  9312
  9313 				; optimize OK (artur.pas), line = 1375
  9314
  9315 548E AD 7B 61			lda KEY
  9316 5491 C9 27			cmp #$27
  9317 5493 D0 1F			jne l_2387
  9318
  9319 				; optimize OK (artur.pas), line = 1376
  9320
  9321 5495 A0 01			ldy #1
  9322 5497 AD 9A 61			lda INVERT
  9323 549A F0 01			beq @+
  9324 549C 88				dey
  9325 				@
  9326 549D 98				tya
  9327 549E 8D 9A 61			sta INVERT
  9328
  9329 				; optimize OK (artur.pas), line = 1377
  9330
  9331 54A1 AD 8B 61			lda BRUSH
  9332 54A4 49 80			eor #$80
  9333 54A6 8D 8B 61			sta BRUSH
  9334
  9335 				; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1378
  9336
  9337 54A9 20 6C 38			jsr SHOWMENUBAR
  9338
  9339 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1379
  9340
  9341 54AC 20 C0 37			jsr SHOWSTATUS
  9342
  9343 				; optimize OK (artur.pas), line = 1380
  9344
  9345 54AF A9 00			lda #$00
  9346 54B1 8D 98 61			sta KEYDOWN
  9347 54B4			l_2387
  9348
  9349 				; optimize OK (artur.pas), line = 1383
  9350
  9351 54B4 AD 7B 61			lda KEY
  9352 54B7 C9 3C			cmp #$3C
  9353 54B9 D0 11			jne l_23B5
  9354
  9355 				; optimize FAIL ('BRUSHSELECTOR', artur.pas), line = 1384
  9356
  9357 54BB 20 68 42			jsr BRUSHSELECTOR
  9358 54BE AD 2C 63			lda BRUSHSELECTOR.RESULT
  9359 54C1 8D 8B 61			sta BRUSH
  9360
  9361 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1385
  9362
  9363 54C4 20 C0 37			jsr SHOWSTATUS
  9364
  9365 				; optimize OK (artur.pas), line = 1386
  9366
  9367 54C7 A9 00			lda #$00
  9368 54C9 8D 98 61			sta KEYDOWN
  9369 54CC			l_23B5
  9370
  9371 				; optimize OK (artur.pas), line = 1389
  9372
  9373 54CC AD 7B 61			lda KEY
  9374 54CF C9 7C			cmp #$7C
  9375 54D1 D0 18			jne l_23D3
  9376
  9377 				; optimize OK (artur.pas), line = 1390
  9378
  9379 54D3 AC 95 61			ldy CURSOR
  9380 54D6 A9 7C			lda #$7C
  9381 54D8 18 6D 96 61			add CURSOR+1
  9382 54DC 85 81			sta :bp+1
  9383 54DE B1 80			lda (:bp),y
  9384 54E0 8D 8B 61			sta BRUSH
  9385
  9386 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1391
  9387
  9388 54E3 20 C0 37			jsr SHOWSTATUS
  9389
  9390 				; optimize OK (artur.pas), line = 1392
  9391
  9392 54E6 A9 00			lda #$00
  9393 54E8 8D 98 61			sta KEYDOWN
  9394 54EB			l_23D3
  9395
  9396 				; optimize OK (artur.pas), line = 1395
  9397
  9398 54EB AD 7B 61			lda KEY
  9399 54EE C9 2C			cmp #$2C
  9400 54F0 D0 0B			jne l_23F7
  9401
  9402 				; optimize FAIL ('HISTORYBACK', artur.pas), line = 1396
  9403
  9404 54F2 20 61 41			jsr HISTORYBACK
  9405
  9406 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1397
  9407
  9408 54F5 20 C0 37			jsr SHOWSTATUS
  9409
  9410 				; optimize OK (artur.pas), line = 1398
  9411
  9412 54F8 A9 00			lda #$00
  9413 54FA 8D 98 61			sta KEYDOWN
  9414 54FD			l_23F7
  9415
  9416 				; optimize OK (artur.pas), line = 1401
  9417
  9418 54FD AD 7B 61			lda KEY
  9419 5500 C9 6C			cmp #$6C
  9420 5502 D0 0B			jne l_2412
  9421
  9422 				; optimize FAIL ('HISTORYFWD', artur.pas), line = 1402
  9423
  9424 5504 20 7D 41			jsr HISTORYFWD
  9425
  9426 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1403
  9427
  9428 5507 20 C0 37			jsr SHOWSTATUS
  9429
  9430 				; optimize OK (artur.pas), line = 1404
  9431
  9432 550A A9 00			lda #$00
  9433 550C 8D 98 61			sta KEYDOWN
  9434 550F			l_2412
  9435
  9436 				; optimize OK (artur.pas), line = 1407
  9437
  9438 550F AD 7B 61			lda KEY
  9439 5512 C9 5C			cmp #$5C
  9440 5514 D0 11			jne l_242D
  9441
  9442 				; optimize OK (artur.pas), line = 1408
  9443
  9444 5516 A0 01			ldy #1
  9445 5518 AD 9C 61			lda STATUSCUSTOMCHARSET
  9446 551B F0 01			beq @+
  9447 551D 88				dey
  9448 				@
  9449 551E 98				tya
  9450 551F 8D 9C 61			sta STATUSCUSTOMCHARSET
  9451
  9452 				; optimize OK (artur.pas), line = 1409
  9453
  9454 5522 A9 00			lda #$00
  9455 5524 8D 98 61			sta KEYDOWN
  9456 5527			l_242D
  9457
  9458 				; optimize OK (artur.pas), line = 1412
  9459
  9460 5527 AD 7B 61			lda KEY
  9461 552A C9 B4			cmp #$B4
  9462 552C D0 0B			jne l_244F
  9463
  9464 				; optimize FAIL ('TRYUNDO', artur.pas), line = 1413
  9465
  9466 552E 20 46 35			jsr TRYUNDO
  9467
  9468 				; optimize FAIL ('READCURSORCHAR', artur.pas), line = 1414
  9469
  9470 5531 20 52 36			jsr READCURSORCHAR
  9471
  9472 				; optimize OK (artur.pas), line = 1415
  9473
  9474 5534 A9 00			lda #$00
  9475 5536 8D 98 61			sta KEYDOWN
  9476 5539			l_244F
  9477
  9478 				; optimize OK (artur.pas), line = 1417
  9479
  9480 5539 AD 7B 61			lda KEY
  9481 553C C9 F4			cmp #$F4
  9482 553E D0 0B			jne l_246A
  9483
  9484 				; optimize FAIL ('TRYREDO', artur.pas), line = 1418
  9485
  9486 5540 20 7C 35			jsr TRYREDO
  9487
  9488 				; optimize FAIL ('READCURSORCHAR', artur.pas), line = 1419
  9489
  9490 5543 20 52 36			jsr READCURSORCHAR
  9491
  9492 				; optimize OK (artur.pas), line = 1420
  9493
  9494 5546 A9 00			lda #$00
  9495 5548 8D 98 61			sta KEYDOWN
  9496 554B			l_246A
  9497 554B			l_2361
  9498
  9499 				; optimize FAIL ('READJOYSTICK', artur.pas), line = 1425
  9500
  9501 554B 20 92 32			jsr READJOYSTICK
  9502
  9503 				; optimize OK (artur.pas), line = 1427
  9504
  9505 554E AD 88 61			lda JOYX
  9506 5551 D0 05			jne l_2494x
  9507 5553 AD 89 61			lda JOYY
  9508 5556 F0 14			jeq l_2494
  9509 5558			l_2494x
  9510
  9511 				; optimize OK (artur.pas), line = 1428
  9512
  9513 5558 AD 88 61			lda JOYX
  9514 555B 8D 14 63			sta MOVECURSOR.DX
  9515 555E AD 89 61			lda JOYY
  9516 5561 8D 15 63			sta MOVECURSOR.DY
  9517 5564 20 5C 3D			jsr MOVECURSOR
  9518
  9519 				; optimize OK (artur.pas), line = 1429
  9520
  9521 5567 A9 04			lda #$04
  9522 5569 8D 8C 61			sta KEYREPEATCOUNTER
  9523 556C			l_2494
  9524 556C			l_231C
  9525
  9526 				; optimize OK (artur.pas), line = 1436
  9527
  9528 556C AD 91 61			lda MODE
  9529 556F F0 03 4C 31 56		jne l_24B6
  9530
  9531 				; optimize OK (artur.pas), line = 1437
  9532
  9533 5574 AD 8A 61			lda JOYFIRE
  9534 5577 D0 13			jne l_24C9
  9535
  9536 				; optimize FAIL ('POKEBRUSH', artur.pas), line = 1438
  9537
  9538 5579 20 FA 41			jsr POKEBRUSH
  9539
  9540 				; optimize OK (artur.pas), line = 1439
  9541
  9542 557C AD 8B 61			lda BRUSH
  9543 557F 20 D7 41			jsr USEBRUSH
  9544
  9545 				; optimize OK (artur.pas), line = 1440
  9546
  9547 5582 A9 01			lda #$01
  9548 5584 8D 8A 61			sta JOYFIRE
  9549
  9550 				; optimize OK (artur.pas), line = 1441
  9551
  9552 5587 A9 00			lda #$00
  9553 5589 8D 98 61			sta KEYDOWN
  9554 558C			l_24C9
  9555
  9556 				; optimize OK (artur.pas), line = 1443
  9557
  9558 558C AD 98 61			lda KEYDOWN
  9559 558F F0 7A			jeq l_24E5
  9560
  9561 				; optimize OK (artur.pas), line = 1444
  9562
  9563 5591 AD 7B 61			lda KEY
  9564 5594 C9 0C			cmp #$0C
  9565 5596 D0 20			jne l_24F8
  9566
  9567 				; optimize FAIL ('POKEBRUSH', artur.pas), line = 1445
  9568
  9569 5598 20 FA 41			jsr POKEBRUSH
  9570
  9571 				; optimize OK (artur.pas), line = 1446
  9572
  9573 559B AD 8B 61			lda BRUSH
  9574 559E 20 D7 41			jsr USEBRUSH
  9575
  9576 				; optimize OK (artur.pas), line = 1447
  9577
  9578 55A1 AD 9B 61			lda CURSORFORWARD
  9579 55A4 F0 0D			jeq l_250A
  9580 55A6 A9 01			lda #$01
  9581 55A8 8D 14 63			sta MOVECURSOR.DX
  9582 55AB A9 00			lda #$00
  9583 55AD 8D 15 63			sta MOVECURSOR.DY
  9584 55B0 20 5C 3D			jsr MOVECURSOR
  9585 55B3			l_250A
  9586
  9587 				; optimize OK (artur.pas), line = 1448
  9588
  9589 55B3 A9 00			lda #$00
  9590 55B5 8D 98 61			sta KEYDOWN
  9591 55B8			l_24F8
  9592
  9593 				; optimize OK (artur.pas), line = 1450
  9594
  9595 55B8 AD 7B 61			lda KEY
  9596 55BB C9 77			cmp #$77
  9597 55BD D0 14			jne l_2528
  9598
  9599 				; optimize OK (artur.pas), line = 1451
  9600
  9601 55BF A0 01			ldy #1
  9602 55C1 AD 9B 61			lda CURSORFORWARD
  9603 55C4 F0 01			beq @+
  9604 55C6 88				dey
  9605 				@
  9606 55C7 98				tya
  9607 55C8 8D 9B 61			sta CURSORFORWARD
  9608
  9609 				; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1452
  9610
  9611 55CB 20 6C 38			jsr SHOWMENUBAR
  9612
  9613 				; optimize OK (artur.pas), line = 1453
  9614
  9615 55CE A9 00			lda #$00
  9616 55D0 8D 98 61			sta KEYDOWN
  9617 55D3			l_2528
  9618
  9619 				; optimize OK (artur.pas), line = 1455
  9620
  9621 55D3 AD 7B 61			lda KEY
  9622 55D6 C9 21			cmp #$21
  9623 55D8 D0 15			jne l_254B
  9624
  9625 				; optimize FAIL ('WRITESPACE', artur.pas), line = 1456
  9626
  9627 55DA 20 3F 42			jsr WRITESPACE
  9628
  9629 				; optimize OK (artur.pas), line = 1457
  9630
  9631 55DD AD 9B 61			lda CURSORFORWARD
  9632 55E0 F0 0D			jeq l_2559
  9633 55E2 A9 01			lda #$01
  9634 55E4 8D 14 63			sta MOVECURSOR.DX
  9635 55E7 A9 00			lda #$00
  9636 55E9 8D 15 63			sta MOVECURSOR.DY
  9637 55EC 20 5C 3D			jsr MOVECURSOR
  9638 55EF			l_2559
  9639 55EF			l_254B
  9640
  9641 				; optimize OK (artur.pas), line = 1459
  9642
  9643 55EF AD 9B 61			lda CURSORFORWARD
  9644 55F2 F0 17			jeq l_256D
  9645
  9646 				; optimize OK (artur.pas), line = 1460
  9647
  9648 55F4 AD 7B 61			lda KEY
  9649 55F7 C9 34			cmp #$34
  9650 55F9 D0 10			jne l_2580
  9651
  9652 				; optimize OK (artur.pas), line = 1461
  9653
  9654 55FB A9 FF			lda #$FF
  9655 55FD 8D 14 63			sta MOVECURSOR.DX
  9656 5600 A9 00			lda #$00
  9657 5602 8D 15 63			sta MOVECURSOR.DY
  9658 5605 20 5C 3D			jsr MOVECURSOR
  9659
  9660 				; optimize FAIL ('WRITESPACE', artur.pas), line = 1462
  9661
  9662 5608 20 3F 42			jsr WRITESPACE
  9663 560B			l_2580
  9664 560B			l_256D
  9665 560B			l_24E5
  9666
  9667 				; optimize OK (artur.pas), line = 1467
  9668
  9669 560B AD 98 61			lda KEYDOWN
  9670 560E F0 21			jeq l_2597
  9671
  9672 				; optimize FAIL ('SETBRUSHFROMKEY', artur.pas), line = 1468
  9673
  9674 5610 20 13 42			jsr SETBRUSHFROMKEY
  9675
  9676 				; optimize FAIL ('POKEBRUSH', artur.pas), line = 1469
  9677
  9678 5613 20 FA 41			jsr POKEBRUSH
  9679
  9680 				; optimize OK (artur.pas), line = 1470
  9681
  9682 5616 AD 8B 61			lda BRUSH
  9683 5619 20 D7 41			jsr USEBRUSH
  9684
  9685 				; optimize OK (artur.pas), line = 1471
  9686
  9687 561C AD 9B 61			lda CURSORFORWARD
  9688 561F F0 0D			jeq l_25AA
  9689 5621 A9 01			lda #$01
  9690 5623 8D 14 63			sta MOVECURSOR.DX
  9691 5626 A9 00			lda #$00
  9692 5628 8D 15 63			sta MOVECURSOR.DY
  9693 562B 20 5C 3D			jsr MOVECURSOR
  9694 562E			l_25AA
  9695
  9696 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1472
  9697
  9698 562E 20 C0 37			jsr SHOWSTATUS
  9699 5631			l_2597
  9700 5631			l_24B6
  9701
  9702 				; optimize OK (artur.pas), line = 1479
  9703
  9704 5631 AD 91 61			lda MODE
  9705 5634 C9 01			cmp #$01
  9706 5636 F0 03 4C 2B 57		jne l_25C7
  9707
  9708 				; optimize OK (artur.pas), line = 1480
  9709
  9710 563B AD 8A 61			lda JOYFIRE
  9711 563E D0 0D			jne l_25DA
  9712
  9713 				; optimize OK (artur.pas), line = 1481
  9714
  9715 5640 A9 01			lda #$01
  9716 5642 8D 8A 61			sta JOYFIRE
  9717
  9718 				; optimize OK (artur.pas), line = 1482
  9719
  9720 5645 8D 99 61			sta PENDOWN
  9721
  9722 				; optimize OK (artur.pas), line = 1483
  9723
  9724 5648 A9 14			lda #$14
  9725 564A 8D 8C 61			sta KEYREPEATCOUNTER
  9726 564D			l_25DA
  9727
  9728 				; optimize OK (artur.pas), line = 1485
  9729
  9730 564D AD 98 61			lda KEYDOWN
  9731 5650 F0 60			jeq l_25F5
  9732
  9733 				; optimize OK (artur.pas), line = 1486
  9734
  9735 5652 AD 7B 61			lda KEY
  9736 5655 C9 1C			cmp #$1C
  9737 5657 D0 08			jne l_2608
  9738
  9739 				; optimize FAIL ('CLEARSELECTION', artur.pas), line = 1487
  9740
  9741 5659 20 38 3E			jsr CLEARSELECTION
  9742
  9743 				; optimize OK (artur.pas), line = 1488
  9744
  9745 565C A9 00			lda #$00
  9746 565E 8D 98 61			sta KEYDOWN
  9747 5661			l_2608
  9748
  9749 				; optimize OK (artur.pas), line = 1490
  9750
  9751 5661 AD 7B 61			lda KEY
  9752 5664 C9 0C			cmp #$0C
  9753 5666 D0 0A			jne l_2622
  9754
  9755 				; optimize OK (artur.pas), line = 1491
  9756
  9757 5668 A9 01			lda #$01
  9758 566A 8D 99 61			sta PENDOWN
  9759
  9760 				; optimize OK (artur.pas), line = 1492
  9761
  9762 566D A9 00			lda #$00
  9763 566F 8D 98 61			sta KEYDOWN
  9764 5672			l_2622
  9765
  9766 				; optimize OK (artur.pas), line = 1495
  9767
  9768 5672 AD 7B 61			lda KEY
  9769 5675 C9 21			cmp #$21
  9770 5677 D0 09			jne l_263F
  9771
  9772 				; optimize FAIL ('WRITESPACE', artur.pas), line = 1496
  9773
  9774 5679 20 3F 42			jsr WRITESPACE
  9775
  9776 				; optimize FAIL ('CLEARSELECTION', artur.pas), line = 1497
  9777
  9778 567C 20 38 3E			jsr CLEARSELECTION
  9779
  9780 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1498
  9781
  9782 567F 20 C0 37			jsr SHOWSTATUS
  9783 5682			l_263F
  9784
  9785 				; optimize OK (artur.pas), line = 1500
  9786
  9787 5682 AD 7A 61			lda C
  9788 5685 C9 64			cmp #$64
  9789 5687 D0 05			jne l_2657
  9790 5689 A9 00			lda #$00
  9791 568B 20 D3 40			jsr SELECTTOOL
  9792 568E			l_2657
  9793
  9794 				; optimize OK (artur.pas), line = 1501
  9795
  9796 568E AD 7A 61			lda C
  9797 5691 C9 6C			cmp #$6C
  9798 5693 D0 05			jne l_266E
  9799 5695 A9 01			lda #$01
  9800 5697 20 D3 40			jsr SELECTTOOL
  9801 569A			l_266E
  9802
  9803 				; optimize OK (artur.pas), line = 1502
  9804
  9805 569A AD 7A 61			lda C
  9806 569D C9 66			cmp #$66
  9807 569F D0 05			jne l_2685
  9808 56A1 A9 02			lda #$02
  9809 56A3 20 D3 40			jsr SELECTTOOL
  9810 56A6			l_2685
  9811
  9812 				; optimize OK (artur.pas), line = 1503
  9813
  9814 56A6 AD 7A 61			lda C
  9815 56A9 C9 62			cmp #$62
  9816 56AB D0 05			jne l_269C
  9817 56AD A9 03			lda #$03
  9818 56AF 20 D3 40			jsr SELECTTOOL
  9819 56B2			l_269C
  9820 56B2			l_25F5
  9821
  9822 				; optimize OK (artur.pas), line = 1505
  9823
  9824 56B2 AD 98 61			lda KEYDOWN
  9825 56B5 F0 06			jeq l_26AF
  9826
  9827 				; optimize FAIL ('SETBRUSHFROMKEY', artur.pas), line = 1506
  9828
  9829 56B7 20 13 42			jsr SETBRUSHFROMKEY
  9830
  9831 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1507
  9832
  9833 56BA 20 C0 37			jsr SHOWSTATUS
  9834 56BD			l_26AF
  9835
  9836 				; optimize OK (artur.pas), line = 1510
  9837
  9838 56BD AD 99 61			lda PENDOWN
  9839 56C0 F0 69			jeq l_26C0
  9840
  9841 				; optimize OK (artur.pas), line = 1511
  9842
  9843 56C2 AD 92 61			lda DRAWTOOL
  9844 56C5 D0 0C			jne l_26D3
  9845
  9846 				; optimize FAIL ('POKEBRUSH', artur.pas), line = 1512
  9847
  9848 56C7 20 FA 41			jsr POKEBRUSH
  9849
  9850 				; optimize OK (artur.pas), line = 1513
  9851
  9852 56CA AD 8B 61			lda BRUSH
  9853 56CD 20 D7 41			jsr USEBRUSH
  9854 56D0 4C 26 57			jmp l_26E2
  9855 56D3			l_26D3
  9856
  9857 				; optimize OK (artur.pas), line = 1515
  9858
  9859 56D3 AD 9E 61			lda P1X
  9860 56D6 C9 FF			cmp #$FF
  9861 56D8 D0 0F			jne l_26F4
  9862
  9863 				; optimize OK (artur.pas), line = 1516
  9864
  9865 56DA AD 93 61			lda CURSORX
  9866 56DD 8D 9E 61			sta P1X
  9867
  9868 				; optimize OK (artur.pas), line = 1517
  9869
  9870 56E0 AD 94 61			lda CURSORY
  9871 56E3 8D A0 61			sta P1Y
  9872 56E6 4C 26 57			jmp l_270A
  9873 56E9			l_26F4
  9874
  9875 				; optimize OK (artur.pas), line = 1519
  9876
  9877 56E9 AD 9F 61			lda P2X
  9878 56EC C9 FF			cmp #$FF
  9879 56EE D0 36			jne l_271C
  9880
  9881 				; optimize OK (artur.pas), line = 1520
  9882
  9883 56F0 AD 93 61			lda CURSORX
  9884 56F3 8D 9F 61			sta P2X
  9885
  9886 				; optimize OK (artur.pas), line = 1521
  9887
  9888 56F6 AD 94 61			lda CURSORY
  9889 56F9 8D A1 61			sta P2Y
  9890
  9891 				; optimize OK (artur.pas), line = 1522
  9892
  9893 56FC AD 92 61			lda DRAWTOOL
  9894 56FF C9 01			cmp #$01
  9895 5701 D0 03			jne l_273B
  9896 5703 20 B6 3B			jsr DRAWLINE
  9897 5706			l_273B
  9898
  9899 				; optimize OK (artur.pas), line = 1523
  9900
  9901 5706 AD 92 61			lda DRAWTOOL
  9902 5709 C9 02			cmp #$02
  9903 570B D0 03			jne l_2751
  9904 570D 20 20 47			jsr DRAWFRAME
  9905 5710			l_2751
  9906
  9907 				; optimize OK (artur.pas), line = 1524
  9908
  9909 5710 AD 92 61			lda DRAWTOOL
  9910 5713 C9 03			cmp #$03
  9911 5715 D0 03			jne l_2767
  9912 5717 20 AB 45			jsr DRAWBLOCK
  9913 571A			l_2767
  9914
  9915 				; optimize FAIL ('READCURSORCHAR', artur.pas), line = 1525
  9916
  9917 571A 20 52 36			jsr READCURSORCHAR
  9918
  9919 				; optimize OK (artur.pas), line = 1526
  9920
  9921 571D AD 8B 61			lda BRUSH
  9922 5720 20 D7 41			jsr USEBRUSH
  9923
  9924 				; optimize FAIL ('CLEARSELECTION', artur.pas), line = 1527
  9925
  9926 5723 20 38 3E			jsr CLEARSELECTION
  9927 5726			l_271C
  9928 5726			l_270A
  9929 5726			l_26E2
  9930
  9931 				; optimize OK (artur.pas), line = 1530
  9932
  9933 5726 A9 00			lda #$00
  9934 5728 8D 99 61			sta PENDOWN
  9935 572B			l_26C0
  9936 572B			l_25C7
  9937
  9938 				; optimize OK (artur.pas), line = 1537
  9939
  9940 572B AD 91 61			lda MODE
  9941 572E C9 02			cmp #$02
  9942 5730 F0 03 4C 00 58		jne l_278D
  9943
  9944 				; optimize OK (artur.pas), line = 1538
  9945
  9946 5735 AD 8A 61			lda JOYFIRE
  9947 5738 D0 0D			jne l_27A0
  9948
  9949 				; optimize OK (artur.pas), line = 1539
  9950
  9951 573A A9 01			lda #$01
  9952 573C 8D 8A 61			sta JOYFIRE
  9953
  9954 				; optimize OK (artur.pas), line = 1540
  9955
  9956 573F 8D 99 61			sta PENDOWN
  9957
  9958 				; optimize OK (artur.pas), line = 1541
  9959
  9960 5742 A9 14			lda #$14
  9961 5744 8D 8C 61			sta KEYREPEATCOUNTER
  9962 5747			l_27A0
  9963
  9964 				; optimize OK (artur.pas), line = 1543
  9965
  9966 5747 AD 98 61			lda KEYDOWN
  9967 574A F0 66			jeq l_27BB
  9968
  9969 				; optimize OK (artur.pas), line = 1544
  9970
  9971 574C AD 7B 61			lda KEY
  9972 574F C9 1C			cmp #$1C
  9973 5751 D0 0B			jne l_27CE
  9974
  9975 				; optimize FAIL ('CLEARSELECTION', artur.pas), line = 1545
  9976
  9977 5753 20 38 3E			jsr CLEARSELECTION
  9978
  9979 				; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1546
  9980
  9981 5756 20 6C 38			jsr SHOWMENUBAR
  9982
  9983 				; optimize OK (artur.pas), line = 1547
  9984
  9985 5759 A9 00			lda #$00
  9986 575B 8D 98 61			sta KEYDOWN
  9987 575E			l_27CE
  9988
  9989 				; optimize OK (artur.pas), line = 1549
  9990
  9991 575E AD 7B 61			lda KEY
  9992 5761 C9 0C			cmp #$0C
  9993 5763 D0 0A			jne l_27E9
  9994
  9995 				; optimize OK (artur.pas), line = 1550
  9996
  9997 5765 A9 01			lda #$01
  9998 5767 8D 99 61			sta PENDOWN
  9999
 10000 				; optimize OK (artur.pas), line = 1551
 10001
 10002 576A A9 00			lda #$00
 10003 576C 8D 98 61			sta KEYDOWN
 10004 576F			l_27E9
 10005
 10006 				; optimize OK (artur.pas), line = 1553
 10007
 10008 576F AD 9F 61			lda P2X
 10009 5772 C9 FF			cmp #$FF
 10010 5774 F0 3C			jeq l_2806
 10011
 10012 				; optimize OK (artur.pas), line = 1554
 10013
 10014 5776 AD 7A 61			lda C
 10015 5779 C9 63			cmp #$63
 10016 577B D0 05			jne l_2819
 10017 577D A9 00			lda #$00
 10018 577F 20 E4 45			jsr COPYBLOCK
 10019 5782			l_2819
 10020
 10021 				; optimize OK (artur.pas), line = 1555
 10022
 10023 5782 AD 7A 61			lda C
 10024 5785 C9 6D			cmp #$6D
 10025 5787 D0 05			jne l_2830
 10026 5789 A9 01			lda #$01
 10027 578B 20 E4 45			jsr COPYBLOCK
 10028 578E			l_2830
 10029
 10030 				; optimize OK (artur.pas), line = 1556
 10031
 10032 578E AD 7A 61			lda C
 10033 5791 C9 73			cmp #$73
 10034 5793 D0 03			jne l_2847
 10035 5795 20 D1 49			jsr SAVEBLOCK
 10036 5798			l_2847
 10037
 10038 				; optimize OK (artur.pas), line = 1557
 10039
 10040 5798 AD 7A 61			lda C
 10041 579B C9 69			cmp #$69
 10042 579D D0 03			jne l_285D
 10043 579F 20 28 45			jsr INVERTBLOCK
 10044 57A2			l_285D
 10045
 10046 				; optimize OK (artur.pas), line = 1558
 10047
 10048 57A2 AD 7A 61			lda C
 10049 57A5 C9 66			cmp #$66
 10050 57A7 D0 03			jne l_2873
 10051 57A9 20 AB 45			jsr DRAWBLOCK
 10052 57AC			l_2873
 10053
 10054 				; optimize FAIL ('READCURSORCHAR', artur.pas), line = 1559
 10055
 10056 57AC 20 52 36			jsr READCURSORCHAR
 10057
 10058 				; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1560
 10059
 10060 57AF 20 C0 37			jsr SHOWSTATUS
 10061 57B2			l_2806
 10062 57B2			l_27BB
 10063
 10064 				; optimize OK (artur.pas), line = 1565
 10065
 10066 57B2 AD 99 61			lda PENDOWN
 10067 57B5 F0 49			jeq l_2889
 10068
 10069 				; optimize OK (artur.pas), line = 1566
 10070
 10071 57B7 AD 9E 61			lda P1X
 10072 57BA C9 FF			cmp #$FF
 10073 57BC D0 0F			jne l_289C
 10074
 10075 				; optimize OK (artur.pas), line = 1567
 10076
 10077 57BE AD 93 61			lda CURSORX
 10078 57C1 8D 9E 61			sta P1X
 10079
 10080 				; optimize OK (artur.pas), line = 1568
 10081
 10082 57C4 AD 94 61			lda CURSORY
 10083 57C7 8D A0 61			sta P1Y
 10084 57CA 4C FB 57			jmp l_28B2
 10085 57CD			l_289C
 10086
 10087 				; optimize OK (artur.pas), line = 1570
 10088
 10089 57CD AD 9F 61			lda P2X
 10090 57D0 C9 FF			cmp #$FF
 10091 57D2 D0 21			jne l_28C4
 10092
 10093 				; optimize OK (artur.pas), line = 1571
 10094
 10095 57D4 AD 93 61			lda CURSORX
 10096 57D7 8D 9F 61			sta P2X
 10097
 10098 				; optimize OK (artur.pas), line = 1572
 10099
 10100 57DA AD 94 61			lda CURSORY
 10101 57DD 8D A1 61			sta P2Y
 10102
 10103 				; optimize OK (artur.pas), line = 1573
 10104
 10105 57E0 AD 93 61			lda CURSORX
 10106 57E3 8D F9 62			sta XORCURSOR.X
 10107 57E6 AD 94 61			lda CURSORY
 10108 57E9 8D FA 62			sta XORCURSOR.Y
 10109 57EC 20 44 3A			jsr XORCURSOR
 10110
 10111 				; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1574
 10112
 10113 57EF 20 6C 38			jsr SHOWMENUBAR
 10114 57F2 4C FB 57			jmp l_28E2
 10115 57F5			l_28C4
 10116
 10117 				; optimize FAIL ('CLEARSELECTION', artur.pas), line = 1576
 10118
 10119 57F5 20 38 3E			jsr CLEARSELECTION
 10120
 10121 				; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1577
 10122
 10123 57F8 20 6C 38			jsr SHOWMENUBAR
 10124 57FB			l_28E2
 10125 57FB			l_28B2
 10126
 10127 				; optimize OK (artur.pas), line = 1580
 10128
 10129 57FB A9 00			lda #$00
 10130 57FD 8D 99 61			sta PENDOWN
 10131 5800			l_2889
 10132 5800			l_278D
 10133
 10134 				; optimize OK (artur.pas), line = 1584
 10135
 10136 5800 AD 98 61			lda KEYDOWN
 10137 5803 F0 05			jeq l_28F8
 10138 5805 A9 00			lda #$00
 10139 5807 8D 98 61			sta KEYDOWN
 10140 580A			l_28F8
 10141
 10142 				; optimize FAIL ('CRT.KEYPRESSED', artur.pas), line = 1586
 10143
 10144 580A 20 B4 2A			jsr CRT.KEYPRESSED
 10145 580D AD C8 58			lda CRT.KEYPRESSED.RESULT
 10146 5810 F0 14			jeq l_2909
 10147
 10148 				; optimize FAIL ('CRT.READKEY', artur.pas), line = 1587
 10149
 10150 5812 20 AD 2A			jsr CRT.READKEY
 10151 5815 AD C7 58			lda CRT.READKEY.RESULT
 10152 5818 8D 7A 61			sta C
 10153
 10154 				; optimize OK (artur.pas), line = 1588
 10155
 10156 581B AD 09 D2			lda ATARI.KBCODE
 10157 581E 8D 7B 61			sta KEY
 10158
 10159 				; optimize OK (artur.pas), line = 1589
 10160
 10161 5821 A9 01			lda #$01
 10162 5823 8D 98 61			sta KEYDOWN
 10163 5826			l_2909
 10164
 10165 				; optimize OK (artur.pas), line = 1592
 10166
 10167 5826 AD 91 61			lda MODE
 10168 5829 C9 FF			cmp #$FF
 10169 582B F0 03 4C 40 54		jne l_2309
 10170
 10171 				; optimize FAIL ('SYSTEM.PAUSE_0479', artur.pas), line = 1596
 10172
 10173 5830 20 A2 2A			jsr SYSTEM.PAUSE_0479
 10174
 10175 				; optimize FAIL ('B_PMG.PMG_DISABLE', artur.pas), line = 1597
 10176
 10177 5833 20 65 30			jsr B_PMG.PMG_DISABLE
 10178
 10179 				; optimize OK (artur.pas), line = 1598
 10180
 10181 5836 AD 8D 61			lda OLDVBL
 10182 5839 A0 05			ldy #5
 10183 583B 8D 0A D4			sta wsync
 10184 583E 88				dey
 10185 583F D0 FD			rne
 10186 5841 8D 24 02			sta VVBLKD
 10187 5844 AD 8E 61			lda OLDVBL+1
 10188 5847 8D 25 02			sta VVBLKD+1
 10189
 10190 				; optimize OK (artur.pas), line = 1599
 10191
 10192 584A AD 8F 61 8D 00 02		mva OLDDLI VDSLST
 10193 5850 AD 90 61 8D 01 02		mva OLDDLI+1 VDSLST+1
 10194
 10195 				; optimize OK (artur.pas), line = 1600
 10196
 10197 5856 A9 40			lda #$40
 10198 5858 8D 0E D4			sta ATARI.NMIEN
 10199
 10200 				; optimize OK (artur.pas), line = 1601
 10201
 10202 585B A9 00			lda #$00
 10203 585D 20 C2 2A			jsr CRT.TEXTMODE
 10204 5860 A9 00			lda #$00
 10205 5862 4C 65 58			jmp @halt
 10206
 10207 				; ------------------------------------------------------------
 10208
 10209 = 0028			SCREEN_WIDTH	= $28
 10210 = 0018			SCREEN_HEIGHT	= $18
 10211 = 03C0			SCREEN_SIZE	= $03C0
 10212 = 0008			FULLSCREEN_UNDO_COUNT	= $08
 10213 = 0040			UNDO_ACTIONS_COUNT	= $40
 10214 = 0069			BIN_HEADER_SIZE	= $69
 10215 = 7000			FREE_BOTTOM	= $7000
 10216 = 7000			PMG	= $7000
 10217 = 7000			DISPLAY_LIST_ADDRESS	= $7000
 10218 = 7100			BIN_HEADER	= $7100
 10219 = 7400			CUSTOM_CHARSET	= $7400
 10220 = 7800			VIDEO_BUFFER	= $7800
 10221 = 7BC0			MENU_BAR	= $7BC0
 10222 = 7C00			VIDEO_RAM_ADDRESS	= $7C00
 10223 = 7FC0			STATUS_BAR	= $7FC0
 10224 = 8000			KEY_MAP	= $8000
 10225 = 8100			UNDO_SCREENS	= $8100
 10226 = E000			DEFAULT_CHARSET	= $E000
 10227 = 00FF			NONE	= $FF
 10228 = 00FF			UNDO_NONE	= $FF
 10229 = 00FE			UNDO_FROM_BUFFER	= $FE
 10230 = 0000			MODE_TYPE	= $00
 10231 = 0001			MODE_DRAW	= $01
 10232 = 0002			MODE_BLOCK	= $02
 10233 = 0003			MODE_LAST	= $03
 10234 = 00FF			MODE_EXIT	= $FF
 10235 = 0000			TOOL_DRAW	= $00
 10236 = 0001			TOOL_LINE	= $01
 10237 = 0002			TOOL_FRAME	= $02
 10238 = 0003			TOOL_BLOCK	= $03
 10239 = 000A			KEY_DELAY	= $0A
 10240 = 0004			JOY_DELAY	= $04
 10241 = 0014			FIRE_DELAY	= $14
 10242 = 000A			OS_REPEAT_DELAY	= $0A
 10243 = 0005			OS_REPEAT_RATE	= $05
 10244 = 0030			PMG_XOFFSET	= $30
 10245 = 000F			PMG_YOFFSET	= $0F
 10246 = 0092			BG_DEFAULT	= $92
 10247 = 009A			FG_DEFAULT	= $9A
 10248 = 0011			MAX_BRUSH_HISTORY	= $11
 10249 = 0000			CODE_DISPLAY_NONE	= $00
 10250 = 0001			CODE_DISPLAY_ANTIC	= $01
 10251 = 0002			CODE_DISPLAY_ATASCII	= $02
 10252 = 6144			adr.VERSION	= [DATAORIGIN+$08B4] .array [6]
 10253 5865			.var VERSION	= adr.VERSION .word
 10254 = 614A			adr.CONFIG	= [DATAORIGIN+$08BA] .array [8] ; type unknown
 10255 5865			.var CONFIG	= adr.CONFIG .word
 10256 = 614A			CONFIG.EDITORBACKGROUNDCOLOR	= DATAORIGIN+$08BA
 10257 = 614B			CONFIG.EDITORFOREGROUNDCOLOR	= DATAORIGIN+$08BB
 10258 = 614C			CONFIG.ARROWSRAW	= DATAORIGIN+$08BC
 10259 = 614D			CONFIG.KEYCODEDISPLAY	= DATAORIGIN+$08BD
 10260 = 614E			B	= DATAORIGIN+$08BE
 10261 = 614F			H	= DATAORIGIN+$08BF
 10262 = 6150			W	= DATAORIGIN+$08C0
 10263 = 6151			adr.S	= [DATAORIGIN+$08C1] .array [41]
 10264 5865			.var S	= adr.S .word
 10265 = 617A			C	= DATAORIGIN+$08EA
 10266 = 617B			KEY	= DATAORIGIN+$08EB
 10267 5865			.var AFILE	= DATAORIGIN+$08EC .word
 10268 = 6188			JOYX	= DATAORIGIN+$08F8
 10269 = 6189			JOYY	= DATAORIGIN+$08F9
 10270 = 618A			JOYFIRE	= DATAORIGIN+$08FA
 10271 = 618B			BRUSH	= DATAORIGIN+$08FB
 10272 = 618C			KEYREPEATCOUNTER	= DATAORIGIN+$08FC
 10273 = 618D			OLDVBL	= DATAORIGIN+$08FD
 10274 = 618F			OLDDLI	= DATAORIGIN+$08FF
 10275 = 6191			MODE	= DATAORIGIN+$0901
 10276 = 6192			DRAWTOOL	= DATAORIGIN+$0902
 10277 = 6193			CURSORX	= DATAORIGIN+$0903
 10278 = 6194			CURSORY	= DATAORIGIN+$0904
 10279 = 6195			CURSOR	= DATAORIGIN+$0905
 10280 = 6197			CURSORCHAR	= DATAORIGIN+$0907
 10281 = 6198			KEYDOWN	= DATAORIGIN+$0908
 10282 = 6199			PENDOWN	= DATAORIGIN+$0909
 10283 = 619A			INVERT	= DATAORIGIN+$090A
 10284 = 619B			CURSORFORWARD	= DATAORIGIN+$090B
 10285 = 619C			STATUSCUSTOMCHARSET	= DATAORIGIN+$090C
 10286 = 619D			EDITORCHARSET	= DATAORIGIN+$090D
 10287 = 619E			P1X	= DATAORIGIN+$090E
 10288 = 619F			P2X	= DATAORIGIN+$090F
 10289 = 61A0			P1Y	= DATAORIGIN+$0910
 10290 = 61A1			P2Y	= DATAORIGIN+$0911
 10291 = 61A2			adr.BRUSHHISTORY	= [DATAORIGIN+$0912] .array [18]
 10292 5865			.var BRUSHHISTORY	= adr.BRUSHHISTORY .word
 10293 = 61B4			BRUSHINDEX	= DATAORIGIN+$0924
 10294 = 61B5			BRUSHFRAMEPOSX	= DATAORIGIN+$0925
 10295 = 8000			adr.KEYCHARS	= $8000
 10296 5865			.var KEYCHARS	= adr.KEYCHARS .word
 10297 = 61B6			adr.UNDOBUFFERS	= [DATAORIGIN+$0926] .array [8] .word
 10298 5865			.var UNDOBUFFERS	= adr.UNDOBUFFERS .word
 10299 = 61C6			adr.UNDOACTIONS	= [DATAORIGIN+$0936] .array [64] [3]
 10300 5865			.var UNDOACTIONS	= adr.UNDOACTIONS .word
 10301 = 6286			UNDOBUFFERIDX	= DATAORIGIN+$09F6
 10302 = 6287			UNDOACTIONSIDX	= DATAORIGIN+$09F7
 10303 = 6288			REDOCOUNT	= DATAORIGIN+$09F8
 10304 = 6289			adr.LINEOFFSET	= [DATAORIGIN+$09F9] .array [24] .word
 10305 5865			.var LINEOFFSET	= adr.LINEOFFSET .word
 10306 5865			@exit
 10307
 10308 5865 A2 00		@halt	ldx #$00
 10309 5867 9A				txs
 10310 					.ifdef MAIN.@DEFINES.ROMOFF
 10311 					inc portb
 10312 					.fi
 10313
 10314 5868 A0 01			ldy #$01
 10315
 10316 586A 60				rts
 10317
 10318 				; ------------------------------------------------------------
 10319
 10320 586B 00 00 00 00 00 00 + IOCB@COPY	:16 brk
 10321
 10322 				; ------------------------------------------------------------
 10323
 10324 587B			.local	@DEFINES
 10325 587B			ATARI
 10326 				.endl
 10327
 10328 587B			.local	@RESOURCE
 10329 				.endl
 10330
 10331 = 587B 44 61		VERSION
 10331 = 587D 4A 61		CONFIG
 10331 = 587F 51 61		S
 10331 = 5881 7C 61		AFILE
 10331 = 5883 A2 61		BRUSHHISTORY
 10331 = 5885 00 80		KEYCHARS
 10331 = 5887 B6 61		UNDOBUFFERS
 10331 = 5889 C6 61		UNDOACTIONS
 10331 = 588B 89 62		LINEOFFSET
 10331 				.endl							; MAIN
 10332
 10333 				; ------------------------------------------------------------
 10334 				; ------------------------------------------------------------
 10335
 10336 				.macro	UNITINITIALIZATION
 10337 				
 10338 					.ifdef MAIN.SYSTEM.@UnitInit
 10339 					jsr MAIN.SYSTEM.@UnitInit
 10340 					.fi
 10341 				
 10342 					.ifdef MAIN.ATARI.@UnitInit
 10343 					jsr MAIN.ATARI.@UnitInit
 10344 					.fi
 10345 				
 10346 					.ifdef MAIN.CRT.@UnitInit
 10347 					jsr MAIN.CRT.@UnitInit
 10348 					.fi
 10349 				
 10350 					.ifdef MAIN.DOS.@UnitInit
 10351 					jsr MAIN.DOS.@UnitInit
 10352 					.fi
 10353 				
 10354 					.ifdef MAIN.STRUTILS.@UnitInit
 10355 					jsr MAIN.STRUTILS.@UnitInit
 10356 					.fi
 10357 				
 10358 					.ifdef MAIN.SYSUTILS.@UnitInit
 10359 					jsr MAIN.SYSUTILS.@UnitInit
 10360 					.fi
 10361 				
 10362 					.ifdef MAIN.B_CRT.@UnitInit
 10363 					jsr MAIN.B_CRT.@UnitInit
 10364 					.fi
 10365 				
 10366 					.ifdef MAIN.B_SYSTEM.@UnitInit
 10367 					jsr MAIN.B_SYSTEM.@UnitInit
 10368 					.fi
 10369 				
 10370 					.ifdef MAIN.B_PMG.@UnitInit
 10371 					jsr MAIN.B_PMG.@UnitInit
 10372 					.fi
 10373 				
 10374 					.ifdef MAIN.JOYSTICK.@UnitInit
 10375 					jsr MAIN.JOYSTICK.@UnitInit
 10376 					.fi
 10377 				.endm
 10378
 10379 				; ------------------------------------------------------------
 10380
 10381 					ift .SIZEOF(MAIN.SYSTEM) > 0
 10382 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
 10382 				SYSTEM: $29F6..$2AAC
 10383 					eif
 10384
 10385 					ift .SIZEOF(MAIN.ATARI) > 0
 10386 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
 10387 					eif
 10388
 10389 					ift .SIZEOF(MAIN.CRT) > 0
 10390 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
 10390 				CRT: $2AAD..$2ACC
 10391 					eif
 10392
 10393 					ift .SIZEOF(MAIN.DOS) > 0
 10394 					.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
 10395 					eif
 10396
 10397 					ift .SIZEOF(MAIN.STRUTILS) > 0
 10398 					.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
 10399 					eif
 10400
 10401 					ift .SIZEOF(MAIN.SYSUTILS) > 0
 10402 					.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
 10402 				SYSUTILS: $2ACD..$2CE3
 10403 					eif
 10404
 10405 					ift .SIZEOF(MAIN.B_CRT) > 0
 10406 					.print 'B_CRT: ',MAIN.B_CRT,'..',MAIN.B_CRT+.SIZEOF(MAIN.B_CRT)-1
 10406 				B_CRT: $2CE4..$2FEF
 10407 					eif
 10408
 10409 					ift .SIZEOF(MAIN.B_SYSTEM) > 0
 10410 					.print 'B_SYSTEM: ',MAIN.B_SYSTEM,'..',MAIN.B_SYSTEM+.SIZEOF(MAIN.B_SYSTEM)-1
 10411 					eif
 10412
 10413 					ift .SIZEOF(MAIN.B_PMG) > 0
 10414 					.print 'B_PMG: ',MAIN.B_PMG,'..',MAIN.B_PMG+.SIZEOF(MAIN.B_PMG)-1
 10414 				B_PMG: $2FF0..$3086
 10415 					eif
 10416
 10417 					ift .SIZEOF(MAIN.JOYSTICK) > 0
 10418 					.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
 10418 				JOYSTICK: $3087..$308E
 10419 					eif
 10420
 10421 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
 10421 				CODE: $2000..$587A
 10422
 10423 				; ------------------------------------------------------------
 10424
 10425 588D				.align $0004
 10426
 10427 5890			DATAORIGIN
 10428 5890-62DB> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10429 58A8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10430 58C0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10431 58D8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10432 58F0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10433 5908 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10434 5920 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10435 5938 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10436 5950 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10437 5968 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10438 5980 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10439 5998 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10440 59B0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10441 59C8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10442 59E0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10443 59F8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10444 5A10 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10445 5A28 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10446 5A40 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10447 5A58 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10448 5A70 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10449 5A88 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10450 5AA0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10451 5AB8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10452 5AD0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10453 5AE8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10454 5B00 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10455 5B18 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10456 5B30 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10457 5B48 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10458 5B60 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10459 5B78 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10460 5B90 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10461 5BA8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10462 5BC0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10463 5BD8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10464 5BF0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10465 5C08 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10466 5C20 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10467 5C38 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10468 5C50 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10469 5C68 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10470 5C80 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10471 5C98 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10472 5CB0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10473 5CC8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10474 5CE0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10475 5CF8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10476 5D10 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10477 5D28 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10478 5D40 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10479 5D58 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10480 5D70 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10481 5D88 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10482 5DA0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10483 5DB8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10484 5DD0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10485 5DE8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10486 5E00 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10487 5E18 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10488 5E30 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10489 5E48 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10490 5E60 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10491 5E78 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10492 5E90 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10493 5EA8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10494 5EC0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10495 5ED8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10496 5EF0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10497 5F08 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10498 5F20 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10499 5F38 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10500 5F50 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10501 5F68 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10502 5F80 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10503 5F98 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10504 5FB0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10505 5FC8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10506 5FE0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10507 5FF8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10508 6010 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10509 6028 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10510 6040 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10511 6058 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10512 6070 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10513 6088 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10514 60A0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10515 60B8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10516 60D0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10517 60E8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10518 6100 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10519 6118 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10520 6130 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $03 $00 $0E $00 $04 $90 $8E $98
 10521 6148 98 00 00 00 00 00 + .by  $98 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10522 6160 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10523 6178 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $01 $80 $14 <[DATAORIGIN+$08FD] >[DATAORIGIN+$08FD] <[DATAORIGIN+$08FF]
 10524 6190 61 00 00 00 00 00 + .by  >[DATAORIGIN+$08FF] $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $FF $FF  $00 $00 $00 $00 $00 $00 $00 $00
 10525 61A8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10526 61C0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10527 61D8 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10528 61F0 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10529 6208 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10530 6220 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10531 6238 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10532 6250 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10533 6268 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10534 6280 00 00 00 00 00 00 + .by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $28 $00 $50 $00 $78  $00 $A0 $00 $C8 $00 $F0 $00 $18
 10535 6298 01 40 01 68 01 90 + .by  $01 $40 $01 $68 $01 $90 $01 $B8  $01 $E0 $01 $08 $02 $30 $02 $58  $02 $80 $02 $A8 $02 $D0 $02 $F8
 10536 62B0 02 20 03 48 03 70 + .by  $02 $20 $03 $48 $03 $70 $03 $98  $03 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
 10537 62C8 00 3F 21 21 21 21 + .by  $00 $3F $21 $21 $21 $21 $3F $50  $70 $90 $B0 $48 $40 $38 $30 $03  $03 $03 $03 $FF
 10538
 10539 = 0A4C			VARINITSIZE	= *-DATAORIGIN
 10540 = 0AF5			VARDATASIZE	= 2805
 10541
 10542 = 6385			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
 10543
 10544 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
 10544 				DATA: $5890..$6385
 10545
 10546 02E0-02E1> CE 29			run START
 10547
 10548 				; ------------------------------------------------------------
 10549
 10550 				.macro	STATICDATA
 10551 				.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $04  $90 $8E $98 $98 $00 $12 $AD $AF
 10552 				.by  $A4 $A5 $00 $00 $00 $00 $00 $00  $B8 $00 $00 $00 $B9 $00 $00 $00  $00 $05 $74 $79 $70 $65 $00 $00
 10553 				.by  $05 $64 $72 $61 $77 $00 $00 $05  $62 $6C $6F $63 $6B $00 $28 $A3  $A1 $B0 $B3 $9A $62 $72 $75 $73
 10554 				.by  $68 $00 $00 $B2 $A5 $B4 $B5 $B2  $AE $9A $70 $61 $69 $6E $74 $00  $00 $29 $2E $33 $25 $32 $34 $00
 10555 				.by  $29 $2E $36 $25 $32 $33 $25 $00  $06 $A9 $AE $B3 $A5 $B2 $B4 $00  $07 $A9 $AE $B6 $A5 $B2 $B3 $A5
 10556 				.by  $00 $28 $A3 $A1 $B0 $B3 $9A $62  $72 $75 $73 $68 $00 $00 $00 $A4  $72 $61 $77 $00 $00 $00 $AC $69
 10557 				.by  $6E $65 $00 $00 $00 $A6 $72 $61  $6D $65 $00 $00 $00 $A2 $6C $6F  $63 $6B $00 $04 $A4 $B2 $A1 $B7
 10558 				.by  $00 $04 $AC $A9 $AE $A5 $00 $05  $A6 $B2 $A1 $AD $A5 $00 $05 $A2  $AC $AF $A3 $AB $00 $1F $33 $65
 10559 				.by  $6C $65 $63 $74 $00 $61 $72 $65  $61 $00 $77 $69 $74 $68 $00 $B2  $A5 $B4 $B5 $B2 $AE $00 $6F $72
 10560 				.by  $00 $A6 $A9 $B2 $A5 $00 $20 $A3  $6F $70 $79 $00 $00 $AD $6F $76  $65 $00 $00 $A6 $69 $6C $6C $00
 10561 				.by  $00 $A9 $6E $76 $65 $72 $74 $00  $00 $B3 $61 $76 $65 $00 $00 $00  $02 $00 $00 $00 $0F $25 $6E $74
 10562 				.by  $65 $72 $00 $26 $69 $6C $65 $6E  $61 $6D $65 $1A $00 $0C $20 $20  $20 $20 $20 $20 $20 $20 $20 $20
 10563 				.by  $20 $20 $00 $0C $B3 $E5 $EC $E5  $E3 $F4 $80 $A2 $F2 $F5 $F3 $E8  $00 $0D $24 $65 $76 $69 $63 $65
 10564 				.by  $00 $25 $72 $72 $6F $72 $01 $00  $0D $22 $61 $64 $00 $26 $69 $6C  $65 $6E $61 $6D $65 $01 $00 $08
 10565 				.by  $33 $75 $63 $63 $65 $73 $73 $0E  $00 $0C $41 $52 $54 $55 $52 $43  $46 $47 $2E $53 $59 $53 $00 $11
 10566 				.by  $B3 $A1 $B6 $E9 $AE $A7 $80 $A4  $A1 $B4 $A1 $80 $A2 $AC $AF $A3  $AB $00 $1C $8D $8D $8D $8D $8D
 10567 				.by  $8D $8D $8D $8D $8D $8D $8D $8D  $8D $8D $8D $8D $8D $8D $8D $8D  $8D $8D $8D $8D $8D $8D $8D $00
 10568 				.by  $1C $A1 $B2 $B4 $F5 $F2 $80 $8D  $80 $F6 $8E $80 $80 $80 $80 $80  $80 $E2 $EF $E3 $E9 $E1 $EE $F5
 10569 				.by  $87 $92 $90 $92 $90 $00 $12 $A1  $B4 $A1 $B3 $A3 $A9 $A9 $80 $A1  $F2 $F4 $80 $A5 $E4 $E9 $F4 $EF
 10570 				.by  $F2 $00 $11 $33 $34 $21 $32 $34  $80 $80 $8D $80 $A9 $8F $AF $80  $ED $E5 $EE $F5 $00 $14 $33 $25
 10571 				.by  $2C $25 $23 $34 $80 $8D $80 $E3  $E8 $E1 $EE $E7 $E5 $80 $ED $EF  $E4 $E5 $00 $11 $2F $30 $34 $29
 10572 				.by  $2F $2E $80 $8D $80 $F3 $E5 $F4  $F4 $E9 $EE $E7 $F3 $00 $14 $28  $25 $2C $30 $80 $80 $80 $8D $80
 10573 				.by  $F4 $E8 $E9 $F3 $80 $F3 $E3 $F2  $E5 $E5 $EE $00 $0D $B0 $F2 $E5  $F3 $F3 $80 $61 $6E $79 $80 $EB
 10574 				.by  $E5 $F9 $00 $0C $80 $80 $80 $80  $80 $80 $80 $80 $80 $80 $80 $80  $00 $05 $44 $3A $2A $2E $2A $00
 10575 				.by  $03 $33 $39 $33 $00 $1E $A9 $8F  $AF $80 $AD $A5 $AE $B5 $80 $80  $80 $80 $80 $80 $80 $80 $80 $80
 10576 				.by  $80 $80 $80 $80 $80 $80 $A6 $E9  $EC $E5 $F3 $9A $00 $24 $8D $8D  $8D $8D $8D $8D $8D $8D $8D $8D
 10577 				.by  $8D $8D $8D $8D $8D $8D $8D $8D  $8D $8D $8D $8D $8D $80 $8D $8D  $8D $8D $8D $8D $8D $8D $8D $8D
 10578 				.by  $8D $8D $00 $11 $2E $E5 $F7 $80  $E9 $ED $E1 $E7 $E5 $80 $88 $E3  $EC $E5 $E1 $F2 $89 $00 $12 $2C
 10579 				.by  $EF $E1 $E4 $80 $A1 $B4 $A1 $B3  $A3 $A9 $A9 $80 $E9 $ED $E1 $E7  $E5 $00 $12 $33 $E1 $F6 $E5 $80
 10580 				.by  $A1 $B4 $A1 $B3 $A3 $A9 $A9 $80  $E9 $ED $E1 $E7 $E5 $00 $16 $B3  $E1 $F6 $E5 $80 $E5 $38 $E5 $E3
 10581 				.by  $F5 $F4 $E1 $E2 $EC $E5 $80 $E2  $E9 $EE $E1 $F2 $F9 $00 $13 $AC  $EF $E1 $E4 $80 $E3 $F5 $F3 $F4
 10582 				.by  $EF $ED $80 $23 $E8 $E1 $F2 $F3  $E5 $F4 $00 $17 $B2 $E5 $F3 $F4  $EF $F2 $E5 $80 $24 $E5 $E6 $E1
 10583 				.by  $F5 $EC $F4 $80 $E3 $E8 $E1 $F2  $F3 $E5 $F4 $00 $0B $31 $F5 $E9  $F4 $80 $F4 $EF $80 $A4 $AF $B3
 10584 				.by  $00 $13 $B0 $F2 $E5 $F3 $F3 $80  $25 $33 $23 $80 $F4 $EF $80 $EC  $E5 $E1 $F6 $E5 $80 $00 $0F $A5
 10585 				.by  $A4 $E9 $B4 $AF $B2 $80 $B3 $A5  $B4 $B4 $E9 $AE $A7 $B3 $00 $13  $22 $E1 $E3 $EB $E7 $F2 $EF $F5
 10586 				.by  $EE $E4 $80 $E3 $EF $EC $EF $F2  $9A $80 $84 $00 $13 $26 $EF $F2  $E5 $E7 $F2 $EF $F5 $EE $E4 $80
 10587 				.by  $E3 $EF $EC $EF $F2 $9A $80 $84  $00 $15 $21 $F2 $F2 $EF $F7 $F3  $80 $F7 $E9 $F4 $E8 $EF $F5 $F4
 10588 				.by  $80 $A3 $F4 $F2 $EC $9A $80 $00  $03 $6F $6E $80 $00 $03 $6F $66  $66 $00 $12 $23 $E8 $E1 $F2 $E3
 10589 				.by  $EF $E4 $E5 $80 $E4 $E9 $F3 $F0  $EC $E1 $F9 $9A $80 $00 $07 $6F  $66 $66 $80 $80 $80 $80 $00 $07
 10590 				.by  $21 $34 $21 $33 $23 $29 $29 $00  $07 $21 $6E $74 $69 $63 $80 $80  $00 $0B $33 $E1 $F6 $E5 $80 $E3
 10591 				.by  $EF $EE $E6 $E9 $E7 $00 $12 $B0  $F2 $E5 $F3 $F3 $80 $25 $33 $23  $80 $F4 $EF $80 $EC $E5 $E1 $F6
 10592 				.by  $E5 $00 $6C $6A $3B $FF $FF $6B  $2B $2A $6F $FF $70 $75 $9B $69  $2D $3D $76 $FF $63 $FF $FF $62
 10593 				.by  $78 $7A $34 $FF $33 $36 $1B $35  $32 $31 $2C $20 $2E $6E $FF $6D  $2F $81 $72 $FF $65 $79 $7F $74
 10594 				.by  $77 $71 $39 $FF $30 $37 $7E $38  $3E $FF $66 $68 $64 $FF $82 $67  $73 $61 $4C $4A $3A $FF $FF $4B
 10595 				.by  $5C $5E $4F $FF $50 $55 $FF $49  $5F $7C $56 $FF $43 $FF $FF $42  $58 $5A $24 $FF $23 $26 $FF $25
 10596 				.by  $22 $21 $5B $3B $5D $4E $FF $4D  $3F $FF $52 $FF $45 $59 $FF $54  $57 $51 $28 $FF $29 $27 $FF $40
 10597 				.by  $FF $FF $46 $48 $44 $FF $FF $47  $53 $41 $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
 10598 				.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
 10599 				.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
 10600 				.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
 10601 				.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
 10602 				.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF
 10603 				.endm
 10604
 10605 					end
