; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/01/09] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

.local	RESOURCE
	icl 'atari\resource.asm'
	?EXTDETECT = 0
	?VBXDETECT = 0

	RCDATA 'keymap.bin' KEY_MAP 0 0 0 0 0 0 0 0
	RCASM 'dlist.asm' DISPLAY_LIST_ADDRESS 0 0 0 0 0 0 0 0
	RCDATA 'head.bin' BIN_HEADER 0 0 0 0 0 0 0 0
.endl

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_03E1

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER

; ---------------------  ASM Block 001  ---------------------

	jsr @hexStr

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

VALUE	= :EDX
DIGITS	= :ECX
adr.RESULT	= [DATAORIGIN+$000B] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= RESULT
@VarDataSize	= 33

	rts						; ret
.endl

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; ---------------------  ASM Block 002  ---------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= DATAORIGIN+$002C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	UPCASE						; FUNCTION
	sta A

; optimize OK (SYSTEM), line = 1236

	sta @CASETMP_0002
	clc						; clear carry for add
	adc #$FF-$7A					; make m = $FF
	adc #$7A-$61+1					; carry set if in range n to m
	jcc l_041D
@

; optimize OK (SYSTEM), line = 1237

	lda A
	sub #$20
	sta RESULT

	jmp a_0002
l_041D

; optimize OK (SYSTEM), line = 1239

	lda A
	sta RESULT
a_0002
@exit

; ------------------------------------------------------------

A	= DATAORIGIN+$002D
RESULT	= DATAORIGIN+$002E
@CASETMP_0002	= DATAORIGIN+$002F

@VarData	= A
@VarDataSize	= 3

	rts						; ret
.endl

.local	STR_0449					; PROCEDURE | ASSEMBLER | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	lda :STACKORIGIN+STACKWIDTH*2,x
	sta A+2
	lda :STACKORIGIN+STACKWIDTH*3,x
	sta A+3
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta S
	lda :STACKORIGIN+STACKWIDTH,x
	sta S+1
	dex
@main

; ---------------------  ASM Block 017  ---------------------

	txa:pha

	inx		; parameter A
	inx		; parameter S

	@ValueToStr #@printCARD

	@move #@buf s #16	; !!! koniecznie przez wskaznik

	pla:tax


; ------------------------------------------------------------

A	= DATAORIGIN+$0030
S	= DATAORIGIN+$0034

@VarData	= A
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; ---------------------  ASM Block 018  ---------------------

	ldy #0
	mva value (:edx),y


; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILLBYTE_0457					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; ---------------------  ASM Block 026  ---------------------

	jsr @fill

	.ENDM

; ------------------------------------------------------------

A	= :EDX
COUNT	= :ECX
VALUE	= :EAX
@exit
.endl

.local	MOVE_0458					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; ---------------------  ASM Block 028  ---------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	MOVE_0459					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; ---------------------  ASM Block 029  ---------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	MOVE_045A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; ---------------------  ASM Block 030  ---------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

.local	PAUSE_0479					; PROCEDURE | ASSEMBLER | OVERLOAD

; ---------------------  ASM Block 036  ---------------------

	lda:cmp:req :rtclok+2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	READKEY						; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 052  ---------------------

	m@call @GetKey
	sta Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0037

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 056  ---------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0038

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	TEXTMODE					; PROCEDURE | ASSEMBLER
	sta MODE

; ---------------------  ASM Block 060  ---------------------

	txa:pha

	@clrscr

	pla:tax


; ------------------------------------------------------------

MODE	= DATAORIGIN+$0039

@VarData	= MODE
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$0036
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	DOS						; UNIT

; ------------------------------------------------------------

PALNTSC	= $D014

.endl							; UNIT DOS

; ------------------------------------------------------------

.local	STRUTILS					; UNIT

; ------------------------------------------------------------

.endl							; UNIT STRUTILS

; ------------------------------------------------------------

.local	SYSUTILS					; UNIT

.local	FINDFIRST					; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$20
	mva:rpl (:bp2),y adr.FILEMASK,y-
	mwa #adr.FILEMASK FILEMASK
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta ATTRIBUTES
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta SEARCHRESULT
	lda :STACKORIGIN+STACKWIDTH,x
	sta SEARCHRESULT+1
	dex
@main

; AssignFile

; optimize OK (SYSUTILS), line = 178

	mwy F :bp2
	ldy #s@file.pfname
	lda FILEMASK
	sta (:bp2),y
	iny
	lda FILEMASK+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y

; ---------------------  ASM Block 068  ---------------------

	txa:pha

	clc			; iocheck off
	@openfile f #6
loop
	mwa SearchResult :bp2

	ldy #SearchResult.ExcludeAttr-DATAORIGIN
	lda Attributes
	sta (:bp2),y

	ldy #SearchResult.FindHandle-DATAORIGIN

	lda f
	sta (:bp2),y
	iny
	lda f+1
	sta (:bp2),y

	mwa f :bp2

	ldy #s@file.record
	mva <1 (:bp2),y
	iny
	mva >1 (:bp2),y

	ldy #s@file.nrecord
	mva <64 (:bp2),y
	iny
	mva >64 (:bp2),y

	ldy #s@file.buffer
	mva <@buf (:bp2),y
	iny
	mva >@buf (:bp2),y

	@ReadDirFileName f
	sta Result

	adw SearchResult #SearchResult.Name-DATAORIGIN :bp2

	jsr @DirFileName

	mwa SearchResult :bp2

	ldy #SearchResult.Attr-DATAORIGIN
	txa
	sta (:bp2),y

	and Attributes
	ora Result
	beq loop

	pla:tax

@exit

; ------------------------------------------------------------

adr.FILEMASK	= [DATAORIGIN+$003A] .array [33]
.var FILEMASK	= adr.FILEMASK .word
ATTRIBUTES	= DATAORIGIN+$005B
SEARCHRESULT	= DATAORIGIN+$005C
SEARCHRESULT.ATTR	= DATAORIGIN+$0000
SEARCHRESULT.EXCLUDEATTR	= DATAORIGIN+$0001
SEARCHRESULT.NAME	= DATAORIGIN+$0002
SEARCHRESULT.FINDHANDLE	= DATAORIGIN+$0023
RESULT	= DATAORIGIN+$005E
.var F	= DATAORIGIN+$005F .word

@VarData	= FILEMASK
@VarDataSize	= 37

	rts						; ret
.endl

.local	FINDNEXT					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 069  ---------------------

	txa:pha

loop	mwa f :bp2
	ldy #f.FindHandle-DATAORIGIN
	mva (:bp2),y edx
	iny
	mva (:bp2),y edx+1

	@ReadDirFileName edx
	sta Result

	adw f #f.Name-DATAORIGIN :bp2

	jsr @DirFileName

	mwa f :bp2

	ldy #f.Attr-DATAORIGIN
	txa
	sta (:bp2),y

	ldy #f.ExcludeAttr-DATAORIGIN
	and (:bp2),y
	ora Result
	beq loop

	pla:tax

@exit

; ------------------------------------------------------------

F	= DATAORIGIN+$006B
F.ATTR	= DATAORIGIN+$0000
F.EXCLUDEATTR	= DATAORIGIN+$0001
F.NAME	= DATAORIGIN+$0002
F.FINDHANDLE	= DATAORIGIN+$0023
RESULT	= DATAORIGIN+$006D

@VarData	= F
@VarDataSize	= 3

	rts						; ret
.endl

.local	FINDCLOSE					; PROCEDURE | ASSEMBLER

; ---------------------  ASM Block 070  ---------------------

	txa:pha

	mwa f :bp2
	ldy #f.FindHandle-DATAORIGIN
	mva (:bp2),y edx
	iny
	mva (:bp2),y edx+1

	clc			; iocheck off
	@closefile edx

	pla:tax


; ------------------------------------------------------------

F	= DATAORIGIN+$006E
F.ATTR	= DATAORIGIN+$0000
F.EXCLUDEATTR	= DATAORIGIN+$0001
F.NAME	= DATAORIGIN+$0002
F.FINDHANDLE	= DATAORIGIN+$0023

@VarData	= F
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	FILEEXISTS					; FUNCTION

; optimize OK (SYSUTILS), line = 433

	lda SYSTEM.FILEMODE
	sta FM
; AssignFile

; optimize OK (SYSUTILS), line = 436

	mwy F :bp2
	ldy #s@file.pfname
	lda NAME
	sta (:bp2),y
	iny
	lda NAME+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y

; optimize OK (SYSUTILS), line = 437

	lda #$04
	sta SYSTEM.FILEMODE
; Reset

; optimize OK (SYSUTILS), line = 438

	ldy #s@file.record
	lda #$80
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile F, MAIN.SYSTEM.FileMode
	pla:tax

; optimize OK (SYSUTILS), line = 439

	lda SYSTEM.IORESULT
	jmi l_04DDs
	ldy NAME+1
	sty :bp+1
	ldy NAME
	lda (:bp),y
	jeq l_04DDs
	mva:sne #true RESULT
l_04DDs
	mva #false RESULT
; CloseFile

	txa:pha
	clc
	@closefile F
	pla:tax

; optimize OK (SYSUTILS), line = 443

	lda FM
	sta SYSTEM.FILEMODE
@exit

; ------------------------------------------------------------

NAME	= DATAORIGIN+$0070
RESULT	= DATAORIGIN+$0072
.var F	= DATAORIGIN+$0073 .word
FM	= DATAORIGIN+$007F

@VarData	= NAME
@VarDataSize	= 4

	rts						; ret
.endl

.local	ANSIUPPERCASE					; FUNCTION | REGISTER

; optimize OK (SYSUTILS), line = 728

	lda A
	sta @move.src
	lda A+1
	sta @move.src+1
	mwy RESULT :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+

; optimize OK (SYSUTILS), line = 730

	ldy A+1
	sty :bp+1
	ldy A
	lda (:bp),y
	sta J

l_0506
; --- ForToDoCondition
	lda J
	cmp #$01
	jcc l_0514
	inx
	mva J :STACKORIGIN,x
	ldy J
	lda adr.RESULT,y
	jsr SYSTEM.UPCASE
	ldy :STACKORIGIN,x
	lda SYSTEM.UPCASE.RESULT
	sta adr.RESULT,y
	dex

; --- ForToDoEpilog
	dec J
	jne l_0506
l_0514
@exit

; ------------------------------------------------------------

A	= :EDX
adr.RESULT	= [DATAORIGIN+$0080] .array [256]
.var RESULT	= adr.RESULT .word
J	= DATAORIGIN+$0180
@FORTMP_0503	= $01

@VarData	= RESULT
@VarDataSize	= 257

	rts						; ret
.endl

; ------------------------------------------------------------

FAREADONLY	= $01
FAHIDDEN	= $02
FASYSFILE	= $04
FAVOLUMEID	= $08
FADIRECTORY	= $10
FAARCHIVE	= $20
FAANYFILE	= $3F

.endl							; UNIT SYSUTILS

; ------------------------------------------------------------

.local	B_CRT						; UNIT

.local	ATASCII2ANTIC_0535				; FUNCTION | OVERLOAD
	sta C

; ---------------------  ASM Block 081  ---------------------


        lda c
        asl
        php
        cmp #2*$60
        bcs @+
        sbc #2*$20-1
        bcs @+
        adc #2*$60
@       plp
        ror
        sta result;
    
@exit

; ------------------------------------------------------------

C	= DATAORIGIN+$018A
RESULT	= DATAORIGIN+$018B

@VarData	= C
@VarDataSize	= 2

	rts						; ret
.endl

.local	ANTIC2ATASCII_0539				; FUNCTION | OVERLOAD
	sta C

; ---------------------  ASM Block 082  ---------------------


        lda c
        asl
        php
        cmp #2*$60
        bcs @+
        sbc #2*$40-1
        bcs @+
        adc #2*$60
@       plp
        ror
        sta result;
    
@exit

; ------------------------------------------------------------

C	= DATAORIGIN+$018C
RESULT	= DATAORIGIN+$018D

@VarData	= C
@VarDataSize	= 2

	rts						; ret
.endl

.local	ATASCII2ANTIC_053D				; FUNCTION | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex
@main

; optimize OK (B_CRT), line = 468

	lda adr.S+$00
	sta adr.RESULT+$00

; optimize OK (B_CRT), line = 469

	lda #$01
	sta I
	mva adr.S+$00 :@FORTMP?0554_0

l_0557
; --- ForToDoCondition
.def :@FORTMP?0554_0 = *+1
	lda #$00
	cmp I
	jcc l_0565

; optimize FAIL (1, B_CRT), line = 470

	inx
	mva I :STACKORIGIN,x
	ldy I
	lda adr.S,y
	jsr ATASCII2ANTIC_0535
	ldy :STACKORIGIN,x
	lda ATASCII2ANTIC_0535.RESULT
	sta adr.RESULT,y
	dex

; --- ForToDoEpilog
	inc I
	jne l_0557
l_0565
@exit

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$018E] .array [256]
.var S	= adr.S .word
adr.RESULT	= [DATAORIGIN+$028E] .array [256]
.var RESULT	= adr.RESULT .word
I	= DATAORIGIN+$038E
@FORTMP_0554	= $00

@VarData	= S
@VarDataSize	= 513

	rts						; ret
.endl

.local	ANTIC2ATASCII_0578				; FUNCTION | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex
@main

; optimize OK (B_CRT), line = 476

	lda adr.S+$00
	sta adr.RESULT+$00

; optimize OK (B_CRT), line = 477

	lda #$01
	sta I
	mva adr.S+$00 :@FORTMP?058F_0

l_0592
; --- ForToDoCondition
.def :@FORTMP?058F_0 = *+1
	lda #$00
	cmp I
	jcc l_05A0

; optimize FAIL (1, B_CRT), line = 478

	inx
	mva I :STACKORIGIN,x
	ldy I
	lda adr.S,y
	jsr ANTIC2ATASCII_0539
	ldy :STACKORIGIN,x
	lda ANTIC2ATASCII_0539.RESULT
	sta adr.RESULT,y
	dex

; --- ForToDoEpilog
	inc I
	jne l_0592
l_05A0
@exit

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$0390] .array [256]
.var S	= adr.S .word
adr.RESULT	= [DATAORIGIN+$0490] .array [256]
.var RESULT	= adr.RESULT .word
I	= DATAORIGIN+$0590
@FORTMP_058F	= $00

@VarData	= S
@VarDataSize	= 513

	rts						; ret
.endl

.local	CRT_INIT_05B3					; PROCEDURE | OVERLOAD

; optimize OK (B_CRT), line = 483

	lda VRAM_ADDRESS
	sta CRT_VRAM
	lda VRAM_ADDRESS+1
	sta CRT_VRAM+1

; optimize OK (B_CRT), line = 484

	lda WIDTH
	sta CRT_SCREENWIDTH

; optimize OK (B_CRT), line = 485

	lda HEIGHT
	sta CRT_SCREENHEIGHT

; optimize OK (B_CRT), line = 486

	sta :ecx
	lda WIDTH
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	sta CRT_SIZE+1
	lda :eax
	sta CRT_SIZE

; optimize OK (B_CRT), line = 487

	lda CRT_VRAM
	sta CRT_CURSOR
	lda CRT_VRAM+1
	sta CRT_CURSOR+1

; optimize OK (B_CRT), line = 488

	lda #$00
	sta CRT_LEFTMARGIN

; ------------------------------------------------------------

VRAM_ADDRESS	= DATAORIGIN+$0592
WIDTH	= DATAORIGIN+$0594
HEIGHT	= DATAORIGIN+$0595

@VarData	= VRAM_ADDRESS
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_GOTOXY					; PROCEDURE

; optimize OK (B_CRT), line = 516

	lda CRT_SCREENWIDTH
	sta :ecx
	lda Y
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	add X
	sta :STACKORIGIN+9
	lda :eax+1
	adc #$00
	sta :STACKORIGIN+STACKWIDTH+9
	lda :STACKORIGIN+9
	add CRT_VRAM
	sta CRT_CURSOR
	lda :STACKORIGIN+STACKWIDTH+9
	adc CRT_VRAM+1
	sta CRT_CURSOR+1

; ------------------------------------------------------------

X	= DATAORIGIN+$0596
Y	= DATAORIGIN+$0597

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_WRITE_05F8					; PROCEDURE | OVERLOAD

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta :bp2
	lda :STACKORIGIN+STACKWIDTH,x
	sta :bp2+1
	ldy #$00
	mva:rne (:bp2),y adr.S,y+
	mwa #adr.S S
	dex
@main

; optimize OK (B_CRT), line = 531

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda CRT_CURSOR
	sta SYSTEM.MOVE_045A.DEST
	lda CRT_CURSOR+1
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl

; optimize OK (B_CRT), line = 532

	lda CRT_CURSOR
	add adr.S+$00
	sta CRT_CURSOR
	scc
	inc CRT_CURSOR+1

; ------------------------------------------------------------

adr.S	= [DATAORIGIN+$0598] .array [256]
.var S	= adr.S .word

@VarData	= S
@VarDataSize	= 256

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_PUT_060B					; PROCEDURE | OVERLOAD
	sta B

; optimize OK (B_CRT), line = 574

	ldy CRT_CURSOR+1
	sty :bp+1
	ldy CRT_CURSOR
	lda B
	sta (:bp),y

; optimize FAIL (0, B_CRT), line = 575

	inc CRT_CURSOR
	sne
	inc CRT_CURSOR+1

; ------------------------------------------------------------

B	= DATAORIGIN+$0698

@VarData	= B
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CRT_KEYPRESSED					; FUNCTION

; optimize OK (B_CRT), line = 592

	lda #$00
	sta RESULT

; optimize OK (B_CRT), line = 593

	lda ATARI.SKSTAT
	and #$04
	jne l_0636
	lda #$01
	sta RESULT
l_0636
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0699

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	CRT_READKEY					; FUNCTION

; optimize OK (B_CRT), line = 598

	lda KBCODE
	sta RESULT

; --- RepeatUntilProlog
l_0648

; optimize FAIL ('CRT_KEYPRESSED', B_CRT), line = 599

	jsr CRT_KEYPRESSED
	inx
	mva CRT_KEYPRESSED.RESULT :STACKORIGIN,x
	jsr notBOOLEAN
	dex
	ldy #1
	lda RESULT
	cmp KBCODE
	bne @+
	dey
@
	tya
	ora :STACKORIGIN+1,x
	jeq l_0648

; --- RepeatUntilProlog
l_065F

; optimize FAIL ('CRT_KEYPRESSED', B_CRT), line = 600

	jsr CRT_KEYPRESSED
	lda CRT_KEYPRESSED.RESULT
	jeq l_065F

; optimize OK (B_CRT), line = 601

	lda KBCODE
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$069A

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	CRT_READCHAR					; FUNCTION

; --- RepeatUntilProlog
l_066F

; optimize FAIL (0, B_CRT), line = 607

	jsr CRT_READKEY
	ldy CRT_READKEY.RESULT
	lda adr.CRT_KEYCODE,y
	sta RESULT

; optimize OK (B_CRT), line = 608

	cmp #$FF
	jeq l_066F
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$069B

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	CRT_READCHARI					; FUNCTION

; optimize FAIL ('CRT_READCHAR', B_CRT), line = 613

	jsr CRT_READCHAR
	lda CRT_READCHAR.RESULT
	jsr ATASCII2ANTIC_0535
	lda ATASCII2ANTIC_0535.RESULT
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$069C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	CRT_READSTRINGI_068D				; FUNCTION | OVERLOAD
	sta LIMIT

	mva #$00 adr.RESULT

; --- RepeatUntilProlog
l_0691

; optimize FAIL ('CRT_READCHARI', B_CRT), line = 621

	jsr CRT_READCHARI
	lda CRT_READCHARI.RESULT
	sta A

; optimize OK (B_CRT), line = 622

	cmp #$DB
	jne l_06A7
	jmp @exit					; exit
l_06A7

; optimize OK (B_CRT), line = 623

	lda A
	cmp #$7E
	jne l_06CE
	lda adr.RESULT+$00
	jeq l_06CE

; optimize FAIL (0, B_CRT), line = 624

	lda CRT_CURSOR
	bne @+
	dec CRT_CURSOR+1
@
	dec CRT_CURSOR

; optimize OK (B_CRT), line = 625

	ldy CRT_CURSOR+1
	sty :bp+1
	ldy CRT_CURSOR
	lda #$00
	sta (:bp),y

; optimize OK (B_CRT), line = 626

	dec adr.RESULT+$00
	jmp l_06E2
l_06CE

; optimize OK (B_CRT), line = 628

	lda A
	cmp #$C2
	jeq l_0733
	cmp #$C1
	jeq l_0733
	cmp #$7F
	jeq l_0733
	cmp #$5B
	jeq l_0733
	cmp #$7E
	jeq l_0733
	lda adr.RESULT+$00
	cmp LIMIT
	jcs l_0733

; optimize OK (B_CRT), line = 634

	lda A
	jsr CRT_PUT_060B

; optimize OK (B_CRT), line = 635

	inc adr.RESULT+$00

; optimize OK (B_CRT), line = 636

	ldy adr.RESULT+$00
	lda A
	sta adr.RESULT,y
l_0733
l_06E2

; optimize OK (B_CRT), line = 638

	jmp l_0691
@exit

; ------------------------------------------------------------

LIMIT	= DATAORIGIN+$069D
adr.RESULT	= [DATAORIGIN+$069E] .array [256]
.var RESULT	= adr.RESULT .word
A	= DATAORIGIN+$079E

@VarData	= LIMIT
@VarDataSize	= 258

	rts						; ret
.endl

.local	CRT_READSTRING_074C				; FUNCTION | OVERLOAD
	sta LIMIT

; optimize OK (B_CRT), line = 648

	jsr CRT_READSTRINGI_068D
	inx
	mva CRT_READSTRINGI_068D.RESULT :STACKORIGIN,x
	mva CRT_READSTRINGI_068D.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr ANTIC2ATASCII_0578
	inx
	lda ANTIC2ATASCII_0578.RESULT
	sta @move.src
	lda ANTIC2ATASCII_0578.RESULT+1
	sta @move.src+1
	mwy RESULT :bp2
	ldy #$00
	mva:rne (@move.src),y (:bp2),y+
	dex
@exit

; ------------------------------------------------------------

LIMIT	= DATAORIGIN+$079F
adr.RESULT	= [DATAORIGIN+$07A0] .array [256]
.var RESULT	= adr.RESULT .word

@VarData	= LIMIT
@VarDataSize	= 257

	rts						; ret
.endl

.local	CRT_STARTPRESSED				; FUNCTION

; optimize OK (B_CRT), line = 749

	lda CONSOL
	ldy #1
	and #$01
	beq @+
	dey
@
	tya
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$08A0

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	CRT_SELECTPRESSED				; FUNCTION

; optimize OK (B_CRT), line = 754

	lda CONSOL
	ldy #1
	and #$02
	beq @+
	dey
@
	tya
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$08A1

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	CRT_OPTIONPRESSED				; FUNCTION

; optimize OK (B_CRT), line = 759

	lda CONSOL
	ldy #1
	and #$04
	beq @+
	dey
@
	tya
	sta RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$08A2

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	CRT_HELPPRESSED					; FUNCTION

; optimize OK (B_CRT), line = 764

	lda ATARI.SKSTAT
	and #$04
	jne l_07BAs
	lda KBCODE
	and #$3F
	cmp #$11
	jne l_07BAs
	mva:sne #true RESULT
l_07BAs
	mva #false RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$08A3

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

DEFAULT_SCREENWIDTH	= $28
DEFAULT_SCREENHEIGHT	= $18
CHAR_RETURN	= $9B
CHAR_ESCAPE	= $1B
CHAR_BACKSPACE	= $7E
CHAR_TAB	= $7F
CHAR_INVERSE	= $81
CHAR_CAPS	= $82
ICHAR_RETURN	= $DB
ICHAR_ESCAPE	= $5B
ICHAR_BACKSPACE	= $7E
ICHAR_TAB	= $7F
ICHAR_INVERSE	= $C1
ICHAR_CAPS	= $C2
adr.CRT_KEYCODE	= CODEORIGIN+$03DA
.var CRT_KEYCODE	= adr.CRT_KEYCODE .word
CRT_VRAM	= DATAORIGIN+$0181
CRT_SIZE	= DATAORIGIN+$0183
CRT_SCREENWIDTH	= DATAORIGIN+$0185
CRT_SCREENHEIGHT	= DATAORIGIN+$0186
CRT_CURSOR	= DATAORIGIN+$0187
CRT_LEFTMARGIN	= DATAORIGIN+$0189
KBCODE	= $D209
CONSOL	= $D01F

.endl							; UNIT B_CRT

; ------------------------------------------------------------

.local	B_SYSTEM					; UNIT

; ------------------------------------------------------------

__NMIEN	= DATAORIGIN+$08A4
PORTB_SELFTEST_OFF	= $80
PORTB_BASIC_OFF	= $02
PORTB_SYSTEM_ON	= $01

.endl							; UNIT B_SYSTEM

; ------------------------------------------------------------

.local	B_PMG						; UNIT

.local	PMG_INIT_07BE					; PROCEDURE | OVERLOAD

; optimize OK (B_PMG), line = 171

	lda BASE
	sta PMG_PMBASE

; optimize OK (B_PMG), line = 172

	lda #$00
	sta PMG_BASE
	lda BASE
	sta PMG_BASE+1

; optimize OK (B_PMG), line = 173

	lda GRACTL
	sta PMG_GRACTL

; optimize OK (B_PMG), line = 174

	lda PMG_SDMCTL_S
	and #$E0
	ora SDMCTL
	sta SDMCTL_FLAGS

; optimize OK (B_PMG), line = 175

	sta PMG_SDMCTL

; optimize OK (B_PMG), line = 176

	sta PMG_SDMCTL_S

; optimize OK (B_PMG), line = 177

	lda SDMCTL
	and #$10
	jeq l_0809

; optimize OK (B_PMG), line = 178

	lda #$01
	sta PMG_ONELINE

; optimize OK (B_PMG), line = 179

	lda #$00
	sta PMG_SIZE
	lda #$08
	sta PMG_SIZE+1
	jmp l_081B
l_0809

; optimize OK (B_PMG), line = 181

	lda #$00
	sta PMG_ONELINE

; optimize OK (B_PMG), line = 182

	sta PMG_SIZE
	lda #$04
	sta PMG_SIZE+1
l_081B

; ------------------------------------------------------------

BASE	= DATAORIGIN+$08AA
SDMCTL	= DATAORIGIN+$08AB
GRACTL	= DATAORIGIN+$08AC
SDMCTL_FLAGS	= DATAORIGIN+$08AD

@VarData	= BASE
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PMG_INIT_0824					; PROCEDURE | OVERLOAD

; optimize OK (B_PMG), line = 189

	lda BASE
	sta PMG_INIT_07BE.BASE
	lda SDMCTL
	sta PMG_INIT_07BE.SDMCTL
	lda GRACTL
	sta PMG_INIT_07BE.GRACTL
	jsr PMG_INIT_07BE

; ------------------------------------------------------------

BASE	= DATAORIGIN+$08AE
SDMCTL	= DATAORIGIN+$08AF
GRACTL	= DATAORIGIN+$08B0

@VarData	= BASE
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PMG_INIT_0832					; PROCEDURE | OVERLOAD
	sta BASE

; optimize OK (B_PMG), line = 195

	sta PMG_INIT_0824.BASE
	lda SDMCTL
	sta PMG_INIT_0824.SDMCTL
	jsr PMG_INIT_0824

; ------------------------------------------------------------

BASE	= DATAORIGIN+$08B1
SDMCTL	= DATAORIGIN+$08B2

@VarData	= BASE
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PMG_DISABLE					; PROCEDURE

; optimize OK (B_PMG), line = 206

	lda #$00
	sta PMG_GRACTL

; optimize OK (B_PMG), line = 207

	lda PMG_SDMCTL_S
	and #$C3
	sta SDMCTL_FLAGS

; optimize OK (B_PMG), line = 208

	sta PMG_SDMCTL

; optimize OK (B_PMG), line = 209

	sta PMG_SDMCTL_S

; ------------------------------------------------------------

SDMCTL_FLAGS	= DATAORIGIN+$08B3

@VarData	= SDMCTL_FLAGS
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

; ------------------------------------------------------------

PMG_VDELAY_M0	= $01
PMG_VDELAY_M1	= $02
PMG_VDELAY_M2	= $04
PMG_VDELAY_M3	= $08
PMG_VDELAY_P0	= $10
PMG_VDELAY_P1	= $20
PMG_VDELAY_P2	= $40
PMG_VDELAY_P3	= $80
PMG_SIZE_NORMAL	= $00
PMG_SIZE_X2	= $01
PMG_SIZE_X4	= $03
PMG_MSIZE0_X2	= $01
PMG_MSIZE0_X4	= $03
PMG_MSIZE1_X2	= $04
PMG_MSIZE1_X4	= $0C
PMG_MSIZE2_X2	= $10
PMG_MSIZE2_X4	= $30
PMG_MSIZE3_X2	= $40
PMG_MSIZE4_X4	= $C0
PMG_GRACTL_MISSILES	= $01
PMG_GRACTL_PLAYERS	= $02
PMG_GRACTL_LATCH	= $04
PMG_GRACTL_DEFAULT	= $03
PMG_SDMCTL_DMA_MISSILE	= $04
PMG_SDMCTL_DMA_PLAYER	= $08
PMG_SDMCTL_DMA_BOTH	= $0C
PMG_SDMCTL_ONELINE	= $10
PMG_SDMCTL_SCREEN_DISABLED	= $00
PMG_SDMCTL_SCREEN_NARROW	= $01
PMG_SDMCTL_SCREEN_NORMAL	= $02
PMG_SDMCTL_SCREEN_WIDE	= $03
PMG_SDMCTL_DEFAULT	= $0E
PMG_COLLISION_PLAYER_TO_P0	= $01
PMG_COLLISION_PLAYER_TO_P1	= $02
PMG_COLLISION_PLAYER_TO_P2	= $04
PMG_COLLISION_PLAYER_TO_P3	= $08
PMG_5PLAYER	= $10
PMG_OVERLAP	= $20
PMG_SDMCTL	= $D400
PMG_SDMCTL_S	= $022F
PMG_GPRIOR	= $D01B
PMG_GPRIOR_S	= $026F
PMG_PCOLR0	= $D012
PMG_PCOLR1	= $D013
PMG_PCOLR2	= $D014
PMG_PCOLR3	= $D015
adr.PMG_PCOLR	= $D012
.var PMG_PCOLR	= adr.PMG_PCOLR .word
PMG_PCOLR0_S	= $02C0
PMG_PCOLR1_S	= $02C1
PMG_PCOLR2_S	= $02C2
PMG_PCOLR3_S	= $02C3
adr.PMG_PCOLR_S	= $02C0
.var PMG_PCOLR_S	= adr.PMG_PCOLR_S .word
PMG_HPOS0	= $D000
PMG_HPOS1	= $D001
PMG_HPOS2	= $D002
PMG_HPOS3	= $D003
adr.PMG_HPOS	= $D000
.var PMG_HPOS	= adr.PMG_HPOS .word
PMG_HPOSM0	= $D004
PMG_HPOSM1	= $D005
PMG_HPOSM2	= $D006
PMG_HPOSM3	= $D007
adr.PMG_HPOSM	= $D004
.var PMG_HPOSM	= adr.PMG_HPOSM .word
PMG_SIZEP0	= $D008
PMG_SIZEP1	= $D009
PMG_SIZEP2	= $D00A
PMG_SIZEP3	= $D00B
adr.PMG_SIZEP	= $D008
.var PMG_SIZEP	= adr.PMG_SIZEP .word
PMG_SIZEM	= $D00C
PMG_GRAFP0	= $D00D
PMG_GRAFP1	= $D00E
PMG_GRAFP2	= $D00F
PMG_GRAFP3	= $D010
adr.PMG_GRAFP	= $D00D
.var PMG_GRAFP	= adr.PMG_GRAFP .word
PMG_GRAFM	= $D011
PMG_P0PL	= $D00C
PMG_P1PL	= $D00D
PMG_P2PL	= $D00E
PMG_P3PL	= $D00F
adr.PMG_PPL	= $D00C
.var PMG_PPL	= adr.PMG_PPL .word
PMG_VDELAY	= $D01C
PMG_GRACTL	= $D01D
PMG_HITCLR	= $D01E
PMG_PMBASE	= $D407
PMG_ONELINE	= DATAORIGIN+$08A5
PMG_BASE	= DATAORIGIN+$08A6
PMG_SIZE	= DATAORIGIN+$08A8

.endl							; UNIT B_PMG

; ------------------------------------------------------------

.local	JOYSTICK					; UNIT

; ------------------------------------------------------------

JOY_NONE	= $0F
JOY_UP	= $0E
JOY_DOWN	= $0D
JOY_LEFT	= $0B
JOY_LEFT_UP	= $0A
JOY_LEFT_DOWN	= $09
JOY_RIGHT	= $07
JOY_RIGHT_UP	= $06
JOY_RIGHT_DOWN	= $05
JOY_1	= $0278
JOY_2	= $0279
adr.STICK	= $0278
.var STICK	= adr.STICK .word
STICK0	= $0278
STICK1	= $0279
adr.STRIG	= $0284
.var STRIG	= adr.STRIG .word
STRIG0	= $0284
STRIG1	= $0285
adr.PADDL	= $0270
.var PADDL	= adr.PADDL .word
PADDL0	= $0270
PADDL1	= $0271
PADDL2	= $0272
PADDL3	= $0273
PADDL4	= $0274
PADDL5	= $0275
PADDL6	= $0276
PADDL7	= $0277
adr.PTRIG	= $027C
.var PTRIG	= adr.PTRIG .word
PTRIG0	= $027C
PTRIG1	= $027D
PTRIG2	= $027E
PTRIG3	= $027F
PTRIG4	= $0280
PTRIG5	= $0281
PTRIG6	= $0282
PTRIG7	= $0283
TRIG0	= $D010
TRIG1	= $D011

.endl							; UNIT JOYSTICK

.local	DLI						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 093  ---------------------


    pha ; store registers
    mva #2 atari.colpf2
    mva #8 atari.colpf1
    mva >DEFAULT_CHARSET chbase
    mva #176 hposp3
    mva #3 sizep3

    
    mwa #dli2 atari.vdslst
    pla ; restore registers

	rti						; ret
.endl

.local	DLI2						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 094  ---------------------


    pha ; store registers
    mva config.editorBackgroundColor atari.colpf2
    mva config.editorForegroundColor atari.colpf1
    mva editorCharset chbase

    
    
    mwa #dli3 atari.vdslst
    pla ; restore registers

	rti						; ret
.endl

.local	DLI3						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 095  ---------------------


    pha ; store registers
    sta wsync
    mva #2 atari.colpf2
    mva #8 atari.colpf1
    lda statusCustomCharset
    sne
    mva >DEFAULT_CHARSET chbase
    
    mva brushFramePosX hposp3
    mva #0 sizep3
    
    pla ; restore registers

	rti						; ret
.endl

.local	VBL						; PROCEDURE | ASSEMBLER | INTERRUPT

; ---------------------  ASM Block 096  ---------------------


    phr ; store registers
    
    
    mwa #dli atari.vdslst

    ; cursor blink
    lda rtclok+2
    lsr
    and #$0f
    tax 
    lda cursorBrightness,x
    sta atari.pcolr0
    sta atari.pcolr1
    sta atari.pcolr2
    sta atari.pcolr3

    
    lda keyRepeatCounter
    seq
    dec keyRepeatCounter
    

    plr ; restore registers
    jmp $E462 ; jump to system VBL handler
cursorBrightness    
    dta 4, 5, 6, 7, 8, 9, 10, 11, 12, 11, 10, 9, 8, 7, 6, 5

	rti						; ret
.endl

.local	ADJUSTBRUSHFRAME				; PROCEDURE

; optimize OK (artur.pas), line = 77

	lda BRUSHINDEX
	asl @
	asl @
	sta :STACKORIGIN+10
	lda #$C9
	sub :STACKORIGIN+10
	sta BRUSHFRAMEPOSX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SWAP						; PROCEDURE

; optimize OK (artur.pas), line = 83

	mwy A :bp2
	ldy #$00
	lda (:bp2),y
	sta C

; optimize OK (artur.pas), line = 84

	mwy B :bp2
	ldy #$00
	lda (:bp2),y
	mvy A+1 :bp+1
	ldy A
	sta (:bp),y

; optimize OK (artur.pas), line = 85

	ldy #$00
	lda C
	sta (:bp2),y

; ------------------------------------------------------------

A	= DATAORIGIN+$0A29
B	= DATAORIGIN+$0A2B
C	= DATAORIGIN+$0A2D

@VarData	= A
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ADDDRIVETOS					; PROCEDURE

; optimize OK (artur.pas), line = 91

	lda adr.S+$00
	add #$02
	sta L

; optimize OK (artur.pas), line = 92

	sta adr.S+$00

; optimize OK (artur.pas), line = 93

	lda <adr.S+$03
	sta SYSTEM.MOVE_0459.DEST
	lda >adr.S+$03
	sta SYSTEM.MOVE_0459.DEST+1
	lda <adr.S+$01
	sta SYSTEM.MOVE_0459.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_0459.SOURCE+1
	lda L
	sta SYSTEM.MOVE_0459.COUNT
	lda #$00
	sta SYSTEM.MOVE_0459.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0459
	m@INLINE
	.endl

; optimize OK (artur.pas), line = 94

	lda #$44
	sta adr.S+$01

; optimize OK (artur.pas), line = 95

	lda #$3A
	sta adr.S+$02

; ------------------------------------------------------------

L	= DATAORIGIN+$0A2E

@VarData	= L
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HEX2DECDIGIT					; FUNCTION
	sta C

; optimize OK (artur.pas), line = 100

	lda #$FF
	sta RESULT

; optimize OK (artur.pas), line = 101

	lda C
	sta @CASETMP_0005
	clc						; clear carry for add
	adc #$FF-$19					; make m = $FF
	adc #$19-$10+1					; carry set if in range n to m
	jcc l_08BF
@

; optimize OK (artur.pas), line = 102

	lda C
	sub #$10
	sta RESULT

	jmp a_0005
l_08BF
	lda @CASETMP_0005
	clc						; clear carry for add
	adc #$FF-$66					; make m = $FF
	adc #$66-$61+1					; carry set if in range n to m
	jcc l_08D2
@

; optimize OK (artur.pas), line = 103

	lda C
	sub #$57
	sta RESULT

	jmp a_0005
l_08D2
	lda @CASETMP_0005
	clc						; clear carry for add
	adc #$FF-$26					; make m = $FF
	adc #$26-$21+1					; carry set if in range n to m
	jcc l_08E5
@

; optimize OK (artur.pas), line = 104

	lda C
	sub #$17
	sta RESULT

l_08E5
a_0005
@exit

; ------------------------------------------------------------

C	= DATAORIGIN+$0A2F
RESULT	= DATAORIGIN+$0A30
@CASETMP_0005	= DATAORIGIN+$0A31

@VarData	= C
@VarDataSize	= 3

	rts						; ret
.endl

.local	PARSEHEX					; PROCEDURE

; optimize OK (artur.pas), line = 111

	mwy ERR :bp2
	ldy #$00
	tya
	sta (:bp2),y

; optimize OK (artur.pas), line = 112

	mwy I :bp2
	ldy #$00
	sta (:bp2),y

; optimize OK (artur.pas), line = 113

	sta BASE

; optimize OK (artur.pas), line = 114

	lda adr.S+$00
	sta POS

; --- RepeatUntilProlog
l_090E

; optimize OK (artur.pas), line = 116

	ldy POS
	lda adr.S,y
	jsr HEX2DECDIGIT
	lda HEX2DECDIGIT.RESULT
	sta DIGIT

; optimize OK (artur.pas), line = 117

	cmp #$FF
	jne l_092A

; optimize OK (artur.pas), line = 118

	mwy ERR :bp2
	ldy #$00
	lda #$01
	sta (:bp2),y
	jmp @exit					; exit
l_092A

; optimize OK (artur.pas), line = 121

	mwy I :bp2
	ldy #$00
	lda (:bp2),y
	sta :STACKORIGIN+9
	tya
	sta :STACKORIGIN+STACKWIDTH*3+10
	sta :STACKORIGIN+STACKWIDTH*2+10
	sta :STACKORIGIN+STACKWIDTH+10
	lda DIGIT
	ldy BASE
	beq l_0000_e
l_0000_b
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	rol :STACKORIGIN+STACKWIDTH*2+10
	rol :STACKORIGIN+STACKWIDTH*3+10
	dey
	bne l_0000_b
l_0000_e
	add :STACKORIGIN+9
	mwy I :bp2
	ldy #$00
	sta (:bp2),y

; optimize OK (artur.pas), line = 122

	lda BASE
	add #$04
	sta BASE

; optimize FAIL (0, artur.pas), line = 123

	dec POS

; optimize OK (artur.pas), line = 124

	jne l_090E

; ------------------------------------------------------------

I	= DATAORIGIN+$0A32
ERR	= DATAORIGIN+$0A34
POS	= DATAORIGIN+$0A36
DIGIT	= DATAORIGIN+$0A37
BASE	= DATAORIGIN+$0A38

@VarData	= I
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READJOYSTICK					; PROCEDURE

; optimize OK (artur.pas), line = 129

	lda #$00
	sta JOYX

; optimize OK (artur.pas), line = 130

	sta JOYY

; optimize OK (artur.pas), line = 131

	lda +JOYSTICK.STICK0
	and #$01
	jne l_0977
	lda #$FF
	sta JOYY
l_0977

; optimize OK (artur.pas), line = 132

	lda +JOYSTICK.STICK0
	and #$02
	jne l_0994
	lda #$01
	sta JOYY
l_0994

; optimize OK (artur.pas), line = 133

	lda +JOYSTICK.STICK0
	and #$04
	jne l_09B1
	lda #$FF
	sta JOYX
l_09B1

; optimize OK (artur.pas), line = 134

	lda +JOYSTICK.STICK0
	and #$08
	jne l_09CE
	lda #$01
	sta JOYX
l_09CE

; optimize OK (artur.pas), line = 135

	lda +JOYSTICK.STRIG0
	sta JOYFIRE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITPMG						; PROCEDURE

; optimize OK (artur.pas), line = 163

	lda #$70
	jsr B_PMG.PMG_INIT_0832

; optimize OK (artur.pas), line = 164

	lda #$01
	sta B_PMG.PMG_GPRIOR_S

; optimize OK (artur.pas), line = 165

	lda PMGSETTINGS
	sta :bp2
	lda PMGSETTINGS+1
	sta :bp2+1
	ldy #$0C
	mva:rpl (:bp2),y $D000,y-

; optimize OK (artur.pas), line = 166

	lda FRAME
	sta :bp2
	lda FRAME+1
	sta :bp2+1
	ldy #$05
	mva:rpl (:bp2),y $73F0,y-

; ------------------------------------------------------------

adr.FRAME	= [DATAORIGIN+$0A39] .array [6]
.var FRAME	= adr.FRAME .word
adr.PMGSETTINGS	= [DATAORIGIN+$0A3F] .array [13]
.var PMGSETTINGS	= adr.PMGSETTINGS .word

@VarData	= FRAME
@VarDataSize	= 19

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NEXTACTION					; FUNCTION

; optimize OK (artur.pas), line = 176

	ldy UNDOACTIONSIDX
	iny
	sty RESULT

; optimize OK (artur.pas), line = 177

	lda RESULT
	cmp #$40
	jne l_0A0F
	lda #$00
	sta RESULT
l_0A0F
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0A4C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	PREVACTION					; FUNCTION

; optimize OK (artur.pas), line = 182

	lda UNDOACTIONSIDX
	sta RESULT

; optimize OK (artur.pas), line = 183

	jne l_0A32
	lda #$40
	sta RESULT
l_0A32

; optimize FAIL (0, artur.pas), line = 184

	dec RESULT
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0A4D

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

.local	INITUNDOSTORAGE					; PROCEDURE

; optimize OK (artur.pas), line = 190

	lda #$00
	sta UNDOACTIONSIDX

; optimize OK (artur.pas), line = 191

	lda UNDOACTIONS
	sta SYSTEM.FILLBYTE_0457.A
	lda UNDOACTIONS+1
	sta SYSTEM.FILLBYTE_0457.A+1
	lda #$C0
	sta SYSTEM.FILLBYTE_0457.COUNT
	lda #$00
	sta SYSTEM.FILLBYTE_0457.COUNT+1
	lda #$FF
	sta SYSTEM.FILLBYTE_0457.VALUE
	.local +MAIN.SYSTEM.FILLBYTE_0457
	m@INLINE
	.endl

; optimize OK (artur.pas), line = 192

	lda #$08
	sta UNDOBUFFERIDX

; optimize OK (artur.pas), line = 193

	lda #$00
	sta UNDOPTR
	lda #$81
	sta UNDOPTR+1

; --- RepeatUntilProlog
l_0A53

; optimize FAIL (0, artur.pas), line = 195

	dec UNDOBUFFERIDX

; optimize OK (artur.pas), line = 196

	lda UNDOBUFFERIDX
	asl @
	tay
	lda UNDOPTR
	sta adr.UNDOBUFFERS,y
	lda UNDOPTR+1
	sta adr.UNDOBUFFERS+1,y

; optimize OK (artur.pas), line = 197

	lda UNDOPTR
	add #$C0
	sta UNDOPTR
	lda UNDOPTR+1
	adc #$03
	sta UNDOPTR+1

; optimize OK (artur.pas), line = 198

	lda UNDOBUFFERIDX
	jne l_0A53

; ------------------------------------------------------------

UNDOPTR	= DATAORIGIN+$0A4E

@VarData	= UNDOPTR
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETUNDOFROMXY					; PROCEDURE

; optimize OK (artur.pas), line = 203

	lda IDX
	asl @
	add IDX
	tay
	lda X
	sta adr.UNDOACTIONS,y

; optimize OK (artur.pas), line = 204

	lda Y
	sta adr.UNDOACTIONS+$01,y

; optimize OK (artur.pas), line = 205

	lda IDX
	asl @
	add IDX
	sta :STACKORIGIN+9
	lda Y
	asl @
	tay
	lda X
	add adr.LINEOFFSET,y
	sta :STACKORIGIN+10
	lda #$7C
	adc adr.LINEOFFSET+1,y
	sta :bp+1
	ldy :STACKORIGIN+10
	lda (:bp),y
	ldy :STACKORIGIN+9
	sta adr.UNDOACTIONS+$02,y

; ------------------------------------------------------------

IDX	= DATAORIGIN+$0A50
X	= DATAORIGIN+$0A51
Y	= DATAORIGIN+$0A52

@VarData	= IDX
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STOREUNDOFROMXY					; PROCEDURE

; optimize OK (artur.pas), line = 210

	lda UNDOACTIONSIDX
	sta SETUNDOFROMXY.IDX
	lda X
	sta SETUNDOFROMXY.X
	lda Y
	sta SETUNDOFROMXY.Y
	jsr SETUNDOFROMXY

; ------------------------------------------------------------

X	= DATAORIGIN+$0A53
Y	= DATAORIGIN+$0A54

@VarData	= X
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STORESCREENTOUNDOBUFFER				; PROCEDURE
	sta BUFNUM

; optimize OK (artur.pas), line = 215

	asl @
	tay
	lda adr.UNDOBUFFERS,y
	sta SYSTEM.MOVE_0458.DEST
	lda adr.UNDOBUFFERS+1,y
	sta SYSTEM.MOVE_0458.DEST+1
	lda #$00
	sta SYSTEM.MOVE_0458.SOURCE
	lda #$7C
	sta SYSTEM.MOVE_0458.SOURCE+1
	lda #$C0
	sta SYSTEM.MOVE_0458.COUNT
	lda #$03
	sta SYSTEM.MOVE_0458.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0458
	m@INLINE
	.endl

; ------------------------------------------------------------

BUFNUM	= DATAORIGIN+$0A55

@VarData	= BUFNUM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESTORESCREENFROMUNDOBUFFER			; PROCEDURE
	sta BUFNUM

; optimize OK (artur.pas), line = 220

	asl @
	tay
	lda adr.UNDOBUFFERS,y
	sta SYSTEM.MOVE_0458.SOURCE
	lda adr.UNDOBUFFERS+1,y
	sta SYSTEM.MOVE_0458.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_0458.DEST
	lda #$7C
	sta SYSTEM.MOVE_0458.DEST+1
	lda #$C0
	sta SYSTEM.MOVE_0458.COUNT
	lda #$03
	sta SYSTEM.MOVE_0458.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0458
	m@INLINE
	.endl

; ------------------------------------------------------------

BUFNUM	= DATAORIGIN+$0A56

@VarData	= BUFNUM
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	REMOVEBUFFERFROMUNDOACTIONS			; PROCEDURE
	sta BUFNUM

; optimize OK (artur.pas), line = 226

	lda UNDOACTIONSIDX
	sta UNDOPTR

; --- RepeatUntilProlog
l_0AEA

; optimize OK (artur.pas), line = 228

	lda UNDOPTR
	jne l_0AFC
	lda #$40
	sta UNDOPTR
l_0AFC

; optimize FAIL (0, artur.pas), line = 229

	dec UNDOPTR

; optimize OK (artur.pas), line = 230

	lda UNDOPTR
	asl @
	add UNDOPTR
	tay
	lda adr.UNDOACTIONS,y
	sta ACTION

; optimize OK (artur.pas), line = 231

	cmp #$FE
	jne l_0B2A

; optimize OK (artur.pas), line = 232

	lda adr.UNDOACTIONS+$01,y
	cmp BUFNUM
	jne l_0B4A

; optimize OK (artur.pas), line = 233

	lda #$FF
	sta adr.UNDOACTIONS,y

; optimize OK (artur.pas), line = 234

	sta ACTION
l_0B4A
l_0B2A

; optimize OK (artur.pas), line = 236

	lda ACTION
	cmp #$FF
	jeq l_0AEAx
	lda UNDOPTR
	cmp UNDOACTIONSIDX
	jne l_0AEA
l_0AEAx

; ------------------------------------------------------------

BUFNUM	= DATAORIGIN+$0A57
UNDOPTR	= DATAORIGIN+$0A58
ACTION	= DATAORIGIN+$0A59

@VarData	= BUFNUM
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STOREUNDOBUFFER					; PROCEDURE

; optimize OK (artur.pas), line = 241

	lda UNDOBUFFERIDX
	jsr STORESCREENTOUNDOBUFFER

; optimize OK (artur.pas), line = 242

	lda UNDOBUFFERIDX
	jsr REMOVEBUFFERFROMUNDOACTIONS

; optimize OK (artur.pas), line = 243

	lda UNDOACTIONSIDX
	asl @
	add UNDOACTIONSIDX
	tay
	lda #$FE
	sta adr.UNDOACTIONS,y

; optimize OK (artur.pas), line = 244

	lda UNDOBUFFERIDX
	sta adr.UNDOACTIONS+$01,y

; optimize FAIL (0, artur.pas), line = 245

	inc UNDOBUFFERIDX

; optimize OK (artur.pas), line = 246

	lda UNDOBUFFERIDX
	cmp #$08
	jne l_0BBF
	lda #$00
	sta UNDOBUFFERIDX
l_0BBF
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESTORECHARFROMUNDO				; PROCEDURE
	sta IDX

; optimize OK (artur.pas), line = 252

	asl @
	add IDX
	tay
	lda adr.UNDOACTIONS,y
	sta RX

; optimize OK (artur.pas), line = 253

	lda adr.UNDOACTIONS+$01,y
	sta RY

; optimize OK (artur.pas), line = 254

	lda adr.UNDOACTIONS+$02,y
	sta RC

; optimize OK (artur.pas), line = 255

	lda RY
	asl @
	tay
	lda RX
	add adr.LINEOFFSET,y
	sta :STACKORIGIN+10
	lda #$7C
	adc adr.LINEOFFSET+1,y
	sta :bp+1
	ldy :STACKORIGIN+10
	lda RC
	sta (:bp),y

; ------------------------------------------------------------

IDX	= DATAORIGIN+$0A5A
RX	= DATAORIGIN+$0A5B
RY	= DATAORIGIN+$0A5C
RC	= DATAORIGIN+$0A5D

@VarData	= IDX
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESTORE						; PROCEDURE
	sta ACTIONIDX

; optimize OK (artur.pas), line = 260

	asl @
	add ACTIONIDX
	tay
	lda adr.UNDOACTIONS,y
	cmp #$FE
	jne l_0C31

; optimize FAIL ('STOREUNDOBUFFER', artur.pas), line = 261

	jsr STOREUNDOBUFFER

; optimize OK (artur.pas), line = 262

	lda ACTIONIDX
	sta UNDOACTIONSIDX

; optimize OK (artur.pas), line = 263

	asl @
	add ACTIONIDX
	tay
	lda adr.UNDOACTIONS+$01,y
	jsr RESTORESCREENFROMUNDOBUFFER
	jmp l_0C51
l_0C31

; optimize OK (artur.pas), line = 265

	lda ACTIONIDX
	asl @
	add ACTIONIDX
	tay
	lda adr.UNDOACTIONS+$01,y
	sta STOREUNDOFROMXY.Y
	lda adr.UNDOACTIONS,y
	sta STOREUNDOFROMXY.X
	jsr STOREUNDOFROMXY

; optimize OK (artur.pas), line = 266

	lda ACTIONIDX
	sta UNDOACTIONSIDX

; optimize OK (artur.pas), line = 267

	jsr RESTORECHARFROMUNDO
l_0C51

; ------------------------------------------------------------

ACTIONIDX	= DATAORIGIN+$0A5E

@VarData	= ACTIONIDX
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STOREUNDOACTION					; PROCEDURE
	sta WHOLESCREEN

; optimize OK (artur.pas), line = 273

	lda #$00
	sta REDOCOUNT

; optimize OK (artur.pas), line = 274

	lda WHOLESCREEN
	jeq l_0C8C

; optimize FAIL ('STOREUNDOBUFFER', artur.pas), line = 275

	jsr STOREUNDOBUFFER
	jmp l_0C97
l_0C8C
	lda CURSORX
	sta STOREUNDOFROMXY.X
	lda CURSORY
	sta STOREUNDOFROMXY.Y
	jsr STOREUNDOFROMXY
l_0C97

; optimize FAIL ('NEXTACTION', artur.pas), line = 276

	jsr NEXTACTION
	lda NEXTACTION.RESULT
	sta UNDOACTIONSIDX

; ------------------------------------------------------------

WHOLESCREEN	= DATAORIGIN+$0A5F

@VarData	= WHOLESCREEN
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TRYUNDO						; PROCEDURE

; optimize FAIL ('PREVACTION', artur.pas), line = 282

	jsr PREVACTION
	lda PREVACTION.RESULT
	sta PREV

; optimize OK (artur.pas), line = 283

	asl @
	add PREV
	tay
	lda adr.UNDOACTIONS,y
	cmp #$FF
	jeq l_0CC7

; optimize OK (artur.pas), line = 284

	lda PREV
	jsr RESTORE

; optimize OK (artur.pas), line = 285

	lda PREV
	asl @
	add PREV
	tay
	lda adr.UNDOACTIONS,y
	cmp #$FE
	jne l_0CE9
	lda adr.UNDOACTIONS+$01,y
	sta UNDOBUFFERIDX
l_0CE9

; optimize FAIL (0, artur.pas), line = 286

	inc REDOCOUNT
l_0CC7

; ------------------------------------------------------------

PREV	= DATAORIGIN+$0A60

@VarData	= PREV
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	TRYREDO						; PROCEDURE

; optimize FAIL ('NEXTACTION', artur.pas), line = 293

	jsr NEXTACTION
	lda NEXTACTION.RESULT
	sta NEXT

; optimize OK (artur.pas), line = 294

	lda REDOCOUNT
	jeq l_0D1D

; optimize OK (artur.pas), line = 295

	lda NEXT
	asl @
	add NEXT
	tay
	lda adr.UNDOACTIONS,y
	cmp #$FF
	jeq l_0D3B

; optimize OK (artur.pas), line = 296

	lda NEXT
	jsr RESTORE

; optimize FAIL (0, artur.pas), line = 297

	dec REDOCOUNT
l_0D3B
l_0D1D

; ------------------------------------------------------------

NEXT	= DATAORIGIN+$0A61

@VarData	= NEXT
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEAREDIT					; PROCEDURE

; optimize OK (artur.pas), line = 309

	lda #$00
	sta SYSTEM.FILLBYTE_0457.A
	lda #$7C
	sta SYSTEM.FILLBYTE_0457.A+1
	lda #$C0
	sta SYSTEM.FILLBYTE_0457.COUNT
	lda #$03
	sta SYSTEM.FILLBYTE_0457.COUNT+1
	lda #$00
	sta SYSTEM.FILLBYTE_0457.VALUE
	.local +MAIN.SYSTEM.FILLBYTE_0457
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARBUFFER					; PROCEDURE

; optimize OK (artur.pas), line = 314

	lda #$00
	sta SYSTEM.FILLBYTE_0457.A
	lda #$78
	sta SYSTEM.FILLBYTE_0457.A+1
	lda #$C0
	sta SYSTEM.FILLBYTE_0457.COUNT
	lda #$03
	sta SYSTEM.FILLBYTE_0457.COUNT+1
	lda #$00
	sta SYSTEM.FILLBYTE_0457.VALUE
	.local +MAIN.SYSTEM.FILLBYTE_0457
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	STOREEDITINBUFFER				; PROCEDURE

; optimize OK (artur.pas), line = 319

	lda #$00
	sta SYSTEM.MOVE_0458.SOURCE
	lda #$7C
	sta SYSTEM.MOVE_0458.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_0458.DEST
	lda #$78
	sta SYSTEM.MOVE_0458.DEST+1
	lda #$C0
	sta SYSTEM.MOVE_0458.COUNT
	lda #$03
	sta SYSTEM.MOVE_0458.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0458
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESTOREEDITFROMBUFFER				; PROCEDURE

; optimize OK (artur.pas), line = 324

	lda #$00
	sta SYSTEM.MOVE_0458.SOURCE
	lda #$78
	sta SYSTEM.MOVE_0458.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_0458.DEST
	lda #$7C
	sta SYSTEM.MOVE_0458.DEST+1
	lda #$C0
	sta SYSTEM.MOVE_0458.COUNT
	lda #$03
	sta SYSTEM.MOVE_0458.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0458
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWRECT					; PROCEDURE

; optimize OK (artur.pas), line = 330

	lda Y
	asl @
	tay
	lda adr.LINEOFFSET,y
	add X
	sta CARRET
	lda adr.LINEOFFSET+1,y
	adc #$7C
	sta CARRET+1

; --- RepeatUntilProlog
l_0D7F

; optimize OK (artur.pas), line = 332

	lda CARRET
	sta SYSTEM.FILLBYTE_0457.A
	lda CARRET+1
	sta SYSTEM.FILLBYTE_0457.A+1
	lda W
	sta SYSTEM.FILLBYTE_0457.COUNT
	lda #$00
	sta SYSTEM.FILLBYTE_0457.COUNT+1
	lda C
	sta SYSTEM.FILLBYTE_0457.VALUE
	.local +MAIN.SYSTEM.FILLBYTE_0457
	m@INLINE
	.endl

; optimize OK (artur.pas), line = 333

	lda CARRET
	add #$28
	sta CARRET
	scc
	inc CARRET+1

; optimize FAIL (0, artur.pas), line = 334

	dec H

; optimize OK (artur.pas), line = 335

	jne l_0D7F

; ------------------------------------------------------------

X	= DATAORIGIN+$0A62
Y	= DATAORIGIN+$0A63
W	= DATAORIGIN+$0A64
H	= DATAORIGIN+$0A65
C	= DATAORIGIN+$0A66
CARRET	= DATAORIGIN+$0A67

@VarData	= X
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	READCURSORCHAR					; PROCEDURE

; optimize OK (artur.pas), line = 340

	ldy CURSOR
	lda #$7C
	add CURSOR+1
	sta :bp+1
	lda (:bp),y
	sta CURSORCHAR

; optimize OK (artur.pas), line = 341

	lda CONFIG.KEYCODEDISPLAY
	cmp #$02
	jne l_0DC2
	lda CURSORCHAR
	jsr B_CRT.ANTIC2ATASCII_0539
	lda B_CRT.ANTIC2ATASCII_0539.RESULT
	sta CURSORCHAR
l_0DC2
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATEXYK					; PROCEDURE

; optimize FAIL ('SYSTEM.STR_0449', artur.pas), line = 346

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva CURSORX :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr SYSTEM.STR_0449

; optimize FAIL ('B_CRT.ATASCII2ANTIC_053D', artur.pas), line = 347

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.ATASCII2ANTIC_053D
	inx
	lda B_CRT.ATASCII2ANTIC_053D.RESULT
	sta @move.src
	lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
	sta @move.src+1
	@moveSTRING S #41
	dex

; optimize OK (artur.pas), line = 348

	lda #$00
	sta $7FCC

; optimize OK (artur.pas), line = 349

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$CB
	sta SYSTEM.MOVE_045A.DEST
	lda #$7F
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl

; optimize FAIL ('SYSTEM.STR_0449', artur.pas), line = 351

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva CURSORY :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr SYSTEM.STR_0449

; optimize FAIL ('B_CRT.ATASCII2ANTIC_053D', artur.pas), line = 352

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.ATASCII2ANTIC_053D
	inx
	lda B_CRT.ATASCII2ANTIC_053D.RESULT
	sta @move.src
	lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
	sta @move.src+1
	@moveSTRING S #41
	dex

; optimize OK (artur.pas), line = 353

	lda #$00
	sta $7FD0

; optimize OK (artur.pas), line = 354

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$CF
	sta SYSTEM.MOVE_045A.DEST
	lda #$7F
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl

; optimize OK (artur.pas), line = 356

	lda CONFIG.KEYCODEDISPLAY
	jeq l_0E08

; optimize OK (artur.pas), line = 357

	lda #$AB
	sta $7FD2

; optimize OK (artur.pas), line = 358

	lda CURSORCHAR
	sta SYSTEM.HEXSTR.VALUE
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+1
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$02
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	inx
	mva SYSTEM.HEXSTR.RESULT :STACKORIGIN,x
	mva SYSTEM.HEXSTR.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.ATASCII2ANTIC_053D
	inx
	lda B_CRT.ATASCII2ANTIC_053D.RESULT
	sta @move.src
	lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
	sta @move.src+1
	@moveSTRING S #41
	dex

; optimize OK (artur.pas), line = 359

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$D3
	sta SYSTEM.MOVE_045A.DEST
	lda #$7F
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl
l_0E08
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWSTATUS					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE_0479', artur.pas), line = 365

	jsr SYSTEM.PAUSE_0479

; optimize OK (artur.pas), line = 366

	lda #$00
	ldy #$27
	sta:rpl $7FC0,y-
	ldy #256-19
	mva:rne CODEORIGIN+$0015+19-256,y adr.S+19-256,y+

; optimize OK (artur.pas), line = 368

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$C0
	sta SYSTEM.MOVE_045A.DEST
	lda #$7F
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl
	ldy #256-6
	mva:rne CODEORIGIN+$0029+6-256,y adr.S+6-256,y+

; optimize OK (artur.pas), line = 371

	lda MODE
	cmp #$01
	jne l_0E3D
	ldy #256-6
	mva:rne CODEORIGIN+$0030+6-256,y adr.S+6-256,y+
l_0E3D

; optimize OK (artur.pas), line = 372

	lda MODE
	cmp #$02
	jne l_0E52
	ldy #256-6
	mva:rne CODEORIGIN+$0037+6-256,y adr.S+6-256,y+
l_0E52

; optimize OK (artur.pas), line = 373

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$C4
	sta SYSTEM.MOVE_045A.DEST
	lda #$7F
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl

; optimize FAIL ('UPDATEXYK', artur.pas), line = 375

	jsr UPDATEXYK

; optimize OK (artur.pas), line = 377

	lda #$11
	sta B

l_0E66
; --- ForToDoCondition
	ldy B
	lda adr.BRUSHHISTORY,y
	sta :STACKORIGIN+9
	lda #$E7
	sub B
	tay
	lda #$7F
	sbc #$00
	sta :bp+1
	lda :STACKORIGIN+9
	sta (:bp),y
	dec B
	jpl l_0E66
l_0E74

; optimize OK (artur.pas), line = 378

	lda BRUSH
	sta $7FE7

; ------------------------------------------------------------

@FORTMP_0E63	= $00
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWMENUBAR					; PROCEDURE

; optimize OK (artur.pas), line = 383

	lda #$00
	ldy #$27
	sta:rpl $7BC0,y-

; optimize OK (artur.pas), line = 384

	lda MODE
	jne l_0EAE
	ldy #256-41
	mva:rne CODEORIGIN+$003E+41-256,y adr.S+41-256,y+

; optimize OK (artur.pas), line = 386

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$C0
	sta SYSTEM.MOVE_045A.DEST
	lda #$7B
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl

; optimize OK (artur.pas), line = 387

	lda CURSORFORWARD
	jeq l_0EC2
	ldy #256-7
	mva:rne CODEORIGIN+$0068+7-256,y adr.S+7-256,y+

; optimize OK (artur.pas), line = 389

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$DA
	sta SYSTEM.MOVE_045A.DEST
	lda #$7B
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl
l_0EC2

; optimize OK (artur.pas), line = 391

	lda INVERT
	jeq l_0ED8
	ldy #256-8
	mva:rne CODEORIGIN+$0070+8-256,y adr.S+8-256,y+

; optimize OK (artur.pas), line = 393

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$E1
	sta SYSTEM.MOVE_045A.DEST
	lda #$7B
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl
l_0ED8
l_0EAE

; optimize OK (artur.pas), line = 396

	lda MODE
	cmp #$01
	jne l_0EF6
	ldy #256-41
	mva:rne CODEORIGIN+$0079+41-256,y adr.S+41-256,y+

; optimize OK (artur.pas), line = 402

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$C0
	sta SYSTEM.MOVE_045A.DEST
	lda #$7B
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl

; optimize OK (artur.pas), line = 403

	lda DRAWTOOL
	jne l_0F10
	ldy #256-5
	mva:rne CODEORIGIN+$00A3+5-256,y adr.S+5-256,y+

; optimize OK (artur.pas), line = 405

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$CD
	sta SYSTEM.MOVE_045A.DEST
	lda #$7B
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl
l_0F10

; optimize OK (artur.pas), line = 407

	lda DRAWTOOL
	cmp #$01
	jne l_0F2C
	ldy #256-5
	mva:rne CODEORIGIN+$00A9+5-256,y adr.S+5-256,y+

; optimize OK (artur.pas), line = 409

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$D4
	sta SYSTEM.MOVE_045A.DEST
	lda #$7B
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl
l_0F2C

; optimize OK (artur.pas), line = 411

	lda DRAWTOOL
	cmp #$02
	jne l_0F48
	ldy #256-6
	mva:rne CODEORIGIN+$00AF+6-256,y adr.S+6-256,y+

; optimize OK (artur.pas), line = 413

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$DB
	sta SYSTEM.MOVE_045A.DEST
	lda #$7B
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl
l_0F48

; optimize OK (artur.pas), line = 415

	lda DRAWTOOL
	cmp #$03
	jne l_0F64
	ldy #256-6
	mva:rne CODEORIGIN+$00B6+6-256,y adr.S+6-256,y+

; optimize OK (artur.pas), line = 417

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$E3
	sta SYSTEM.MOVE_045A.DEST
	lda #$7B
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl
l_0F64
l_0EF6

; optimize OK (artur.pas), line = 420

	lda MODE
	cmp #$02
	jne l_0F82

; optimize OK (artur.pas), line = 421

	lda P2X
	cmp #$FF
	jne l_0F95
	ldy #256-32
	mva:rne CODEORIGIN+$00BD+32-256,y adr.S+32-256,y+

; optimize OK (artur.pas), line = 423

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$C0
	sta SYSTEM.MOVE_045A.DEST
	lda #$7B
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl
	jmp l_0FA6
l_0F95
	ldy #256-33
	mva:rne CODEORIGIN+$00DE+33-256,y adr.S+33-256,y+

; optimize OK (artur.pas), line = 430

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda #$C0
	sta SYSTEM.MOVE_045A.DEST
	lda #$7B
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl
l_0FA6
l_0F82
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	XORCURSOR					; PROCEDURE

; optimize OK (artur.pas), line = 444

	lda X
	lsr @
	lsr @
	lsr @
	sta PX

; optimize OK (artur.pas), line = 445

	sta :eax+1
	lda #$00
	lsr :eax+1
	ror @
	add #$80
	sta :STACKORIGIN+9
	lda #$71
	adc :eax+1
	sta :STACKORIGIN+STACKWIDTH+9
	lda #$00
	sta :STACKORIGIN+STACKWIDTH+10
	lda Y
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	asl @
	rol :STACKORIGIN+STACKWIDTH+10
	sta :STACKORIGIN+10
	lda :STACKORIGIN+9
	add :STACKORIGIN+10
	tay
	lda :STACKORIGIN+STACKWIDTH+9
	adc :STACKORIGIN+STACKWIDTH+10
	sta CURSOR_PMG+1
	tya
	add #$0F
	sta CURSOR_PMG
	scc
	inc CURSOR_PMG+1

; optimize OK (artur.pas), line = 446

	lda X
	and #$07
	sta PX

; optimize FAIL (50, artur.pas), line = 447

	inx
	mva #$80 :STACKORIGIN,x
	inx
	mva PX :STACKORIGIN,x
	jsr shrAL_CL.BYTE
	dex
	lda :STACKORIGIN,x
	sta CURSOR_MASK
	dex

; optimize OK (artur.pas), line = 448

	lda #$04
	sta PX

; --- RepeatUntilProlog
l_0FF6

; optimize OK (artur.pas), line = 450

	ldy CURSOR_PMG+1
	sty :bp+1
	ldy CURSOR_PMG
	lda (:bp),y
	eor CURSOR_MASK
	sta (:bp),y

; optimize FAIL (0, artur.pas), line = 451

	inc CURSOR_PMG
	sne
	inc CURSOR_PMG+1

; optimize FAIL (0, artur.pas), line = 452

	dec PX

; optimize OK (artur.pas), line = 453

	jne l_0FF6

; ------------------------------------------------------------

X	= DATAORIGIN+$0A69
Y	= DATAORIGIN+$0A6A
PX	= DATAORIGIN+$0A6B
CURSOR_MASK	= DATAORIGIN+$0A6C
CURSOR_PMG	= DATAORIGIN+$0A6D

@VarData	= X
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	ERASEALLCURSORS					; PROCEDURE

; optimize OK (artur.pas), line = 458

	lda #$80
	sta SYSTEM.FILLBYTE_0457.A
	lda #$71
	sta SYSTEM.FILLBYTE_0457.A+1
	lda #$70
	sta SYSTEM.FILLBYTE_0457.COUNT
	lda #$02
	sta SYSTEM.FILLBYTE_0457.COUNT+1
	lda #$00
	sta SYSTEM.FILLBYTE_0457.VALUE
	.local +MAIN.SYSTEM.FILLBYTE_0457
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INITCURSOR					; PROCEDURE

; optimize OK (artur.pas), line = 463

	lda #$00
	sta CURSORX

; optimize OK (artur.pas), line = 464

	sta CURSORY

; optimize OK (artur.pas), line = 465

	sta CURSOR
	sta CURSOR+1

; optimize OK (artur.pas), line = 466

	lda CURSORX
	sta XORCURSOR.X
	lda CURSORY
	sta XORCURSOR.Y
	jsr XORCURSOR
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWSELECTION					; PROCEDURE

; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 472

	jsr ERASEALLCURSORS

; optimize OK (artur.pas), line = 473

	lda PC2X
	cmp PC1X
	jcs l_104F
	lda <PC1X
	sta SWAP.A
	lda >PC1X
	sta SWAP.A+1
	lda <PC2X
	sta SWAP.B
	lda >PC2X
	sta SWAP.B+1
	jsr SWAP
l_104F

; optimize OK (artur.pas), line = 474

	lda PC2Y
	cmp PC1Y
	jcs l_1069
	lda <PC1Y
	sta SWAP.A
	lda >PC1Y
	sta SWAP.A+1
	lda <PC2Y
	sta SWAP.B
	lda >PC2Y
	sta SWAP.B+1
	jsr SWAP
l_1069

; optimize OK (artur.pas), line = 475

	lda PC1X
	sta X

l_107C
; --- ForToDoCondition
	lda X
	cmp PC2X
	scc
	jne l_108A

; optimize OK (artur.pas), line = 476

	sta XORCURSOR.X
	lda PC1Y
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize OK (artur.pas), line = 477

	lda PC1Y
	cmp PC2Y
	jeq l_10A5
	lda X
	sta XORCURSOR.X
	lda PC2Y
	sta XORCURSOR.Y
	jsr XORCURSOR
l_10A5

; --- ForToDoEpilog
	inc X
	jne l_107C
l_108A

; optimize OK (artur.pas), line = 479

	ldy PC1Y
	iny
	sty Y
	ldy PC2Y
	dey
	sty :@FORTMP?10C6_0

l_10C9
; --- ForToDoCondition
.def :@FORTMP?10C6_0 = *+1
	lda #$00
	cmp Y
	jcc l_10D7

; optimize OK (artur.pas), line = 480

	lda PC1X
	sta XORCURSOR.X
	lda Y
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize OK (artur.pas), line = 481

	lda PC1X
	cmp PC2X
	jeq l_10F2
	lda PC2X
	sta XORCURSOR.X
	lda Y
	sta XORCURSOR.Y
	jsr XORCURSOR
l_10F2

; --- ForToDoEpilog
	inc Y
	jne l_10C9
l_10D7

; ------------------------------------------------------------

PC1X	= DATAORIGIN+$0A6F
PC1Y	= DATAORIGIN+$0A70
PC2X	= DATAORIGIN+$0A71
PC2Y	= DATAORIGIN+$0A72
X	= DATAORIGIN+$0A73
Y	= DATAORIGIN+$0A74
@FORTMP_10C6	= $00

@VarData	= PC1X
@VarDataSize	= 6

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWLINE					; PROCEDURE

; optimize OK (artur.pas), line = 493

	ldy #1
	lda P2X
	cmp #$FF
	beq @+
	dey
@
	tya
	sta CUR

; optimize OK (artur.pas), line = 495

	jne l_1120
	lda #$01
	jsr STOREUNDOACTION
l_1120

; optimize OK (artur.pas), line = 497

	lda CURSORX
	sta P2X

; optimize OK (artur.pas), line = 498

	lda CURSORY
	sta P2Y

; optimize OK (artur.pas), line = 499

	lda P2X
	sub P1X
	sta DELTAX

; optimize OK (artur.pas), line = 500

	jpl l_114F
	lda #$00
	sub DELTAX
	sta DELTAX
l_114F

; optimize OK (artur.pas), line = 501

	lda P2Y
	sub P1Y
	sta DELTAY

; optimize OK (artur.pas), line = 502

	jpl l_1179
	lda #$00
	sub DELTAY
	sta DELTAY
l_1179

; optimize OK (artur.pas), line = 504

	lda DELTAX
	sub DELTAY
	svc
	eor #$80
	jmi l_1199

; optimize OK (artur.pas), line = 506

	ldy DELTAX
	iny
	sty NUMPIXELS

; optimize OK (artur.pas), line = 507

	lda DELTAY
	asl @
	sub DELTAX
	sta D

; optimize OK (artur.pas), line = 508

	lda DELTAY
	asl @
	sta DINC1

; optimize OK (artur.pas), line = 509

	lda DELTAY
	sub DELTAX
	asl @
	sta DINC2

; optimize OK (artur.pas), line = 510

	lda #$01
	sta XINC1

; optimize OK (artur.pas), line = 511

	sta XINC2

; optimize OK (artur.pas), line = 512

	lda #$00
	sta YINC1

; optimize OK (artur.pas), line = 513

	lda #$01
	sta YINC2
	jmp l_11E7
l_1199

; optimize OK (artur.pas), line = 516

	ldy DELTAY
	iny
	sty NUMPIXELS

; optimize OK (artur.pas), line = 517

	lda DELTAX
	asl @
	sub DELTAY
	sta D

; optimize OK (artur.pas), line = 518

	lda DELTAX
	asl @
	sta DINC1

; optimize OK (artur.pas), line = 519

	lda DELTAX
	sub DELTAY
	asl @
	sta DINC2

; optimize OK (artur.pas), line = 520

	lda #$00
	sta XINC1

; optimize OK (artur.pas), line = 521

	lda #$01
	sta XINC2

; optimize OK (artur.pas), line = 522

	sta YINC1

; optimize OK (artur.pas), line = 523

	sta YINC2
l_11E7

; optimize OK (artur.pas), line = 526

	lda P2X
	cmp P1X
	jcs l_123F

; optimize OK (artur.pas), line = 527

	lda #$00
	sub XINC1
	sta XINC1

; optimize OK (artur.pas), line = 528

	lda #$00
	sub XINC2
	sta XINC2
l_123F

; optimize OK (artur.pas), line = 530

	lda P2Y
	cmp P1Y
	jcs l_1268

; optimize OK (artur.pas), line = 531

	lda #$00
	sub YINC1
	sta YINC1

; optimize OK (artur.pas), line = 532

	lda #$00
	sub YINC2
	sta YINC2
l_1268

; optimize OK (artur.pas), line = 535

	lda P1X
	sta X

; optimize OK (artur.pas), line = 536

	lda P1Y
	sta Y

; optimize OK (artur.pas), line = 538

	lda #$01
	sta I

l_1294
; --- ForToDoCondition
	lda I
	cmp NUMPIXELS
	scc
	jne l_12A2

; optimize OK (artur.pas), line = 539

	lda CUR
	jeq l_12AE

; optimize OK (artur.pas), line = 540

	lda I
	cmp NUMPIXELS
	jcs l_12C3
	lda X
	sta XORCURSOR.X
	lda Y
	sta XORCURSOR.Y
	jsr XORCURSOR
l_12C3
	jmp l_12D6
l_12AE

; optimize OK (artur.pas), line = 541

	lda Y
	asl @
	tay
	lda adr.LINEOFFSET,y
	add X
	sta :STACKORIGIN+10
	lda adr.LINEOFFSET+1,y
	adc #$7C
	sta :bp+1
	ldy :STACKORIGIN+10
	lda BRUSH
	sta (:bp),y
l_12D6

; optimize OK (artur.pas), line = 542

	lda D
	jpl l_12FB

; optimize OK (artur.pas), line = 543

	add DINC1
	sta D

; optimize OK (artur.pas), line = 544

	lda X
	add XINC1
	sta X

; optimize OK (artur.pas), line = 545

	lda Y
	add YINC1
	sta Y
	jmp l_1329
l_12FB

; optimize OK (artur.pas), line = 548

	lda D
	add DINC2
	sta D

; optimize OK (artur.pas), line = 549

	lda X
	add XINC2
	sta X

; optimize OK (artur.pas), line = 550

	lda Y
	add YINC2
	sta Y
l_1329

; --- ForToDoEpilog
	inc I
	jne l_1294
l_12A2

; optimize OK (artur.pas), line = 553

	lda CUR
	jeq l_135E
	lda #$FF
	sta P2X
l_135E

; ------------------------------------------------------------

DELTAX	= DATAORIGIN+$0A76
DELTAY	= DATAORIGIN+$0A77
D	= DATAORIGIN+$0A78
DINC1	= DATAORIGIN+$0A79
DINC2	= DATAORIGIN+$0A7A
XINC1	= DATAORIGIN+$0A7B
XINC2	= DATAORIGIN+$0A7C
YINC1	= DATAORIGIN+$0A7D
YINC2	= DATAORIGIN+$0A7E
NUMPIXELS	= DATAORIGIN+$0A7F
X	= DATAORIGIN+$0A80
Y	= DATAORIGIN+$0A81
I	= DATAORIGIN+$0A82
CUR	= DATAORIGIN+$0A83

@VarData	= DELTAX
@VarDataSize	= 14

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVECURSOR					; PROCEDURE

; optimize FAIL ('SYSTEM.PAUSE_0479', artur.pas), line = 559

	jsr SYSTEM.PAUSE_0479

; optimize OK (artur.pas), line = 560

	lda #$00
	sta SELECTIONMODE

; optimize OK (artur.pas), line = 561

	lda CURSORX
	sta XORCURSOR.X
	lda CURSORY
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize OK (artur.pas), line = 563

	lda CURSORX
	add DX
	sta CURSORX

; optimize OK (artur.pas), line = 564

	cmp #$FF
	jne l_1393
	lda #$27
	sta CURSORX
l_1393

; optimize OK (artur.pas), line = 565

	lda CURSORX
	cmp #$28
	jne l_13AC
	lda #$00
	sta CURSORX
l_13AC

; optimize OK (artur.pas), line = 566

	lda CURSORY
	add DY
	sta CURSORY

; optimize OK (artur.pas), line = 567

	cmp #$FF
	jne l_13D1
	lda #$17
	sta CURSORY
l_13D1

; optimize OK (artur.pas), line = 568

	lda CURSORY
	cmp #$18
	jne l_13EA
	lda #$00
	sta CURSORY
l_13EA

; optimize OK (artur.pas), line = 569

	lda CURSORY
	asl @
	tay
	lda adr.LINEOFFSET,y
	add CURSORX
	sta CURSOR
	lda adr.LINEOFFSET+1,y
	adc #$00
	sta CURSOR+1

; optimize OK (artur.pas), line = 573

	lda MODE
	cmp #$01
	jeq l_141Dx
	cmp #$02
	jne l_141D
l_141Dx

; optimize OK (artur.pas), line = 574

	lda P1X
	cmp #$FF
	jeq l_143C
	lda P2X
	cmp #$FF
	jne l_143C

; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 575

	jsr ERASEALLCURSORS

; optimize OK (artur.pas), line = 576

	lda MODE
	cmp #$01
	jne l_145C
	lda DRAWTOOL
	cmp #$01
	jne l_145C

; optimize FAIL ('DRAWLINE', artur.pas), line = 577

	jsr DRAWLINE
	jmp l_1467
l_145C

; optimize OK (artur.pas), line = 578

	lda P1X
	sta DRAWSELECTION.PC1X
	lda P1Y
	sta DRAWSELECTION.PC1Y
	lda CURSORX
	sta DRAWSELECTION.PC2X
	lda CURSORY
	sta DRAWSELECTION.PC2Y
	jsr DRAWSELECTION

; optimize OK (artur.pas), line = 579

	lda #$01
	sta SELECTIONMODE
l_1467
l_143C
l_141D

; optimize OK (artur.pas), line = 583

	lda SELECTIONMODE
	jne l_148B
	lda CURSORX
	sta XORCURSOR.X
	lda CURSORY
	sta XORCURSOR.Y
	jsr XORCURSOR
l_148B

; optimize FAIL ('READCURSORCHAR', artur.pas), line = 584

	jsr READCURSORCHAR

; optimize FAIL ('UPDATEXYK', artur.pas), line = 585

	jsr UPDATEXYK

; optimize OK (artur.pas), line = 586

	lda #$00
	sta KEYDOWN

; ------------------------------------------------------------

DX	= DATAORIGIN+$0A84
DY	= DATAORIGIN+$0A85
SELECTIONMODE	= DATAORIGIN+$0A86

@VarData	= DX
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLEARSELECTION					; PROCEDURE

; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 591

	jsr ERASEALLCURSORS

; optimize OK (artur.pas), line = 592

	lda #$FF
	sta P1X
	sta P2X

; optimize OK (artur.pas), line = 593

	lda CURSORX
	sta XORCURSOR.X
	lda CURSORY
	sta XORCURSOR.Y
	jsr XORCURSOR
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CHECKCURSORKEYS					; PROCEDURE
	sta OFFSET

; optimize OK (artur.pas), line = 598

	lda #$06
	add OFFSET
	cmp KEY
	jne l_14CB
	lda #$FF
	sta MOVECURSOR.DX
	lda #$00
	sta MOVECURSOR.DY
	jsr MOVECURSOR
l_14CB

; optimize OK (artur.pas), line = 599

	lda #$07
	add OFFSET
	cmp KEY
	jne l_14E9
	lda #$01
	sta MOVECURSOR.DX
	lda #$00
	sta MOVECURSOR.DY
	jsr MOVECURSOR
l_14E9

; optimize OK (artur.pas), line = 600

	lda #$0E
	add OFFSET
	cmp KEY
	jne l_1507
	lda #$00
	sta MOVECURSOR.DX
	lda #$FF
	sta MOVECURSOR.DY
	jsr MOVECURSOR
l_1507

; optimize OK (artur.pas), line = 601

	lda #$0F
	add OFFSET
	cmp KEY
	jne l_1525
	lda #$00
	sta MOVECURSOR.DX
	lda #$01
	sta MOVECURSOR.DY
	jsr MOVECURSOR
l_1525

; ------------------------------------------------------------

OFFSET	= DATAORIGIN+$0A87

@VarData	= OFFSET
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITESXY					; PROCEDURE

; optimize OK (artur.pas), line = 613

	lda Y
	asl @
	tay
	lda adr.LINEOFFSET,y
	add X
	sta CARRET
	lda adr.LINEOFFSET+1,y
	adc #$7C
	sta CARRET+1

; optimize OK (artur.pas), line = 614

	lda adr.S+$00
	sta SYSTEM.MOVE_045A.COUNT
	lda <adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE
	lda >adr.S+$01
	sta SYSTEM.MOVE_045A.SOURCE+1
	lda CARRET
	sta SYSTEM.MOVE_045A.DEST
	lda CARRET+1
	sta SYSTEM.MOVE_045A.DEST+1
	lda #$00
	sta SYSTEM.MOVE_045A.COUNT+1
	.local +MAIN.SYSTEM.MOVE_045A
	m@INLINE
	.endl

; ------------------------------------------------------------

X	= DATAORIGIN+$0A88
Y	= DATAORIGIN+$0A89
CARRET	= DATAORIGIN+$0A8A

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	GETHEXVAL					; FUNCTION

; optimize OK (artur.pas), line = 620

	lda DEFAULT
	sta RESULT

; optimize OK (artur.pas), line = 621

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('B_CRT.CRT_WRITE_05F8', artur.pas), line = 622

	inx
	mva #$00 :STACKORIGIN,x
	mva #$21 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_05F8

; optimize OK (artur.pas), line = 623

	lda X
	sta XORCURSOR.X
	lda Y
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize OK (artur.pas), line = 624

	lda X
	add #$01
	sta XORCURSOR.X
	lda Y
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize OK (artur.pas), line = 625

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (artur.pas), line = 626

	lda #$02
	jsr B_CRT.CRT_READSTRINGI_068D
	inx
	lda B_CRT.CRT_READSTRINGI_068D.RESULT
	sta @move.src
	lda B_CRT.CRT_READSTRINGI_068D.RESULT+1
	sta @move.src+1
	@moveSTRING S #41
	dex

; optimize OK (artur.pas), line = 627

	lda <I
	sta PARSEHEX.I
	lda >I
	sta PARSEHEX.I+1
	lda <ERR
	sta PARSEHEX.ERR
	lda >ERR
	sta PARSEHEX.ERR+1
	jsr PARSEHEX

; optimize OK (artur.pas), line = 628

	lda ERR
	jne l_158C
	lda I
	sta RESULT
l_158C

; optimize OK (artur.pas), line = 629

	lda X
	sta XORCURSOR.X
	lda Y
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize OK (artur.pas), line = 630

	lda X
	add #$01
	sta XORCURSOR.X
	lda Y
	sta XORCURSOR.Y
	jsr XORCURSOR
@exit

; ------------------------------------------------------------

X	= DATAORIGIN+$0A8C
Y	= DATAORIGIN+$0A8D
DEFAULT	= DATAORIGIN+$0A8E
RESULT	= DATAORIGIN+$0A8F
ERR	= DATAORIGIN+$0A90
I	= DATAORIGIN+$0A91

@VarData	= X
@VarDataSize	= 6

	rts						; ret
.endl

.local	GETFILENAME					; PROCEDURE

; optimize OK (artur.pas), line = 639

	lda X
	sta DRAWRECT.X
	lda Y
	sta DRAWRECT.Y
	lda #$17
	sta DRAWRECT.W
	lda #$06
	sta DRAWRECT.H
	lda #$00
	sta DRAWRECT.C
	jsr DRAWRECT
	ldy #256-16
	mva:rne CODEORIGIN+$0104+16-256,y adr.S+16-256,y+

; optimize FAIL (0, artur.pas), line = 641

	inc X
	inc X
	inc Y

; optimize OK (artur.pas), line = 642

	lda X
	sta WRITESXY.X
	lda Y
	sta WRITESXY.Y
	jsr WRITESXY

; optimize FAIL (0, artur.pas), line = 643

	inc Y
	inc Y

; optimize OK (artur.pas), line = 644

	lda X
	sta I
	add #$0D
	sta :@FORTMP?15DE_0

l_15E1
; --- ForToDoCondition
.def :@FORTMP?15DE_0 = *+1
	lda #$00
	cmp I
	jcc l_15EF
	lda I
	sta XORCURSOR.X
	lda Y
	sta XORCURSOR.Y
	jsr XORCURSOR

; --- ForToDoEpilog
	inc I
	jne l_15E1
l_15EF

; optimize OK (artur.pas), line = 645

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY
	ldy #256-13
	mva:rne CODEORIGIN+$0115+13-256,y adr.S+13-256,y+

; optimize OK (artur.pas), line = 647

	lda #$0C
	jsr B_CRT.CRT_READSTRING_074C
	inx
	lda B_CRT.CRT_READSTRING_074C.RESULT
	sta @move.src
	lda B_CRT.CRT_READSTRING_074C.RESULT+1
	sta @move.src+1
	@moveSTRING S #41
	dex

; optimize OK (artur.pas), line = 648

	lda X
	sta I
	add #$0D
	sta :@FORTMP?1612_0

l_1615
; --- ForToDoCondition
.def :@FORTMP?1612_0 = *+1
	lda #$00
	cmp I
	jcc l_1623
	lda I
	sta XORCURSOR.X
	lda Y
	sta XORCURSOR.Y
	jsr XORCURSOR

; --- ForToDoEpilog
	inc I
	jne l_1615
l_1623

; optimize FAIL (0, artur.pas), line = 649

	inc Y

; optimize OK (artur.pas), line = 650

	lda X
	sta B_CRT.CRT_GOTOXY.X
	lda Y
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('CRT.KEYPRESSED', artur.pas), line = 651

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_1644
	jsr CRT.READKEY
	inx
	mva CRT.READKEY.RESULT :STACKORIGIN,x
	dex
l_1644

; optimize OK (artur.pas), line = 652

	lda S
	sta SYSUTILS.ANSIUPPERCASE.A
	lda S+1
	sta SYSUTILS.ANSIUPPERCASE.A+1
	jsr SYSUTILS.ANSIUPPERCASE
	inx
	lda SYSUTILS.ANSIUPPERCASE.RESULT
	sta @move.src
	lda SYSUTILS.ANSIUPPERCASE.RESULT+1
	sta @move.src+1
	@moveSTRING S #41
	dex

; optimize FAIL ('ADDDRIVETOS', artur.pas), line = 653

	jsr ADDDRIVETOS

; ------------------------------------------------------------

X	= DATAORIGIN+$0A92
Y	= DATAORIGIN+$0A93
FIL_W	= $17
FIL_H	= $06
I	= DATAORIGIN+$0A94
@FORTMP_15DE	= $00
@FORTMP_1612	= $00

@VarData	= X
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SELECTTOOL					; PROCEDURE
	sta TOOL

; optimize OK (artur.pas), line = 658

	sta DRAWTOOL

; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 659

	jsr SHOWMENUBAR

; optimize OK (artur.pas), line = 660

	lda #$00
	sta KEYDOWN

; optimize FAIL ('CLEARSELECTION', artur.pas), line = 661

	jsr CLEARSELECTION

; ------------------------------------------------------------

TOOL	= DATAORIGIN+$0A97

@VarData	= TOOL
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	NEXTMODE					; PROCEDURE

; optimize FAIL (0, artur.pas), line = 666

	inc MODE

; optimize OK (artur.pas), line = 667

	lda MODE
	cmp #$03
	jne l_1676
	lda #$00
	sta MODE
l_1676

; optimize OK (artur.pas), line = 668

	lda #$0A
	sta KEYREPEATCOUNTER

; optimize FAIL ('CLEARSELECTION', artur.pas), line = 669

	jsr CLEARSELECTION

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 670

	jsr SHOWSTATUS

; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 671

	jsr SHOWMENUBAR
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	OPENMODAL					; PROCEDURE

; optimize OK (artur.pas), line = 676

	lda #$0A
	sta KEYREPEATCOUNTER

; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 677

	jsr ERASEALLCURSORS

; optimize OK (artur.pas), line = 678

	lda #$E0
	sta EDITORCHARSET

; optimize FAIL ('STOREEDITINBUFFER', artur.pas), line = 679

	jsr STOREEDITINBUFFER
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLOSEMODAL					; PROCEDURE

; optimize FAIL ('RESTOREEDITFROMBUFFER', artur.pas), line = 684

	jsr RESTOREEDITFROMBUFFER

; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 685

	jsr ERASEALLCURSORS

; optimize OK (artur.pas), line = 686

	lda #$00
	sta MOVECURSOR.DX
	sta MOVECURSOR.DY
	jsr MOVECURSOR

; optimize OK (artur.pas), line = 687

	lda P2X
	cmp #$FF
	jeq l_16AD
	lda P1X
	sta DRAWSELECTION.PC1X
	lda P1Y
	sta DRAWSELECTION.PC1Y
	lda P2X
	sta DRAWSELECTION.PC2X
	lda P2Y
	sta DRAWSELECTION.PC2Y
	jsr DRAWSELECTION
l_16AD

; optimize OK (artur.pas), line = 688

	lda CURSORX
	sta XORCURSOR.X
	lda CURSORY
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize OK (artur.pas), line = 689

	lda #$74
	sta EDITORCHARSET

; optimize OK (artur.pas), line = 690

	lda #$0A
	sta KEYREPEATCOUNTER
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HISTORYBACK					; PROCEDURE

; optimize FAIL (0, artur.pas), line = 700

	inc BRUSHINDEX

; optimize OK (artur.pas), line = 701

	lda BRUSHINDEX
	cmp #$12
	jcc l_16E6
	lda #$00
	sta BRUSHINDEX
l_16E6

; optimize OK (artur.pas), line = 702

	ldy BRUSHINDEX
	lda adr.BRUSHHISTORY,y
	sta BRUSH

; optimize FAIL ('ADJUSTBRUSHFRAME', artur.pas), line = 703

	jsr ADJUSTBRUSHFRAME
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HISTORYFWD					; PROCEDURE

; optimize OK (artur.pas), line = 708

	lda BRUSHINDEX
	jne l_170D
	lda #$12
	sta BRUSHINDEX
l_170D

; optimize FAIL (0, artur.pas), line = 709

	dec BRUSHINDEX

; optimize OK (artur.pas), line = 710

	ldy BRUSHINDEX
	lda adr.BRUSHHISTORY,y
	sta BRUSH

; optimize FAIL ('ADJUSTBRUSHFRAME', artur.pas), line = 711

	jsr ADJUSTBRUSHFRAME
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	INJECTBRUSH					; PROCEDURE
	sta C

; optimize OK (artur.pas), line = 717

	lda #$00
	sta I

; optimize OK (artur.pas), line = 718

	tay
	lda adr.BRUSHHISTORY,y
	sta PREV

; optimize OK (artur.pas), line = 719

	lda C
	sta adr.BRUSHHISTORY,y

; --- RepeatUntilProlog
l_173D

; optimize OK (artur.pas), line = 721

	lda PREV
	cmp C
	jne l_1751
	jmp @exit					; exit
l_1751

; optimize FAIL (0, artur.pas), line = 722

	inc I

; optimize OK (artur.pas), line = 723

	ldy I
	lda adr.BRUSHHISTORY,y
	sta B

; optimize OK (artur.pas), line = 724

	lda PREV
	sta adr.BRUSHHISTORY,y

; optimize OK (artur.pas), line = 725

	lda B
	sta PREV

; optimize OK (artur.pas), line = 726

	lda I
	cmp #$12
	jcc l_173D

; ------------------------------------------------------------

C	= DATAORIGIN+$0A98
I	= DATAORIGIN+$0A99
PREV	= DATAORIGIN+$0A9A

@VarData	= C
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	USEBRUSH					; PROCEDURE
	sta C

; optimize OK (artur.pas), line = 731

	cmp adr.BRUSHHISTORY+$00
	jne l_1796
	jmp @exit					; exit
l_1796

; optimize OK (artur.pas), line = 732

	lda C
	jsr INJECTBRUSH

; optimize OK (artur.pas), line = 733

	lda #$00
	sta BRUSHINDEX

; optimize OK (artur.pas), line = 734

	lda C
	sta BRUSH

; optimize FAIL ('ADJUSTBRUSHFRAME', artur.pas), line = 735

	jsr ADJUSTBRUSHFRAME

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 736

	jsr SHOWSTATUS

; ------------------------------------------------------------

C	= DATAORIGIN+$0A9B

@VarData	= C
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	POKEBRUSH					; PROCEDURE

; optimize OK (artur.pas), line = 741

	lda #$00
	jsr STOREUNDOACTION

; optimize OK (artur.pas), line = 742

	ldy CURSOR
	lda #$7C
	add CURSOR+1
	sta :bp+1
	lda BRUSH
	sta (:bp),y

; optimize FAIL ('READCURSORCHAR', artur.pas), line = 743

	jsr READCURSORCHAR
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SETBRUSHFROMKEY					; PROCEDURE

; optimize OK (artur.pas), line = 748

	mwy KEYCHARS :bp2
	ldy KEY
	lda (:bp2),y
	jsr B_CRT.ATASCII2ANTIC_0535
	lda B_CRT.ATASCII2ANTIC_0535.RESULT
	sta B

; optimize OK (artur.pas), line = 749

	lda INVERT
	jeq l_17D4
	lda B
	eor #$80
	sta B
l_17D4

; optimize OK (artur.pas), line = 750

	lda B
	sta BRUSH
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WRITESPACE					; PROCEDURE

; optimize OK (artur.pas), line = 755

	lda BRUSH
	sta B

; optimize OK (artur.pas), line = 756

	lda #$00
	sta BRUSH

; optimize OK (artur.pas), line = 757

	lda INVERT
	jeq l_1801
	lda #$80
	sta BRUSH
l_1801

; optimize OK (artur.pas), line = 758

	lda #$00
	jsr STOREUNDOACTION

; optimize FAIL ('POKEBRUSH', artur.pas), line = 759

	jsr POKEBRUSH

; optimize OK (artur.pas), line = 760

	lda B
	sta BRUSH

; optimize OK (artur.pas), line = 761

	lda #$00
	sta KEYDOWN
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	BRUSHSELECTOR					; FUNCTION

	jmp l_1819

.local	UPDATEBRUSHCURSOR				; PROCEDURE

; optimize OK (artur.pas), line = 777

	lda CX
	sta XORCURSOR.X
	lda CY
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize OK (artur.pas), line = 778

	lda CBRUSH
	and #$0F
	add #$0C
	sta CX

; optimize OK (artur.pas), line = 779

	lda CBRUSH
	lsr @
	lsr @
	lsr @
	lsr @
	add #$05
	sta CY

; optimize OK (artur.pas), line = 780

	lda CX
	sta XORCURSOR.X
	lda CY
	sta XORCURSOR.Y
	jsr XORCURSOR
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_1819

; optimize FAIL ('ERASEALLCURSORS', artur.pas), line = 784

	jsr ERASEALLCURSORS

; optimize OK (artur.pas), line = 785

	lda BRUSH
	sta RESULT

; optimize OK (artur.pas), line = 786

	sta CBRUSH

; optimize OK (artur.pas), line = 787

	lda #$0A
	sta KEYREPEATCOUNTER

; optimize FAIL ('STOREEDITINBUFFER', artur.pas), line = 788

	jsr STOREEDITINBUFFER

; optimize OK (artur.pas), line = 789

	lda #$0B
	sta DRAWRECT.X
	lda #$02
	sta DRAWRECT.Y
	lda #$12
	sta DRAWRECT.W
	lda #$14
	sta DRAWRECT.H
	lda #$80
	sta DRAWRECT.C
	jsr DRAWRECT
	ldy #256-13
	mva:rne CODEORIGIN+$0123+13-256,y adr.S+13-256,y+

; optimize OK (artur.pas), line = 791

	lda #$0C
	sta WRITESXY.X
	lda #$03
	sta WRITESXY.Y
	jsr WRITESXY

; optimize OK (artur.pas), line = 794

	lda #$0C
	add adr.LINEOFFSET+$0A
	sta VRAM
	lda #$7C
	adc adr.LINEOFFSET+1+$0A
	sta VRAM+1

; optimize OK (artur.pas), line = 795

	lda #$00
	sta B

; --- RepeatUntilProlog
l_1881

; optimize OK (artur.pas), line = 797

	ldy VRAM+1
	sty :bp+1
	ldy VRAM
	lda B
	sta (:bp),y

; optimize FAIL (0, artur.pas), line = 798

	inc B

; optimize FAIL (0, artur.pas), line = 799

	inc VRAM
	sne
	inc VRAM+1

; optimize OK (artur.pas), line = 800

	lda B
	and #$0F
	jne l_18A5
	lda VRAM
	add #$18
	sta VRAM
	scc
	inc VRAM+1
l_18A5

; optimize OK (artur.pas), line = 801

	lda B
	jne l_1881

; optimize OK (artur.pas), line = 803

	lda BRUSH
	sta CBRUSH

; optimize OK (artur.pas), line = 804

	and #$0F
	add #$0C
	sta CX

; optimize OK (artur.pas), line = 805

	lda CBRUSH
	lsr @
	lsr @
	lsr @
	lsr @
	add #$05
	sta CY

; optimize OK (artur.pas), line = 806

	lda CX
	sta XORCURSOR.X
	lda CY
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize OK (artur.pas), line = 808

	lda #$00
	sta DONE

; --- RepeatUntilProlog
l_18EC

; optimize FAIL ('READJOYSTICK', artur.pas), line = 811

	jsr READJOYSTICK

; optimize OK (artur.pas), line = 813

	lda KEYREPEATCOUNTER
	jne l_18FF

; optimize FAIL ('CRT.KEYPRESSED', artur.pas), line = 814

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_190A

; optimize FAIL ('CRT.READKEY', artur.pas), line = 815

	jsr CRT.READKEY
	lda CRT.READKEY.RESULT
	sta C

; optimize OK (artur.pas), line = 816

	cmp #$1B
	jne l_1921
	lda #$01
	sta DONE
l_1921

; optimize OK (artur.pas), line = 817

	lda ATARI.KBCODE
	cmp #$0C
	jeq l_1946x
	cmp #$3C
	jne l_1946
l_1946x

; optimize OK (artur.pas), line = 818

	lda CBRUSH
	jpl l_1959
	lda #$01
	sta INVERT
l_1959

; optimize OK (artur.pas), line = 819

	lda CBRUSH
	jsr USEBRUSH

; optimize OK (artur.pas), line = 820

	lda CBRUSH
	sta RESULT

; optimize OK (artur.pas), line = 821

	lda #$01
	sta DONE
l_1946

; optimize OK (artur.pas), line = 823

	lda #$00
	sta MOVED

; optimize OK (artur.pas), line = 824

	lda ATARI.KBCODE
	cmp #$21
	jne l_1986

; optimize OK (artur.pas), line = 825

	lda CBRUSH
	jsr USEBRUSH

; optimize OK (artur.pas), line = 826

	lda #$01
	sta MOVED
l_1986

; optimize OK (artur.pas), line = 828

	lda #$80
	sta KOFFSET

; optimize OK (artur.pas), line = 829

	lda CONFIG.ARROWSRAW
	jeq l_19A1
	lda #$00
	sta KOFFSET
l_19A1

; optimize OK (artur.pas), line = 830

	lda #$06
	add KOFFSET
	cmp ATARI.KBCODE
	jne l_19C0

; optimize FAIL (0, artur.pas), line = 831

	dec CBRUSH

; optimize OK (artur.pas), line = 832

	lda #$01
	sta MOVED
l_19C0

; optimize OK (artur.pas), line = 834

	lda #$07
	add KOFFSET
	cmp ATARI.KBCODE
	jne l_19E3

; optimize FAIL (0, artur.pas), line = 835

	inc CBRUSH

; optimize OK (artur.pas), line = 836

	lda #$01
	sta MOVED
l_19E3

; optimize OK (artur.pas), line = 838

	lda #$0E
	add KOFFSET
	cmp ATARI.KBCODE
	jne l_1A06

; optimize OK (artur.pas), line = 839

	lda CBRUSH
	sub #$10
	sta CBRUSH

; optimize OK (artur.pas), line = 840

	lda #$01
	sta MOVED
l_1A06

; optimize OK (artur.pas), line = 842

	lda #$0F
	add KOFFSET
	cmp ATARI.KBCODE
	jne l_1A26

; optimize OK (artur.pas), line = 843

	lda CBRUSH
	add #$10
	sta CBRUSH

; optimize OK (artur.pas), line = 844

	lda #$01
	sta MOVED
l_1A26

; optimize OK (artur.pas), line = 846

	lda MOVED
	jeq l_1A3A

; optimize FAIL ('UPDATEBRUSHCURSOR', artur.pas), line = 847

	jsr UPDATEBRUSHCURSOR
	jmp l_1A45
l_1A3A

; optimize OK (artur.pas), line = 848

	mwy KEYCHARS :bp2
	ldy ATARI.KBCODE
	lda (:bp2),y
	jsr B_CRT.ATASCII2ANTIC_0535
	lda B_CRT.ATASCII2ANTIC_0535.RESULT
	sta B

; optimize OK (artur.pas), line = 849

	lda INVERT
	jeq l_1A5B
	lda B
	eor #$80
	sta B
l_1A5B

; optimize OK (artur.pas), line = 850

	lda B
	sta BRUSH

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 851

	jsr SHOWSTATUS
l_1A45

; optimize OK (artur.pas), line = 853

	lda #$0A
	sta KEYREPEATCOUNTER
l_190A

; optimize OK (artur.pas), line = 856

	lda JOYX
	jne l_1A93x
	lda JOYY
	jeq l_1A93
l_1A93x

; optimize OK (artur.pas), line = 857

	lda JOYY
	asl @
	asl @
	asl @
	asl @
	sta JOYY

; optimize OK (artur.pas), line = 858

	lda CBRUSH
	add JOYY
	sta CBRUSH

; optimize OK (artur.pas), line = 859

	add JOYX
	sta CBRUSH

; optimize FAIL ('UPDATEBRUSHCURSOR', artur.pas), line = 860

	jsr UPDATEBRUSHCURSOR

; optimize OK (artur.pas), line = 861

	lda #$04
	sta KEYREPEATCOUNTER
l_1A93

; optimize OK (artur.pas), line = 863

	lda JOYFIRE
	jne l_1ACF

; optimize OK (artur.pas), line = 864

	lda CBRUSH
	jpl l_1AE2
	lda #$01
	sta INVERT
l_1AE2

; optimize OK (artur.pas), line = 865

	lda CBRUSH
	sta RESULT

; optimize OK (artur.pas), line = 866

	lda #$14
	sta KEYREPEATCOUNTER

; optimize OK (artur.pas), line = 867

	lda #$01
	sta DONE
l_1ACF
l_18FF

; optimize OK (artur.pas), line = 873

	lda DONE
	jeq l_18EC

; optimize OK (artur.pas), line = 875

	lda CX
	sta XORCURSOR.X
	lda CY
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize FAIL ('CLOSEMODAL', artur.pas), line = 876

	jsr CLOSEMODAL
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0A9C
BRS_X	= $0B
BRS_Y	= $02
BRS_W	= $12
BRS_H	= $14
VRAM	= DATAORIGIN+$0A9D
CBRUSH	= DATAORIGIN+$0A9F
CX	= DATAORIGIN+$0AA0
CY	= DATAORIGIN+$0AA1
KOFFSET	= DATAORIGIN+$0AA2
MOVED	= DATAORIGIN+$0AA3
DONE	= DATAORIGIN+$0AA4

@VarData	= RESULT
@VarDataSize	= 9

	rts						; ret
.endl

.local	SORTPOINTSANDGETCORNER				; FUNCTION

; optimize OK (artur.pas), line = 886

	lda P2X
	cmp P1X
	jcs l_1B22
	lda <P1X
	sta SWAP.A
	lda >P1X
	sta SWAP.A+1
	lda <P2X
	sta SWAP.B
	lda >P2X
	sta SWAP.B+1
	jsr SWAP
l_1B22

; optimize OK (artur.pas), line = 887

	lda P2Y
	cmp P1Y
	jcs l_1B3C
	lda <P1Y
	sta SWAP.A
	lda >P1Y
	sta SWAP.A+1
	lda <P2Y
	sta SWAP.B
	lda >P2Y
	sta SWAP.B+1
	jsr SWAP
l_1B3C

; optimize OK (artur.pas), line = 888

	lda P1Y
	asl @
	tay
	lda adr.LINEOFFSET,y
	add P1X
	sta RESULT
	lda adr.LINEOFFSET+1,y
	adc #$7C
	sta RESULT+1
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0AA5

@VarData	= RESULT
@VarDataSize	= 2

	rts						; ret
.endl

.local	INVERTBLOCK					; PROCEDURE

; optimize OK (artur.pas), line = 895

	lda #$01
	jsr STOREUNDOACTION

; optimize FAIL ('SORTPOINTSANDGETCORNER', artur.pas), line = 896

	jsr SORTPOINTSANDGETCORNER
	inx
	lda SORTPOINTSANDGETCORNER.RESULT
	sub P1X
	sta VRAM
	lda SORTPOINTSANDGETCORNER.RESULT+1
	sbc #$00
	sta VRAM+1
	dex

; optimize OK (artur.pas), line = 897

	lda P1Y
	sta Y

l_1B71
; --- ForToDoCondition
	lda Y
	cmp P2Y
	scc
	jne l_1B7F

; optimize OK (artur.pas), line = 898

	lda P1X
	sta X

l_1B8C
; --- ForToDoCondition
	lda X
	cmp P2X
	scc
	jne l_1B9A

; optimize OK (artur.pas), line = 899

	mwy VRAM :bp2
	ldy X
	lda (:bp2),y
	eor #$80
	sta (:bp2),y

; --- ForToDoEpilog
	inc X
	jne l_1B8C
l_1B9A

; optimize OK (artur.pas), line = 901

	lda VRAM
	add #$28
	sta VRAM
	scc
	inc VRAM+1

; --- ForToDoEpilog
	inc Y
	jne l_1B71
l_1B7F

; ------------------------------------------------------------

X	= DATAORIGIN+$0AA7
Y	= DATAORIGIN+$0AA8
VRAM	= DATAORIGIN+$0AA9

@VarData	= X
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CALCULATEWIDTHANDHEIGHT				; PROCEDURE

; optimize OK (artur.pas), line = 907

	lda P2X
	sub P1X
	add #$01
	sta W

; optimize OK (artur.pas), line = 908

	lda P2Y
	sub P1Y
	add #$01
	sta H
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWBLOCK					; PROCEDURE

; optimize OK (artur.pas), line = 914

	lda #$01
	jsr STOREUNDOACTION

; optimize FAIL ('SORTPOINTSANDGETCORNER', artur.pas), line = 915

	jsr SORTPOINTSANDGETCORNER
	lda SORTPOINTSANDGETCORNER.RESULT
	sta VRAM
	lda SORTPOINTSANDGETCORNER.RESULT+1
	sta VRAM+1

; optimize FAIL ('CALCULATEWIDTHANDHEIGHT', artur.pas), line = 916

	jsr CALCULATEWIDTHANDHEIGHT

; optimize OK (artur.pas), line = 917

	lda P1X
	sta DRAWRECT.X
	lda P1Y
	sta DRAWRECT.Y
	lda W
	sta DRAWRECT.W
	lda H
	sta DRAWRECT.H
	lda BRUSH
	sta DRAWRECT.C
	jsr DRAWRECT

; ------------------------------------------------------------

VRAM	= DATAORIGIN+$0AAB

@VarData	= VRAM
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	COPYBLOCK					; PROCEDURE
	sta MOVEBLOCK

; optimize OK (artur.pas), line = 923

	lda #$01
	jsr STOREUNDOACTION

; optimize FAIL ('SORTPOINTSANDGETCORNER', artur.pas), line = 924

	jsr SORTPOINTSANDGETCORNER
	inx
	lda SORTPOINTSANDGETCORNER.RESULT
	sub #$00
	sta :STACKORIGIN,x
	lda SORTPOINTSANDGETCORNER.RESULT+1
	sbc #$7C
	sta :STACKORIGIN+STACKWIDTH,x
	lda :STACKORIGIN,x
	sta BRAM
	lda :STACKORIGIN+STACKWIDTH,x
	add #$78
	sta BRAM+1
	dex

; optimize OK (artur.pas), line = 925

	lda CURSOR
	sta VRAM
	lda #$7C
	add CURSOR+1
	sta VRAM+1

; optimize FAIL ('CALCULATEWIDTHANDHEIGHT', artur.pas), line = 926

	jsr CALCULATEWIDTHANDHEIGHT

; optimize OK (artur.pas), line = 927

	lda CURSORX
	add W
	cmp #$28
	jcc l_1C2E
	lda #$28
	sub CURSORX
	sta W
l_1C2E

; optimize OK (artur.pas), line = 928

	lda CURSORY
	add H
	cmp #$18
	jcc l_1C53
	lda #$18
	sub CURSORY
	sta H
l_1C53

; optimize FAIL ('STOREEDITINBUFFER', artur.pas), line = 929

	jsr STOREEDITINBUFFER

; optimize OK (artur.pas), line = 930

	lda MOVEBLOCK
	jeq l_1C6D

; optimize OK (artur.pas), line = 931

	lda P1X
	sta DRAWRECT.X
	lda P1Y
	sta DRAWRECT.Y
	lda W
	sta DRAWRECT.W
	lda H
	sta DRAWRECT.H
	lda #$00
	sta DRAWRECT.C
	jsr DRAWRECT

; optimize OK (artur.pas), line = 932

	lda CURSORX
	sta P1X

; optimize OK (artur.pas), line = 933

	lda CURSORY
	sta P1Y

; optimize OK (artur.pas), line = 934

	lda CURSORX
	add W
	sub #$01
	sta P2X

; optimize OK (artur.pas), line = 935

	lda CURSORY
	add H
	sub #$01
	sta P2Y

; optimize OK (artur.pas), line = 936

	lda P1X
	sta DRAWSELECTION.PC1X
	lda P1Y
	sta DRAWSELECTION.PC1Y
	lda P2X
	sta DRAWSELECTION.PC2X
	lda P2Y
	sta DRAWSELECTION.PC2Y
	jsr DRAWSELECTION

; optimize OK (artur.pas), line = 937

	lda CURSORX
	sta XORCURSOR.X
	lda CURSORY
	sta XORCURSOR.Y
	jsr XORCURSOR
l_1C6D

; --- RepeatUntilProlog
l_1CBF

; optimize OK (artur.pas), line = 940

	lda BRAM
	sta SYSTEM.MOVE_0458.SOURCE
	lda BRAM+1
	sta SYSTEM.MOVE_0458.SOURCE+1
	lda VRAM
	sta SYSTEM.MOVE_0458.DEST
	lda VRAM+1
	sta SYSTEM.MOVE_0458.DEST+1
	lda W
	sta SYSTEM.MOVE_0458.COUNT
	lda #$00
	sta SYSTEM.MOVE_0458.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0458
	m@INLINE
	.endl

; optimize OK (artur.pas), line = 941

	lda VRAM
	add #$28
	sta VRAM
	scc
	inc VRAM+1

; optimize OK (artur.pas), line = 942

	lda BRAM
	add #$28
	sta BRAM
	scc
	inc BRAM+1

; optimize OK (artur.pas), line = 943

	lda VRAM+1
	cmp #$7F
	bne @+
	lda VRAM
	cmp #$C0
@
	jcc l_1CDA
	lda VRAM
	sub #$C0
	sta VRAM
	lda VRAM+1
	sbc #$03
	sta VRAM+1
l_1CDA

; optimize FAIL (0, artur.pas), line = 944

	dec H

; optimize OK (artur.pas), line = 945

	jne l_1CBF

; ------------------------------------------------------------

MOVEBLOCK	= DATAORIGIN+$0AAD
VRAM	= DATAORIGIN+$0AAE
BRAM	= DATAORIGIN+$0AB0

@VarData	= MOVEBLOCK
@VarDataSize	= 5

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAWFRAME					; PROCEDURE

; optimize OK (artur.pas), line = 951

	lda #$01
	jsr STOREUNDOACTION

; optimize FAIL ('SORTPOINTSANDGETCORNER', artur.pas), line = 952

	jsr SORTPOINTSANDGETCORNER
	lda SORTPOINTSANDGETCORNER.RESULT
	sta VRAM
	lda SORTPOINTSANDGETCORNER.RESULT+1
	sta VRAM+1

; optimize FAIL ('CALCULATEWIDTHANDHEIGHT', artur.pas), line = 953

	jsr CALCULATEWIDTHANDHEIGHT

; optimize OK (artur.pas), line = 954

	lda VRAM
	sta SYSTEM.FILLBYTE_0457.A
	lda VRAM+1
	sta SYSTEM.FILLBYTE_0457.A+1
	lda W
	sta SYSTEM.FILLBYTE_0457.COUNT
	lda #$00
	sta SYSTEM.FILLBYTE_0457.COUNT+1
	lda BRUSH
	sta SYSTEM.FILLBYTE_0457.VALUE
	.local +MAIN.SYSTEM.FILLBYTE_0457
	m@INLINE
	.endl

; optimize FAIL (0, artur.pas), line = 955

	dec H

; --- WhileProlog
	jmp l_1D09
l_1D0A

; optimize OK (artur.pas), line = 957

	ldy VRAM+1
	sty :bp+1
	ldy VRAM
	lda BRUSH
	sta (:bp),y

; optimize OK (artur.pas), line = 958

	tya
	add W
	tay
	lda VRAM+1
	adc #$00
	sta :bp+1
	tya
	sne
	dec :bp+1
	dey
	lda BRUSH
	sta (:bp),y

; optimize OK (artur.pas), line = 959

	lda VRAM
	add #$28
	sta VRAM
	scc
	inc VRAM+1

; optimize FAIL (0, artur.pas), line = 960

	dec H
l_1D09

; optimize OK (artur.pas), line = 956

	lda H
	jne l_1D0A

; optimize OK (artur.pas), line = 962

	lda VRAM
	sta SYSTEM.FILLBYTE_0457.A
	lda VRAM+1
	sta SYSTEM.FILLBYTE_0457.A+1
	lda W
	sta SYSTEM.FILLBYTE_0457.COUNT
	lda #$00
	sta SYSTEM.FILLBYTE_0457.COUNT+1
	lda BRUSH
	sta SYSTEM.FILLBYTE_0457.VALUE
	.local +MAIN.SYSTEM.FILLBYTE_0457
	m@INLINE
	.endl

; ------------------------------------------------------------

VRAM	= DATAORIGIN+$0AB2

@VarData	= VRAM
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	IOSTATUS					; PROCEDURE

	mva #$00 adr.S

; optimize OK (artur.pas), line = 973

	lda SYSTEM.IORESULT
	sta @CASETMP_0006
	cmp #$85
	jne l_1D49
@
	ldy #256-14
	mva:rne CODEORIGIN+$0131+14-256,y adr.S+14-256,y+

	jmp a_0006
l_1D49
	cmp #$88
	beq @+
	cmp #$8B
	jne l_1D54
@
	ldy #256-14
	mva:rne CODEORIGIN+$0140+14-256,y adr.S+14-256,y+

	jmp a_0006
l_1D54
	cmp #$A8
	jne l_1D5D
@
	ldy #256-14
	mva:rne CODEORIGIN+$0140+14-256,y adr.S+14-256,y+

	jmp a_0006
l_1D5D
	cmp #$01
	beq @+
	cmp #$03
	jne l_1D68
@
	ldy #256-9
	mva:rne CODEORIGIN+$014F+9-256,y adr.S+9-256,y+

l_1D68
a_0006

; optimize FAIL ('B_CRT.CRT_WRITE_05F8', artur.pas), line = 982

	inx
	mva S :STACKORIGIN,x
	mva S+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.CRT_WRITE_05F8

; optimize FAIL ('CRT.READKEY', artur.pas), line = 983

	jsr CRT.READKEY
	mva CRT.READKEY.RESULT :STACKORIGIN+1,x
; CloseFile

	txa:pha
	clc
	@closefile AFILE
	pla:tax

; ------------------------------------------------------------

@CASETMP_0006	= DATAORIGIN+$0AB4

@VarData	= @CASETMP_0006
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADDATA					; PROCEDURE

; AssignFile

; optimize OK (artur.pas), line = 989

	mwy AFILE :bp2
	ldy #s@file.pfname
	lda S
	sta (:bp2),y
	iny
	lda S+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset

; optimize OK (artur.pas), line = 990

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile AFILE, MAIN.SYSTEM.FileMode
	pla:tax

; BlockRead

; optimize OK (artur.pas), line = 991

	mwy AFILE :bp2
	ldy #s@file.buffer
	lda BUF
	sta (:bp2),y
	iny
	lda BUF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda SIZE
	sta (:bp2),y
	iny
	lda SIZE+1
	sta (:bp2),y

	txa:pha
	clc
	@readfile AFILE, #7
	pla:tax

; optimize FAIL ('IOSTATUS', artur.pas), line = 992

	jsr IOSTATUS

; ------------------------------------------------------------

BUF	= DATAORIGIN+$0AB5
SIZE	= DATAORIGIN+$0AB7

@VarData	= BUF
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SAVEDATA					; PROCEDURE

; AssignFile

; optimize OK (artur.pas), line = 997

	mwy AFILE :bp2
	ldy #s@file.pfname
	lda S
	sta (:bp2),y
	iny
	lda S+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Rewrite

; optimize OK (artur.pas), line = 998

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile AFILE, #8
	pla:tax

; BlockWrite

; optimize OK (artur.pas), line = 999

	mwy AFILE :bp2
	ldy #s@file.buffer
	lda BUF
	sta (:bp2),y
	iny
	lda BUF+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda SIZE
	sta (:bp2),y
	iny
	lda SIZE+1
	sta (:bp2),y

	txa:pha
	clc
	@readfile AFILE, #11
	pla:tax

; optimize FAIL ('IOSTATUS', artur.pas), line = 1000

	jsr IOSTATUS

; ------------------------------------------------------------

BUF	= DATAORIGIN+$0AB9
SIZE	= DATAORIGIN+$0ABB

@VarData	= BUF
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	LOADCONFIG					; PROCEDURE

	ldy #256-13
	mva:rne CODEORIGIN+$0159+13-256,y adr.S+13-256,y+

; optimize FAIL ('ADDDRIVETOS', artur.pas), line = 1006

	jsr ADDDRIVETOS

; optimize OK (artur.pas), line = 1007

	lda S
	sta SYSUTILS.FILEEXISTS.NAME
	lda S+1
	sta SYSUTILS.FILEEXISTS.NAME+1
	jsr SYSUTILS.FILEEXISTS
	lda SYSUTILS.FILEEXISTS.RESULT
	jeq l_1DBD
; AssignFile

; optimize OK (artur.pas), line = 1008

	mwy AFILE :bp2
	ldy #s@file.pfname
	lda S
	sta (:bp2),y
	iny
	lda S+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Reset

; optimize OK (artur.pas), line = 1009

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile AFILE, MAIN.SYSTEM.FileMode
	pla:tax

; BlockRead

; optimize OK (artur.pas), line = 1010

	mwy AFILE :bp2
	ldy #s@file.buffer
	lda CONFIG
	sta (:bp2),y
	iny
	lda CONFIG+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$04
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@readfile AFILE, #7
	pla:tax

; CloseFile

	txa:pha
	clc
	@closefile AFILE
	pla:tax

l_1DBD
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SAVECONFIG					; PROCEDURE

	ldy #256-13
	mva:rne CODEORIGIN+$0159+13-256,y adr.S+13-256,y+

; optimize FAIL ('ADDDRIVETOS', artur.pas), line = 1018

	jsr ADDDRIVETOS

; optimize OK (artur.pas), line = 1019

	lda CONFIG
	sta SAVEDATA.BUF
	lda CONFIG+1
	sta SAVEDATA.BUF+1
	lda #$04
	sta SAVEDATA.SIZE
	lda #$00
	sta SAVEDATA.SIZE+1
	jsr SAVEDATA
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SAVEBLOCK					; PROCEDURE

; optimize FAIL ('OPENMODAL', artur.pas), line = 1031

	jsr OPENMODAL

; optimize OK (artur.pas), line = 1032

	lda #$05
	sta DRAWRECT.X
	lda #$02
	sta DRAWRECT.Y
	lda #$1E
	sta DRAWRECT.W
	lda #$0C
	sta DRAWRECT.H
	lda #$80
	sta DRAWRECT.C
	jsr DRAWRECT
	ldy #256-18
	mva:rne CODEORIGIN+$0167+18-256,y adr.S+18-256,y+

; optimize OK (artur.pas), line = 1034

	lda #$06
	sta WRITESXY.X
	lda #$03
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-29
	mva:rne CODEORIGIN+$017A+29-256,y adr.S+29-256,y+

; optimize OK (artur.pas), line = 1036

	lda #$06
	sta WRITESXY.X
	lda #$04
	sta WRITESXY.Y
	jsr WRITESXY

; optimize OK (artur.pas), line = 1037

	lda #$06
	sta B_CRT.CRT_GOTOXY.X
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize OK (artur.pas), line = 1038

	lda #$06
	sta GETFILENAME.X
	sta GETFILENAME.Y
	jsr GETFILENAME
; AssignFile

; optimize OK (artur.pas), line = 1040

	mwy AFILE :bp2
	ldy #s@file.pfname
	lda S
	sta (:bp2),y
	iny
	lda S+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Rewrite

; optimize OK (artur.pas), line = 1041

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile AFILE, #8
	pla:tax

; optimize FAIL ('SORTPOINTSANDGETCORNER', artur.pas), line = 1043

	jsr SORTPOINTSANDGETCORNER
	inx
	lda SORTPOINTSANDGETCORNER.RESULT
	sub #$00
	sta PTR
	lda SORTPOINTSANDGETCORNER.RESULT+1
	sbc #$7C
	sta PTR+1
	dex

; optimize FAIL ('CALCULATEWIDTHANDHEIGHT', artur.pas), line = 1044

	jsr CALCULATEWIDTHANDHEIGHT

; --- RepeatUntilProlog
l_1E0D
; BlockWrite

; optimize OK (artur.pas), line = 1046

	mwy AFILE :bp2
	ldy #s@file.buffer
	lda VRAM
	add PTR
	sta (:bp2),y
	iny
	lda VRAM+1
	adc PTR+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda W
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@readfile AFILE, #11
	pla:tax

; optimize FAIL (0, artur.pas), line = 1047

	dec H

; optimize OK (artur.pas), line = 1048

	lda PTR
	add #$28
	sta PTR
	scc
	inc PTR+1

; optimize OK (artur.pas), line = 1049

	lda H
	jne l_1E0D

; optimize FAIL ('IOSTATUS', artur.pas), line = 1051

	jsr IOSTATUS

; optimize FAIL ('CLOSEMODAL', artur.pas), line = 1052

	jsr CLOSEMODAL

; ------------------------------------------------------------

adr.VRAM	= $7800
.var VRAM	= adr.VRAM .word
PTR	= DATAORIGIN+$0ABD
SVB_X	= $05
SVB_Y	= $02
SVB_W	= $1E
SVB_H	= $0C

@VarData	= VRAM
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SAVEBINARY					; PROCEDURE

; AssignFile

; optimize OK (artur.pas), line = 1060

	mwy AFILE :bp2
	ldy #s@file.pfname
	lda S
	sta (:bp2),y
	iny
	lda S+1
	sta (:bp2),y
	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Rewrite

; optimize OK (artur.pas), line = 1061

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@openfile AFILE, #8
	pla:tax

; BlockWrite

; optimize OK (artur.pas), line = 1063

	mwy AFILE :bp2
	ldy #s@file.buffer
	lda HEADER
	sta (:bp2),y
	iny
	lda HEADER+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$69
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@readfile AFILE, #11
	pla:tax

; BlockWrite

; optimize OK (artur.pas), line = 1064

	mwy AFILE :bp2
	ldy #s@file.buffer
	lda CHARSET
	sta (:bp2),y
	iny
	lda CHARSET+1
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$C0
	sta (:bp2),y
	iny
	lda #$07
	sta (:bp2),y

	txa:pha
	clc
	@readfile AFILE, #11
	pla:tax

; BlockWrite

; optimize OK (artur.pas), line = 1065

	mwy AFILE :bp2
	ldy #s@file.buffer
	lda <CONFIG.EDITORBACKGROUNDCOLOR
	sta (:bp2),y
	iny
	lda >CONFIG.EDITORBACKGROUNDCOLOR
	sta (:bp2),y
	ldy #s@file.nrecord
	lda #$02
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	clc
	@readfile AFILE, #11
	pla:tax

; optimize FAIL ('IOSTATUS', artur.pas), line = 1067

	jsr IOSTATUS

; optimize FAIL ('CLOSEMODAL', artur.pas), line = 1069

	jsr CLOSEMODAL

; ------------------------------------------------------------

adr.HEADER	= $7100
.var HEADER	= adr.HEADER .word
adr.CHARSET	= $7400
.var CHARSET	= adr.CHARSET .word

@VarData	= HEADER
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWHELP					; PROCEDURE

; optimize FAIL ('OPENMODAL', artur.pas), line = 1084

	jsr OPENMODAL

; optimize OK (artur.pas), line = 1085

	lda #$05
	sta DRAWRECT.X
	lda #$02
	sta DRAWRECT.Y
	lda #$1E
	sta DRAWRECT.W
	lda #$14
	sta DRAWRECT.H
	lda #$80
	sta DRAWRECT.C
	jsr DRAWRECT
	ldy #256-29
	mva:rne CODEORIGIN+$0198+29-256,y adr.S+29-256,y+

; optimize OK (artur.pas), line = 1087

	lda #$06
	sta WRITESXY.X
	lda #$03
	sta WRITESXY.Y
	jsr WRITESXY

; optimize OK (artur.pas), line = 1088

	lda VERSION
	sta SYSTEM.MOVE_0459.SOURCE
	lda VERSION+1
	sta SYSTEM.MOVE_0459.SOURCE+1
	lda S
	sta SYSTEM.MOVE_0459.DEST
	lda S+1
	sta SYSTEM.MOVE_0459.DEST+1
	lda #$0A
	sta SYSTEM.MOVE_0459.COUNT
	lda #$00
	sta SYSTEM.MOVE_0459.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0459
	m@INLINE
	.endl

; optimize OK (artur.pas), line = 1089

	lda #$10
	sta WRITESXY.X
	lda #$03
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-29
	mva:rne CODEORIGIN+$017A+29-256,y adr.S+29-256,y+

; optimize OK (artur.pas), line = 1091

	lda #$06
	sta WRITESXY.X
	lda #$04
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-19
	mva:rne CODEORIGIN+$01B6+19-256,y adr.S+19-256,y+

; optimize OK (artur.pas), line = 1093

	lda #$06
	sta WRITESXY.X
	lda #$05
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-18
	mva:rne CODEORIGIN+$01CA+18-256,y adr.S+18-256,y+

; optimize OK (artur.pas), line = 1095

	lda #$06
	sta WRITESXY.X
	lda #$08
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-21
	mva:rne CODEORIGIN+$01DD+21-256,y adr.S+21-256,y+

; optimize OK (artur.pas), line = 1097

	lda #$06
	sta WRITESXY.X
	lda #$0A
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-18
	mva:rne CODEORIGIN+$01F3+18-256,y adr.S+18-256,y+

; optimize OK (artur.pas), line = 1099

	lda #$06
	sta WRITESXY.X
	lda #$0C
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-21
	mva:rne CODEORIGIN+$0206+21-256,y adr.S+21-256,y+

; optimize OK (artur.pas), line = 1101

	lda #$06
	sta WRITESXY.X
	lda #$0E
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-14
	mva:rne CODEORIGIN+$021C+14-256,y adr.S+14-256,y+

; optimize OK (artur.pas), line = 1104

	lda #$06
	sta WRITESXY.X
	lda #$14
	sta WRITESXY.Y
	jsr WRITESXY

; --- RepeatUntilProlog
l_1E86

; optimize FAIL ('B_CRT.CRT_HELPPRESSED', artur.pas), line = 1107

	jsr B_CRT.CRT_HELPPRESSED
	inx
	mva B_CRT.CRT_HELPPRESSED.RESULT :STACKORIGIN,x
	dex
	ldy #1
	lda KEYREPEATCOUNTER
	beq @+
	dey
@
	tya
	and :STACKORIGIN+1,x
	jeq l_1E9C
	jmp b_1E86					; break
l_1E9C

; optimize FAIL ('CRT.KEYPRESSED', artur.pas), line = 1108

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_1E86
b_1E86

; optimize FAIL ('CLOSEMODAL', artur.pas), line = 1109

	jsr CLOSEMODAL

; optimize FAIL ('CRT.KEYPRESSED', artur.pas), line = 1110

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_1EAF
	jsr CRT.READKEY
	inx
	mva CRT.READKEY.RESULT :STACKORIGIN,x
	dex
l_1EAF

; ------------------------------------------------------------

HLP_X	= $05
HLP_Y	= $02
HLP_W	= $1E
HLP_H	= $14
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HASEXT						; FUNCTION

; optimize OK (artur.pas), line = 1116

	lda #$00
	sta RESULT

; optimize OK (artur.pas), line = 1117

	lda #$01
	sta I

; optimize OK (artur.pas), line = 1118

	sta EI

; --- RepeatUntilProlog
l_1EC4

; optimize OK (artur.pas), line = 1120

	mwy S :bp2
	ldy I
	lda (:bp2),y
	cmp #$0E
	jne l_1ED9
	lda #$01
	sta RESULT
l_1ED9

; optimize FAIL (0, artur.pas), line = 1121

	inc I

; optimize OK (artur.pas), line = 1122

	lda I
	cmp #$0A
	jeq l_1EC4x
	lda:sne RESULT
	jmp l_1EC4
l_1EC4x

; optimize OK (artur.pas), line = 1123

	lda RESULT
	jeq l_1F03

; --- RepeatUntilProlog
l_1F05

; optimize OK (artur.pas), line = 1125

	mwy S :bp2
	ldy I
	lda (:bp2),y
	mwy E :bp2
	ldy EI
	cmp (:bp2),y
	jeq l_1F1F
	lda #$00
	sta RESULT
l_1F1F

; optimize FAIL (0, artur.pas), line = 1126

	inc I

; optimize FAIL (0, artur.pas), line = 1127

	inc EI

; optimize OK (artur.pas), line = 1128

	lda RESULT
	jeq l_1F05x
	lda EI
	cmp #$04
	jne l_1F05
l_1F05x
l_1F03
@exit

; ------------------------------------------------------------

S	= DATAORIGIN+$0ABF
E	= DATAORIGIN+$0AC1
RESULT	= DATAORIGIN+$0AC3
I	= DATAORIGIN+$0AC4
EI	= DATAORIGIN+$0AC5

@VarData	= S
@VarDataSize	= 7

	rts						; ret
.endl

.local	SHOWIOMENU					; PROCEDURE

	jmp l_1F4A

.local	SHOWDIR						; PROCEDURE
	sta PAGE

; optimize OK (artur.pas), line = 1150

	asl @
	asl @
	asl @
	asl @
	sta SKIP

; optimize OK (artur.pas), line = 1151

	lda #$1A
	sta DRAWRECT.X
	lda #$04
	sta DRAWRECT.Y
	lda #$0C
	sta DRAWRECT.W
	lda #$10
	sta DRAWRECT.H
	lda #$00
	sta DRAWRECT.C
	jsr DRAWRECT
	ldy #256-13
	mva:rne CODEORIGIN+$022B+13-256,y adr.S+13-256,y+

; optimize OK (artur.pas), line = 1153

	lda #$1A
	sta WRITESXY.X
	lda #$15
	sta WRITESXY.Y
	jsr WRITESXY

; optimize FAIL ('SYSUTILS.FINDFIRST', artur.pas), line = 1154

	inx
	mva INFO :STACKORIGIN,x
	mva INFO+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$3F :STACKORIGIN,x
	inx
	mva #$39 :STACKORIGIN,x
	mva #$22 :STACKORIGIN+STACKWIDTH,x
	jsr SYSUTILS.FINDFIRST
	lda SYSUTILS.FINDFIRST.RESULT
	jne l_1F74
@

; optimize OK (artur.pas), line = 1155

	lda #$00
	sta ROW
	ldy #256-4
	mva:rne CODEORIGIN+$0240+4-256,y adr.EXT+4-256,y+

; --- RepeatUntilProlog
l_1F7A

; optimize FAIL ('B_CRT.ATASCII2ANTIC_053D', artur.pas), line = 1158

	inx
	mva INFO.NAME :STACKORIGIN,x
	mva INFO.NAME+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.ATASCII2ANTIC_053D
	inx
	lda B_CRT.ATASCII2ANTIC_053D.RESULT
	sta @move.src
	lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
	sta @move.src+1
	@moveSTRING S #41
	dex

; optimize OK (artur.pas), line = 1159

	lda S
	sta HASEXT.S
	lda S+1
	sta HASEXT.S+1
	lda EXT
	sta HASEXT.E
	lda EXT+1
	sta HASEXT.E+1
	jsr HASEXT
	lda HASEXT.RESULT
	jne l_1F8E

; optimize OK (artur.pas), line = 1160

	lda SKIP
	jne l_1FA1

; optimize OK (artur.pas), line = 1161

	lda #$04
	add ROW
	sta WRITESXY.Y
	lda #$1A
	sta WRITESXY.X
	jsr WRITESXY

; optimize FAIL (0, artur.pas), line = 1162

	inc ROW
	jmp l_1FBC
l_1FA1

; optimize FAIL (0, artur.pas), line = 1163

	dec SKIP
l_1FBC
l_1F8E

; optimize OK (artur.pas), line = 1165

	lda INFO
	sta SYSUTILS.FINDNEXT.F
	lda INFO+1
	sta SYSUTILS.FINDNEXT.F+1
	jsr SYSUTILS.FINDNEXT
	lda SYSUTILS.FINDNEXT.RESULT
	sta NEXT

; optimize OK (artur.pas), line = 1166

	jne l_1F7Ax
	lda ROW
	cmp #$10
	jne l_1F7A
l_1F7Ax

; optimize OK (artur.pas), line = 1167

	lda INFO
	sta SYSUTILS.FINDCLOSE.F
	lda INFO+1
	sta SYSUTILS.FINDCLOSE.F+1
	jsr SYSUTILS.FINDCLOSE
l_1F74

; optimize OK (artur.pas), line = 1169

	lda NEXT
	jne l_1FF8
	mva #$01 adr.S
	mva #$1E adr.S+1

; optimize OK (artur.pas), line = 1171

	lda #$25
	sta WRITESXY.X
	lda #$15
	sta WRITESXY.Y
	jsr WRITESXY
l_1FF8

; optimize OK (artur.pas), line = 1173

	lda PAGE
	jeq l_2010
	mva #$01 adr.S
	mva #$1C adr.S+1

; optimize OK (artur.pas), line = 1175

	lda #$1A
	sta WRITESXY.X
	lda #$15
	sta WRITESXY.Y
	jsr WRITESXY
l_2010

; ------------------------------------------------------------

PAGE	= DATAORIGIN+$0AEE
ROW	= DATAORIGIN+$0AEF
adr.EXT	= [DATAORIGIN+$0AF0] .array [4]
.var EXT	= adr.EXT .word
SKIP	= DATAORIGIN+$0AF4

@VarData	= PAGE
@VarDataSize	= 7

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_1F4A

; optimize FAIL ('OPENMODAL', artur.pas), line = 1182

	jsr OPENMODAL

; optimize OK (artur.pas), line = 1183

	lda #$01
	sta DRAWRECT.X
	sta DRAWRECT.Y
	lda #$26
	sta DRAWRECT.W
	lda #$16
	sta DRAWRECT.H
	lda #$80
	sta DRAWRECT.C
	jsr DRAWRECT
	ldy #256-31
	mva:rne CODEORIGIN+$0245+31-256,y adr.S+31-256,y+

; optimize OK (artur.pas), line = 1185

	lda #$02
	sta WRITESXY.X
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-37
	mva:rne CODEORIGIN+$0265+37-256,y adr.S+37-256,y+

; optimize OK (artur.pas), line = 1187

	lda #$02
	sta WRITESXY.X
	lda #$03
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-18
	mva:rne CODEORIGIN+$028B+18-256,y adr.S+18-256,y+

; optimize OK (artur.pas), line = 1189

	lda #$02
	sta WRITESXY.X
	lda #$05
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-19
	mva:rne CODEORIGIN+$029E+19-256,y adr.S+19-256,y+

; optimize OK (artur.pas), line = 1191

	lda #$02
	sta WRITESXY.X
	lda #$07
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-19
	mva:rne CODEORIGIN+$02B2+19-256,y adr.S+19-256,y+

; optimize OK (artur.pas), line = 1193

	lda #$02
	sta WRITESXY.X
	lda #$09
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-23
	mva:rne CODEORIGIN+$02C6+23-256,y adr.S+23-256,y+

; optimize OK (artur.pas), line = 1195

	lda #$02
	sta WRITESXY.X
	lda #$0B
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-20
	mva:rne CODEORIGIN+$02DE+20-256,y adr.S+20-256,y+

; optimize OK (artur.pas), line = 1197

	lda #$02
	sta WRITESXY.X
	lda #$0D
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-24
	mva:rne CODEORIGIN+$02F3+24-256,y adr.S+24-256,y+

; optimize OK (artur.pas), line = 1199

	lda #$02
	sta WRITESXY.X
	lda #$0F
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-12
	mva:rne CODEORIGIN+$030C+12-256,y adr.S+12-256,y+

; optimize OK (artur.pas), line = 1201

	lda #$02
	sta WRITESXY.X
	lda #$11
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-20
	mva:rne CODEORIGIN+$0319+20-256,y adr.S+20-256,y+

; optimize OK (artur.pas), line = 1203

	lda #$02
	sta WRITESXY.X
	lda #$15
	sta WRITESXY.Y
	jsr WRITESXY

; optimize OK (artur.pas), line = 1205

	lda #$00
	sta DONE

; optimize OK (artur.pas), line = 1206

	sta DIRPAGE

; optimize OK (artur.pas), line = 1207

	sta NEXT

; optimize OK (artur.pas), line = 1208

	lda DIRPAGE
	jsr SHOWDIR

; --- RepeatUntilProlog
l_204D

; optimize FAIL ('CRT.READKEY', artur.pas), line = 1211

	jsr CRT.READKEY
	lda CRT.READKEY.RESULT
	sta C

; optimize OK (artur.pas), line = 1212

	cmp #$6E
	jne l_2063

; optimize FAIL ('CLEARBUFFER', artur.pas), line = 1213

	jsr CLEARBUFFER

; optimize OK (artur.pas), line = 1214

	lda #$01
	sta DONE
l_2063

; optimize OK (artur.pas), line = 1216

	lda C
	cmp #$6C
	jne l_207D

; optimize OK (artur.pas), line = 1217

	lda #$02
	sta GETFILENAME.X
	lda #$08
	sta GETFILENAME.Y
	jsr GETFILENAME

; optimize OK (artur.pas), line = 1218

	lda #$00
	sta LOADDATA.BUF
	lda #$78
	sta LOADDATA.BUF+1
	lda #$C0
	sta LOADDATA.SIZE
	lda #$03
	sta LOADDATA.SIZE+1
	jsr LOADDATA

; optimize FAIL ('INITUNDOSTORAGE', artur.pas), line = 1219

	jsr INITUNDOSTORAGE

; optimize OK (artur.pas), line = 1220

	lda #$01
	sta DONE
l_207D

; optimize OK (artur.pas), line = 1222

	lda C
	cmp #$73
	jne l_209D

; optimize OK (artur.pas), line = 1223

	lda #$02
	sta GETFILENAME.X
	lda #$0A
	sta GETFILENAME.Y
	jsr GETFILENAME

; optimize OK (artur.pas), line = 1224

	lda #$00
	sta SAVEDATA.BUF
	lda #$78
	sta SAVEDATA.BUF+1
	lda #$C0
	sta SAVEDATA.SIZE
	lda #$03
	sta SAVEDATA.SIZE+1
	jsr SAVEDATA

; optimize OK (artur.pas), line = 1225

	lda #$01
	sta DONE
l_209D

; optimize OK (artur.pas), line = 1227

	lda C
	cmp #$78
	jne l_20BC

; optimize OK (artur.pas), line = 1228

	lda #$02
	sta GETFILENAME.X
	lda #$0C
	sta GETFILENAME.Y
	jsr GETFILENAME

; optimize FAIL ('SAVEBINARY', artur.pas), line = 1229

	jsr SAVEBINARY

; optimize OK (artur.pas), line = 1230

	lda #$01
	sta DONE
l_20BC

; optimize OK (artur.pas), line = 1232

	lda C
	cmp #$63
	jne l_20D9

; optimize OK (artur.pas), line = 1233

	lda #$02
	sta GETFILENAME.X
	lda #$0E
	sta GETFILENAME.Y
	jsr GETFILENAME

; optimize OK (artur.pas), line = 1234

	lda #$00
	sta LOADDATA.BUF
	lda #$74
	sta LOADDATA.BUF+1
	lda #$00
	sta LOADDATA.SIZE
	lda #$04
	sta LOADDATA.SIZE+1
	jsr LOADDATA

; optimize OK (artur.pas), line = 1235

	lda #$01
	sta DONE
l_20D9

; optimize OK (artur.pas), line = 1237

	lda C
	cmp #$64
	jne l_20F8

; optimize OK (artur.pas), line = 1238

	lda #$00
	sta SYSTEM.MOVE_0458.SOURCE
	lda #$E0
	sta SYSTEM.MOVE_0458.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_0458.DEST
	lda #$74
	sta SYSTEM.MOVE_0458.DEST+1
	lda #$00
	sta SYSTEM.MOVE_0458.COUNT
	lda #$04
	sta SYSTEM.MOVE_0458.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0458
	m@INLINE
	.endl

; optimize OK (artur.pas), line = 1239

	lda #$01
	sta DONE
l_20F8

; optimize OK (artur.pas), line = 1241

	lda C
	cmp #$71
	jne l_2115

; optimize OK (artur.pas), line = 1242

	lda #$FF
	sta MODE

; optimize OK (artur.pas), line = 1243

	lda #$01
	sta DONE
l_2115

; optimize OK (artur.pas), line = 1245

	lda C
	cmp #$3E
	jne l_2132
	lda NEXT
	jne l_2145

; optimize FAIL (0, artur.pas), line = 1246

	inc DIRPAGE

; optimize OK (artur.pas), line = 1247

	lda DIRPAGE
	jsr SHOWDIR
l_2145
l_2132

; optimize OK (artur.pas), line = 1249

	lda C
	cmp #$3C
	jne l_2164
	lda DIRPAGE
	jeq l_2177

; optimize FAIL (0, artur.pas), line = 1250

	dec DIRPAGE

; optimize OK (artur.pas), line = 1251

	lda DIRPAGE
	jsr SHOWDIR
l_2177
l_2164

; optimize OK (artur.pas), line = 1253

	lda C
	cmp #$1B
	jne l_2196
	lda #$01
	sta DONE
l_2196

; optimize OK (artur.pas), line = 1254

	lda DONE
	jeq l_204D

; optimize FAIL ('CLOSEMODAL', artur.pas), line = 1255

	jsr CLOSEMODAL

; ------------------------------------------------------------

IO_X	= $01
IO_Y	= $01
IO_W	= $26
IO_H	= $16
DONE	= DATAORIGIN+$0AC6
adr.INFO	= [DATAORIGIN+$0AC7] .array [7] ; type unknown
.var INFO	= adr.INFO .word
INFO.ATTR	= DATAORIGIN+$0AC7
INFO.EXCLUDEATTR	= DATAORIGIN+$0AC8
adr.INFO.NAME	= [DATAORIGIN+$0AC9] .array [33]
.var INFO.NAME	= adr.INFO.NAME .word
INFO.FINDHANDLE	= DATAORIGIN+$0AEA
DIRPAGE	= DATAORIGIN+$0AEC
NEXT	= DATAORIGIN+$0AED

@VarData	= DONE
@VarDataSize	= 40

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SHOWSETTINGS					; PROCEDURE

; optimize FAIL ('OPENMODAL', artur.pas), line = 1265

	jsr OPENMODAL

; optimize OK (artur.pas), line = 1266

	lda #$05
	sta DRAWRECT.X
	lda #$02
	sta DRAWRECT.Y
	lda #$1E
	sta DRAWRECT.W
	lda #$14
	sta DRAWRECT.H
	lda #$80
	sta DRAWRECT.C
	jsr DRAWRECT
	ldy #256-16
	mva:rne CODEORIGIN+$032E+16-256,y adr.S+16-256,y+

; optimize OK (artur.pas), line = 1268

	lda #$06
	sta WRITESXY.X
	lda #$03
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-29
	mva:rne CODEORIGIN+$017A+29-256,y adr.S+29-256,y+

; optimize OK (artur.pas), line = 1270

	lda #$06
	sta WRITESXY.X
	lda #$04
	sta WRITESXY.Y
	jsr WRITESXY

; --- RepeatUntilProlog
l_21B7
	ldy #256-20
	mva:rne CODEORIGIN+$033F+20-256,y adr.S+20-256,y+

; optimize OK (artur.pas), line = 1274

	lda #$06
	sta WRITESXY.X
	sta WRITESXY.Y
	jsr WRITESXY

; optimize OK (artur.pas), line = 1275

	lda CONFIG.EDITORBACKGROUNDCOLOR
	sta SYSTEM.HEXSTR.VALUE
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+1
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$02
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	inx
	mva SYSTEM.HEXSTR.RESULT :STACKORIGIN,x
	mva SYSTEM.HEXSTR.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.ATASCII2ANTIC_053D
	inx
	lda B_CRT.ATASCII2ANTIC_053D.RESULT
	sta @move.src
	lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
	sta @move.src+1
	@moveSTRING S #41
	dex

; optimize OK (artur.pas), line = 1276

	lda #$19
	sta WRITESXY.X
	lda #$06
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-20
	mva:rne CODEORIGIN+$0354+20-256,y adr.S+20-256,y+

; optimize OK (artur.pas), line = 1279

	lda #$06
	sta WRITESXY.X
	lda #$08
	sta WRITESXY.Y
	jsr WRITESXY

; optimize OK (artur.pas), line = 1280

	lda CONFIG.EDITORFOREGROUNDCOLOR
	sta SYSTEM.HEXSTR.VALUE
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+1
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$02
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	inx
	mva SYSTEM.HEXSTR.RESULT :STACKORIGIN,x
	mva SYSTEM.HEXSTR.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	jsr B_CRT.ATASCII2ANTIC_053D
	inx
	lda B_CRT.ATASCII2ANTIC_053D.RESULT
	sta @move.src
	lda B_CRT.ATASCII2ANTIC_053D.RESULT+1
	sta @move.src+1
	@moveSTRING S #41
	dex

; optimize OK (artur.pas), line = 1281

	lda #$19
	sta WRITESXY.X
	lda #$08
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-22
	mva:rne CODEORIGIN+$0369+22-256,y adr.S+22-256,y+

; optimize OK (artur.pas), line = 1284

	lda #$06
	sta WRITESXY.X
	lda #$0A
	sta WRITESXY.Y
	jsr WRITESXY

; optimize OK (artur.pas), line = 1285

	lda CONFIG.ARROWSRAW
	jeq l_21DE
	ldy #256-4
	mva:rne CODEORIGIN+$0380+4-256,y adr.S+4-256,y+
	jmp l_21E8
l_21DE
	ldy #256-4
	mva:rne CODEORIGIN+$0385+4-256,y adr.S+4-256,y+
l_21E8

; optimize OK (artur.pas), line = 1287

	lda #$1B
	sta WRITESXY.X
	lda #$0A
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-19
	mva:rne CODEORIGIN+$038A+19-256,y adr.S+19-256,y+

; optimize OK (artur.pas), line = 1290

	lda #$06
	sta WRITESXY.X
	lda #$0C
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-8
	mva:rne CODEORIGIN+$039E+8-256,y adr.S+8-256,y+

; optimize OK (artur.pas), line = 1292

	lda CONFIG.KEYCODEDISPLAY
	cmp #$02
	jne l_2200
	ldy #256-8
	mva:rne CODEORIGIN+$03A7+8-256,y adr.S+8-256,y+
l_2200

; optimize OK (artur.pas), line = 1293

	lda CONFIG.KEYCODEDISPLAY
	cmp #$01
	jne l_2215
	ldy #256-8
	mva:rne CODEORIGIN+$03B0+8-256,y adr.S+8-256,y+
l_2215

; optimize OK (artur.pas), line = 1294

	lda #$18
	sta WRITESXY.X
	lda #$0C
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-12
	mva:rne CODEORIGIN+$03B9+12-256,y adr.S+12-256,y+

; optimize OK (artur.pas), line = 1297

	lda #$06
	sta WRITESXY.X
	lda #$0E
	sta WRITESXY.Y
	jsr WRITESXY
	ldy #256-19
	mva:rne CODEORIGIN+$03C6+19-256,y adr.S+19-256,y+

; optimize OK (artur.pas), line = 1300

	lda #$06
	sta WRITESXY.X
	lda #$14
	sta WRITESXY.Y
	jsr WRITESXY

; optimize FAIL ('CRT.READKEY', artur.pas), line = 1302

	jsr CRT.READKEY
	lda CRT.READKEY.RESULT
	sta C

; optimize OK (artur.pas), line = 1303

	cmp #$61
	jne l_2237
	ldy #1
	lda CONFIG.ARROWSRAW
	beq @+
	dey
@
	tya
	sta CONFIG.ARROWSRAW
l_2237

; optimize OK (artur.pas), line = 1304

	lda C
	cmp #$62
	jne l_2255
	lda #$19
	sta GETHEXVAL.X
	lda #$06
	sta GETHEXVAL.Y
	lda CONFIG.EDITORBACKGROUNDCOLOR
	sta GETHEXVAL.DEFAULT
	jsr GETHEXVAL
	lda GETHEXVAL.RESULT
	sta CONFIG.EDITORBACKGROUNDCOLOR
l_2255

; optimize OK (artur.pas), line = 1305

	lda C
	cmp #$66
	jne l_2273
	lda #$19
	sta GETHEXVAL.X
	lda #$08
	sta GETHEXVAL.Y
	lda CONFIG.EDITORFOREGROUNDCOLOR
	sta GETHEXVAL.DEFAULT
	jsr GETHEXVAL
	lda GETHEXVAL.RESULT
	sta CONFIG.EDITORFOREGROUNDCOLOR
l_2273

; optimize OK (artur.pas), line = 1306

	lda C
	cmp #$63
	jne l_2291

; optimize FAIL (0, artur.pas), line = 1307

	inc CONFIG.KEYCODEDISPLAY

; optimize OK (artur.pas), line = 1308

	lda CONFIG.KEYCODEDISPLAY
	cmp #$03
	jne l_22A8
	lda #$00
	sta CONFIG.KEYCODEDISPLAY
l_22A8
l_2291

; optimize OK (artur.pas), line = 1310

	lda C
	cmp #$73
	jne l_22C3

; optimize OK (artur.pas), line = 1311

	lda #$06
	sta B_CRT.CRT_GOTOXY.X
	lda #$0E
	sta B_CRT.CRT_GOTOXY.Y
	jsr B_CRT.CRT_GOTOXY

; optimize FAIL ('SAVECONFIG', artur.pas), line = 1312

	jsr SAVECONFIG

; optimize OK (artur.pas), line = 1313

	lda #$1B
	sta C
l_22C3

; optimize OK (artur.pas), line = 1315

	lda C
	cmp #$1B
	jne l_21B7

; optimize FAIL ('CLOSEMODAL', artur.pas), line = 1317

	jsr CLOSEMODAL

; ------------------------------------------------------------

OPT_X	= $05
OPT_Y	= $02
OPT_W	= $1E
OPT_H	= $14
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_03E1

; optimize FAIL ('SYSTEM.PAUSE_0479', artur.pas), line = 1332

	jsr SYSTEM.PAUSE_0479

	lda VVBLKD
	sta OLDVBL
	lda VVBLKD+1
	sta OLDVBL+1

	lda VDSLST
	sta OLDDLI
	lda VDSLST+1
	sta OLDDLI+1

; optimize OK (artur.pas), line = 1335

	lda <VBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda >VBL
	sta VVBLKD+1

; optimize OK (artur.pas), line = 1336

	mva <DLI VDSLST
	mva >DLI VDSLST+1

; optimize OK (artur.pas), line = 1337

	lda #$00
	sta ATARI.SDLSTL
	lda #$70
	sta ATARI.SDLSTL+1

; optimize OK (artur.pas), line = 1338

	lda #$C0
	sta ATARI.NMIEN

; optimize OK (artur.pas), line = 1339

	lda #$00
	sta B_CRT.CRT_INIT_05B3.VRAM_ADDRESS
	lda #$7C
	sta B_CRT.CRT_INIT_05B3.VRAM_ADDRESS+1
	lda #$28
	sta B_CRT.CRT_INIT_05B3.WIDTH
	lda #$18
	sta B_CRT.CRT_INIT_05B3.HEIGHT
	jsr B_CRT.CRT_INIT_05B3

; optimize OK (artur.pas), line = 1341

	lda #$00
	sta SYSTEM.MOVE_0458.SOURCE
	lda #$E0
	sta SYSTEM.MOVE_0458.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_0458.DEST
	lda #$74
	sta SYSTEM.MOVE_0458.DEST+1
	lda #$00
	sta SYSTEM.MOVE_0458.COUNT
	lda #$04
	sta SYSTEM.MOVE_0458.COUNT+1
	.local +MAIN.SYSTEM.MOVE_0458
	m@INLINE
	.endl

; optimize OK (artur.pas), line = 1342

	lda #$74
	sta EDITORCHARSET

; optimize OK (artur.pas), line = 1343

	lda #$0A
	sta $02D9

; optimize OK (artur.pas), line = 1344

	lda #$05
	sta $02DA

; optimize OK (artur.pas), line = 1346

	lda #$92
	sta CONFIG.EDITORBACKGROUNDCOLOR

; optimize OK (artur.pas), line = 1347

	lda #$9A
	sta CONFIG.EDITORFOREGROUNDCOLOR

; optimize FAIL ('CLEAREDIT', artur.pas), line = 1349

	jsr CLEAREDIT

; optimize FAIL ('INITPMG', artur.pas), line = 1350

	jsr INITPMG

; optimize FAIL ('INITCURSOR', artur.pas), line = 1351

	jsr INITCURSOR

; optimize FAIL ('INITUNDOSTORAGE', artur.pas), line = 1352

	jsr INITUNDOSTORAGE

; optimize FAIL ('LOADCONFIG', artur.pas), line = 1353

	jsr LOADCONFIG

; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1355

	jsr SHOWMENUBAR

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1356

	jsr SHOWSTATUS

; optimize FAIL ('SHOWHELP', artur.pas), line = 1357

	jsr SHOWHELP

; --- RepeatUntilProlog
l_2309

; optimize FAIL ('SYSTEM.PAUSE_0479', artur.pas), line = 1360

	jsr SYSTEM.PAUSE_0479

; optimize OK (artur.pas), line = 1364

	lda KEYREPEATCOUNTER
	jne l_231C

; optimize FAIL ('B_CRT.CRT_STARTPRESSED', artur.pas), line = 1365

	jsr B_CRT.CRT_STARTPRESSED
	lda B_CRT.CRT_STARTPRESSED.RESULT
	jeq l_2327
	jsr SHOWIOMENU
l_2327

; optimize FAIL ('B_CRT.CRT_SELECTPRESSED', artur.pas), line = 1366

	jsr B_CRT.CRT_SELECTPRESSED
	lda B_CRT.CRT_SELECTPRESSED.RESULT
	jeq l_2335
	jsr NEXTMODE
l_2335

; optimize FAIL ('B_CRT.CRT_OPTIONPRESSED', artur.pas), line = 1367

	jsr B_CRT.CRT_OPTIONPRESSED
	lda B_CRT.CRT_OPTIONPRESSED.RESULT
	jeq l_2343
	jsr SHOWSETTINGS
l_2343

; optimize FAIL ('B_CRT.CRT_HELPPRESSED', artur.pas), line = 1368

	jsr B_CRT.CRT_HELPPRESSED
	lda B_CRT.CRT_HELPPRESSED.RESULT
	jeq l_2351
	jsr SHOWHELP
l_2351

; optimize OK (artur.pas), line = 1370

	lda KEYDOWN
	jeq l_2361

; optimize OK (artur.pas), line = 1372

	lda #$80
	jsr CHECKCURSORKEYS

; optimize OK (artur.pas), line = 1373

	lda CONFIG.ARROWSRAW
	jeq l_2370
	lda #$00
	jsr CHECKCURSORKEYS
l_2370

; optimize OK (artur.pas), line = 1375

	lda KEY
	cmp #$27
	jne l_2387

; optimize OK (artur.pas), line = 1376

	ldy #1
	lda INVERT
	beq @+
	dey
@
	tya
	sta INVERT

; optimize OK (artur.pas), line = 1377

	lda BRUSH
	eor #$80
	sta BRUSH

; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1378

	jsr SHOWMENUBAR

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1379

	jsr SHOWSTATUS

; optimize OK (artur.pas), line = 1380

	lda #$00
	sta KEYDOWN
l_2387

; optimize OK (artur.pas), line = 1383

	lda KEY
	cmp #$3C
	jne l_23B5

; optimize FAIL ('BRUSHSELECTOR', artur.pas), line = 1384

	jsr BRUSHSELECTOR
	lda BRUSHSELECTOR.RESULT
	sta BRUSH

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1385

	jsr SHOWSTATUS

; optimize OK (artur.pas), line = 1386

	lda #$00
	sta KEYDOWN
l_23B5

; optimize OK (artur.pas), line = 1389

	lda KEY
	cmp #$7C
	jne l_23D3

; optimize OK (artur.pas), line = 1390

	ldy CURSOR
	lda #$7C
	add CURSOR+1
	sta :bp+1
	lda (:bp),y
	sta BRUSH

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1391

	jsr SHOWSTATUS

; optimize OK (artur.pas), line = 1392

	lda #$00
	sta KEYDOWN
l_23D3

; optimize OK (artur.pas), line = 1395

	lda KEY
	cmp #$2C
	jne l_23F7

; optimize FAIL ('HISTORYBACK', artur.pas), line = 1396

	jsr HISTORYBACK

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1397

	jsr SHOWSTATUS

; optimize OK (artur.pas), line = 1398

	lda #$00
	sta KEYDOWN
l_23F7

; optimize OK (artur.pas), line = 1401

	lda KEY
	cmp #$6C
	jne l_2412

; optimize FAIL ('HISTORYFWD', artur.pas), line = 1402

	jsr HISTORYFWD

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1403

	jsr SHOWSTATUS

; optimize OK (artur.pas), line = 1404

	lda #$00
	sta KEYDOWN
l_2412

; optimize OK (artur.pas), line = 1407

	lda KEY
	cmp #$5C
	jne l_242D

; optimize OK (artur.pas), line = 1408

	ldy #1
	lda STATUSCUSTOMCHARSET
	beq @+
	dey
@
	tya
	sta STATUSCUSTOMCHARSET

; optimize OK (artur.pas), line = 1409

	lda #$00
	sta KEYDOWN
l_242D

; optimize OK (artur.pas), line = 1412

	lda KEY
	cmp #$B4
	jne l_244F

; optimize FAIL ('TRYUNDO', artur.pas), line = 1413

	jsr TRYUNDO

; optimize FAIL ('READCURSORCHAR', artur.pas), line = 1414

	jsr READCURSORCHAR

; optimize OK (artur.pas), line = 1415

	lda #$00
	sta KEYDOWN
l_244F

; optimize OK (artur.pas), line = 1417

	lda KEY
	cmp #$F4
	jne l_246A

; optimize FAIL ('TRYREDO', artur.pas), line = 1418

	jsr TRYREDO

; optimize FAIL ('READCURSORCHAR', artur.pas), line = 1419

	jsr READCURSORCHAR

; optimize OK (artur.pas), line = 1420

	lda #$00
	sta KEYDOWN
l_246A
l_2361

; optimize FAIL ('READJOYSTICK', artur.pas), line = 1425

	jsr READJOYSTICK

; optimize OK (artur.pas), line = 1427

	lda JOYX
	jne l_2494x
	lda JOYY
	jeq l_2494
l_2494x

; optimize OK (artur.pas), line = 1428

	lda JOYX
	sta MOVECURSOR.DX
	lda JOYY
	sta MOVECURSOR.DY
	jsr MOVECURSOR

; optimize OK (artur.pas), line = 1429

	lda #$04
	sta KEYREPEATCOUNTER
l_2494
l_231C

; optimize OK (artur.pas), line = 1436

	lda MODE
	jne l_24B6

; optimize OK (artur.pas), line = 1437

	lda JOYFIRE
	jne l_24C9

; optimize FAIL ('POKEBRUSH', artur.pas), line = 1438

	jsr POKEBRUSH

; optimize OK (artur.pas), line = 1439

	lda BRUSH
	jsr USEBRUSH

; optimize OK (artur.pas), line = 1440

	lda #$01
	sta JOYFIRE

; optimize OK (artur.pas), line = 1441

	lda #$00
	sta KEYDOWN
l_24C9

; optimize OK (artur.pas), line = 1443

	lda KEYDOWN
	jeq l_24E5

; optimize OK (artur.pas), line = 1444

	lda KEY
	cmp #$0C
	jne l_24F8

; optimize FAIL ('POKEBRUSH', artur.pas), line = 1445

	jsr POKEBRUSH

; optimize OK (artur.pas), line = 1446

	lda BRUSH
	jsr USEBRUSH

; optimize OK (artur.pas), line = 1447

	lda CURSORFORWARD
	jeq l_250A
	lda #$01
	sta MOVECURSOR.DX
	lda #$00
	sta MOVECURSOR.DY
	jsr MOVECURSOR
l_250A

; optimize OK (artur.pas), line = 1448

	lda #$00
	sta KEYDOWN
l_24F8

; optimize OK (artur.pas), line = 1450

	lda KEY
	cmp #$77
	jne l_2528

; optimize OK (artur.pas), line = 1451

	ldy #1
	lda CURSORFORWARD
	beq @+
	dey
@
	tya
	sta CURSORFORWARD

; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1452

	jsr SHOWMENUBAR

; optimize OK (artur.pas), line = 1453

	lda #$00
	sta KEYDOWN
l_2528

; optimize OK (artur.pas), line = 1455

	lda KEY
	cmp #$21
	jne l_254B

; optimize FAIL ('WRITESPACE', artur.pas), line = 1456

	jsr WRITESPACE

; optimize OK (artur.pas), line = 1457

	lda CURSORFORWARD
	jeq l_2559
	lda #$01
	sta MOVECURSOR.DX
	lda #$00
	sta MOVECURSOR.DY
	jsr MOVECURSOR
l_2559
l_254B

; optimize OK (artur.pas), line = 1459

	lda CURSORFORWARD
	jeq l_256D

; optimize OK (artur.pas), line = 1460

	lda KEY
	cmp #$34
	jne l_2580

; optimize OK (artur.pas), line = 1461

	lda #$FF
	sta MOVECURSOR.DX
	lda #$00
	sta MOVECURSOR.DY
	jsr MOVECURSOR

; optimize FAIL ('WRITESPACE', artur.pas), line = 1462

	jsr WRITESPACE
l_2580
l_256D
l_24E5

; optimize OK (artur.pas), line = 1467

	lda KEYDOWN
	jeq l_2597

; optimize FAIL ('SETBRUSHFROMKEY', artur.pas), line = 1468

	jsr SETBRUSHFROMKEY

; optimize FAIL ('POKEBRUSH', artur.pas), line = 1469

	jsr POKEBRUSH

; optimize OK (artur.pas), line = 1470

	lda BRUSH
	jsr USEBRUSH

; optimize OK (artur.pas), line = 1471

	lda CURSORFORWARD
	jeq l_25AA
	lda #$01
	sta MOVECURSOR.DX
	lda #$00
	sta MOVECURSOR.DY
	jsr MOVECURSOR
l_25AA

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1472

	jsr SHOWSTATUS
l_2597
l_24B6

; optimize OK (artur.pas), line = 1479

	lda MODE
	cmp #$01
	jne l_25C7

; optimize OK (artur.pas), line = 1480

	lda JOYFIRE
	jne l_25DA

; optimize OK (artur.pas), line = 1481

	lda #$01
	sta JOYFIRE

; optimize OK (artur.pas), line = 1482

	sta PENDOWN

; optimize OK (artur.pas), line = 1483

	lda #$14
	sta KEYREPEATCOUNTER
l_25DA

; optimize OK (artur.pas), line = 1485

	lda KEYDOWN
	jeq l_25F5

; optimize OK (artur.pas), line = 1486

	lda KEY
	cmp #$1C
	jne l_2608

; optimize FAIL ('CLEARSELECTION', artur.pas), line = 1487

	jsr CLEARSELECTION

; optimize OK (artur.pas), line = 1488

	lda #$00
	sta KEYDOWN
l_2608

; optimize OK (artur.pas), line = 1490

	lda KEY
	cmp #$0C
	jne l_2622

; optimize OK (artur.pas), line = 1491

	lda #$01
	sta PENDOWN

; optimize OK (artur.pas), line = 1492

	lda #$00
	sta KEYDOWN
l_2622

; optimize OK (artur.pas), line = 1495

	lda KEY
	cmp #$21
	jne l_263F

; optimize FAIL ('WRITESPACE', artur.pas), line = 1496

	jsr WRITESPACE

; optimize FAIL ('CLEARSELECTION', artur.pas), line = 1497

	jsr CLEARSELECTION

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1498

	jsr SHOWSTATUS
l_263F

; optimize OK (artur.pas), line = 1500

	lda C
	cmp #$64
	jne l_2657
	lda #$00
	jsr SELECTTOOL
l_2657

; optimize OK (artur.pas), line = 1501

	lda C
	cmp #$6C
	jne l_266E
	lda #$01
	jsr SELECTTOOL
l_266E

; optimize OK (artur.pas), line = 1502

	lda C
	cmp #$66
	jne l_2685
	lda #$02
	jsr SELECTTOOL
l_2685

; optimize OK (artur.pas), line = 1503

	lda C
	cmp #$62
	jne l_269C
	lda #$03
	jsr SELECTTOOL
l_269C
l_25F5

; optimize OK (artur.pas), line = 1505

	lda KEYDOWN
	jeq l_26AF

; optimize FAIL ('SETBRUSHFROMKEY', artur.pas), line = 1506

	jsr SETBRUSHFROMKEY

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1507

	jsr SHOWSTATUS
l_26AF

; optimize OK (artur.pas), line = 1510

	lda PENDOWN
	jeq l_26C0

; optimize OK (artur.pas), line = 1511

	lda DRAWTOOL
	jne l_26D3

; optimize FAIL ('POKEBRUSH', artur.pas), line = 1512

	jsr POKEBRUSH

; optimize OK (artur.pas), line = 1513

	lda BRUSH
	jsr USEBRUSH
	jmp l_26E2
l_26D3

; optimize OK (artur.pas), line = 1515

	lda P1X
	cmp #$FF
	jne l_26F4

; optimize OK (artur.pas), line = 1516

	lda CURSORX
	sta P1X

; optimize OK (artur.pas), line = 1517

	lda CURSORY
	sta P1Y
	jmp l_270A
l_26F4

; optimize OK (artur.pas), line = 1519

	lda P2X
	cmp #$FF
	jne l_271C

; optimize OK (artur.pas), line = 1520

	lda CURSORX
	sta P2X

; optimize OK (artur.pas), line = 1521

	lda CURSORY
	sta P2Y

; optimize OK (artur.pas), line = 1522

	lda DRAWTOOL
	cmp #$01
	jne l_273B
	jsr DRAWLINE
l_273B

; optimize OK (artur.pas), line = 1523

	lda DRAWTOOL
	cmp #$02
	jne l_2751
	jsr DRAWFRAME
l_2751

; optimize OK (artur.pas), line = 1524

	lda DRAWTOOL
	cmp #$03
	jne l_2767
	jsr DRAWBLOCK
l_2767

; optimize FAIL ('READCURSORCHAR', artur.pas), line = 1525

	jsr READCURSORCHAR

; optimize OK (artur.pas), line = 1526

	lda BRUSH
	jsr USEBRUSH

; optimize FAIL ('CLEARSELECTION', artur.pas), line = 1527

	jsr CLEARSELECTION
l_271C
l_270A
l_26E2

; optimize OK (artur.pas), line = 1530

	lda #$00
	sta PENDOWN
l_26C0
l_25C7

; optimize OK (artur.pas), line = 1537

	lda MODE
	cmp #$02
	jne l_278D

; optimize OK (artur.pas), line = 1538

	lda JOYFIRE
	jne l_27A0

; optimize OK (artur.pas), line = 1539

	lda #$01
	sta JOYFIRE

; optimize OK (artur.pas), line = 1540

	sta PENDOWN

; optimize OK (artur.pas), line = 1541

	lda #$14
	sta KEYREPEATCOUNTER
l_27A0

; optimize OK (artur.pas), line = 1543

	lda KEYDOWN
	jeq l_27BB

; optimize OK (artur.pas), line = 1544

	lda KEY
	cmp #$1C
	jne l_27CE

; optimize FAIL ('CLEARSELECTION', artur.pas), line = 1545

	jsr CLEARSELECTION

; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1546

	jsr SHOWMENUBAR

; optimize OK (artur.pas), line = 1547

	lda #$00
	sta KEYDOWN
l_27CE

; optimize OK (artur.pas), line = 1549

	lda KEY
	cmp #$0C
	jne l_27E9

; optimize OK (artur.pas), line = 1550

	lda #$01
	sta PENDOWN

; optimize OK (artur.pas), line = 1551

	lda #$00
	sta KEYDOWN
l_27E9

; optimize OK (artur.pas), line = 1553

	lda P2X
	cmp #$FF
	jeq l_2806

; optimize OK (artur.pas), line = 1554

	lda C
	cmp #$63
	jne l_2819
	lda #$00
	jsr COPYBLOCK
l_2819

; optimize OK (artur.pas), line = 1555

	lda C
	cmp #$6D
	jne l_2830
	lda #$01
	jsr COPYBLOCK
l_2830

; optimize OK (artur.pas), line = 1556

	lda C
	cmp #$73
	jne l_2847
	jsr SAVEBLOCK
l_2847

; optimize OK (artur.pas), line = 1557

	lda C
	cmp #$69
	jne l_285D
	jsr INVERTBLOCK
l_285D

; optimize OK (artur.pas), line = 1558

	lda C
	cmp #$66
	jne l_2873
	jsr DRAWBLOCK
l_2873

; optimize FAIL ('READCURSORCHAR', artur.pas), line = 1559

	jsr READCURSORCHAR

; optimize FAIL ('SHOWSTATUS', artur.pas), line = 1560

	jsr SHOWSTATUS
l_2806
l_27BB

; optimize OK (artur.pas), line = 1565

	lda PENDOWN
	jeq l_2889

; optimize OK (artur.pas), line = 1566

	lda P1X
	cmp #$FF
	jne l_289C

; optimize OK (artur.pas), line = 1567

	lda CURSORX
	sta P1X

; optimize OK (artur.pas), line = 1568

	lda CURSORY
	sta P1Y
	jmp l_28B2
l_289C

; optimize OK (artur.pas), line = 1570

	lda P2X
	cmp #$FF
	jne l_28C4

; optimize OK (artur.pas), line = 1571

	lda CURSORX
	sta P2X

; optimize OK (artur.pas), line = 1572

	lda CURSORY
	sta P2Y

; optimize OK (artur.pas), line = 1573

	lda CURSORX
	sta XORCURSOR.X
	lda CURSORY
	sta XORCURSOR.Y
	jsr XORCURSOR

; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1574

	jsr SHOWMENUBAR
	jmp l_28E2
l_28C4

; optimize FAIL ('CLEARSELECTION', artur.pas), line = 1576

	jsr CLEARSELECTION

; optimize FAIL ('SHOWMENUBAR', artur.pas), line = 1577

	jsr SHOWMENUBAR
l_28E2
l_28B2

; optimize OK (artur.pas), line = 1580

	lda #$00
	sta PENDOWN
l_2889
l_278D

; optimize OK (artur.pas), line = 1584

	lda KEYDOWN
	jeq l_28F8
	lda #$00
	sta KEYDOWN
l_28F8

; optimize FAIL ('CRT.KEYPRESSED', artur.pas), line = 1586

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_2909

; optimize FAIL ('CRT.READKEY', artur.pas), line = 1587

	jsr CRT.READKEY
	lda CRT.READKEY.RESULT
	sta C

; optimize OK (artur.pas), line = 1588

	lda ATARI.KBCODE
	sta KEY

; optimize OK (artur.pas), line = 1589

	lda #$01
	sta KEYDOWN
l_2909

; optimize OK (artur.pas), line = 1592

	lda MODE
	cmp #$FF
	jne l_2309

; optimize FAIL ('SYSTEM.PAUSE_0479', artur.pas), line = 1596

	jsr SYSTEM.PAUSE_0479

; optimize FAIL ('B_PMG.PMG_DISABLE', artur.pas), line = 1597

	jsr B_PMG.PMG_DISABLE

; optimize OK (artur.pas), line = 1598

	lda OLDVBL
	ldy #5
	sta wsync
	dey
	rne
	sta VVBLKD
	lda OLDVBL+1
	sta VVBLKD+1

; optimize OK (artur.pas), line = 1599

	mva OLDDLI VDSLST
	mva OLDDLI+1 VDSLST+1

; optimize OK (artur.pas), line = 1600

	lda #$40
	sta ATARI.NMIEN

; optimize OK (artur.pas), line = 1601

	lda #$00
	jsr CRT.TEXTMODE
	lda #$00
	jmp @halt

; ------------------------------------------------------------

SCREEN_WIDTH	= $28
SCREEN_HEIGHT	= $18
SCREEN_SIZE	= $03C0
FULLSCREEN_UNDO_COUNT	= $08
UNDO_ACTIONS_COUNT	= $40
BIN_HEADER_SIZE	= $69
FREE_BOTTOM	= $7000
PMG	= $7000
DISPLAY_LIST_ADDRESS	= $7000
BIN_HEADER	= $7100
CUSTOM_CHARSET	= $7400
VIDEO_BUFFER	= $7800
MENU_BAR	= $7BC0
VIDEO_RAM_ADDRESS	= $7C00
STATUS_BAR	= $7FC0
KEY_MAP	= $8000
UNDO_SCREENS	= $8100
DEFAULT_CHARSET	= $E000
NONE	= $FF
UNDO_NONE	= $FF
UNDO_FROM_BUFFER	= $FE
MODE_TYPE	= $00
MODE_DRAW	= $01
MODE_BLOCK	= $02
MODE_LAST	= $03
MODE_EXIT	= $FF
TOOL_DRAW	= $00
TOOL_LINE	= $01
TOOL_FRAME	= $02
TOOL_BLOCK	= $03
KEY_DELAY	= $0A
JOY_DELAY	= $04
FIRE_DELAY	= $14
OS_REPEAT_DELAY	= $0A
OS_REPEAT_RATE	= $05
PMG_XOFFSET	= $30
PMG_YOFFSET	= $0F
BG_DEFAULT	= $92
FG_DEFAULT	= $9A
MAX_BRUSH_HISTORY	= $11
CODE_DISPLAY_NONE	= $00
CODE_DISPLAY_ANTIC	= $01
CODE_DISPLAY_ATASCII	= $02
adr.VERSION	= [DATAORIGIN+$08B4] .array [6]
.var VERSION	= adr.VERSION .word
adr.CONFIG	= [DATAORIGIN+$08BA] .array [8] ; type unknown
.var CONFIG	= adr.CONFIG .word
CONFIG.EDITORBACKGROUNDCOLOR	= DATAORIGIN+$08BA
CONFIG.EDITORFOREGROUNDCOLOR	= DATAORIGIN+$08BB
CONFIG.ARROWSRAW	= DATAORIGIN+$08BC
CONFIG.KEYCODEDISPLAY	= DATAORIGIN+$08BD
B	= DATAORIGIN+$08BE
H	= DATAORIGIN+$08BF
W	= DATAORIGIN+$08C0
adr.S	= [DATAORIGIN+$08C1] .array [41]
.var S	= adr.S .word
C	= DATAORIGIN+$08EA
KEY	= DATAORIGIN+$08EB
.var AFILE	= DATAORIGIN+$08EC .word
JOYX	= DATAORIGIN+$08F8
JOYY	= DATAORIGIN+$08F9
JOYFIRE	= DATAORIGIN+$08FA
BRUSH	= DATAORIGIN+$08FB
KEYREPEATCOUNTER	= DATAORIGIN+$08FC
OLDVBL	= DATAORIGIN+$08FD
OLDDLI	= DATAORIGIN+$08FF
MODE	= DATAORIGIN+$0901
DRAWTOOL	= DATAORIGIN+$0902
CURSORX	= DATAORIGIN+$0903
CURSORY	= DATAORIGIN+$0904
CURSOR	= DATAORIGIN+$0905
CURSORCHAR	= DATAORIGIN+$0907
KEYDOWN	= DATAORIGIN+$0908
PENDOWN	= DATAORIGIN+$0909
INVERT	= DATAORIGIN+$090A
CURSORFORWARD	= DATAORIGIN+$090B
STATUSCUSTOMCHARSET	= DATAORIGIN+$090C
EDITORCHARSET	= DATAORIGIN+$090D
P1X	= DATAORIGIN+$090E
P2X	= DATAORIGIN+$090F
P1Y	= DATAORIGIN+$0910
P2Y	= DATAORIGIN+$0911
adr.BRUSHHISTORY	= [DATAORIGIN+$0912] .array [18]
.var BRUSHHISTORY	= adr.BRUSHHISTORY .word
BRUSHINDEX	= DATAORIGIN+$0924
BRUSHFRAMEPOSX	= DATAORIGIN+$0925
adr.KEYCHARS	= $8000
.var KEYCHARS	= adr.KEYCHARS .word
adr.UNDOBUFFERS	= [DATAORIGIN+$0926] .array [8] .word
.var UNDOBUFFERS	= adr.UNDOBUFFERS .word
adr.UNDOACTIONS	= [DATAORIGIN+$0936] .array [64] [3]
.var UNDOACTIONS	= adr.UNDOACTIONS .word
UNDOBUFFERIDX	= DATAORIGIN+$09F6
UNDOACTIONSIDX	= DATAORIGIN+$09F7
REDOCOUNT	= DATAORIGIN+$09F8
adr.LINEOFFSET	= [DATAORIGIN+$09F9] .array [24] .word
.var LINEOFFSET	= adr.LINEOFFSET .word
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.DOS.@UnitInit
	jsr MAIN.DOS.@UnitInit
	.fi

	.ifdef MAIN.STRUTILS.@UnitInit
	jsr MAIN.STRUTILS.@UnitInit
	.fi

	.ifdef MAIN.SYSUTILS.@UnitInit
	jsr MAIN.SYSUTILS.@UnitInit
	.fi

	.ifdef MAIN.B_CRT.@UnitInit
	jsr MAIN.B_CRT.@UnitInit
	.fi

	.ifdef MAIN.B_SYSTEM.@UnitInit
	jsr MAIN.B_SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.B_PMG.@UnitInit
	jsr MAIN.B_PMG.@UnitInit
	.fi

	.ifdef MAIN.JOYSTICK.@UnitInit
	jsr MAIN.JOYSTICK.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.DOS) > 0
	.print 'DOS: ',MAIN.DOS,'..',MAIN.DOS+.SIZEOF(MAIN.DOS)-1
	eif

	ift .SIZEOF(MAIN.STRUTILS) > 0
	.print 'STRUTILS: ',MAIN.STRUTILS,'..',MAIN.STRUTILS+.SIZEOF(MAIN.STRUTILS)-1
	eif

	ift .SIZEOF(MAIN.SYSUTILS) > 0
	.print 'SYSUTILS: ',MAIN.SYSUTILS,'..',MAIN.SYSUTILS+.SIZEOF(MAIN.SYSUTILS)-1
	eif

	ift .SIZEOF(MAIN.B_CRT) > 0
	.print 'B_CRT: ',MAIN.B_CRT,'..',MAIN.B_CRT+.SIZEOF(MAIN.B_CRT)-1
	eif

	ift .SIZEOF(MAIN.B_SYSTEM) > 0
	.print 'B_SYSTEM: ',MAIN.B_SYSTEM,'..',MAIN.B_SYSTEM+.SIZEOF(MAIN.B_SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.B_PMG) > 0
	.print 'B_PMG: ',MAIN.B_PMG,'..',MAIN.B_PMG+.SIZEOF(MAIN.B_PMG)-1
	eif

	ift .SIZEOF(MAIN.JOYSTICK) > 0
	.print 'JOYSTICK: ',MAIN.JOYSTICK,'..',MAIN.JOYSTICK+.SIZEOF(MAIN.JOYSTICK)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $03 $00 $0E $00 $04 $90 $8E $98
.by  $98 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $01 $80 $14 <[DATAORIGIN+$08FD] >[DATAORIGIN+$08FD] <[DATAORIGIN+$08FF]
.by  >[DATAORIGIN+$08FF] $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $FF $FF  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $28 $00 $50 $00 $78  $00 $A0 $00 $C8 $00 $F0 $00 $18
.by  $01 $40 $01 $68 $01 $90 $01 $B8  $01 $E0 $01 $08 $02 $30 $02 $58  $02 $80 $02 $A8 $02 $D0 $02 $F8
.by  $02 $20 $03 $48 $03 $70 $03 $98  $03 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00
.by  $00 $3F $21 $21 $21 $21 $3F $50  $70 $90 $B0 $48 $40 $38 $30 $03  $03 $03 $03 $FF

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 2805

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $04 $54 $52 $55 $45 $00 $05 $46  $41 $4C $53 $45 $00 $00 $00 $04  $90 $8E $98 $98 $00 $12 $AD $AF
.by  $A4 $A5 $00 $00 $00 $00 $00 $00  $B8 $00 $00 $00 $B9 $00 $00 $00  $00 $05 $74 $79 $70 $65 $00 $00
.by  $05 $64 $72 $61 $77 $00 $00 $05  $62 $6C $6F $63 $6B $00 $28 $A3  $A1 $B0 $B3 $9A $62 $72 $75 $73
.by  $68 $00 $00 $B2 $A5 $B4 $B5 $B2  $AE $9A $70 $61 $69 $6E $74 $00  $00 $29 $2E $33 $25 $32 $34 $00
.by  $29 $2E $36 $25 $32 $33 $25 $00  $06 $A9 $AE $B3 $A5 $B2 $B4 $00  $07 $A9 $AE $B6 $A5 $B2 $B3 $A5
.by  $00 $28 $A3 $A1 $B0 $B3 $9A $62  $72 $75 $73 $68 $00 $00 $00 $A4  $72 $61 $77 $00 $00 $00 $AC $69
.by  $6E $65 $00 $00 $00 $A6 $72 $61  $6D $65 $00 $00 $00 $A2 $6C $6F  $63 $6B $00 $04 $A4 $B2 $A1 $B7
.by  $00 $04 $AC $A9 $AE $A5 $00 $05  $A6 $B2 $A1 $AD $A5 $00 $05 $A2  $AC $AF $A3 $AB $00 $1F $33 $65
.by  $6C $65 $63 $74 $00 $61 $72 $65  $61 $00 $77 $69 $74 $68 $00 $B2  $A5 $B4 $B5 $B2 $AE $00 $6F $72
.by  $00 $A6 $A9 $B2 $A5 $00 $20 $A3  $6F $70 $79 $00 $00 $AD $6F $76  $65 $00 $00 $A6 $69 $6C $6C $00
.by  $00 $A9 $6E $76 $65 $72 $74 $00  $00 $B3 $61 $76 $65 $00 $00 $00  $02 $00 $00 $00 $0F $25 $6E $74
.by  $65 $72 $00 $26 $69 $6C $65 $6E  $61 $6D $65 $1A $00 $0C $20 $20  $20 $20 $20 $20 $20 $20 $20 $20
.by  $20 $20 $00 $0C $B3 $E5 $EC $E5  $E3 $F4 $80 $A2 $F2 $F5 $F3 $E8  $00 $0D $24 $65 $76 $69 $63 $65
.by  $00 $25 $72 $72 $6F $72 $01 $00  $0D $22 $61 $64 $00 $26 $69 $6C  $65 $6E $61 $6D $65 $01 $00 $08
.by  $33 $75 $63 $63 $65 $73 $73 $0E  $00 $0C $41 $52 $54 $55 $52 $43  $46 $47 $2E $53 $59 $53 $00 $11
.by  $B3 $A1 $B6 $E9 $AE $A7 $80 $A4  $A1 $B4 $A1 $80 $A2 $AC $AF $A3  $AB $00 $1C $8D $8D $8D $8D $8D
.by  $8D $8D $8D $8D $8D $8D $8D $8D  $8D $8D $8D $8D $8D $8D $8D $8D  $8D $8D $8D $8D $8D $8D $8D $00
.by  $1C $A1 $B2 $B4 $F5 $F2 $80 $8D  $80 $F6 $8E $80 $80 $80 $80 $80  $80 $E2 $EF $E3 $E9 $E1 $EE $F5
.by  $87 $92 $90 $92 $90 $00 $12 $A1  $B4 $A1 $B3 $A3 $A9 $A9 $80 $A1  $F2 $F4 $80 $A5 $E4 $E9 $F4 $EF
.by  $F2 $00 $11 $33 $34 $21 $32 $34  $80 $80 $8D $80 $A9 $8F $AF $80  $ED $E5 $EE $F5 $00 $14 $33 $25
.by  $2C $25 $23 $34 $80 $8D $80 $E3  $E8 $E1 $EE $E7 $E5 $80 $ED $EF  $E4 $E5 $00 $11 $2F $30 $34 $29
.by  $2F $2E $80 $8D $80 $F3 $E5 $F4  $F4 $E9 $EE $E7 $F3 $00 $14 $28  $25 $2C $30 $80 $80 $80 $8D $80
.by  $F4 $E8 $E9 $F3 $80 $F3 $E3 $F2  $E5 $E5 $EE $00 $0D $B0 $F2 $E5  $F3 $F3 $80 $61 $6E $79 $80 $EB
.by  $E5 $F9 $00 $0C $80 $80 $80 $80  $80 $80 $80 $80 $80 $80 $80 $80  $00 $05 $44 $3A $2A $2E $2A $00
.by  $03 $33 $39 $33 $00 $1E $A9 $8F  $AF $80 $AD $A5 $AE $B5 $80 $80  $80 $80 $80 $80 $80 $80 $80 $80
.by  $80 $80 $80 $80 $80 $80 $A6 $E9  $EC $E5 $F3 $9A $00 $24 $8D $8D  $8D $8D $8D $8D $8D $8D $8D $8D
.by  $8D $8D $8D $8D $8D $8D $8D $8D  $8D $8D $8D $8D $8D $80 $8D $8D  $8D $8D $8D $8D $8D $8D $8D $8D
.by  $8D $8D $00 $11 $2E $E5 $F7 $80  $E9 $ED $E1 $E7 $E5 $80 $88 $E3  $EC $E5 $E1 $F2 $89 $00 $12 $2C
.by  $EF $E1 $E4 $80 $A1 $B4 $A1 $B3  $A3 $A9 $A9 $80 $E9 $ED $E1 $E7  $E5 $00 $12 $33 $E1 $F6 $E5 $80
.by  $A1 $B4 $A1 $B3 $A3 $A9 $A9 $80  $E9 $ED $E1 $E7 $E5 $00 $16 $B3  $E1 $F6 $E5 $80 $E5 $38 $E5 $E3
.by  $F5 $F4 $E1 $E2 $EC $E5 $80 $E2  $E9 $EE $E1 $F2 $F9 $00 $13 $AC  $EF $E1 $E4 $80 $E3 $F5 $F3 $F4
.by  $EF $ED $80 $23 $E8 $E1 $F2 $F3  $E5 $F4 $00 $17 $B2 $E5 $F3 $F4  $EF $F2 $E5 $80 $24 $E5 $E6 $E1
.by  $F5 $EC $F4 $80 $E3 $E8 $E1 $F2  $F3 $E5 $F4 $00 $0B $31 $F5 $E9  $F4 $80 $F4 $EF $80 $A4 $AF $B3
.by  $00 $13 $B0 $F2 $E5 $F3 $F3 $80  $25 $33 $23 $80 $F4 $EF $80 $EC  $E5 $E1 $F6 $E5 $80 $00 $0F $A5
.by  $A4 $E9 $B4 $AF $B2 $80 $B3 $A5  $B4 $B4 $E9 $AE $A7 $B3 $00 $13  $22 $E1 $E3 $EB $E7 $F2 $EF $F5
.by  $EE $E4 $80 $E3 $EF $EC $EF $F2  $9A $80 $84 $00 $13 $26 $EF $F2  $E5 $E7 $F2 $EF $F5 $EE $E4 $80
.by  $E3 $EF $EC $EF $F2 $9A $80 $84  $00 $15 $21 $F2 $F2 $EF $F7 $F3  $80 $F7 $E9 $F4 $E8 $EF $F5 $F4
.by  $80 $A3 $F4 $F2 $EC $9A $80 $00  $03 $6F $6E $80 $00 $03 $6F $66  $66 $00 $12 $23 $E8 $E1 $F2 $E3
.by  $EF $E4 $E5 $80 $E4 $E9 $F3 $F0  $EC $E1 $F9 $9A $80 $00 $07 $6F  $66 $66 $80 $80 $80 $80 $00 $07
.by  $21 $34 $21 $33 $23 $29 $29 $00  $07 $21 $6E $74 $69 $63 $80 $80  $00 $0B $33 $E1 $F6 $E5 $80 $E3
.by  $EF $EE $E6 $E9 $E7 $00 $12 $B0  $F2 $E5 $F3 $F3 $80 $25 $33 $23  $80 $F4 $EF $80 $EC $E5 $E1 $F6
.by  $E5 $00 $6C $6A $3B $FF $FF $6B  $2B $2A $6F $FF $70 $75 $9B $69  $2D $3D $76 $FF $63 $FF $FF $62
.by  $78 $7A $34 $FF $33 $36 $1B $35  $32 $31 $2C $20 $2E $6E $FF $6D  $2F $81 $72 $FF $65 $79 $7F $74
.by  $77 $71 $39 $FF $30 $37 $7E $38  $3E $FF $66 $68 $64 $FF $82 $67  $73 $61 $4C $4A $3A $FF $FF $4B
.by  $5C $5E $4F $FF $50 $55 $FF $49  $5F $7C $56 $FF $43 $FF $FF $42  $58 $5A $24 $FF $23 $26 $FF $25
.by  $22 $21 $5B $3B $5D $4E $FF $4D  $3F $FF $52 $FF $45 $59 $FF $54  $57 $51 $28 $FF $29 $27 $FF $40
.by  $FF $FF $46 $48 $44 $FF $FF $47  $53 $41 $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF
.by  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF $FF $FF $FF $FF $FF $FF  $FF $FF
.endm

	end
