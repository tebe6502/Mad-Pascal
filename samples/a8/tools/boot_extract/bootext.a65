; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/05/17] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

TMP	.ds 2

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1

FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend

.print 'RTLIB: ',RTLIB,'..',*

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0023

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 053  ---------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000C

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000B
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	SIO						; UNIT

.local	READBOOT					; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x BUF
	mva :STACKORIGIN+STACKWIDTH,x BUF+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x DEVNUM
	dex						; sub bx, 1

; ---------------------  ASM Block 063  ---------------------

	txa:pha

	lda devnum
	m@call	@sio.devnrm
	tya
	bmi _err

	lda <1
	sta daux1
	lda >1
	sta daux2

lp	ldx buf
	ldy buf+1
	lda #'R'	; $52 - Get Sector

	m@call	@sio.boot
	tya
	bmi _err

	adw buf #128

	inc daux1
	lda daux1
	cmp #4
	bne lp

_err	sty MAIN.SYSTEM.IOResult

	pla:tax


; ------------------------------------------------------------

DEVNUM	= DATAORIGIN+$000D
BUF	= DATAORIGIN+$000E

@VarData	= DEVNUM
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

.endl							; UNIT SIO
l_0023

; optimize FAIL (100, bootext.pas), line = 15
	@printSTRING #CODEORIGIN+$0000
	@printEOL

; optimize FAIL (100, bootext.pas), line = 17
	lda DENSITY
	jsr @printBYTE._a
	@printEOL

; optimize OK (bootext.pas), line = 19

	mva #$40 BUF
	mva #$BC BUF+1

; optimize FAIL ('SIO.READBOOT', bootext.pas), line = 21
	inx
	mva #$02 :STACKORIGIN,x
	inx
	mva BUF :STACKORIGIN,x
	mva BUF+1 :STACKORIGIN+STACKWIDTH,x
	jsr SIO.READBOOT
; AssignFile

; optimize OK (bootext.pas), line = 23

	mwy F :bp2
	ldy #s@file.pfname
	lda #$10
	sta (:bp2),y
	iny
	lda #$20
	sta (:bp2),y

; optimize OK (bootext.pas), line = 23

	ldy #s@file.status
	lda #$00
	sta (:bp2),y
; Rewrite

; optimize OK (bootext.pas), line = 23

	ldy #s@file.record
	lda #$01
	sta (:bp2),y
	iny
	lda #$00
	sta (:bp2),y

	txa:pha
	sec
	@openfile F, #8
	pla:tax

; BlockWrite

; optimize OK (bootext.pas), line = 24

	mwy F :bp2
	ldy #s@file.buffer
	lda BUF
	sta (:bp2),y
	iny
	lda BUF+1
	sta (:bp2),y

; optimize OK (bootext.pas), line = 24

	ldy #s@file.nrecord
	lda #$80
	sta (:bp2),y
	iny
	lda #$01
	sta (:bp2),y

	txa:pha
	sec
	@readfile F, #11
	pla:tax

; CloseFile

	txa:pha
	sec
	@closefile F
	pla:tax

; --- RepeatUntilProlog
l_00A6

; optimize FAIL ('CRT.KEYPRESSED', bootext.pas), line = 27
	jsr CRT.KEYPRESSED
	dex
	lda :STACKORIGIN+1,x
	jeq l_00A6

; ------------------------------------------------------------

DENSITY	= DATAORIGIN+$0010
adr.BUF	= DATAORIGIN+$0011
.var BUF	= adr.BUF .word
.var F	= DATAORIGIN+$0012 .word
X	= DATAORIGIN+$001E
@exit

@halt	ldx #0
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.SIO.@UnitInit
	jsr MAIN.SIO.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.SIO) > 0
	.print 'SIO: ',MAIN.SIO,'..',MAIN.SIO+.SIZEOF(MAIN.SIO)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 32

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $0E $42 $6F $6F $74 $20 $65 $78  $74 $72 $61 $63 $74 $6F $72 $00  $0A $44 $31 $3A $44 $4F $53 $2E
.by  $42 $4F $54 $00
.endm

	end
