mads 2.1.3 build 44 (4 Jun 21)
   150 					opt l+
   106
   107 				.print 'ZPAGE: ',fxptr,'..',zpend-1
   107 				ZPAGE: $0080..$00D7
   108
   109 				.print 'RTLIB: ',RTLIB,'..',*-1
   109 				RTLIB: $2073..$214F
   110
   111 				; ------------------------------------------------------------
   112
   113 2150			START
   114 2150 BA				tsx
   115 2151 8E 01 23			stx MAIN.@halt+1
   116
   117 					.ifdef fmulinit
   118 					fmulinit
   119 					eif
   120
   121 = 0018			VLEN	= VARDATASIZE-VARINITSIZE
   122 = 231E			VADR	= DATAORIGIN+VARINITSIZE
   123
   124 					ift VADR > $BFFF
   125 					ert 'Invalid memory address range ',VADR
   126 					eli (VLEN>0) && (VLEN<=256)
   127 2154 A2 E8			ldx #256-VLEN
   128 2156 A9 00			lda #$00
   129 2158 9D 36 22 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   130 					eli VLEN>256
   131 					@fill #VADR #VLEN #$00
   132 					eif
   133
   134 215E A9 36 85 82 A9 23 + 	mwa #PROGRAMSTACK psptr
   135
   136 					.ifdef MAIN.@DEFINES.ROMOFF
   137 					icl 'atari\romoff.asm'
   138 					.endif
   139
   140 2166 A2 0F			ldx #$0F					; DOS II+/D ParamStr
   141 2168 BD 40 03 9D 06 23 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   142
   143 2171 E8				inx						; X = 0
   144 2172 86 90			stx bp						; BP = 0
   145
   146 2174 8E 0F D2			stx skctl					; reset POKEY
   147 2177 A9 03			lda #3
   148 2179 8D 0F D2			sta skctl
   149
   150 217C CA				dex						; X = 255
   151
   152 217D				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: sio2sd_detect.a65]
   153
   154 217D			.local	MAIN						; PROCEDURE
   155
   156 217D 4C 02 22			jmp l_007A
   157
   158 				; ------------------------------------------------------------
   159
   160 2180			.local	SYSTEM						; UNIT
   161
   162 2180			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   163
   164 				; ------------------------------------------------------------
   165
   166 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   167 				; as Pointer
   168 2180 B5 98			lda :STACKORIGIN,x
   169 2182 85 88			sta A
   170 2184 B5 A8			lda :STACKORIGIN+STACKWIDTH,x
   171 2186 85 89			sta A+1
   172 2188 CA				dex
   173
   174 				; ---------------------  ASM Block 001  ---------------------
   175
   176 2189 A0 00			ldy #0
   177 218B B1 88 8D 23 23		mva (edx),y Result
   178
   179 2190			@exit
   180
   181 				; ------------------------------------------------------------
   182
   183 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   184 				; as Pointer
   185
   186 2190 E8				inx
   187 2191 AD 23 23 95 98		mva RESULT :STACKORIGIN,x
   188
   189 					.ifdef @new
   190 					lda <@VarData
   191 					sta :ztmp
   192 					lda >@VarData
   193 					ldy #@VarDataSize-1
   194 					jmp @FreeMem
   195 					eif
   196
   197 				; ------------------------------------------------------------
   198
   199 = 0088			A	= edx
   200 = 2323			RESULT	= DATAORIGIN+$000B
   201
   202 = 2323			@VarData	= RESULT
   203 = 0001			@VarDataSize	= 1
   204
   205 2196 60				rts						; ret
   206 				.endl
   207
   208 				; ------------------------------------------------------------
   209
   210 = 0101			__PORTB_BANKS	= $0101
   211 = 0648			M_PI_2	= $0648
   212 = 0192			D_PI_2	= $0192
   213 = 0004			D_PI_180	= $04
   214 = 0000			MGTIA	= $00
   215 = 0080			MVBXE	= $80
   216 = 0000			VBXE_XDLADR	= $00
   217 = 0100			VBXE_BCBADR	= $0100
   218 = 1000			VBXE_MAPADR	= $1000
   219 = 1000			VBXE_CHBASE	= $1000
   220 = 5000			VBXE_OVRADR	= $5000
   221 = B000			VBXE_WINDOW	= $B000
   222 = 0000			IDLI	= $00
   223 = 0001			IVBL	= $01
   224 = 00FE			CH_DELCHR	= $FE
   225 = 009B			CH_ENTER	= $9B
   226 = 001B			CH_ESC	= $1B
   227 = 001C			CH_CURS_UP	= $1C
   228 = 001D			CH_CURS_DOWN	= $1D
   229 = 001E			CH_CURS_LEFT	= $1E
   230 = 001F			CH_CURS_RIGHT	= $1F
   231 = 007F			CH_TAB	= $7F
   232 = 009B			CH_EOL	= $9B
   233 = 007D			CH_CLR	= $7D
   234 = 00FD			CH_BELL	= $FD
   235 = 007E			CH_DEL	= $7E
   236 = 009C			CH_DELLINE	= $9C
   237 = 009D			CH_INSLINE	= $9D
   238 = 0000			COLOR_BLACK	= $00
   239 = 000E			COLOR_WHITE	= $0E
   240 = 0032			COLOR_RED	= $32
   241 = 0096			COLOR_CYAN	= $96
   242 = 0068			COLOR_VIOLET	= $68
   243 = 00C4			COLOR_GREEN	= $C4
   244 = 0074			COLOR_BLUE	= $74
   245 = 00EE			COLOR_YELLOW	= $EE
   246 = 0028			COLOR_ORANGE	= $28
   247 = 00E4			COLOR_BROWN	= $E4
   248 = 003C			COLOR_LIGHTRED	= $3C
   249 = 0004			COLOR_GRAY1	= $04
   250 = 0006			COLOR_GRAY2	= $06
   251 = 000A			COLOR_GRAY3	= $0A
   252 = 00CC			COLOR_LIGHTGREEN	= $CC
   253 = 007C			COLOR_LIGHTBLUE	= $7C
   254 = 0004			FMOPENREAD	= $04
   255 = 0008			FMOPENWRITE	= $08
   256 = 0009			FMOPENAPPEND	= $09
   257 = 000C			FMOPENREADWRITE	= $0C
   258 = 2318			SCREENWIDTH	= DATAORIGIN+$0000
   259 = 231A			SCREENHEIGHT	= DATAORIGIN+$0002
   260 = 231C			DATESEPARATOR	= DATAORIGIN+$0004
   261 = D20A			RND	= $D20A
   262 = 02C0			adr.PALETTE	= $02C0
   263 2197			.var PALETTE	= adr.PALETTE .word
   264 = D012			adr.HPALETTE	= $D012
   265 2197			.var HPALETTE	= adr.HPALETTE .word
   266 = 231D			FILEMODE	= DATAORIGIN+$0005
   267 = 231E			GRAPHMODE	= DATAORIGIN+$0006
   268 = 231F			IORESULT	= DATAORIGIN+$0007
   269 = 2320			EOLN	= DATAORIGIN+$0008
   270 = 2321			RNDSEED	= DATAORIGIN+$0009
   271
   272 = 2197 C0 02		PALETTE
   272 = 2199 12 D0		HPALETTE
   272 				.endl							; UNIT SYSTEM
   273
   274 				; ------------------------------------------------------------
   275
   276 219B			.local	ATARI						; UNIT
   277
   278 				; ------------------------------------------------------------
   279
   280 = 0010			IRQENS	= $10
   281 = 0012			RTCLOK	= $12
   282 = 004D			ATRACT	= $4D
   283 = 0052			LMARGIN	= $52
   284 = 0053			RMARGIN	= $53
   285 = 0054			ROWCRS	= $54
   286 = 0055			COLCRS	= $55
   287 = 0057			DINDEX	= $57
   288 = 0058			SAVMSC	= $58
   289 = 0062			PALNTS	= $62
   290 = 006A			RAMTOP	= $6A
   291 = 0200			VDSLST	= $0200
   292 = 0230			SDLSTL	= $0230
   293 = 0290			TXTROW	= $0290
   294 = 0291			TXTCOL	= $0291
   295 = 0293			TINDEX	= $0293
   296 = 0294			TXTMSC	= $0294
   297 = 022F			SDMCTL	= $022F
   298 = 026F			GPRIOR	= $026F
   299 = 02F0			CRSINH	= $02F0
   300 = 02F3			CHACT	= $02F3
   301 = 02F4			CHBAS	= $02F4
   302 = 02FC			CH	= $02FC
   303 = 02C0			PCOLR0	= $02C0
   304 = 02C1			PCOLR1	= $02C1
   305 = 02C2			PCOLR2	= $02C2
   306 = 02C3			PCOLR3	= $02C3
   307 = 02C4			COLOR0	= $02C4
   308 = 02C5			COLOR1	= $02C5
   309 = 02C6			COLOR2	= $02C6
   310 = 02C7			COLOR3	= $02C7
   311 = 02C8			COLOR4	= $02C8
   312 = 02C8			COLBAKS	= $02C8
   313 = D000			HPOSP0	= $D000
   314 = D001			HPOSP1	= $D001
   315 = D002			HPOSP2	= $D002
   316 = D003			HPOSP3	= $D003
   317 = D004			HPOSM0	= $D004
   318 = D005			HPOSM1	= $D005
   319 = D006			HPOSM2	= $D006
   320 = D007			HPOSM3	= $D007
   321 = D008			SIZEP0	= $D008
   322 = D009			SIZEP1	= $D009
   323 = D00A			SIZEP2	= $D00A
   324 = D00B			SIZEP3	= $D00B
   325 = D00C			SIZEM	= $D00C
   326 = D00D			GRAFP0	= $D00D
   327 = D00E			GRAFP1	= $D00E
   328 = D00F			GRAFP2	= $D00F
   329 = D010			GRAFP3	= $D010
   330 = D011			GRAFM	= $D011
   331 = D004			P0PF	= $D004
   332 = D014			PAL	= $D014
   333 = D012			COLPM0	= $D012
   334 = D013			COLPM1	= $D013
   335 = D014			COLPM2	= $D014
   336 = D015			COLPM3	= $D015
   337 = D016			COLPF0	= $D016
   338 = D017			COLPF1	= $D017
   339 = D018			COLPF2	= $D018
   340 = D019			COLPF3	= $D019
   341 = D01A			COLBK	= $D01A
   342 = D01B			PRIOR	= $D01B
   343 = D01D			GRACTL	= $D01D
   344 = D01E			HITCLR	= $D01E
   345 = D01F			CONSOL	= $D01F
   346 = D200			AUDF1	= $D200
   347 = D201			AUDC1	= $D201
   348 = D202			AUDF2	= $D202
   349 = D203			AUDC2	= $D203
   350 = D204			AUDF3	= $D204
   351 = D205			AUDC3	= $D205
   352 = D206			AUDF4	= $D206
   353 = D207			AUDC4	= $D207
   354 = D208			AUDCTL	= $D208
   355 = D209			KBCODE	= $D209
   356 = D20E			IRQEN	= $D20E
   357 = D20F			SKSTAT	= $D20F
   358 = D300			PORTA	= $D300
   359 = D301			PORTB	= $D301
   360 = D400			DMACTL	= $D400
   361 = D401			CHACTL	= $D401
   362 = D402			DLISTL	= $D402
   363 = D404			HSCROL	= $D404
   364 = D405			VSCROL	= $D405
   365 = D407			PMBASE	= $D407
   366 = D409			CHBASE	= $D409
   367 = D40A			WSYNC	= $D40A
   368 = D40B			VCOUNT	= $D40B
   369 = D40C			PENH	= $D40C
   370 = D40D			PENV	= $D40D
   371 = D40E			NMIEN	= $D40E
   372
   373 				.endl							; UNIT ATARI
   374
   375 				; ------------------------------------------------------------
   376
   377 219B			.local	CRT						; UNIT
   378
   379 219B			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   380
   381 				; ---------------------  ASM Block 053  ---------------------
   382
   383 219B A0 00			ldy #$00	; false
   384 219D AD FC 02			lda kbcodes
   385 21A0 C9 FF			cmp #$ff
   386 21A2 F0 01			beq skp
   387 21A4 C8				iny		; true
   388
   389 				;	sty kbcodes
   390
   391 21A5 8C 25 23		skp	sty Result
   392
   393 21A8			@exit
   394
   395 				; ------------------------------------------------------------
   396
   397 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   398 				; as Pointer
   399
   400 21A8 E8				inx
   401 21A9 AD 25 23 95 98		mva RESULT :STACKORIGIN,x
   402
   403 					.ifdef @new
   404 					lda <@VarData
   405 					sta :ztmp
   406 					lda >@VarData
   407 					ldy #@VarDataSize-1
   408 					jmp @FreeMem
   409 					eif
   410
   411 				; ------------------------------------------------------------
   412
   413 = 2325			RESULT	= DATAORIGIN+$000D
   414
   415 = 2325			@VarData	= RESULT
   416 = 0001			@VarDataSize	= 1
   417
   418 21AE 60				rts						; ret
   419 				.endl
   420
   421 				; ------------------------------------------------------------
   422
   423 = 2324			TEXTATTR	= DATAORIGIN+$000C
   424 = D01F			CONSOL	= $D01F
   425 = 0000			CN_START_SELECT_OPTION	= $00
   426 = 0001			CN_SELECT_OPTION	= $01
   427 = 0002			CN_START_OPTION	= $02
   428 = 0003			CN_OPTION	= $03
   429 = 0004			CN_START_SELECT	= $04
   430 = 0005			CN_SELECT	= $05
   431 = 0006			CN_START	= $06
   432 = 0007			CN_NONE	= $07
   433 = 0000			BW40	= $00
   434 = 0001			CO40	= $01
   435 = 0002			BW80	= $02
   436 = 0003			CO80	= $03
   437 = 0007			MONO	= $07
   438 = 0001			C40	= $01
   439 = 0003			C80	= $03
   440 = 0000			BLACK	= $00
   441 = 0001			BLUE	= $01
   442 = 0002			GREEN	= $02
   443 = 0003			CYAN	= $03
   444 = 0004			RED	= $04
   445 = 0005			MAGENTA	= $05
   446 = 0006			BROWN	= $06
   447 = 0007			LIGHTGRAY	= $07
   448 = 0008			DARKGRAY	= $08
   449 = 0009			LIGHTBLUE	= $09
   450 = 000A			LIGHTGREEN	= $0A
   451 = 000B			LIGHTCYAN	= $0B
   452 = 000C			LIGHTRED	= $0C
   453 = 000D			LIGHTMAGENTA	= $0D
   454 = 000E			YELLOW	= $0E
   455 = 000F			WHITE	= $0F
   456 = 0080			BLINK	= $80
   457
   458 				.endl							; UNIT CRT
   459
   460 21AF			.local	EXEC_SIO					; PROCEDURE
   461
   462 				; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 37
   463
   464 21AF AD 31 23			lda SIZE
   465 21B2 8D 33 23			sta L
   466
   467 				; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 38
   468
   469 21B5 AD 32 23			lda SIZE+1
   470 21B8 8D 34 23			sta H
   471
   472 				; ---------------------  ASM Block 060  ---------------------
   473
   474
   475 				     
   476 21BB AD 2A 23		          lda  device
   477 21BE 8D 00 03		          sta  DDEVIC
   478 21C1 AD 2B 23		          lda  dunit
   479 21C4 8D 2B 23		          sta  DUNIT
   480 21C7 AD 2C 23		          lda  command
   481 21CA 8D 02 03		          sta  DCOMND
   482 21CD AD 2D 23		          lda  aux1
   483 21D0 8D 0A 03		          sta  DAUX1
   484 21D3 AD 2E 23		          lda  aux2
   485 21D6 8D 0B 03		          sta  DAUX2
   486 21D9 AD 2F 23		          lda  direction
   487 21DC 8D 03 03		          sta  DSTATS
   488 21DF A9 00		          lda  <buffer
   489 21E1 8D 04 03		          sta  DBUFLO
   490 21E4 A9 80		          lda  >buffer
   491 21E6 8D 05 03		          sta  DBUFHI
   492 21E9 AD 30 23		          lda  timeout
   493 21EC 8D 06 03		          sta  DTIMLO
   494 21EF AD 33 23		          lda  l
   495 21F2 8D 08 03		          sta  DBYTLO
   496 21F5 AD 34 23		          lda  h
   497 21F8 8D 09 03		          sta  DBYTHI
   498 21FB 20 59 E4		          jsr  $E459
   499 				          
   500 21FE 8C 26 23		          sty  SIOresult
   501 				     
   502 				     
   503
   504 				; ------------------------------------------------------------
   505
   506 = 232A			DEVICE	= DATAORIGIN+$0012
   507 = 232B			DUNIT	= DATAORIGIN+$0013
   508 = 232C			COMMAND	= DATAORIGIN+$0014
   509 = 232D			AUX1	= DATAORIGIN+$0015
   510 = 232E			AUX2	= DATAORIGIN+$0016
   511 = 232F			DIRECTION	= DATAORIGIN+$0017
   512 = 2330			TIMEOUT	= DATAORIGIN+$0018
   513 = 2331			SIZE	= DATAORIGIN+$0019
   514 = 2333			L	= DATAORIGIN+$001B
   515 = 2334			H	= DATAORIGIN+$001C
   516
   517 = 232A			@VarData	= DEVICE
   518 = 000B			@VarDataSize	= 11
   519
   520 2201			@exit
   521 					.ifdef @new
   522 					lda <@VarData
   523 					sta :ztmp
   524 					lda >@VarData
   525 					ldy #@VarDataSize-1
   526 					jmp @FreeMem
   527 					els
   528 2201 60				rts						; ret
   529 					eif
   530 				.endl
   531 2202			l_007A
   532
   533 				; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 74
   534
   535 2202 A9 01			lda #$01
   536 2204 8D 31 23			sta EXEC_SIO.SIZE
   537 2207 A9 00			lda #$00
   538 2209 8D 32 23			sta EXEC_SIO.SIZE+1
   539 220C A9 06			lda #$06
   540 220E 8D 30 23			sta EXEC_SIO.TIMEOUT
   541 2211 A9 40			lda #$40
   542 2213 8D 2F 23			sta EXEC_SIO.DIRECTION
   543 2216 A9 00			lda #$00
   544 2218 8D 2E 23			sta EXEC_SIO.AUX2
   545 221B 8D 2D 23			sta EXEC_SIO.AUX1
   546 221E 8D 2C 23			sta EXEC_SIO.COMMAND
   547 2221 8D 2B 23			sta EXEC_SIO.DUNIT
   548 2224 A9 72			lda #$72
   549 2226 8D 2A 23			sta EXEC_SIO.DEVICE
   550 2229 20 AF 21			jsr EXEC_SIO
   551
   552 				; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 76
   553
   554 222C AD 26 23			lda SIORESULT
   555 222F C9 01			cmp #$01
   556 2231 F0 03 4C E1 22		jne l_00FD
   557
   558 				; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 78
   559
   560 					@printSTRING #CODEORIGIN+$0000
   560 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
   560 2236 A0 20		 LDY> CODEORIGIN+$0000
   560 2238 A9 00		 LDA< CODEORIGIN+$0000
   560 223A 20 94 20		 JSR @PRINTSTRING
   561 223D 20 86 20			@printEOL
   562
   563 				; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 80
   564
   565 2240 AC 01 80			ldy BUFFER+1
   566 2243 84 91			sty :bp+1
   567 2245 AC 00 80			ldy BUFFER
   568 2248 B1 90			lda (:bp),y
   569 224A 8D 27 23			sta SIO2SDRESULT
   570
   571 				; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 82
   572
   573 224D 8D 35 23			sta @CASETMP_0003
   574 2250 C9 00			cmp #$00
   575 2252 D0 0D			jne l_0112
   576 				@
   577
   578 				; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 84
   579
   580 					@printSTRING #CODEORIGIN+$0010
   580 				 LDY> CODEORIGIN+$0010\ LDA< CODEORIGIN+$0010\ JSR @PRINTSTRING
   580 2254 A0 20		 LDY> CODEORIGIN+$0010
   580 2256 A9 10		 LDA< CODEORIGIN+$0010
   580 2258 20 94 20		 JSR @PRINTSTRING
   581 225B 20 86 20			@printEOL
   582
   583 225E 4C 6F 22			jmp a_0003
   584 2261			l_0112
   585 2261 C9 01			cmp #$01
   586 2263 D0 0A			jne l_011E
   587 				@
   588
   589 				; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 85
   590
   591 					@printSTRING #CODEORIGIN+$0021
   591 				 LDY> CODEORIGIN+$0021\ LDA< CODEORIGIN+$0021\ JSR @PRINTSTRING
   591 2265 A0 20		 LDY> CODEORIGIN+$0021
   591 2267 A9 21		 LDA< CODEORIGIN+$0021
   591 2269 20 94 20		 JSR @PRINTSTRING
   592 226C 20 86 20			@printEOL
   593
   594 226F			l_011E
   595 226F			a_0003
   596
   597 				; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 89
   598
   599 226F A9 01			lda #$01
   600 2271 8D 31 23			sta EXEC_SIO.SIZE
   601 2274 A9 00			lda #$00
   602 2276 8D 32 23			sta EXEC_SIO.SIZE+1
   603 2279 A9 06			lda #$06
   604 227B 8D 30 23			sta EXEC_SIO.TIMEOUT
   605 227E A9 40			lda #$40
   606 2280 8D 2F 23			sta EXEC_SIO.DIRECTION
   607 2283 A9 00			lda #$00
   608 2285 8D 2E 23			sta EXEC_SIO.AUX2
   609 2288 8D 2D 23			sta EXEC_SIO.AUX1
   610 228B A9 11			lda #$11
   611 228D 8D 2C 23			sta EXEC_SIO.COMMAND
   612 2290 A9 00			lda #$00
   613 2292 8D 2B 23			sta EXEC_SIO.DUNIT
   614 2295 A9 72			lda #$72
   615 2297 8D 2A 23			sta EXEC_SIO.DEVICE
   616 229A 20 AF 21			jsr EXEC_SIO
   617
   618 				; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 91
   619
   620 229D AD 26 23			lda SIORESULT
   621 22A0 C9 01			cmp #$01
   622 22A2 D0 3A			jne l_0142
   623
   624 				; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 93
   625
   626 22A4 AD 00 80			lda $8000
   627 22A7 4A				lsr @
   628 22A8 4A				lsr @
   629 22A9 4A				lsr @
   630 22AA 4A				lsr @
   631 22AB 8D 28 23			sta MAJORVERSION
   632
   633 				; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 94
   634
   635 22AE AD 00 80			lda $8000
   636 22B1 29 0F			and #$0F
   637 22B3 8D 29 23			sta MINORVERSION
   638
   639 				; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 96
   640
   641 					@printSTRING #CODEORIGIN+$0032
   641 				 LDY> CODEORIGIN+$0032\ LDA< CODEORIGIN+$0032\ JSR @PRINTSTRING
   641 22B6 A0 20		 LDY> CODEORIGIN+$0032
   641 22B8 A9 32		 LDA< CODEORIGIN+$0032
   641 22BA 20 94 20		 JSR @PRINTSTRING
   642 22BD AD 28 23			lda MAJORVERSION
   643 22C0 20 C5 20			jsr @printBYTE._a
   644 					@print #$2E
   644 				 LDY# $2E\ JSR @PRINT
   644 22C3 A0 2E		 LDY# $2E
   644 22C5 20 8B 20		 JSR @PRINT
   645 22C8 AD 29 23			lda MINORVERSION
   646 22CB 20 C5 20			jsr @printBYTE._a
   647 22CE 20 86 20			@printEOL
   648
   649 				; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 98
   650
   651 22D1 20 86 20			@printEOL
   652
   653 				; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 99
   654
   655 					@printSTRING #CODEORIGIN+$0042
   655 				 LDY> CODEORIGIN+$0042\ LDA< CODEORIGIN+$0042\ JSR @PRINTSTRING
   655 22D4 A0 20		 LDY> CODEORIGIN+$0042
   655 22D6 A9 42		 LDA< CODEORIGIN+$0042
   655 22D8 20 94 20		 JSR @PRINTSTRING
   656 22DB 20 86 20			@printEOL
   657 22DE			l_0142
   658 22DE 4C F8 22			jmp l_017D
   659 22E1			l_00FD
   660
   661 				; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 104
   662
   663 					@printSTRING #CODEORIGIN+$005C
   663 				 LDY> CODEORIGIN+$005C\ LDA< CODEORIGIN+$005C\ JSR @PRINTSTRING
   663 22E1 A0 20		 LDY> CODEORIGIN+$005C
   663 22E3 A9 5C		 LDA< CODEORIGIN+$005C
   663 22E5 20 94 20		 JSR @PRINTSTRING
   664 22E8 20 86 20			@printEOL
   665
   666 				; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 105
   667
   668 22EB 20 86 20			@printEOL
   669
   670 				; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 106
   671
   672 					@printSTRING #CODEORIGIN+$0042
   672 				 LDY> CODEORIGIN+$0042\ LDA< CODEORIGIN+$0042\ JSR @PRINTSTRING
   672 22EE A0 20		 LDY> CODEORIGIN+$0042
   672 22F0 A9 42		 LDA< CODEORIGIN+$0042
   672 22F2 20 94 20		 JSR @PRINTSTRING
   673 22F5 20 86 20			@printEOL
   674 22F8			l_017D
   675
   676 				; --- RepeatUntilProlog
   677 22F8			l_0184
   678
   679 				; optimize FAIL ('CRT.KEYPRESSED', test\tools\detect\sio2sd_detect.pas), line = 109
   680
   681 22F8 20 9B 21			jsr CRT.KEYPRESSED
   682 22FB CA				dex
   683 22FC B5 99			lda :STACKORIGIN+1,x
   684 22FE F0 F8			jeq l_0184
   685
   686 				; ------------------------------------------------------------
   687
   688 = 0000			SIO_NONE	= $00
   689 = 0040			SIO_READ	= $40
   690 = 0080			SIO_WRITE	= $80
   691 = 00C0			SIO_READ_WRITE	= $C0
   692 = 0000			SIO2SD_STATUS	= $00
   693 = 0011			SIO2SD_GETVER	= $11
   694 = 0300			DDEVIC	= $0300
   695 = 0301			DUNIT	= $0301
   696 = 0302			DCOMND	= $0302
   697 = 0303			DSTATS	= $0303
   698 = 0304			DBUFLO	= $0304
   699 = 0305			DBUFHI	= $0305
   700 = 0306			DTIMLO	= $0306
   701 = 0307			DUNUSE	= $0307
   702 = 0308			DBYTLO	= $0308
   703 = 0309			DBYTHI	= $0309
   704 = 030A			DAUX1	= $030A
   705 = 030B			DAUX2	= $030B
   706 = 2326			SIORESULT	= DATAORIGIN+$000E
   707 = 2327			SIO2SDRESULT	= DATAORIGIN+$000F
   708 = 2328			MAJORVERSION	= DATAORIGIN+$0010
   709 = 2329			MINORVERSION	= DATAORIGIN+$0011
   710 = 8000			BUFFER	= $8000
   711 = 2335			@CASETMP_0003	= DATAORIGIN+$001D
   712 2300			@exit
   713
   714 2300 A2 00		@halt	ldx #$00
   715 2302 9A				txs
   716 					.ifdef MAIN.@DEFINES.ROMOFF
   717 					inc portb
   718 					.endif
   719
   720 2303 A0 01			ldy #$01
   721
   722 2305 60				rts
   723
   724 				; ------------------------------------------------------------
   725
   726 2306 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   727
   728 				; ------------------------------------------------------------
   729
   730 2316			.local	@DEFINES
   731 2316			ATARI
   732 				.endl
   733
   734 2316			.local	@RESOURCE
   735 				.endl
   736
   737 				.endl							; MAIN
   738
   739 				; ------------------------------------------------------------
   740 				; ------------------------------------------------------------
   741
   742 				.macro	UNITINITIALIZATION
   743 				
   744 					.ifdef MAIN.SYSTEM.@UnitInit
   745 					jsr MAIN.SYSTEM.@UnitInit
   746 					eif
   747 				
   748 					.ifdef MAIN.ATARI.@UnitInit
   749 					jsr MAIN.ATARI.@UnitInit
   750 					eif
   751 				
   752 					.ifdef MAIN.CRT.@UnitInit
   753 					jsr MAIN.CRT.@UnitInit
   754 					eif
   755 				.endm
   756
   757 				; ------------------------------------------------------------
   758
   759 					ift .SIZEOF(MAIN.SYSTEM) > 0
   760 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   760 				SYSTEM: $2180..$219A
   761 					eif
   762
   763 					ift .SIZEOF(MAIN.ATARI) > 0
   764 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   765 					eif
   766
   767 					ift .SIZEOF(MAIN.CRT) > 0
   768 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   768 				CRT: $219B..$21AE
   769 					eif
   770
   771 					.print 'CODE: ',CODEORIGIN,'..',*-1
   771 				CODE: $2000..$2315
   772
   773 				; ------------------------------------------------------------
   774
   775 2316				.align $0004
   776
   777 2318			DATAORIGIN
   778 2318-231D> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
   779
   780 = 0006			VARINITSIZE	= *-DATAORIGIN
   781 = 001E			VARDATASIZE	= 30
   782
   783 = 2336			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   784
   785 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   785 				DATA: $2318..$2336
   786
   787 02E0-02E1> 50 21			run START
   788
   789 				; ------------------------------------------------------------
   790
   791 				.macro	STATICDATA
   792 				.by  $0E $53 $49 $4F $32 $53 $44 $20  $70 $72 $65 $73 $65 $6E $74 $00  $0F $4E $6F $20 $63 $61 $72 $64
   793 				.by  $20 $69 $6E $20 $73 $6C $6F $74  $00 $0F $43 $61 $72 $64 $20 $69  $73 $20 $69 $6E $20 $73 $6C $6F
   794 				.by  $74 $00 $0E $46 $69 $72 $6D $77  $61 $72 $65 $20 $76 $65 $72 $2E  $20 $00 $18 $50 $72 $65 $73 $73
   795 				.by  $20 $61 $6E $79 $20 $6B $65 $79  $20 $74 $6F $20 $65 $78 $69 $74  $2E $2E $2E $00 $15 $53 $49 $4F
   796 				.by  $32 $53 $44 $20 $69 $73 $20 $6E  $6F $74 $20 $70 $72 $65 $73 $65  $6E $74 $00
   797 				.endm
   798
   799 					end
