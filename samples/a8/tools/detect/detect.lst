mads 2.1.5 build 4 (1 Apr 22)
Source: detect.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.6 [2022/04/11] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 				zpage
    16
    17 				.ifdef @vbxe_detect
    18 = 0080			fxptr	.ds 2						; VBXE pointer
    19 				.fi
    20
    21 				.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
    22 				psptr	.ds 2						; PROGRAMSTACK Pointer
    23 				.fi
    24
    25 = 0082			bp	.ds 2
    26 = 0084			bp2	.ds 2
    27
    28 = 0086			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    29 = 008A			edx	.ds 4
    30 = 008E			ecx	.ds 4
    31
    32 				TMP
    33 				ztmp
    34 = 0092			ztmp8	.ds 1
    35 = 0093			ztmp9	.ds 1
    36 = 0094			ztmp10	.ds 1
    37 = 0095			ztmp11	.ds 1
    38
    39 = 0096			STACKORIGIN	.ds STACKWIDTH*4
    40 				zpend
    41
    42 				; ------------------------------------------------------------
    43
    44 = 0086			ax	= eax
    45 = 0086			al	= eax
    46 = 0087			ah	= eax+1
    47
    48 = 008E			cx	= ecx
    49 = 008E			cl	= ecx
    50 = 008F			ch	= ecx+1
    51
    52 = 008A			dx	= edx
    53 = 008A			dl	= edx
    54 = 008B			dh	= edx+1
    55
    56 					org eax
    57
    58 = 0086			FP1MAN0	.ds 1
    59 = 0087			FP1MAN1	.ds 1
    60 = 0088			FP1MAN2	.ds 1
    61 = 0089			FP1MAN3	.ds 1
    62
    63 					org ztmp8
    64
    65 = 0092			FP1SGN	.ds 1
    66 = 0093			FP1EXP	.ds 1
    67
    68 					org edx
    69
    70 = 008A			FP2MAN0	.ds 1
    71 = 008B			FP2MAN1	.ds 1
    72 = 008C			FP2MAN2	.ds 1
    73 = 008D			FP2MAN3	.ds 1
    74
    75 					org ztmp10
    76
    77 = 0094			FP2SGN	.ds 1
    78 = 0095			FP2EXP	.ds 1
    79
    80 					org ecx
    81
    82 = 008E			FPMAN0	.ds 1
    83 = 008F			FPMAN1	.ds 1
    84 = 0090			FPMAN2	.ds 1
    85 = 0091			FPMAN3	.ds 1
    86
    87 					org bp2
    88
    89 = 0084			FPSGN	.ds 1
    90 = 0085			FPEXP	.ds 1
    91
    92 					.ifdef MAIN.@DEFINES.BASICOFF
    93 					org CODEORIGIN
    94 					icl 'atari\basicoff.asm'
    95 					ini CODEORIGIN
    96 					.fi
    97
    98 					.ifdef MAIN.@DEFINES.S_VBXE
    99 					opt h-
   100 					ins 'atari\s_vbxe\sdxld2.obx'
   101 					opt h+
   102 					.fi
   103
   104 				; ------------------------------------------------------------
   105
   106 					org CODEORIGIN
   107
   108 2000				STATICDATA
Macro: STATICDATA [Source: detect.a65]
     1 FFFF> 2000-2E40> 09 20 + .by  $09 $20 $20 $20 $20 $43 $50 $55  $3A $20 $00 $04 $36 $35 $30 $32  $00 $05 $36 $35 $63 $30 $32 $00
     2 2018 05 36 35 38 31 36 + .by  $05 $36 $35 $38 $31 $36 $00 $04  $20 $4D $48 $7A $00 $09 $20 $20  $20 $56 $42 $58 $45 $3A $20 $00
     3 2030 03 20 28 24 00 0C + .by  $03 $20 $28 $24 $00 $0C $30 $30  $29 $2C $20 $43 $4F $52 $45 $20  $31 $2E $00 $06 $20 $52 $41 $4D
     4 2048 42 4F 00 09 20 20 + .by  $42 $4F $00 $09 $20 $20 $41 $4E  $54 $49 $43 $3A $20 $00 $03 $50  $41 $4C $00 $04 $4E $54 $53 $43
     5 2060 00 09 20 20 42 61 + .by  $00 $09 $20 $20 $42 $61 $73 $69  $63 $3A $20 $00 $07 $52 $4F $4D  $20 $4F $46 $46 $00 $11 $41 $74
     6 2078 61 72 69 20 42 61 + .by  $61 $72 $69 $20 $42 $61 $73 $69  $63 $20 $52 $65 $76 $2E $41 $00  $11 $41 $74 $61 $72 $69 $20 $42
     7 2090 61 73 69 63 20 52 + .by  $61 $73 $69 $63 $20 $52 $65 $76  $2E $42 $00 $11 $41 $74 $61 $72  $69 $20 $42 $61 $73 $69 $63 $20
     8 20A8 52 65 76 2E 43 00 + .by  $52 $65 $76 $2E $43 $00 $07 $55  $4E $4B $4E $4F $57 $4E $00 $09  $20 $53 $79 $73 $74 $65 $6D $3A
     9 20C0 20 00 0E 58 4C 2F + .by  $20 $00 $0E $58 $4C $2F $58 $45  $20 $4F $53 $20 $52 $65 $76 $2E  $31 $00 $0E $58 $4C $2F $58 $45
    10 20D8 20 4F 53 20 52 65 + .by  $20 $4F $53 $20 $52 $65 $76 $2E  $32 $00 $0E $58 $4C $2F $58 $45  $20 $4F $53 $20 $52 $65 $76 $2E
    11 20F0 33 00 13 58 4C 2F + .by  $33 $00 $13 $58 $4C $2F $58 $45  $2F $58 $45 $47 $53 $20 $4F $53  $20 $52 $65 $76 $2E $34 $00 $0F
    12 2108 58 4C 2F 58 45 20 + .by  $58 $4C $2F $58 $45 $20 $4F $53  $20 $52 $65 $76 $2E $31 $30 $00  $0F $58 $4C $2F $58 $45 $20 $4F
    13 2120 53 20 52 65 76 2E + .by  $53 $20 $52 $65 $76 $2E $31 $31  $00 $0F $58 $4C $2F $58 $45 $20  $4F $53 $20 $52 $65 $76 $2E $33
    14 2138 42 00 0C 51 4D 45 + .by  $42 $00 $0C $51 $4D $45 $47 $2B  $4F $53 $20 $34 $2E $30 $34 $00  $0C $51 $4D $45 $47 $2B $4F $53
    15 2150 20 52 43 30 31 00 + .by  $20 $52 $43 $30 $31 $00 $09 $20  $53 $74 $65 $72 $65 $6F $3A $20  $00 $09 $20 $4D $61 $70 $52 $61
    16 2168 6D 3A 20 00 09 48 + .by  $6D $3A $20 $00 $09 $48 $69 $67  $68 $4D $65 $6D $3A $20 $00 $02  $4B $42 $00 $09 $20 $45 $78 $74
    17 2180 4D 65 6D 3A 20 00 + .by  $4D $65 $6D $3A $20 $00 $06 $20  $62 $61 $6E $6B $73 $00 $04 $7F  $1F $1F $1F $00 $0D $50 $72 $65
    18 2198 73 73 20 61 6E 79 + .by  $73 $73 $20 $61 $6E $79 $20 $6B  $65 $79 $00
Source: detect.a65
   109
   110 				; ------------------------------------------------------------
   111
   112 21A3			RTLIB
   113 21A3				icl 'rtl6502_a8.asm'
Source: rtl6502_a8.asm
    78 					opt l+
   114
   115 				.print 'ZPAGE: ',zpage,'..',zpend-1
   115 				ZPAGE: $0080..$00D5
   116
   117 				.print 'RTLIB: ',RTLIB,'..',*-1
   117 				RTLIB: $21A3..$277F
   118
   119 				; ------------------------------------------------------------
   120
   121 2780			START
   122 2780 BA				tsx
   123 2781 8E 2C 2E			stx MAIN.@halt+1
   124
   125 					.ifdef fmulinit
   126 					fmulinit
   127 					.fi
   128
   129 = 0043			VLEN	= VARDATASIZE-VARINITSIZE
   130 = 2E4A			VADR	= DATAORIGIN+VARINITSIZE
   131
   132 					ift VADR > $BFFF
   133 					ert 'Invalid memory address range ',VADR
   134 					eli (VLEN>0) && (VLEN<=256)
   135 2784 A2 BD			ldx #256-VLEN
   136 2786 A9 00			lda #$00
   137 2788 9D 8D 2D E8 D0 FA		sta:rne VADR+VLEN-256,x+
   138 					eli VLEN>256
   139 					@fill #VADR #VLEN #$00
   140 					eif
   141
   142 				.ifdef :psptr
   143 					mwa #PROGRAMSTACK :psptr
   144 				.fi
   145
   146 					.ifdef MAIN.@DEFINES.ROMOFF
   147 					icl 'atari\romoff.asm'
   148 					.fi
   149
   150 278E A2 0F			ldx #$0F					; DOS II+/D ParamStr
   151 2790 BD 40 03 9D 31 2E + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   152
   153 2799 E8				inx						; X = 0
   154 279A 86 82			stx bp						; BP = 0
   155
   156 279C 8E 0F D2			stx skctl					; reset POKEY
   157 279F A9 03			lda #3
   158 27A1 8D 0F D2			sta skctl
   159
   160 27A4 CA				dex						; X = 255
   161
   162 27A5				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: detect.a65]
Source: detect.a65
   163
   164 27A5			.local	MAIN						; PROCEDURE
   165
   166 27A5 4C DA 2A			jmp l_01AA
   167
   168 				; ------------------------------------------------------------
   169
   170 27A8			.local	SYSTEM						; UNIT
   171
   172 27A8			.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER
   173
   174 				; -------------------  ASM Block 00000001  -------------------
   175
   176 27A8 20 5C 25			jsr @hexStr
   177
   178 				;	@move #@buf Result #33
   179 27AB A0 DF			ldy #256-33
   180 27AD B9 21 03 99 70 2D + 	mva:rne @buf+33-256,y adr.Result+33-256,y+
   181
   182 27B6			@exit
   183
   184 				; ------------------------------------------------------------
   185
   186 = 008A			VALUE	= :EDX
   187 = 008E			DIGITS	= :ECX
   188 = 2E4F			adr.RESULT	= [DATAORIGIN+$000B] .array [33]
   189 27B6			.var RESULT	= adr.RESULT .word
   190
   191 = 27B7			@VarData	= RESULT
   192 = 0021			@VarDataSize	= 33
   193
   194 27B6 60				rts						; ret
   195 = 27B7 4F 2E		RESULT
   195 				.endl
   196
   197 				; ------------------------------------------------------------
   198
   199 = 0101			__PORTB_BANKS	= $0101
   200 = 0648			M_PI_2	= $0648
   201 = 0192			D_PI_2	= $0192
   202 = 0004			D_PI_180	= $04
   203 = 0000			MGTIA	= $00
   204 = 0080			MVBXE	= $80
   205 = 0000			VBXE_XDLADR	= $00
   206 = 00E0			VBXE_BCBTMP	= $E0
   207 = 0100			VBXE_BCBADR	= $0100
   208 = 1000			VBXE_MAPADR	= $1000
   209 = 1000			VBXE_CHBASE	= $1000
   210 = 5000			VBXE_OVRADR	= $5000
   211 = B000			VBXE_WINDOW	= $B000
   212 = 0000			IDLI	= $00
   213 = 0001			IVBL	= $01
   214 = 0002			ITIM1	= $02
   215 = 0003			ITIM2	= $03
   216 = 0004			ITIM4	= $04
   217 = 00FE			CH_DELCHR	= $FE
   218 = 009B			CH_ENTER	= $9B
   219 = 001B			CH_ESC	= $1B
   220 = 001C			CH_CURS_UP	= $1C
   221 = 001D			CH_CURS_DOWN	= $1D
   222 = 001E			CH_CURS_LEFT	= $1E
   223 = 001F			CH_CURS_RIGHT	= $1F
   224 = 007F			CH_TAB	= $7F
   225 = 009B			CH_EOL	= $9B
   226 = 007D			CH_CLR	= $7D
   227 = 00FD			CH_BELL	= $FD
   228 = 007E			CH_DEL	= $7E
   229 = 009C			CH_DELLINE	= $9C
   230 = 009D			CH_INSLINE	= $9D
   231 = 0000			COLOR_BLACK	= $00
   232 = 000E			COLOR_WHITE	= $0E
   233 = 0032			COLOR_RED	= $32
   234 = 0096			COLOR_CYAN	= $96
   235 = 0068			COLOR_VIOLET	= $68
   236 = 00C4			COLOR_GREEN	= $C4
   237 = 0074			COLOR_BLUE	= $74
   238 = 00EE			COLOR_YELLOW	= $EE
   239 = 0028			COLOR_ORANGE	= $28
   240 = 00E4			COLOR_BROWN	= $E4
   241 = 003C			COLOR_LIGHTRED	= $3C
   242 = 0004			COLOR_GRAY1	= $04
   243 = 0006			COLOR_GRAY2	= $06
   244 = 000A			COLOR_GRAY3	= $0A
   245 = 00CC			COLOR_LIGHTGREEN	= $CC
   246 = 007C			COLOR_LIGHTBLUE	= $7C
   247 = 0004			FMOPENREAD	= $04
   248 = 0008			FMOPENWRITE	= $08
   249 = 0009			FMOPENAPPEND	= $09
   250 = 000C			FMOPENREADWRITE	= $0C
   251 = 2E44			SCREENWIDTH	= DATAORIGIN+$0000
   252 = 2E46			SCREENHEIGHT	= DATAORIGIN+$0002
   253 = 2E48			DATESEPARATOR	= DATAORIGIN+$0004
   254 = D20A			RND	= $D20A
   255 = 02C0			adr.PALETTE	= $02C0
   256 27B9			.var PALETTE	= adr.PALETTE .word
   257 = D012			adr.HPALETTE	= $D012
   258 27B9			.var HPALETTE	= adr.HPALETTE .word
   259 = 2E49			FILEMODE	= DATAORIGIN+$0005
   260 = 2E4A			GRAPHMODE	= DATAORIGIN+$0006
   261 = 2E4B			IORESULT	= DATAORIGIN+$0007
   262 = 2E4C			EOLN	= DATAORIGIN+$0008
   263 = 2E4D			RNDSEED	= DATAORIGIN+$0009
   264
   265 = 27B9 C0 02		PALETTE
   265 = 27BB 12 D0		HPALETTE
   265 				.endl							; UNIT SYSTEM
   266
   267 				; ------------------------------------------------------------
   268
   269 27BD			.local	ATARI						; UNIT
   270
   271 				; ------------------------------------------------------------
   272
   273 = 0010			IRQENS	= $10
   274 = 0012			RTCLOK	= $12
   275 = 0012			RTCLOK1	= $12
   276 = 0013			RTCLOK2	= $13
   277 = 0014			RTCLOK3	= $14
   278 = 004D			ATRACT	= $4D
   279 = 0052			LMARGIN	= $52
   280 = 0053			RMARGIN	= $53
   281 = 0054			ROWCRS	= $54
   282 = 0055			COLCRS	= $55
   283 = 0057			DINDEX	= $57
   284 = 0058			SAVMSC	= $58
   285 = 0062			PALNTS	= $62
   286 = 006A			RAMTOP	= $6A
   287 = 0200			VDSLST	= $0200
   288 = 0230			SDLSTL	= $0230
   289 = 0290			TXTROW	= $0290
   290 = 0291			TXTCOL	= $0291
   291 = 0293			TINDEX	= $0293
   292 = 0294			TXTMSC	= $0294
   293 = 022F			SDMCTL	= $022F
   294 = 026F			GPRIOR	= $026F
   295 = 02F0			CRSINH	= $02F0
   296 = 02F3			CHACT	= $02F3
   297 = 02F4			CHBAS	= $02F4
   298 = 02FC			CH	= $02FC
   299 = 02C0			PCOLR0	= $02C0
   300 = 02C1			PCOLR1	= $02C1
   301 = 02C2			PCOLR2	= $02C2
   302 = 02C3			PCOLR3	= $02C3
   303 = 02C4			COLOR0	= $02C4
   304 = 02C5			COLOR1	= $02C5
   305 = 02C6			COLOR2	= $02C6
   306 = 02C7			COLOR3	= $02C7
   307 = 02C8			COLOR4	= $02C8
   308 = 02C8			COLBAKS	= $02C8
   309 = D000			HPOSP0	= $D000
   310 = D001			HPOSP1	= $D001
   311 = D002			HPOSP2	= $D002
   312 = D003			HPOSP3	= $D003
   313 = D004			HPOSM0	= $D004
   314 = D005			HPOSM1	= $D005
   315 = D006			HPOSM2	= $D006
   316 = D007			HPOSM3	= $D007
   317 = D008			SIZEP0	= $D008
   318 = D009			SIZEP1	= $D009
   319 = D00A			SIZEP2	= $D00A
   320 = D00B			SIZEP3	= $D00B
   321 = D00C			SIZEM	= $D00C
   322 = D00D			GRAFP0	= $D00D
   323 = D00E			GRAFP1	= $D00E
   324 = D00F			GRAFP2	= $D00F
   325 = D010			GRAFP3	= $D010
   326 = D011			GRAFM	= $D011
   327 = D004			P0PF	= $D004
   328 = D014			PAL	= $D014
   329 = D012			COLPM0	= $D012
   330 = D013			COLPM1	= $D013
   331 = D014			COLPM2	= $D014
   332 = D015			COLPM3	= $D015
   333 = D016			COLPF0	= $D016
   334 = D017			COLPF1	= $D017
   335 = D018			COLPF2	= $D018
   336 = D019			COLPF3	= $D019
   337 = D01A			COLBK	= $D01A
   338 = D01B			PRIOR	= $D01B
   339 = D01D			GRACTL	= $D01D
   340 = D01E			HITCLR	= $D01E
   341 = D01F			CONSOL	= $D01F
   342 = D200			AUDF1	= $D200
   343 = D201			AUDC1	= $D201
   344 = D202			AUDF2	= $D202
   345 = D203			AUDC2	= $D203
   346 = D204			AUDF3	= $D204
   347 = D205			AUDC3	= $D205
   348 = D206			AUDF4	= $D206
   349 = D207			AUDC4	= $D207
   350 = D208			AUDCTL	= $D208
   351 = D209			KBCODE	= $D209
   352 = D20E			IRQEN	= $D20E
   353 = D20F			SKSTAT	= $D20F
   354 = D300			PORTA	= $D300
   355 = D301			PORTB	= $D301
   356 = D400			DMACTL	= $D400
   357 = D401			CHACTL	= $D401
   358 = D402			DLISTL	= $D402
   359 = D404			HSCROL	= $D404
   360 = D405			VSCROL	= $D405
   361 = D407			PMBASE	= $D407
   362 = D409			CHBASE	= $D409
   363 = D40A			WSYNC	= $D40A
   364 = D40B			VCOUNT	= $D40B
   365 = D40C			PENH	= $D40C
   366 = D40D			PENV	= $D40D
   367 = D40E			NMIEN	= $D40E
   368 = FFFA			NMIVEC	= $FFFA
   369 = FFFC			RESETVEC	= $FFFC
   370 = FFFE			IRQVEC	= $FFFE
   371
   372 				.endl							; UNIT ATARI
   373
   374 				; ------------------------------------------------------------
   375
   376 27BD			.local	CRT						; UNIT
   377
   378 27BD			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   379
   380 				; -------------------  ASM Block 00000056  -------------------
   381
   382 27BD A0 00			ldy #$00	; false
   383 27BF AD FC 02			lda kbcodes
   384 27C2 C9 FF			cmp #$ff
   385 27C4 F0 01			seq
   386 27C6 C8				iny		; true
   387 27C7 8C 71 2E			sty Result
   388
   389 27CA			@exit
   390
   391 				; ------------------------------------------------------------
   392
   393 = 2E71			RESULT	= DATAORIGIN+$002D
   394 27CA 60				rts						; ret
   395 				.endl
   396
   397 				; ------------------------------------------------------------
   398
   399 = 2E70			TEXTATTR	= DATAORIGIN+$002C
   400 = D01F			CONSOL	= $D01F
   401 = 0000			CN_START_SELECT_OPTION	= $00
   402 = 0001			CN_SELECT_OPTION	= $01
   403 = 0002			CN_START_OPTION	= $02
   404 = 0003			CN_OPTION	= $03
   405 = 0004			CN_START_SELECT	= $04
   406 = 0005			CN_SELECT	= $05
   407 = 0006			CN_START	= $06
   408 = 0007			CN_NONE	= $07
   409 = 0000			BW40	= $00
   410 = 0001			CO40	= $01
   411 = 0002			BW80	= $02
   412 = 0003			CO80	= $03
   413 = 0007			MONO	= $07
   414 = 0001			C40	= $01
   415 = 0003			C80	= $03
   416 = 0000			BLACK	= $00
   417 = 000F			WHITE	= $0F
   418 = 0026			RED	= $26
   419 = 00AC			CYAN	= $AC
   420 = 0048			PURPLE	= $48
   421 = 00B6			GREEN	= $B6
   422 = 0086			BLUE	= $86
   423 = 00DC			YELLOW	= $DC
   424 = 0018			ORANGE	= $18
   425 = 00F4			BROWN	= $F4
   426 = 002A			LIGHT_RED	= $2A
   427 = 0004			DARK_GREY	= $04
   428 = 0008			GREY	= $08
   429 = 00BC			LIGHT_GREEN	= $BC
   430 = 009A			LIGHT_BLUE	= $9A
   431 = 000C			LIGHT_GREY	= $0C
   432 = 0080			BLINK	= $80
   433
   434 				.endl							; UNIT CRT
   435
   436 				; ------------------------------------------------------------
   437
   438 27CB			.local	MISC						; UNIT
   439
   440 27CB			.local	DETECTANTIC					; FUNCTION | ASSEMBLER
   441
   442 				; -------------------  ASM Block 00000063  -------------------
   443
   444
   445 				// ANTIC PAL Test for Atari 8-bits
   446 				// (C) 2019 Guillermo Fuenzalida
   447
   448 27CB			antic_loop1
   449 27CB AD 0B D4			lda vcount
   450 27CE C9 64			cmp #100
   451 27D0 90 F9			bcc antic_loop1		// wait till scanline 200
   452 27D2 8D E9 27			sta scanline
   453 27D5			antic_loop2
   454 27D5 AD 0B D4			lda vcount
   455 27D8 C9 0A			cmp #10
   456 27DA 30 0A			bmi antic_loop2_fin
   457 27DC CD E9 27			cmp scanline
   458 27DF 30 F4			bmi antic_loop2
   459 27E1 8D E9 27			sta scanline
   460 27E4 10 EF			bpl antic_loop2
   461
   462 27E6			antic_loop2_fin
   463 27E6 A0 00			ldy #$00
   464 27E8 A9 00			lda #0
   465 = 27E9			scanline equ *-1
   466 27EA C9 87			cmp #135
   467 27EC 30 01			bmi ntsc
   468 27EE C8				iny
   469 27EF			ntsc
   470 27EF 8C 72 2E			sty Result
   471
   472
   473 27F2			@exit
   474
   475 				; ------------------------------------------------------------
   476
   477 = 2E72			RESULT	= DATAORIGIN+$002E
   478 27F2 60				rts						; ret
   479 				.endl
   480
   481 27F3			.local	DETECTHIGHMEM					; FUNCTION
   482
   483 				; optimize OK (MISC), line = 115
   484
   485 27F3 A9 00			lda #$00
   486 27F5 8D 73 2E			sta RESULT
   487 27F8 8D 74 2E			sta RESULT+1
   488
   489 				; optimize FAIL ('DETECTCPU', MISC), line = 117
   490
   491 27FB 20 A7 28			jsr DETECTCPU
   492 27FE A9 7F			lda #$7F
   493 2800 CD 76 2E			cmp DETECTCPU.RESULT
   494 2803 B0 63			jcs l_0229
   495 				@
   496
   497 				; -------------------  ASM Block 00000064  -------------------
   498
   499
   500 = 0086			adr	= eax
   501 = 2E73			bcnt	= Result
   502 = 2E74			bfirst	= Result+1
   503
   504 					opt c+
   505
   506 2805 8E 67 28			stx @sp
   507
   508 2808 78				sei
   509 2809 EE 0E D4			inc nmien
   510
   511 280C 64 86		ramsize	stz adr
   512 280E 64 87			stz adr+1
   513 2810 A9 01			lda #$01
   514 2812 85 88			sta adr+2
   515
   516 2814 9C 74 2E			stz bfirst
   517 2817 9C 73 2E			stz bcnt
   518
   519 281A 9C 00 00		?lp0	stz.w $0000
   520
   521 281D A7 86			lda [adr]
   522 281F 49 FF			eor #$ff
   523 2821 87 86			sta [adr]
   524 2823 C7 86			cmp [adr]
   525 2825 D0 0B			bne ?nx
   526 2827 AE 00 00			ldx.w $0000
   527 282A D0 06			bne ?nx
   528 282C 49 FF			eor #$ff
   529 282E 87 86			sta [adr]
   530 2830 80 06			bra ?fnd
   531
   532 2832 E6 88		?nx	inc adr+2
   533 2834 D0 E4			bne ?lp0
   534
   535 2836 80 2A			bra ?abt
   536
   537 2838 A5 88		?fnd	lda adr+2
   538 283A 8D 74 2E			sta bfirst
   539
   540 283D E6 88			inc adr+2
   541 283F EE 73 2E			inc bcnt
   542
   543 2842 9C 00 00		?lp1	stz.w $0000
   544
   545 2845 A7 86			lda [adr]
   546 2847 49 FF			eor #$ff
   547 2849 87 86			sta [adr]
   548 284B C7 86			cmp [adr]
   549 284D D0 13			bne ?abt
   550 284F AE 00 00			ldx.w $0000
   551 2852 D0 0E			bne ?abt
   552 2854 49 FF			eor #$ff
   553 2856 87 86			sta [adr]
   554 2858 EE 73 2E			inc bcnt
   555 285B E6 88			inc adr+2
   556 285D D0 E3			bne ?lp1
   557
   558 285F CE 73 2E		        dec bcnt
   559
   560 2862			?abt
   561 2862 CE 0E D4			dec nmien
   562 2865 58				cli
   563
   564 2866 A2 00			ldx #0
   565 = 2867			@sp	equ *-1
   566
   567 					opt c-
   568
   569 2868			l_0229
   570 2868			@exit
   571
   572 				; ------------------------------------------------------------
   573
   574 = 2E73			RESULT	= DATAORIGIN+$002F
   575 2868 60				rts						; ret
   576 				.endl
   577
   578 2869			.local	DETECTVBXE					; FUNCTION | ASSEMBLER | REGISTER
   579
   580 				; -------------------  ASM Block 00000065  -------------------
   581
   582 2869 8A 48			txa:pha
   583
   584 286B 20 B6 21			jsr @vbxe_detect
   585
   586 286E A0 00			ldy #0		; core
   587 2870 91 8A			sta (p),y
   588
   589 2872 A5 81			lda fxptr+1
   590 2874 85 92			sta Result
   591
   592 2876 C8				iny		; page
   593 2877 91 8A			sta (p),y
   594
   595 2879 68 AA			pla:tax
   596
   597
   598 287B			@exit
   599
   600 				; ------------------------------------------------------------
   601
   602 = 008A			P	= :EDX
   603 = 0092			RESULT	= :STACKORIGIN-4
   604 287B 60				rts						; ret
   605 				.endl
   606
   607 287C			.local	DETECTSTEREO					; FUNCTION | ASSEMBLER
   608
   609 				; -------------------  ASM Block 00000067  -------------------
   610
   611 287C 8A 48			txa:pha
   612
   613 287E A2 00			ldx #$00
   614 2880 8E 0F D2			stx $d20f	;halt pokey 0
   615 2883 8E 1F D2			stx $d21f	;halt pokey 1
   616 2886 A0 03			ldy #$03
   617 2888 8C 1F D2			sty $d21f	;release pokey 1
   618
   619 288B 8D 0A D4			sta $d40a	;delay necessary for
   620 288E 8D 0A D4			sta $d40a	;accelerator boards
   621
   622 2891 A9 FF			lda #$ff
   623 2893 2D 0A D2		loop	and $d20a	;see if pokey 0 is halted ($d20a = $ff)
   624 2896 E8				inx
   625 2897 D0 FA			bne loop
   626
   627 2899 8C 0F D2			sty $d20f
   628
   629 289C C9 FF			cmp #$ff
   630 289E D0 01			bne mono
   631
   632 28A0 E8				inx
   633 28A1			mono
   634 28A1 8E 75 2E			stx Result
   635
   636 28A4 68 AA			pla:tax
   637
   638 28A6			@exit
   639
   640 				; ------------------------------------------------------------
   641
   642 = 2E75			RESULT	= DATAORIGIN+$0031
   643 28A6 60				rts						; ret
   644 				.endl
   645
   646 28A7			.local	DETECTCPU					; FUNCTION | ASSEMBLER
   647
   648 				; -------------------  ASM Block 00000068  -------------------
   649
   650 28A7 8A 48			txa:pha
   651
   652 					opt c+
   653
   654 				;detekcja zainstalowanego procesora
   655 28A9 A9 99			lda #$99
   656 28AB 18				clc
   657 28AC F8				sed
   658 28AD 69 01			adc #$01
   659 28AF D8				cld
   660 28B0 F0 05			beq DetectCPU_CMOS
   661
   662 28B2			DetectCPU_02
   663 28B2 A9 00			lda #0
   664 28B4 4C C4 28			jmp stop
   665
   666 28B7			DetectCPU_CMOS
   667 28B7 A9 00			lda #0
   668 28B9 C2 02			rep #%00000010		;wyzerowanie bitu Z
   669 28BB D0 05			bne DetectCPU_C816
   670
   671 28BD			DetectCPU_C02
   672 28BD A9 01			lda #1
   673 28BF 4C C4 28			jmp stop
   674
   675 28C2			DetectCPU_C816
   676 28C2 A9 80			lda #$80
   677
   678 28C4 8D 76 2E		stop	sta Result
   679
   680 					opt c-
   681
   682 28C7 68 AA			pla:tax
   683
   684
   685 28C9			@exit
   686
   687 				; ------------------------------------------------------------
   688
   689 = 2E76			RESULT	= DATAORIGIN+$0032
   690 28C9 60				rts						; ret
   691 				.endl
   692
   693 28CA			.local	DETECTCPUSPEED					; FUNCTION
   694
   695 				; -------------------  ASM Block 00000069  -------------------
   696
   697 28CA 8E 2F 29			stx @sp
   698
   699 28CD BA				tsx
   700 28CE 8E 1C 29			stx	stk
   701
   702 28D1 AD 22 02			lda	vvblki
   703 28D4 8D 1F 29			sta	lvbl
   704
   705 28D7 AD 23 02			lda	vvblki+1
   706 28DA 8D 24 29			sta	hvbl
   707
   708 28DD AD 01 D3			lda	portb
   709 28E0 8D 29 29			sta	oldp
   710
   711 28E3 A9 FF			lda	#$ff
   712 28E5 8D 01 D3			sta	portb
   713
   714 28E8 78				sei
   715
   716 28E9 A2 0F			ldx	<stop2
   717 28EB A0 29			ldy	>stop2
   718
   719 28ED AD 0B D4		bogo2	lda	vcount
   720 28F0 C9 70			cmp	#112
   721 28F2 D0 F9			bne	bogo2
   722
   723 28F4 8E 22 02			stx	vvblki
   724 28F7 8C 23 02			sty	vvblki+1
   725
   726 28FA A9 00			lda	#$00
   727 28FC 8D 7E 2E			sta	fr0+1
   728 28FF AA				tax
   729 2900 A8				tay
   730
   731 2901 8D 0A D4			sta	wsync
   732
   733 2904 C8			loop2	iny
   734 2905 D0 FD			bne	loop2
   735 2907 E8				inx
   736 2908 D0 FA			bne	loop2
   737 290A 18				clc
   738 290B 69 01			adc	#$01
   739 290D D0 F5			bne	loop2
   740
   741 290F			stop2
   742 290F 68				pla
   743 2910 8D 7B 2E			sta	clkm
   744 2913 68				pla
   745 2914 8D 7C 2E			sta	clkm+1
   746 2917 68				pla
   747 				;	sta	clkm+2
   748 2918 8D 7D 2E			sta	fr0
   749
   750 291B A2 00			ldx	#0
   751 = 291C			stk	equ *-1
   752 291D 9A				txs
   753
   754 291E A9 00			lda	#0
   755 = 291F			lvbl	equ *-1
   756 2920 8D 22 02			sta vvblki
   757
   758 2923 A9 00			lda	#0
   759 = 2924			hvbl	equ *-1
   760 2925 8D 23 02			sta vvblki+1
   761
   762 2928 A9 00			lda	#0
   763 = 2929			oldp	equ *-1
   764 292A 8D 01 D3			sta	portb
   765
   766 292D 58				cli
   767
   768 292E A2 00			ldx #0
   769 = 292F			@sp	equ *-1
   770
   771
   772 				; optimize FAIL ('divmulINT.REAL', MISC), line = 501
   773
   774 2930 E8				inx
   775 2931 A9 00 95 96			mva #$00 :STACKORIGIN,x
   776 2935 A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
   777 2939 AD 7D 2E 95 B6		mva FR0 :STACKORIGIN+STACKWIDTH*2,x
   778 293E AD 7E 2E 95 C6		mva FR0+1 :STACKORIGIN+STACKWIDTH*3,x
   779 2943 E8				inx
   780 2944 AD 7B 2E 95 96		mva CLKM :STACKORIGIN,x
   781 2949 AD 7C 2E 95 A6		mva CLKM+1 :STACKORIGIN+STACKWIDTH,x
   782 294E A9 00 95 B6			mva #$00 :STACKORIGIN+STACKWIDTH*2,x
   783 2952 A9 00 95 C6			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
   784 2956 20 0C 22			jsr addEAX_ECX
   785 2959 A9 00 95 96			mva #$00 :STACKORIGIN,x
   786 295D A9 E7 95 A6			mva #$E7 :STACKORIGIN+STACKWIDTH,x
   787 2961 A9 01 95 B6			mva #$01 :STACKORIGIN+STACKWIDTH*2,x
   788 2965 A9 00 95 C6			mva #$00 :STACKORIGIN+STACKWIDTH*3,x
   789 2969 20 9B 22			jsr @expandToREAL1
   790 296C 20 30 23			jsr divmulINT.REAL
   791 296F A9 C6			lda #$C6
   792 2971 85 8E			sta @REAL_MUL.B
   793 2973 A9 01			lda #$01
   794 2975 85 8F			sta @REAL_MUL.B+1
   795 2977 A9 00			lda #$00
   796 2979 85 90			sta @REAL_MUL.B+2
   797 297B A9 00			lda #$00
   798 297D 85 91			sta @REAL_MUL.B+3
   799 297F B5 95			lda :STACKORIGIN-1,x
   800 2981 85 86			sta @REAL_MUL.A
   801 2983 B5 A5			lda :STACKORIGIN-1+STACKWIDTH,x
   802 2985 85 87			sta @REAL_MUL.A+1
   803 2987 B5 B5			lda :STACKORIGIN-1+STACKWIDTH*2,x
   804 2989 85 88			sta @REAL_MUL.A+2
   805 298B B5 C5			lda :STACKORIGIN-1+STACKWIDTH*3,x
   806 298D 85 89			sta @REAL_MUL.A+3
   807 298F 20 56 24			jsr @REAL_MUL
   808 2992 CA				dex
   809 2993 A5 86			lda @REAL_MUL.RESULT
   810 2995 8D 77 2E			sta RESULT
   811 2998 A5 87			lda @REAL_MUL.RESULT+1
   812 299A 8D 78 2E			sta RESULT+1
   813 299D A5 88			lda @REAL_MUL.RESULT+2
   814 299F 8D 79 2E			sta RESULT+2
   815 29A2 A5 89			lda @REAL_MUL.RESULT+3
   816 29A4 8D 7A 2E			sta RESULT+3
   817 29A7 CA				dex
   818 29A8			@exit
   819
   820 				; ------------------------------------------------------------
   821
   822 = 2E77			RESULT	= DATAORIGIN+$0033
   823 = 2E7B			CLKM	= DATAORIGIN+$0037
   824 = 2E7D			FR0	= DATAORIGIN+$0039
   825
   826 = 2E7B			@VarData	= CLKM
   827 = 0004			@VarDataSize	= 4
   828
   829 29A8 60				rts						; ret
   830 				.endl
   831
   832 29A9			.local	DETECTMEM					; FUNCTION | ASSEMBLER
   833
   834 				; -------------------  ASM Block 00000070  -------------------
   835
   836 29A9 8A 48			txa:pha
   837
   838 = 0400			bsav	= @buf
   839
   840 = 4000			ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF
   841
   842 29AB A0 00			ldy #0
   843 29AD B9 BE 29 99 00 06	mov	mva copy,y detect,y
   844 29B3 C8				iny
   845 29B4 C0 8C			cpy #.sizeof(detect)
   846 29B6 D0 F5			bne mov
   847
   848 29B8 20 00 06			jsr detect
   849
   850 29BB 4C 4A 2A			jmp stop
   851
   852 29BE			copy
   853
   854 0600			.local	detect,$0600
   855
   856 0600 AD 01 D3			lda portb
   857 0603 48				pha
   858
   859 0604 AD 0B D4 D0 FB		lda:rne vcount
   860
   861 				;	lda #$ff
   862 				;	sta portb
   863
   864 0609 AD 00 40			lda ext_b
   865 060C 48				pha
   866
   867 060D A2 0F			ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
   868 060F 20 7F 06		_p0	jsr setpb
   869 0612 AD 00 40			lda ext_b
   870 0615 9D 00 04			sta bsav,x
   871 0618 CA				dex
   872 0619 10 F4			bpl _p0
   873
   874 061B A2 0F			ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
   875 061D 20 7F 06		_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
   876 0620 A9 00			lda #$00
   877 0622 8D 00 40			sta ext_b
   878 0625 CA				dex
   879 0626 10 F5			bpl _p1
   880
   881 0628 8E 01 D3			stx portb	;eliminacja pamięci podstawowej
   882 062B 8E 00 40			stx ext_b
   883 062E 86 00			stx $00		;niezbędne dla niektórych rozszerzeń do 256k
   884
   885 0630 A0 00			ldy #$00	;pętla zliczająca bloki 64k
   886 0632 A2 0F			ldx #$0f
   887 0634 20 7F 06		_p2	jsr setpb
   888 0637 AD 00 40			lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
   889 063A D0 23			bne _n2
   890
   891 063C CE 00 40			dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony
   892
   893 063F AD 00 40			lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
   894 0642 10 1B			bpl _n2
   895
   896 0644 AD 01 D3			lda portb	;wpisz wartość PORTB do tablicy dla banku 0
   897
   898 0647 29 FE			and #$fe
   899
   900 0649 99 01 01			sta adr.banks,y
   901 064C 49 04			eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
   902 064E 99 02 01			sta adr.banks+1,y
   903 0651 49 0C			eor #%00001100
   904 0653 99 03 01			sta adr.banks+2,y
   905 0656 49 04			eor #%00000100
   906 0658 99 04 01			sta adr.banks+3,y
   907 065B C8				iny
   908 065C C8				iny
   909 065D C8				iny
   910 065E C8				iny
   911
   912 065F CA			_n2	dex
   913 0660 10 D2			bpl _p2
   914
   915 0662 A2 0F			ldx #$0f	;przywrócenie zawartości ext
   916 0664 20 7F 06		_p3	jsr setpb
   917 0667 BD 00 04			lda bsav,x
   918 066A 8D 00 40			sta ext_b
   919 066D CA				dex
   920 066E 10 F4			bpl _p3
   921
   922 0670 8E 01 D3			stx portb	;X=$FF
   923
   924 0673 68				pla
   925 0674 8D 00 40			sta ext_b
   926
   927 0677 68				pla
   928 0678 8D 01 D3			sta portb
   929
   930 067B 8C 7F 2E			sty Result
   931
   932 067E 60				rts
   933
   934 				; podprogramy
   935 067F 8A			setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
   936 0680 4A				lsr
   937 0681 6A				ror
   938 0682 6A				ror
   939 0683 6A				ror
   940 0684 69 01			adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
   941 0686 09 01			ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
   942 0688 8D 01 D3			sta portb
   943 068B 60				rts
   944
   945 				.endl
   946
   947 2A4A 68 AA		stop	pla:tax
   948
   949
   950 2A4C			@exit
   951
   952 				; ------------------------------------------------------------
   953
   954 = 2E7F			RESULT	= DATAORIGIN+$003B
   955 2A4C 60				rts						; ret
   956 				.endl
   957
   958 2A4D			.local	DETECTMAPRAM					; FUNCTION | ASSEMBLER
   959
   960 				; -------------------  ASM Block 00000071  -------------------
   961
   962
   963 = 008A			bsav	= DX
   964 = 5000			ext_b	= $5000		;cokolwiek z zakresu $5000-$57FF
   965
   966 2A4D 8A 48			txa:pha
   967
   968 2A4F A0 59			ldy #.sizeof(detect)-1
   969 2A51 B9 60 2A 99 00 04 + 	mva:rpl copy,y detect,y-
   970
   971 2A5A 20 00 04			jsr detect
   972
   973 2A5D 4C BA 2A			jmp stop
   974
   975 2A60			copy
   976
   977 0400			.local	detect,@buf
   978
   979 0400 78				sei
   980 0401 EE 0E D4			inc nmien
   981
   982 0404 A9 00 8D 80 2E		mva #FALSE Result
   983
   984 0409 AD 01 D3			lda portb
   985 040C 48				pha
   986
   987 040D A9 FF			lda #$ff
   988 040F 8D 01 D3			sta portb
   989
   990 0412 AD 00 50			lda ext_b
   991 0415 48				pha
   992
   993 0416 20 4F 04		_p0	jsr setb
   994 0419 AD 00 50			lda ext_b
   995 041C 85 8A			sta bsav
   996
   997 041E A9 00			lda #$00
   998 0420 8D 00 50			sta ext_b
   999
  1000 0423 A9 FF			lda #$ff
  1001 0425 8D 01 D3			sta portb	;eliminacja pamięci podstawowej
  1002 0428 8D 00 50			sta ext_b
  1003
  1004 042B 20 4F 04		_p2	jsr setb
  1005
  1006 042E EE 00 50			inc ext_b
  1007 0431 F0 05			beq _p3
  1008
  1009 0433 A9 01 8D 80 2E		mva #TRUE Result
  1010
  1011 0438 A5 8A		_p3	lda bsav
  1012 043A 8D 00 50			sta ext_b
  1013
  1014 043D A9 FF			lda #$ff
  1015 043F 8D 01 D3			sta portb
  1016
  1017 0442 68				pla
  1018 0443 8D 00 50			sta ext_b
  1019
  1020 0446 68				pla
  1021 0447 8D 01 D3			sta portb
  1022
  1023 044A CE 0E D4			dec nmien
  1024 044D 58				cli
  1025
  1026 044E 60				rts
  1027
  1028 044F AD 01 D3		setb	lda portb
  1029 0452 29 4E			and #%01001110	; !!!
  1030 0454 09 30			ora #%00110000  ; MAPRAM ON
  1031 0456 8D 01 D3			sta portb
  1032 0459 60				rts
  1033
  1034 				.endl
  1035
  1036 2ABA 68 AA		stop	pla:tax
  1037
  1038
  1039 2ABC			@exit
  1040
  1041 				; ------------------------------------------------------------
  1042
  1043 = 2E80			RESULT	= DATAORIGIN+$003C
  1044 2ABC 60				rts						; ret
  1045 				.endl
  1046
  1047 2ABD			.local	DETECTBASIC					; FUNCTION | ASSEMBLER
  1048
  1049 				; -------------------  ASM Block 00000072  -------------------
  1050
  1051
  1052 = A8E2			BASROM	= $a8e2
  1053
  1054 2ABD AD 01 D3			lda PORTB
  1055 2AC0 8D D3 2A			sta old
  1056
  1057 2AC3 29 01			and #1
  1058 2AC5 F0 08			beq stop
  1059
  1060 2AC7 A9 FD			lda #$fd
  1061 2AC9 8D 01 D3			sta PORTB
  1062
  1063 2ACC AD E2 A8			lda BASROM
  1064 2ACF 8D 81 2E		stop	sta Result
  1065
  1066 2AD2 A9 FF			lda #$ff
  1067 = 2AD3			old	equ *-1
  1068 2AD4 8D 01 D3			sta PORTB
  1069
  1070
  1071 2AD7			@exit
  1072
  1073 				; ------------------------------------------------------------
  1074
  1075 = 2E81			RESULT	= DATAORIGIN+$003D
  1076 2AD7 60				rts						; ret
  1077 				.endl
  1078
  1079 				; ------------------------------------------------------------
  1080
  1081 = 0101			adr.BANKS	= $0101
  1082 2AD8			.var BANKS	= adr.BANKS .word
  1083 = FFF7			DETECTOS	= $FFF7
  1084
  1085 = 2AD8 01 01		BANKS
  1085 				.endl							; UNIT MISC
  1086 2ADA			l_01AA
  1087
  1088 				; optimize OK (detect.pas), line = 14
  1089
  1090 2ADA A9 01			lda #$01
  1091 2ADC 85 52			sta ATARI.LMARGIN
  1092
  1093 				; optimize FAIL ('@print', detect.pas), line = 16
  1094
  1095 2ADE 20 B2 25			@printEOL
  1096
  1097 				; optimize FAIL ('@print', detect.pas), line = 22
  1098
  1099 					@printSTRING #CODEORIGIN+$0000
  1099 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  1099 2AE1 A0 20		 LDY> CODEORIGIN+$0000
  1099 2AE3 A9 00		 LDA< CODEORIGIN+$0000
  1099 2AE5 20 C0 25		 JSR @PRINTSTRING
  1100
  1101 				; optimize FAIL ('MISC.DETECTCPU', detect.pas), line = 24
  1102
  1103 2AE8 20 A7 28			jsr MISC.DETECTCPU
  1104 2AEB AD 76 2E			lda MISC.DETECTCPU.RESULT
  1105 2AEE 8D 87 2E			sta CPU
  1106
  1107 				; optimize OK (detect.pas), line = 26
  1108
  1109 2AF1 8D 88 2E			sta @CASETMP_0003
  1110 2AF4 C9 00			cmp #$00
  1111 2AF6 D0 0A			jne l_0266
  1112 				@
  1113
  1114 				; optimize FAIL ('@print', detect.pas), line = 27
  1115
  1116 					@printSTRING #CODEORIGIN+$000B
  1116 				 LDY> CODEORIGIN+$000B\ LDA< CODEORIGIN+$000B\ JSR @PRINTSTRING
  1116 2AF8 A0 20		 LDY> CODEORIGIN+$000B
  1116 2AFA A9 0B		 LDA< CODEORIGIN+$000B
  1116 2AFC 20 C0 25		 JSR @PRINTSTRING
  1117
  1118 2AFF 4C 17 2B			jmp a_0003
  1119 2B02			l_0266
  1120 2B02 C9 01			cmp #$01
  1121 2B04 D0 0A			jne l_0272
  1122 				@
  1123
  1124 				; optimize FAIL ('@print', detect.pas), line = 28
  1125
  1126 					@printSTRING #CODEORIGIN+$0011
  1126 				 LDY> CODEORIGIN+$0011\ LDA< CODEORIGIN+$0011\ JSR @PRINTSTRING
  1126 2B06 A0 20		 LDY> CODEORIGIN+$0011
  1126 2B08 A9 11		 LDA< CODEORIGIN+$0011
  1126 2B0A 20 C0 25		 JSR @PRINTSTRING
  1127
  1128 2B0D 4C 17 2B			jmp a_0003
  1129 2B10			l_0272
  1130
  1131 				; optimize FAIL ('@print', detect.pas), line = 30
  1132
  1133 					@printSTRING #CODEORIGIN+$0018
  1133 				 LDY> CODEORIGIN+$0018\ LDA< CODEORIGIN+$0018\ JSR @PRINTSTRING
  1133 2B10 A0 20		 LDY> CODEORIGIN+$0018
  1133 2B12 A9 18		 LDA< CODEORIGIN+$0018
  1133 2B14 20 C0 25		 JSR @PRINTSTRING
  1134 2B17			a_0003
  1135
  1136 				; optimize FAIL ('@print', detect.pas), line = 33
  1137
  1138 					@print #$20
  1138 				 LDY# $20\ JSR @PRINT
  1138 2B17 A0 20		 LDY# $20
  1138 2B19 20 B7 25		 JSR @PRINT
  1139 2B1C 20 CA 28			jsr MISC.DETECTCPUSPEED
  1140 2B1F E8				inx
  1141 2B20 AD 77 2E 95 96		mva MISC.DETECTCPUSPEED.RESULT :STACKORIGIN,x
  1142 2B25 AD 78 2E 95 A6		mva MISC.DETECTCPUSPEED.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1143 2B2A AD 79 2E 95 B6		mva MISC.DETECTCPUSPEED.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
  1144 2B2F AD 7A 2E 95 C6		mva MISC.DETECTCPUSPEED.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
  1145 2B34 20 BE 26			jsr @printREAL
  1146 2B37 CA				dex
  1147 					@printSTRING #CODEORIGIN+$001F
  1147 				 LDY> CODEORIGIN+$001F\ LDA< CODEORIGIN+$001F\ JSR @PRINTSTRING
  1147 2B38 A0 20		 LDY> CODEORIGIN+$001F
  1147 2B3A A9 1F		 LDA< CODEORIGIN+$001F
  1147 2B3C 20 C0 25		 JSR @PRINTSTRING
  1148 2B3F 20 B2 25			@printEOL
  1149
  1150 				; optimize OK (detect.pas), line = 47
  1151
  1152 2B42 A9 85			lda <P
  1153 2B44 85 8A			sta MISC.DETECTVBXE.P
  1154 2B46 A9 2E			lda >P
  1155 2B48 85 8B			sta MISC.DETECTVBXE.P+1
  1156 2B4A 20 69 28			jsr MISC.DETECTVBXE
  1157 2B4D A5 92			lda MISC.DETECTVBXE.RESULT
  1158 2B4F 8D 84 2E			sta A
  1159
  1160 				; optimize FAIL ('@print', detect.pas), line = 49
  1161
  1162 					@printSTRING #CODEORIGIN+$0025
  1162 				 LDY> CODEORIGIN+$0025\ LDA< CODEORIGIN+$0025\ JSR @PRINTSTRING
  1162 2B52 A0 20		 LDY> CODEORIGIN+$0025
  1162 2B54 A9 25		 LDA< CODEORIGIN+$0025
  1162 2B56 20 C0 25		 JSR @PRINTSTRING
  1163 2B59 E8				inx
  1164 2B5A AD 84 2E 95 96		mva A :STACKORIGIN,x
  1165 2B5F 20 EF 25			jsr @printBOOLEAN
  1166 2B62 CA				dex
  1167
  1168 				; optimize OK (detect.pas), line = 50
  1169
  1170 2B63 AD 84 2E			lda A
  1171 2B66 F0 56			jeq l_02A3
  1172
  1173 				; optimize FAIL ('@print', detect.pas), line = 51
  1174
  1175 					@printSTRING #CODEORIGIN+$0030
  1175 				 LDY> CODEORIGIN+$0030\ LDA< CODEORIGIN+$0030\ JSR @PRINTSTRING
  1175 2B68 A0 20		 LDY> CODEORIGIN+$0030
  1175 2B6A A9 30		 LDA< CODEORIGIN+$0030
  1175 2B6C 20 C0 25		 JSR @PRINTSTRING
  1176 2B6F AD 86 2E			lda P+1
  1177 2B72 85 8A			sta SYSTEM.HEXSTR.VALUE
  1178 2B74 A9 00			lda #$00
  1179 2B76 85 8B			sta SYSTEM.HEXSTR.VALUE+1
  1180 2B78 85 8C			sta SYSTEM.HEXSTR.VALUE+2
  1181 2B7A 85 8D			sta SYSTEM.HEXSTR.VALUE+3
  1182 2B7C A9 02			lda #$02
  1183 2B7E 85 8E			sta SYSTEM.HEXSTR.DIGITS
  1184 2B80 20 A8 27			jsr SYSTEM.HEXSTR
  1185 					@printSTRING SYSTEM.HEXSTR.RESULT
  1185 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  1185 2B83 AC B8 27		 LDY SYSTEM.HEXSTR.RESULT+1
  1185 2B86 AD B7 27		 LDA SYSTEM.HEXSTR.RESULT
  1185 2B89 20 C0 25		 JSR @PRINTSTRING
  1186 					@printSTRING #CODEORIGIN+$0035
  1186 				 LDY> CODEORIGIN+$0035\ LDA< CODEORIGIN+$0035\ JSR @PRINTSTRING
  1186 2B8C A0 20		 LDY> CODEORIGIN+$0035
  1186 2B8E A9 35		 LDA< CODEORIGIN+$0035
  1186 2B90 20 C0 25		 JSR @PRINTSTRING
  1187 2B93 AD 85 2E			lda P
  1188 2B96 29 7F			and #$7F
  1189 2B98 85 8A			sta SYSTEM.HEXSTR.VALUE
  1190 2B9A A9 00			lda #$00
  1191 2B9C 85 8B			sta SYSTEM.HEXSTR.VALUE+1
  1192 2B9E 85 8C			sta SYSTEM.HEXSTR.VALUE+2
  1193 2BA0 85 8D			sta SYSTEM.HEXSTR.VALUE+3
  1194 2BA2 A9 02			lda #$02
  1195 2BA4 85 8E			sta SYSTEM.HEXSTR.DIGITS
  1196 2BA6 20 A8 27			jsr SYSTEM.HEXSTR
  1197 					@printSTRING SYSTEM.HEXSTR.RESULT
  1197 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  1197 2BA9 AC B8 27		 LDY SYSTEM.HEXSTR.RESULT+1
  1197 2BAC AD B7 27		 LDA SYSTEM.HEXSTR.RESULT
  1197 2BAF 20 C0 25		 JSR @PRINTSTRING
  1198
  1199 				; optimize OK (detect.pas), line = 52
  1200
  1201 2BB2 AD 85 2E			lda P
  1202 2BB5 10 07			jpl l_02D7
  1203 					@printSTRING #CODEORIGIN+$0043
  1203 				 LDY> CODEORIGIN+$0043\ LDA< CODEORIGIN+$0043\ JSR @PRINTSTRING
  1203 2BB7 A0 20		 LDY> CODEORIGIN+$0043
  1203 2BB9 A9 43		 LDA< CODEORIGIN+$0043
  1203 2BBB 20 C0 25		 JSR @PRINTSTRING
  1204 2BBE			l_02D7
  1205 2BBE			l_02A3
  1206
  1207 				; optimize FAIL ('@print', detect.pas), line = 54
  1208
  1209 2BBE 20 B2 25			@printEOL
  1210
  1211 				; optimize FAIL ('@print', detect.pas), line = 75
  1212
  1213 					@printSTRING #CODEORIGIN+$004B
  1213 				 LDY> CODEORIGIN+$004B\ LDA< CODEORIGIN+$004B\ JSR @PRINTSTRING
  1213 2BC1 A0 20		 LDY> CODEORIGIN+$004B
  1213 2BC3 A9 4B		 LDA< CODEORIGIN+$004B
  1213 2BC5 20 C0 25		 JSR @PRINTSTRING
  1214
  1215 				; optimize FAIL ('MISC.DETECTANTIC', detect.pas), line = 77
  1216
  1217 2BC8 20 CB 27			jsr MISC.DETECTANTIC
  1218 2BCB AD 72 2E			lda MISC.DETECTANTIC.RESULT
  1219 2BCE 8D 89 2E			sta @CASETMP_0004
  1220 2BD1 C9 01			cmp #$01
  1221 2BD3 D0 0D			jne l_02EB
  1222 				@
  1223
  1224 				; optimize FAIL ('@print', detect.pas), line = 78
  1225
  1226 					@printSTRING #CODEORIGIN+$0056
  1226 				 LDY> CODEORIGIN+$0056\ LDA< CODEORIGIN+$0056\ JSR @PRINTSTRING
  1226 2BD5 A0 20		 LDY> CODEORIGIN+$0056
  1226 2BD7 A9 56		 LDA< CODEORIGIN+$0056
  1226 2BD9 20 C0 25		 JSR @PRINTSTRING
  1227 2BDC 20 B2 25			@printEOL
  1228
  1229 2BDF 4C F0 2B			jmp a_0004
  1230 2BE2			l_02EB
  1231 2BE2 C9 00			cmp #$00
  1232 2BE4 D0 0A			jne l_02F7
  1233 				@
  1234
  1235 				; optimize FAIL ('@print', detect.pas), line = 79
  1236
  1237 					@printSTRING #CODEORIGIN+$005B
  1237 				 LDY> CODEORIGIN+$005B\ LDA< CODEORIGIN+$005B\ JSR @PRINTSTRING
  1237 2BE6 A0 20		 LDY> CODEORIGIN+$005B
  1237 2BE8 A9 5B		 LDA< CODEORIGIN+$005B
  1237 2BEA 20 C0 25		 JSR @PRINTSTRING
  1238 2BED 20 B2 25			@printEOL
  1239
  1240 2BF0			l_02F7
  1241 2BF0			a_0004
  1242
  1243 				; optimize FAIL ('@print', detect.pas), line = 87
  1244
  1245 					@printSTRING #CODEORIGIN+$0061
  1245 				 LDY> CODEORIGIN+$0061\ LDA< CODEORIGIN+$0061\ JSR @PRINTSTRING
  1245 2BF0 A0 20		 LDY> CODEORIGIN+$0061
  1245 2BF2 A9 61		 LDA< CODEORIGIN+$0061
  1245 2BF4 20 C0 25		 JSR @PRINTSTRING
  1246
  1247 				; optimize FAIL ('MISC.DETECTBASIC', detect.pas), line = 89
  1248
  1249 2BF7 20 BD 2A			jsr MISC.DETECTBASIC
  1250 2BFA AD 81 2E			lda MISC.DETECTBASIC.RESULT
  1251 2BFD 8D 8A 2E			sta @CASETMP_0005
  1252 2C00 C9 00			cmp #$00
  1253 2C02 D0 0D			jne l_030C
  1254 				@
  1255
  1256 				; optimize FAIL ('@print', detect.pas), line = 90
  1257
  1258 					@printSTRING #CODEORIGIN+$006C
  1258 				 LDY> CODEORIGIN+$006C\ LDA< CODEORIGIN+$006C\ JSR @PRINTSTRING
  1258 2C04 A0 20		 LDY> CODEORIGIN+$006C
  1258 2C06 A9 6C		 LDA< CODEORIGIN+$006C
  1258 2C08 20 C0 25		 JSR @PRINTSTRING
  1259 2C0B 20 B2 25			@printEOL
  1260
  1261 2C0E 4C 4E 2C			jmp a_0005
  1262 2C11			l_030C
  1263 2C11 C9 A2			cmp #$A2
  1264 2C13 D0 0D			jne l_0318
  1265 				@
  1266
  1267 				; optimize FAIL ('@print', detect.pas), line = 91
  1268
  1269 					@printSTRING #CODEORIGIN+$0075
  1269 				 LDY> CODEORIGIN+$0075\ LDA< CODEORIGIN+$0075\ JSR @PRINTSTRING
  1269 2C15 A0 20		 LDY> CODEORIGIN+$0075
  1269 2C17 A9 75		 LDA< CODEORIGIN+$0075
  1269 2C19 20 C0 25		 JSR @PRINTSTRING
  1270 2C1C 20 B2 25			@printEOL
  1271
  1272 2C1F 4C 4E 2C			jmp a_0005
  1273 2C22			l_0318
  1274 2C22 C9 60			cmp #$60
  1275 2C24 D0 0D			jne l_0324
  1276 				@
  1277
  1278 				; optimize FAIL ('@print', detect.pas), line = 92
  1279
  1280 					@printSTRING #CODEORIGIN+$0088
  1280 				 LDY> CODEORIGIN+$0088\ LDA< CODEORIGIN+$0088\ JSR @PRINTSTRING
  1280 2C26 A0 20		 LDY> CODEORIGIN+$0088
  1280 2C28 A9 88		 LDA< CODEORIGIN+$0088
  1280 2C2A 20 C0 25		 JSR @PRINTSTRING
  1281 2C2D 20 B2 25			@printEOL
  1282
  1283 2C30 4C 4E 2C			jmp a_0005
  1284 2C33			l_0324
  1285 2C33 C9 EA			cmp #$EA
  1286 2C35 D0 0D			jne l_0330
  1287 				@
  1288
  1289 				; optimize FAIL ('@print', detect.pas), line = 93
  1290
  1291 					@printSTRING #CODEORIGIN+$009B
  1291 				 LDY> CODEORIGIN+$009B\ LDA< CODEORIGIN+$009B\ JSR @PRINTSTRING
  1291 2C37 A0 20		 LDY> CODEORIGIN+$009B
  1291 2C39 A9 9B		 LDA< CODEORIGIN+$009B
  1291 2C3B 20 C0 25		 JSR @PRINTSTRING
  1292 2C3E 20 B2 25			@printEOL
  1293
  1294 2C41 4C 4E 2C			jmp a_0005
  1295 2C44			l_0330
  1296
  1297 				; optimize FAIL ('@print', detect.pas), line = 95
  1298
  1299 					@printSTRING #CODEORIGIN+$00AE
  1299 				 LDY> CODEORIGIN+$00AE\ LDA< CODEORIGIN+$00AE\ JSR @PRINTSTRING
  1299 2C44 A0 20		 LDY> CODEORIGIN+$00AE
  1299 2C46 A9 AE		 LDA< CODEORIGIN+$00AE
  1299 2C48 20 C0 25		 JSR @PRINTSTRING
  1300 2C4B 20 B2 25			@printEOL
  1301 2C4E			a_0005
  1302
  1303 				; optimize FAIL ('@print', detect.pas), line = 103
  1304
  1305 					@printSTRING #CODEORIGIN+$00B7
  1305 				 LDY> CODEORIGIN+$00B7\ LDA< CODEORIGIN+$00B7\ JSR @PRINTSTRING
  1305 2C4E A0 20		 LDY> CODEORIGIN+$00B7
  1305 2C50 A9 B7		 LDA< CODEORIGIN+$00B7
  1305 2C52 20 C0 25		 JSR @PRINTSTRING
  1306
  1307 				; optimize OK (detect.pas), line = 105
  1308
  1309 2C55 AD F7 FF			lda MISC.DETECTOS
  1310 2C58 8D 8B 2E			sta @CASETMP_0006
  1311 2C5B C9 01			cmp #$01
  1312 2C5D D0 0D			jne l_034C
  1313 				@
  1314
  1315 				; optimize FAIL ('@print', detect.pas), line = 106
  1316
  1317 					@printSTRING #CODEORIGIN+$00C2
  1317 				 LDY> CODEORIGIN+$00C2\ LDA< CODEORIGIN+$00C2\ JSR @PRINTSTRING
  1317 2C5F A0 20		 LDY> CODEORIGIN+$00C2
  1317 2C61 A9 C2		 LDA< CODEORIGIN+$00C2
  1317 2C63 20 C0 25		 JSR @PRINTSTRING
  1318 2C66 20 B2 25			@printEOL
  1319
  1320 2C69 4C 12 2D			jmp a_0006
  1321 2C6C			l_034C
  1322 2C6C C9 02			cmp #$02
  1323 2C6E D0 0D			jne l_0358
  1324 				@
  1325
  1326 				; optimize FAIL ('@print', detect.pas), line = 107
  1327
  1328 					@printSTRING #CODEORIGIN+$00D2
  1328 				 LDY> CODEORIGIN+$00D2\ LDA< CODEORIGIN+$00D2\ JSR @PRINTSTRING
  1328 2C70 A0 20		 LDY> CODEORIGIN+$00D2
  1328 2C72 A9 D2		 LDA< CODEORIGIN+$00D2
  1328 2C74 20 C0 25		 JSR @PRINTSTRING
  1329 2C77 20 B2 25			@printEOL
  1330
  1331 2C7A 4C 12 2D			jmp a_0006
  1332 2C7D			l_0358
  1333 2C7D C9 03			cmp #$03
  1334 2C7F D0 0D			jne l_0364
  1335 				@
  1336
  1337 				; optimize FAIL ('@print', detect.pas), line = 108
  1338
  1339 					@printSTRING #CODEORIGIN+$00E2
  1339 				 LDY> CODEORIGIN+$00E2\ LDA< CODEORIGIN+$00E2\ JSR @PRINTSTRING
  1339 2C81 A0 20		 LDY> CODEORIGIN+$00E2
  1339 2C83 A9 E2		 LDA< CODEORIGIN+$00E2
  1339 2C85 20 C0 25		 JSR @PRINTSTRING
  1340 2C88 20 B2 25			@printEOL
  1341
  1342 2C8B 4C 12 2D			jmp a_0006
  1343 2C8E			l_0364
  1344 2C8E C9 04			cmp #$04
  1345 2C90 D0 0D			jne l_0370
  1346 				@
  1347
  1348 				; optimize FAIL ('@print', detect.pas), line = 109
  1349
  1350 					@printSTRING #CODEORIGIN+$00F2
  1350 				 LDY> CODEORIGIN+$00F2\ LDA< CODEORIGIN+$00F2\ JSR @PRINTSTRING
  1350 2C92 A0 20		 LDY> CODEORIGIN+$00F2
  1350 2C94 A9 F2		 LDA< CODEORIGIN+$00F2
  1350 2C96 20 C0 25		 JSR @PRINTSTRING
  1351 2C99 20 B2 25			@printEOL
  1352
  1353 2C9C 4C 12 2D			jmp a_0006
  1354 2C9F			l_0370
  1355 2C9F C9 0A			cmp #$0A
  1356 2CA1 D0 0D			jne l_037C
  1357 				@
  1358
  1359 				; optimize FAIL ('@print', detect.pas), line = 110
  1360
  1361 					@printSTRING #CODEORIGIN+$0107
  1361 				 LDY> CODEORIGIN+$0107\ LDA< CODEORIGIN+$0107\ JSR @PRINTSTRING
  1361 2CA3 A0 21		 LDY> CODEORIGIN+$0107
  1361 2CA5 A9 07		 LDA< CODEORIGIN+$0107
  1361 2CA7 20 C0 25		 JSR @PRINTSTRING
  1362 2CAA 20 B2 25			@printEOL
  1363
  1364 2CAD 4C 12 2D			jmp a_0006
  1365 2CB0			l_037C
  1366 2CB0 C9 0B			cmp #$0B
  1367 2CB2 D0 0D			jne l_0388
  1368 				@
  1369
  1370 				; optimize FAIL ('@print', detect.pas), line = 111
  1371
  1372 					@printSTRING #CODEORIGIN+$0118
  1372 				 LDY> CODEORIGIN+$0118\ LDA< CODEORIGIN+$0118\ JSR @PRINTSTRING
  1372 2CB4 A0 21		 LDY> CODEORIGIN+$0118
  1372 2CB6 A9 18		 LDA< CODEORIGIN+$0118
  1372 2CB8 20 C0 25		 JSR @PRINTSTRING
  1373 2CBB 20 B2 25			@printEOL
  1374
  1375 2CBE 4C 12 2D			jmp a_0006
  1376 2CC1			l_0388
  1377 2CC1 C9 3B			cmp #$3B
  1378 2CC3 D0 0D			jne l_0394
  1379 				@
  1380
  1381 				; optimize FAIL ('@print', detect.pas), line = 112
  1382
  1383 					@printSTRING #CODEORIGIN+$0129
  1383 				 LDY> CODEORIGIN+$0129\ LDA< CODEORIGIN+$0129\ JSR @PRINTSTRING
  1383 2CC5 A0 21		 LDY> CODEORIGIN+$0129
  1383 2CC7 A9 29		 LDA< CODEORIGIN+$0129
  1383 2CC9 20 C0 25		 JSR @PRINTSTRING
  1384 2CCC 20 B2 25			@printEOL
  1385
  1386 2CCF 4C 12 2D			jmp a_0006
  1387 2CD2			l_0394
  1388 2CD2 C9 40			cmp #$40
  1389 2CD4 D0 0D			jne l_03A0
  1390 				@
  1391
  1392 				; optimize FAIL ('@print', detect.pas), line = 113
  1393
  1394 					@printSTRING #CODEORIGIN+$013A
  1394 				 LDY> CODEORIGIN+$013A\ LDA< CODEORIGIN+$013A\ JSR @PRINTSTRING
  1394 2CD6 A0 21		 LDY> CODEORIGIN+$013A
  1394 2CD8 A9 3A		 LDA< CODEORIGIN+$013A
  1394 2CDA 20 C0 25		 JSR @PRINTSTRING
  1395 2CDD 20 B2 25			@printEOL
  1396
  1397 2CE0 4C 12 2D			jmp a_0006
  1398 2CE3			l_03A0
  1399 2CE3 C9 FD			cmp #$FD
  1400 2CE5 D0 0D			jne l_03AC
  1401 				@
  1402
  1403 				; optimize FAIL ('@print', detect.pas), line = 114
  1404
  1405 					@printSTRING #CODEORIGIN+$0148
  1405 				 LDY> CODEORIGIN+$0148\ LDA< CODEORIGIN+$0148\ JSR @PRINTSTRING
  1405 2CE7 A0 21		 LDY> CODEORIGIN+$0148
  1405 2CE9 A9 48		 LDA< CODEORIGIN+$0148
  1405 2CEB 20 C0 25		 JSR @PRINTSTRING
  1406 2CEE 20 B2 25			@printEOL
  1407
  1408 2CF1 4C 12 2D			jmp a_0006
  1409 2CF4			l_03AC
  1410
  1411 				; optimize OK (detect.pas), line = 116
  1412
  1413 2CF4 AD 01 D3			lda ATARI.PORTB
  1414 2CF7 29 01			and #$01
  1415 2CF9 D0 0D			jne l_03C9
  1416
  1417 				; optimize FAIL ('@print', detect.pas), line = 117
  1418
  1419 					@printSTRING #CODEORIGIN+$006C
  1419 				 LDY> CODEORIGIN+$006C\ LDA< CODEORIGIN+$006C\ JSR @PRINTSTRING
  1419 2CFB A0 20		 LDY> CODEORIGIN+$006C
  1419 2CFD A9 6C		 LDA< CODEORIGIN+$006C
  1419 2CFF 20 C0 25		 JSR @PRINTSTRING
  1420 2D02 20 B2 25			@printEOL
  1421 2D05 4C 12 2D			jmp l_03D6
  1422 2D08			l_03C9
  1423
  1424 				; optimize FAIL ('@print', detect.pas), line = 119
  1425
  1426 					@printSTRING #CODEORIGIN+$00AE
  1426 				 LDY> CODEORIGIN+$00AE\ LDA< CODEORIGIN+$00AE\ JSR @PRINTSTRING
  1426 2D08 A0 20		 LDY> CODEORIGIN+$00AE
  1426 2D0A A9 AE		 LDA< CODEORIGIN+$00AE
  1426 2D0C 20 C0 25		 JSR @PRINTSTRING
  1427 2D0F 20 B2 25			@printEOL
  1428 2D12			l_03D6
  1429 2D12			a_0006
  1430
  1431 				; optimize FAIL ('@print', detect.pas), line = 127
  1432
  1433 					@printSTRING #CODEORIGIN+$0156
  1433 				 LDY> CODEORIGIN+$0156\ LDA< CODEORIGIN+$0156\ JSR @PRINTSTRING
  1433 2D12 A0 21		 LDY> CODEORIGIN+$0156
  1433 2D14 A9 56		 LDA< CODEORIGIN+$0156
  1433 2D16 20 C0 25		 JSR @PRINTSTRING
  1434 2D19 20 7C 28			jsr MISC.DETECTSTEREO
  1435 2D1C E8				inx
  1436 2D1D AD 75 2E 95 96		mva MISC.DETECTSTEREO.RESULT :STACKORIGIN,x
  1437 2D22 20 EF 25			jsr @printBOOLEAN
  1438 2D25 CA				dex
  1439 2D26 20 B2 25			@printEOL
  1440
  1441 				; optimize FAIL ('@print', detect.pas), line = 134
  1442
  1443 					@printSTRING #CODEORIGIN+$0161
  1443 				 LDY> CODEORIGIN+$0161\ LDA< CODEORIGIN+$0161\ JSR @PRINTSTRING
  1443 2D29 A0 21		 LDY> CODEORIGIN+$0161
  1443 2D2B A9 61		 LDA< CODEORIGIN+$0161
  1443 2D2D 20 C0 25		 JSR @PRINTSTRING
  1444 2D30 20 4D 2A			jsr MISC.DETECTMAPRAM
  1445 2D33 E8				inx
  1446 2D34 AD 80 2E 95 96		mva MISC.DETECTMAPRAM.RESULT :STACKORIGIN,x
  1447 2D39 20 EF 25			jsr @printBOOLEAN
  1448 2D3C CA				dex
  1449 2D3D 20 B2 25			@printEOL
  1450
  1451 				; optimize OK (detect.pas), line = 141
  1452
  1453 2D40 AD 87 2E			lda CPU
  1454 2D43 10 3E			jpl l_0406
  1455
  1456 				; optimize FAIL ('@print', detect.pas), line = 142
  1457
  1458 					@printSTRING #CODEORIGIN+$016C
  1458 				 LDY> CODEORIGIN+$016C\ LDA< CODEORIGIN+$016C\ JSR @PRINTSTRING
  1458 2D45 A0 21		 LDY> CODEORIGIN+$016C
  1458 2D47 A9 6C		 LDA< CODEORIGIN+$016C
  1458 2D49 20 C0 25		 JSR @PRINTSTRING
  1459 2D4C 20 F3 27			jsr MISC.DETECTHIGHMEM
  1460 2D4F E8				inx
  1461 2D50 AD 73 2E 95 96		mva MISC.DETECTHIGHMEM.RESULT :STACKORIGIN,x
  1462 2D55 AD 74 2E 95 A6		mva MISC.DETECTHIGHMEM.RESULT+1 :STACKORIGIN+STACKWIDTH,x
  1463 2D5A E8				inx
  1464 2D5B A9 FF 95 96			mva #$FF :STACKORIGIN,x
  1465 2D5F A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1466 2D63 20 8E 22			jsr andAX_CX
  1467 2D66 A9 40 95 96			mva #$40 :STACKORIGIN,x
  1468 2D6A A9 00 95 A6			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1469 2D6E 20 E5 23			jsr imulWORD
  1470 2D71 20 CD 22			jsr movaBX_EAX
  1471 2D74 CA				dex
  1472 2D75 20 25 26			jsr @printCARD
  1473 2D78 CA				dex
  1474 					@printSTRING #CODEORIGIN+$0177
  1474 				 LDY> CODEORIGIN+$0177\ LDA< CODEORIGIN+$0177\ JSR @PRINTSTRING
  1474 2D79 A0 21		 LDY> CODEORIGIN+$0177
  1474 2D7B A9 77		 LDA< CODEORIGIN+$0177
  1474 2D7D 20 C0 25		 JSR @PRINTSTRING
  1475 2D80 20 B2 25			@printEOL
  1476 2D83			l_0406
  1477
  1478 				; optimize FAIL ('MISC.DETECTMEM', detect.pas), line = 149
  1479
  1480 2D83 20 A9 29			jsr MISC.DETECTMEM
  1481 2D86 AD 7F 2E			lda MISC.DETECTMEM.RESULT
  1482 2D89 8D 83 2E			sta BNK
  1483
  1484 				; optimize FAIL ('@print', detect.pas), line = 150
  1485
  1486 					@printSTRING #CODEORIGIN+$017B
  1486 				 LDY> CODEORIGIN+$017B\ LDA< CODEORIGIN+$017B\ JSR @PRINTSTRING
  1486 2D8C A0 21		 LDY> CODEORIGIN+$017B
  1486 2D8E A9 7B		 LDA< CODEORIGIN+$017B
  1486 2D90 20 C0 25		 JSR @PRINTSTRING
  1487 2D93 E8				inx
  1488 2D94 AD 83 2E 95 96		mva BNK :STACKORIGIN,x
  1489 2D99 20 0C 26			jsr @printSHORTINT
  1490 2D9C CA				dex
  1491 					@printSTRING #CODEORIGIN+$0186
  1491 				 LDY> CODEORIGIN+$0186\ LDA< CODEORIGIN+$0186\ JSR @PRINTSTRING
  1491 2D9D A0 21		 LDY> CODEORIGIN+$0186
  1491 2D9F A9 86		 LDA< CODEORIGIN+$0186
  1491 2DA1 20 C0 25		 JSR @PRINTSTRING
  1492 2DA4 20 B2 25			@printEOL
  1493
  1494 				; optimize OK (detect.pas), line = 152
  1495
  1496 2DA7 A9 00			lda #$00
  1497 2DA9 8D 82 2E			sta I
  1498 2DAC AC 83 2E			ldy BNK
  1499 2DAF 88				dey
  1500 2DB0 8C B8 2D			sty @FORTMP_043B_0
  1501
  1502 2DB3			l_043E
  1503 				; --- ForToDoCondition
  1504 2DB3 AD 82 2E			lda I
  1505 2DB6 38 E9 00			sub @FORTMP_043B_0:#$00
  1506 2DB9 50 02			svc
  1507 2DBB 49 80			eor #$80
  1508 2DBD 30 05			bmi *+7
  1509 2DBF F0 03			beq *+5
  1510 2DC1 4C 11 2E			jmp l_044C
  1511
  1512 				; optimize FAIL ('divmulSHORTINT.MOD', detect.pas), line = 154
  1513
  1514 2DC4 E8				inx
  1515 2DC5 AD 82 2E 95 96		mva I :STACKORIGIN,x
  1516 2DCA E8				inx
  1517 2DCB A9 08 95 96			mva #$08 :STACKORIGIN,x
  1518 2DCF 20 EF 22			jsr divmulSHORTINT.MOD
  1519 2DD2 CA				dex
  1520 2DD3 CA				dex
  1521 2DD4 B5 97			lda :STACKORIGIN+1,x
  1522 2DD6 D0 0A			jne l_0467
  1523 				@
  1524 2DD8 20 B2 25			@printEOL
  1525 					@printSTRING #CODEORIGIN+$018E
  1525 				 LDY> CODEORIGIN+$018E\ LDA< CODEORIGIN+$018E\ JSR @PRINTSTRING
  1525 2DDB A0 21		 LDY> CODEORIGIN+$018E
  1525 2DDD A9 8E		 LDA< CODEORIGIN+$018E
  1525 2DDF 20 C0 25		 JSR @PRINTSTRING
  1526 2DE2			l_0467
  1527
  1528 				; optimize OK (detect.pas), line = 156
  1529
  1530 2DE2 AC 82 2E			ldy I
  1531 2DE5 B9 01 01			lda MISC.adr.BANKS,y
  1532 2DE8 85 8A			sta SYSTEM.HEXSTR.VALUE
  1533 2DEA A9 00			lda #$00
  1534 2DEC 85 8B			sta SYSTEM.HEXSTR.VALUE+1
  1535 2DEE 85 8C			sta SYSTEM.HEXSTR.VALUE+2
  1536 2DF0 85 8D			sta SYSTEM.HEXSTR.VALUE+3
  1537 2DF2 A9 02			lda #$02
  1538 2DF4 85 8E			sta SYSTEM.HEXSTR.DIGITS
  1539 2DF6 20 A8 27			jsr SYSTEM.HEXSTR
  1540 					@printSTRING SYSTEM.HEXSTR.RESULT
  1540 				 LDY SYSTEM.HEXSTR.RESULT+1\ LDA SYSTEM.HEXSTR.RESULT\ JSR @PRINTSTRING
  1540 2DF9 AC B8 27		 LDY SYSTEM.HEXSTR.RESULT+1
  1540 2DFC AD B7 27		 LDA SYSTEM.HEXSTR.RESULT
  1540 2DFF 20 C0 25		 JSR @PRINTSTRING
  1541 					@print #$20
  1541 				 LDY# $20\ JSR @PRINT
  1541 2E02 A0 20		 LDY# $20
  1541 2E04 20 B7 25		 JSR @PRINT
  1542
  1543 				; --- ForToDoEpilog
  1544 2E07 EE 82 2E			inc I
  1545 2E0A AD 82 2E			lda I
  1546 2E0D C9 80			cmp #$80
  1547 2E0F D0 A2			jne l_043E
  1548 2E11			l_044C
  1549
  1550 				; optimize FAIL ('@print', detect.pas), line = 160
  1551
  1552 					@print #$9B
  1552 				 LDY# $9B\ JSR @PRINT
  1552 2E11 A0 9B		 LDY# $9B
  1552 2E13 20 B7 25		 JSR @PRINT
  1553 2E16 20 B2 25			@printEOL
  1554
  1555 				; optimize FAIL ('@print', detect.pas), line = 161
  1556
  1557 					@printSTRING #CODEORIGIN+$0194
  1557 				 LDY> CODEORIGIN+$0194\ LDA< CODEORIGIN+$0194\ JSR @PRINTSTRING
  1557 2E19 A0 21		 LDY> CODEORIGIN+$0194
  1557 2E1B A9 94		 LDA< CODEORIGIN+$0194
  1557 2E1D 20 C0 25		 JSR @PRINTSTRING
  1558 2E20 20 B2 25			@printEOL
  1559
  1560 				; --- RepeatUntilProlog
  1561 2E23			l_0482
  1562
  1563 				; optimize FAIL ('CRT.KEYPRESSED', detect.pas), line = 163
  1564
  1565 2E23 20 BD 27			jsr CRT.KEYPRESSED
  1566 2E26 AD 71 2E			lda CRT.KEYPRESSED.RESULT
  1567 2E29 F0 F8			jeq l_0482
  1568
  1569 				; ------------------------------------------------------------
  1570
  1571 = 2E82			I	= DATAORIGIN+$003E
  1572 = 2E83			BNK	= DATAORIGIN+$003F
  1573 = 2E84			A	= DATAORIGIN+$0040
  1574 = 2E85			P	= DATAORIGIN+$0041
  1575 = 2E87			CPU	= DATAORIGIN+$0043
  1576 = 2E88			@CASETMP_0003	= DATAORIGIN+$0044
  1577 = 2E89			@CASETMP_0004	= DATAORIGIN+$0045
  1578 = 2E8A			@CASETMP_0005	= DATAORIGIN+$0046
  1579 = 2E8B			@CASETMP_0006	= DATAORIGIN+$0047
  1580 2E2B			@exit
  1581
  1582 2E2B A2 00		@halt	ldx #$00
  1583 2E2D 9A				txs
  1584 					.ifdef MAIN.@DEFINES.ROMOFF
  1585 					inc portb
  1586 					.fi
  1587
  1588 2E2E A0 01			ldy #$01
  1589
  1590 2E30 60				rts
  1591
  1592 				; ------------------------------------------------------------
  1593
  1594 2E31 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  1595
  1596 				; ------------------------------------------------------------
  1597
  1598 2E41			.local	@DEFINES
  1599 2E41			ATARI
  1600 				.endl
  1601
  1602 2E41			.local	@RESOURCE
  1603 				.endl
  1604
  1605 				.endl							; MAIN
  1606
  1607 				; ------------------------------------------------------------
  1608 				; ------------------------------------------------------------
  1609
  1610 				.macro	UNITINITIALIZATION
  1611 				
  1612 					.ifdef MAIN.SYSTEM.@UnitInit
  1613 					jsr MAIN.SYSTEM.@UnitInit
  1614 					.fi
  1615 				
  1616 					.ifdef MAIN.ATARI.@UnitInit
  1617 					jsr MAIN.ATARI.@UnitInit
  1618 					.fi
  1619 				
  1620 					.ifdef MAIN.CRT.@UnitInit
  1621 					jsr MAIN.CRT.@UnitInit
  1622 					.fi
  1623 				
  1624 					.ifdef MAIN.MISC.@UnitInit
  1625 					jsr MAIN.MISC.@UnitInit
  1626 					.fi
  1627 				.endm
  1628
  1629 				; ------------------------------------------------------------
  1630
  1631 					ift .SIZEOF(MAIN.SYSTEM) > 0
  1632 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  1632 				SYSTEM: $27A8..$27BC
  1633 					eif
  1634
  1635 					ift .SIZEOF(MAIN.ATARI) > 0
  1636 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  1637 					eif
  1638
  1639 					ift .SIZEOF(MAIN.CRT) > 0
  1640 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  1640 				CRT: $27BD..$27CA
  1641 					eif
  1642
  1643 					ift .SIZEOF(MAIN.MISC) > 0
  1644 					.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
  1644 				MISC: $27CB..$2AD9
  1645 					eif
  1646
  1647 					.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1
  1647 				CODE: $2000..$2E40
  1648
  1649 				; ------------------------------------------------------------
  1650
  1651 2E41				.align $0004
  1652
  1653 2E44			DATAORIGIN
  1654 2E44-2E49> 28 00 18 00 + .by  $28 $00 $18 $00 $2D $0C
  1655
  1656 = 0006			VARINITSIZE	= *-DATAORIGIN
  1657 = 0049			VARDATASIZE	= 73
  1658
  1659 = 2E8D			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  1660
  1661 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  1661 				DATA: $2E44..$2E8D
  1662
  1663 02E0-02E1> 80 27			run START
  1664
  1665 				; ------------------------------------------------------------
  1666
  1667 				.macro	STATICDATA
  1668 				.by  $09 $20 $20 $20 $20 $43 $50 $55  $3A $20 $00 $04 $36 $35 $30 $32  $00 $05 $36 $35 $63 $30 $32 $00
  1669 				.by  $05 $36 $35 $38 $31 $36 $00 $04  $20 $4D $48 $7A $00 $09 $20 $20  $20 $56 $42 $58 $45 $3A $20 $00
  1670 				.by  $03 $20 $28 $24 $00 $0C $30 $30  $29 $2C $20 $43 $4F $52 $45 $20  $31 $2E $00 $06 $20 $52 $41 $4D
  1671 				.by  $42 $4F $00 $09 $20 $20 $41 $4E  $54 $49 $43 $3A $20 $00 $03 $50  $41 $4C $00 $04 $4E $54 $53 $43
  1672 				.by  $00 $09 $20 $20 $42 $61 $73 $69  $63 $3A $20 $00 $07 $52 $4F $4D  $20 $4F $46 $46 $00 $11 $41 $74
  1673 				.by  $61 $72 $69 $20 $42 $61 $73 $69  $63 $20 $52 $65 $76 $2E $41 $00  $11 $41 $74 $61 $72 $69 $20 $42
  1674 				.by  $61 $73 $69 $63 $20 $52 $65 $76  $2E $42 $00 $11 $41 $74 $61 $72  $69 $20 $42 $61 $73 $69 $63 $20
  1675 				.by  $52 $65 $76 $2E $43 $00 $07 $55  $4E $4B $4E $4F $57 $4E $00 $09  $20 $53 $79 $73 $74 $65 $6D $3A
  1676 				.by  $20 $00 $0E $58 $4C $2F $58 $45  $20 $4F $53 $20 $52 $65 $76 $2E  $31 $00 $0E $58 $4C $2F $58 $45
  1677 				.by  $20 $4F $53 $20 $52 $65 $76 $2E  $32 $00 $0E $58 $4C $2F $58 $45  $20 $4F $53 $20 $52 $65 $76 $2E
  1678 				.by  $33 $00 $13 $58 $4C $2F $58 $45  $2F $58 $45 $47 $53 $20 $4F $53  $20 $52 $65 $76 $2E $34 $00 $0F
  1679 				.by  $58 $4C $2F $58 $45 $20 $4F $53  $20 $52 $65 $76 $2E $31 $30 $00  $0F $58 $4C $2F $58 $45 $20 $4F
  1680 				.by  $53 $20 $52 $65 $76 $2E $31 $31  $00 $0F $58 $4C $2F $58 $45 $20  $4F $53 $20 $52 $65 $76 $2E $33
  1681 				.by  $42 $00 $0C $51 $4D $45 $47 $2B  $4F $53 $20 $34 $2E $30 $34 $00  $0C $51 $4D $45 $47 $2B $4F $53
  1682 				.by  $20 $52 $43 $30 $31 $00 $09 $20  $53 $74 $65 $72 $65 $6F $3A $20  $00 $09 $20 $4D $61 $70 $52 $61
  1683 				.by  $6D $3A $20 $00 $09 $48 $69 $67  $68 $4D $65 $6D $3A $20 $00 $02  $4B $42 $00 $09 $20 $45 $78 $74
  1684 				.by  $4D $65 $6D $3A $20 $00 $06 $20  $62 $61 $6E $6B $73 $00 $04 $7F  $1F $1F $1F $00 $0D $50 $72 $65
  1685 				.by  $73 $73 $20 $61 $6E $79 $20 $6B  $65 $79 $00
  1686 				.endm
  1687
  1688 					end
