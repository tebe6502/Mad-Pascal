; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2021/06/07] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.endif

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',fxptr,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

	mwa #PROGRAMSTACK psptr

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_007A

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex

; ---------------------  ASM Block 001  ---------------------

	ldy #0
	mva (edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= edx
RESULT	= DATAORIGIN+$000B

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; ---------------------  ASM Block 053  ---------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	beq skp
	iny		; true

;	sty kbcodes

skp	sty Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$000D

@VarData	= RESULT
@VarDataSize	= 1

	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000C
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

.local	EXEC_SIO					; PROCEDURE

; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 37

	lda SIZE
	sta L

; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 38

	lda SIZE+1
	sta H

; ---------------------  ASM Block 060  ---------------------


     
          lda  device
          sta  DDEVIC
          lda  dunit
          sta  DUNIT
          lda  command
          sta  DCOMND
          lda  aux1
          sta  DAUX1
          lda  aux2
          sta  DAUX2
          lda  direction
          sta  DSTATS
          lda  <buffer
          sta  DBUFLO
          lda  >buffer
          sta  DBUFHI
          lda  timeout
          sta  DTIMLO
          lda  l
          sta  DBYTLO
          lda  h
          sta  DBYTHI
          jsr  $E459
          
          sty  SIOresult
     
     

; ------------------------------------------------------------

DEVICE	= DATAORIGIN+$0012
DUNIT	= DATAORIGIN+$0013
COMMAND	= DATAORIGIN+$0014
AUX1	= DATAORIGIN+$0015
AUX2	= DATAORIGIN+$0016
DIRECTION	= DATAORIGIN+$0017
TIMEOUT	= DATAORIGIN+$0018
SIZE	= DATAORIGIN+$0019
L	= DATAORIGIN+$001B
H	= DATAORIGIN+$001C

@VarData	= DEVICE
@VarDataSize	= 11

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_007A

; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 74

	lda #$01
	sta EXEC_SIO.SIZE
	lda #$00
	sta EXEC_SIO.SIZE+1
	lda #$06
	sta EXEC_SIO.TIMEOUT
	lda #$40
	sta EXEC_SIO.DIRECTION
	lda #$00
	sta EXEC_SIO.AUX2
	sta EXEC_SIO.AUX1
	sta EXEC_SIO.COMMAND
	sta EXEC_SIO.DUNIT
	lda #$72
	sta EXEC_SIO.DEVICE
	jsr EXEC_SIO

; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 76

	lda SIORESULT
	cmp #$01
	jne l_00FD

; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 78

	@printSTRING #CODEORIGIN+$0000
	@printEOL

; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 80

	ldy BUFFER+1
	sty :bp+1
	ldy BUFFER
	lda (:bp),y
	sta SIO2SDRESULT

; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 82

	sta @CASETMP_0003
	cmp #$00
	jne l_0112
@

; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 84

	@printSTRING #CODEORIGIN+$0010
	@printEOL

	jmp a_0003
l_0112
	cmp #$01
	jne l_011E
@

; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 85

	@printSTRING #CODEORIGIN+$0021
	@printEOL

l_011E
a_0003

; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 89

	lda #$01
	sta EXEC_SIO.SIZE
	lda #$00
	sta EXEC_SIO.SIZE+1
	lda #$06
	sta EXEC_SIO.TIMEOUT
	lda #$40
	sta EXEC_SIO.DIRECTION
	lda #$00
	sta EXEC_SIO.AUX2
	sta EXEC_SIO.AUX1
	lda #$11
	sta EXEC_SIO.COMMAND
	lda #$00
	sta EXEC_SIO.DUNIT
	lda #$72
	sta EXEC_SIO.DEVICE
	jsr EXEC_SIO

; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 91

	lda SIORESULT
	cmp #$01
	jne l_0142

; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 93

	lda $8000
	lsr @
	lsr @
	lsr @
	lsr @
	sta MAJORVERSION

; optimize OK (test\tools\detect\sio2sd_detect.pas), line = 94

	lda $8000
	and #$0F
	sta MINORVERSION

; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 96

	@printSTRING #CODEORIGIN+$0032
	lda MAJORVERSION
	jsr @printBYTE._a
	@print #$2E
	lda MINORVERSION
	jsr @printBYTE._a
	@printEOL

; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 98

	@printEOL

; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 99

	@printSTRING #CODEORIGIN+$0042
	@printEOL
l_0142
	jmp l_017D
l_00FD

; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 104

	@printSTRING #CODEORIGIN+$005C
	@printEOL

; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 105

	@printEOL

; optimize FAIL ('@print', test\tools\detect\sio2sd_detect.pas), line = 106

	@printSTRING #CODEORIGIN+$0042
	@printEOL
l_017D

; --- RepeatUntilProlog
l_0184

; optimize FAIL ('CRT.KEYPRESSED', test\tools\detect\sio2sd_detect.pas), line = 109

	jsr CRT.KEYPRESSED
	dex
	lda :STACKORIGIN+1,x
	jeq l_0184

; ------------------------------------------------------------

SIO_NONE	= $00
SIO_READ	= $40
SIO_WRITE	= $80
SIO_READ_WRITE	= $C0
SIO2SD_STATUS	= $00
SIO2SD_GETVER	= $11
DDEVIC	= $0300
DUNIT	= $0301
DCOMND	= $0302
DSTATS	= $0303
DBUFLO	= $0304
DBUFHI	= $0305
DTIMLO	= $0306
DUNUSE	= $0307
DBYTLO	= $0308
DBYTHI	= $0309
DAUX1	= $030A
DAUX2	= $030B
SIORESULT	= DATAORIGIN+$000E
SIO2SDRESULT	= DATAORIGIN+$000F
MAJORVERSION	= DATAORIGIN+$0010
MINORVERSION	= DATAORIGIN+$0011
BUFFER	= $8000
@CASETMP_0003	= DATAORIGIN+$001D
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 30

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $0E $53 $49 $4F $32 $53 $44 $20  $70 $72 $65 $73 $65 $6E $74 $00  $0F $4E $6F $20 $63 $61 $72 $64
.by  $20 $69 $6E $20 $73 $6C $6F $74  $00 $0F $43 $61 $72 $64 $20 $69  $73 $20 $69 $6E $20 $73 $6C $6F
.by  $74 $00 $0E $46 $69 $72 $6D $77  $61 $72 $65 $20 $76 $65 $72 $2E  $20 $00 $18 $50 $72 $65 $73 $73
.by  $20 $61 $6E $79 $20 $6B $65 $79  $20 $74 $6F $20 $65 $78 $69 $74  $2E $2E $2E $00 $15 $53 $49 $4F
.by  $32 $53 $44 $20 $69 $73 $20 $6E  $6F $74 $20 $70 $72 $65 $73 $65  $6E $74 $00
.endm

	end
