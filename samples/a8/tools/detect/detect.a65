; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/04/11] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

zpage

.ifdef @vbxe_detect
fxptr	.ds 2						; VBXE pointer
.fi

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.BASICOFF
	org CODEORIGIN
	icl 'atari\basicoff.asm'
	ini CODEORIGIN
	.fi

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.fi

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_a8.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.fi

	ldx #$0F					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx skctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_01AA

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	HEXSTR						; FUNCTION | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000001  -------------------

	jsr @hexStr

;	@move #@buf Result #33
	ldy #256-33
	mva:rne @buf+33-256,y adr.Result+33-256,y+

@exit

; ------------------------------------------------------------

VALUE	= :EDX
DIGITS	= :ECX
adr.RESULT	= [DATAORIGIN+$000B] .array [33]
.var RESULT	= adr.RESULT .word

@VarData	= RESULT
@VarDataSize	= 33

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBTMP	= $E0
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_CHBASE	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
ITIM1	= $02
ITIM2	= $03
ITIM4	= $04
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
RND	= $D20A
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

IRQENS	= $10
RTCLOK	= $12
RTCLOK1	= $12
RTCLOK2	= $13
RTCLOK3	= $14
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
CONSOL	= $D01F
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
KBCODE	= $D209
IRQEN	= $D20E
SKSTAT	= $D20F
PORTA	= $D300
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E
NMIVEC	= $FFFA
RESETVEC	= $FFFC
IRQVEC	= $FFFE

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

.local	KEYPRESSED					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000056  -------------------

	ldy #$00	; false
	lda kbcodes
	cmp #$ff
	seq
	iny		; true
	sty Result

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$002D
	rts						; ret
.endl

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$002C
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
WHITE	= $0F
RED	= $26
CYAN	= $AC
PURPLE	= $48
GREEN	= $B6
BLUE	= $86
YELLOW	= $DC
ORANGE	= $18
BROWN	= $F4
LIGHT_RED	= $2A
DARK_GREY	= $04
GREY	= $08
LIGHT_GREEN	= $BC
LIGHT_BLUE	= $9A
LIGHT_GREY	= $0C
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	MISC						; UNIT

.local	DETECTANTIC					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000063  -------------------


// ANTIC PAL Test for Atari 8-bits
// (C) 2019 Guillermo Fuenzalida

antic_loop1
	lda vcount
	cmp #100
	bcc antic_loop1		// wait till scanline 200
	sta scanline
antic_loop2
	lda vcount
	cmp #10
	bmi antic_loop2_fin
	cmp scanline
	bmi antic_loop2
	sta scanline
	bpl antic_loop2

antic_loop2_fin
	ldy #$00
	lda #0
scanline equ *-1
	cmp #135
	bmi ntsc
	iny
ntsc
	sty Result


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$002E
	rts						; ret
.endl

.local	DETECTHIGHMEM					; FUNCTION

; optimize OK (MISC), line = 115

	lda #$00
	sta RESULT
	sta RESULT+1

; optimize FAIL ('DETECTCPU', MISC), line = 117

	jsr DETECTCPU
	lda #$7F
	cmp DETECTCPU.RESULT
	jcs l_0229
@

; -------------------  ASM Block 00000064  -------------------


adr	= eax
bcnt	= Result
bfirst	= Result+1

	opt c+

	stx @sp

	sei
	inc nmien

ramsize	stz adr
	stz adr+1
	lda #$01
	sta adr+2

	stz bfirst
	stz bcnt

?lp0	stz.w $0000

	lda [adr]
	eor #$ff
	sta [adr]
	cmp [adr]
	bne ?nx
	ldx.w $0000
	bne ?nx
	eor #$ff
	sta [adr]
	bra ?fnd

?nx	inc adr+2
	bne ?lp0

	bra ?abt

?fnd	lda adr+2
	sta bfirst

	inc adr+2
	inc bcnt

?lp1	stz.w $0000

	lda [adr]
	eor #$ff
	sta [adr]
	cmp [adr]
	bne ?abt
	ldx.w $0000
	bne ?abt
	eor #$ff
	sta [adr]
	inc bcnt
	inc adr+2
	bne ?lp1

        dec bcnt

?abt
	dec nmien
	cli

	ldx #0
@sp	equ *-1

	opt c-

l_0229
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$002F
	rts						; ret
.endl

.local	DETECTVBXE					; FUNCTION | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000065  -------------------

	txa:pha

	jsr @vbxe_detect

	ldy #0		; core
	sta (p),y

	lda fxptr+1
	sta Result

	iny		; page
	sta (p),y

	pla:tax


@exit

; ------------------------------------------------------------

P	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	DETECTSTEREO					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000067  -------------------

	txa:pha

	ldx #$00
	stx $d20f	;halt pokey 0
	stx $d21f	;halt pokey 1
	ldy #$03
	sty $d21f	;release pokey 1

	sta $d40a	;delay necessary for
	sta $d40a	;accelerator boards

	lda #$ff
loop	and $d20a	;see if pokey 0 is halted ($d20a = $ff)
	inx
	bne loop

	sty $d20f

	cmp #$ff
	bne mono

	inx
mono
	stx Result

	pla:tax

@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0031
	rts						; ret
.endl

.local	DETECTCPU					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000068  -------------------

	txa:pha

	opt c+

;detekcja zainstalowanego procesora
	lda #$99
	clc
	sed
	adc #$01
	cld
	beq DetectCPU_CMOS

DetectCPU_02
	lda #0
	jmp stop

DetectCPU_CMOS
	lda #0
	rep #%00000010		;wyzerowanie bitu Z
	bne DetectCPU_C816

DetectCPU_C02
	lda #1
	jmp stop

DetectCPU_C816
	lda #$80

stop	sta Result

	opt c-

	pla:tax


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0032
	rts						; ret
.endl

.local	DETECTCPUSPEED					; FUNCTION

; -------------------  ASM Block 00000069  -------------------

	stx @sp

	tsx
	stx	stk

	lda	vvblki
	sta	lvbl

	lda	vvblki+1
	sta	hvbl

	lda	portb
	sta	oldp

	lda	#$ff
	sta	portb

	sei

	ldx	<stop2
	ldy	>stop2

bogo2	lda	vcount
	cmp	#112
	bne	bogo2

	stx	vvblki
	sty	vvblki+1

	lda	#$00
	sta	fr0+1
	tax
	tay

	sta	wsync

loop2	iny
	bne	loop2
	inx
	bne	loop2
	clc
	adc	#$01
	bne	loop2

stop2
	pla
	sta	clkm
	pla
	sta	clkm+1
	pla
;	sta	clkm+2
	sta	fr0

	ldx	#0
stk	equ *-1
	txs

	lda	#0
lvbl	equ *-1
	sta vvblki

	lda	#0
hvbl	equ *-1
	sta vvblki+1

	lda	#0
oldp	equ *-1
	sta	portb

	cli

	ldx #0
@sp	equ *-1


; optimize FAIL ('divmulINT.REAL', MISC), line = 501

	inx
	mva #$00 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	mva FR0 :STACKORIGIN+STACKWIDTH*2,x
	mva FR0+1 :STACKORIGIN+STACKWIDTH*3,x
	inx
	mva CLKM :STACKORIGIN,x
	mva CLKM+1 :STACKORIGIN+STACKWIDTH,x
	mva #$00 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr addEAX_ECX
	mva #$00 :STACKORIGIN,x
	mva #$E7 :STACKORIGIN+STACKWIDTH,x
	mva #$01 :STACKORIGIN+STACKWIDTH*2,x
	mva #$00 :STACKORIGIN+STACKWIDTH*3,x
	jsr @expandToREAL1
	jsr divmulINT.REAL
	lda #$C6
	sta @REAL_MUL.B
	lda #$01
	sta @REAL_MUL.B+1
	lda #$00
	sta @REAL_MUL.B+2
	lda #$00
	sta @REAL_MUL.B+3
	lda :STACKORIGIN-1,x
	sta @REAL_MUL.A
	lda :STACKORIGIN-1+STACKWIDTH,x
	sta @REAL_MUL.A+1
	lda :STACKORIGIN-1+STACKWIDTH*2,x
	sta @REAL_MUL.A+2
	lda :STACKORIGIN-1+STACKWIDTH*3,x
	sta @REAL_MUL.A+3
	jsr @REAL_MUL
	dex
	lda @REAL_MUL.RESULT
	sta RESULT
	lda @REAL_MUL.RESULT+1
	sta RESULT+1
	lda @REAL_MUL.RESULT+2
	sta RESULT+2
	lda @REAL_MUL.RESULT+3
	sta RESULT+3
	dex
@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$0033
CLKM	= DATAORIGIN+$0037
FR0	= DATAORIGIN+$0039

@VarData	= CLKM
@VarDataSize	= 4

	rts						; ret
.endl

.local	DETECTMEM					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000070  -------------------

	txa:pha

bsav	= @buf

ext_b	= $4000		;cokolwiek z zakresu $4000-$7FFF

	ldy #0
mov	mva copy,y detect,y
	iny
	cpy #.sizeof(detect)
	bne mov

	jsr detect

	jmp stop

copy

.local	detect,$0600

	lda portb
	pha

	lda:rne vcount

;	lda #$ff
;	sta portb

	lda ext_b
	pha

	ldx #$0f	;zapamiętanie bajtów ext (z 16 bloków po 64k)
_p0	jsr setpb
	lda ext_b
	sta bsav,x
	dex
	bpl _p0

	ldx #$0f	;wyzerowanie ich (w oddzielnej pętli, bo nie wiadomo
_p1	jsr setpb	;które kombinacje bitów PORTB wybierają te same banki)
	lda #$00
	sta ext_b
	dex
	bpl _p1

	stx portb	;eliminacja pamięci podstawowej
	stx ext_b
	stx $00		;niezbędne dla niektórych rozszerzeń do 256k

	ldy #$00	;pętla zliczająca bloki 64k
	ldx #$0f
_p2	jsr setpb
	lda ext_b	;jeśli ext_b jest różne od zera, blok 64k już zliczony
	bne _n2

	dec ext_b	;w przeciwnym wypadku zaznacz jako zliczony

	lda ext_b	;sprawdz, czy sie zaznaczyl; jesli nie -> cos nie tak ze sprzetem
	bpl _n2

	lda portb	;wpisz wartość PORTB do tablicy dla banku 0

	and #$fe

	sta adr.banks,y
	eor #%00000100	;uzupełnij wartości dla banków 1, 2, 3
	sta adr.banks+1,y
	eor #%00001100
	sta adr.banks+2,y
	eor #%00000100
	sta adr.banks+3,y
	iny
	iny
	iny
	iny

_n2	dex
	bpl _p2

	ldx #$0f	;przywrócenie zawartości ext
_p3	jsr setpb
	lda bsav,x
	sta ext_b
	dex
	bpl _p3

	stx portb	;X=$FF

	pla
	sta ext_b

	pla
	sta portb

	sty Result

	rts

; podprogramy
setpb	txa		;zmiana kolejności bitów: %0000dcba -> %cba000d0
	lsr
	ror
	ror
	ror
	adc #$01	;ustawienie bitu nr 1 w zaleznosci od stanu C
	ora #$01	;ustawienie bitu sterującego OS ROM na wartosc domyslna
	sta portb
	rts

.endl

stop	pla:tax


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$003B
	rts						; ret
.endl

.local	DETECTMAPRAM					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000071  -------------------


bsav	= DX
ext_b	= $5000		;cokolwiek z zakresu $5000-$57FF

	txa:pha

	ldy #.sizeof(detect)-1
	mva:rpl copy,y detect,y-

	jsr detect

	jmp stop

copy

.local	detect,@buf

	sei
	inc nmien

	mva #FALSE Result

	lda portb
	pha

	lda #$ff
	sta portb

	lda ext_b
	pha

_p0	jsr setb
	lda ext_b
	sta bsav

	lda #$00
	sta ext_b

	lda #$ff
	sta portb	;eliminacja pamięci podstawowej
	sta ext_b

_p2	jsr setb

	inc ext_b
	beq _p3

	mva #TRUE Result

_p3	lda bsav
	sta ext_b

	lda #$ff
	sta portb

	pla
	sta ext_b

	pla
	sta portb

	dec nmien
	cli

	rts

setb	lda portb
	and #%01001110	; !!!
	ora #%00110000  ; MAPRAM ON
	sta portb
	rts

.endl

stop	pla:tax


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$003C
	rts						; ret
.endl

.local	DETECTBASIC					; FUNCTION | ASSEMBLER

; -------------------  ASM Block 00000072  -------------------


BASROM	= $a8e2

	lda PORTB
	sta old

	and #1
	beq stop

	lda #$fd
	sta PORTB

	lda BASROM
stop	sta Result

	lda #$ff
old	equ *-1
	sta PORTB


@exit

; ------------------------------------------------------------

RESULT	= DATAORIGIN+$003D
	rts						; ret
.endl

; ------------------------------------------------------------

adr.BANKS	= $0101
.var BANKS	= adr.BANKS .word
DETECTOS	= $FFF7

.endl							; UNIT MISC
l_01AA

; optimize OK (detect.pas), line = 14

	lda #$01
	sta ATARI.LMARGIN

; optimize FAIL ('@print', detect.pas), line = 16

	@printEOL

; optimize FAIL ('@print', detect.pas), line = 22

	@printSTRING #CODEORIGIN+$0000

; optimize FAIL ('MISC.DETECTCPU', detect.pas), line = 24

	jsr MISC.DETECTCPU
	lda MISC.DETECTCPU.RESULT
	sta CPU

; optimize OK (detect.pas), line = 26

	sta @CASETMP_0003
	cmp #$00
	jne l_0266
@

; optimize FAIL ('@print', detect.pas), line = 27

	@printSTRING #CODEORIGIN+$000B

	jmp a_0003
l_0266
	cmp #$01
	jne l_0272
@

; optimize FAIL ('@print', detect.pas), line = 28

	@printSTRING #CODEORIGIN+$0011

	jmp a_0003
l_0272

; optimize FAIL ('@print', detect.pas), line = 30

	@printSTRING #CODEORIGIN+$0018
a_0003

; optimize FAIL ('@print', detect.pas), line = 33

	@print #$20
	jsr MISC.DETECTCPUSPEED
	inx
	mva MISC.DETECTCPUSPEED.RESULT :STACKORIGIN,x
	mva MISC.DETECTCPUSPEED.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva MISC.DETECTCPUSPEED.RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva MISC.DETECTCPUSPEED.RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
	jsr @printREAL
	dex
	@printSTRING #CODEORIGIN+$001F
	@printEOL

; optimize OK (detect.pas), line = 47

	lda <P
	sta MISC.DETECTVBXE.P
	lda >P
	sta MISC.DETECTVBXE.P+1
	jsr MISC.DETECTVBXE
	lda MISC.DETECTVBXE.RESULT
	sta A

; optimize FAIL ('@print', detect.pas), line = 49

	@printSTRING #CODEORIGIN+$0025
	inx
	mva A :STACKORIGIN,x
	jsr @printBOOLEAN
	dex

; optimize OK (detect.pas), line = 50

	lda A
	jeq l_02A3

; optimize FAIL ('@print', detect.pas), line = 51

	@printSTRING #CODEORIGIN+$0030
	lda P+1
	sta SYSTEM.HEXSTR.VALUE
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+1
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$02
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT
	@printSTRING #CODEORIGIN+$0035
	lda P
	and #$7F
	sta SYSTEM.HEXSTR.VALUE
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+1
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$02
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT

; optimize OK (detect.pas), line = 52

	lda P
	jpl l_02D7
	@printSTRING #CODEORIGIN+$0043
l_02D7
l_02A3

; optimize FAIL ('@print', detect.pas), line = 54

	@printEOL

; optimize FAIL ('@print', detect.pas), line = 75

	@printSTRING #CODEORIGIN+$004B

; optimize FAIL ('MISC.DETECTANTIC', detect.pas), line = 77

	jsr MISC.DETECTANTIC
	lda MISC.DETECTANTIC.RESULT
	sta @CASETMP_0004
	cmp #$01
	jne l_02EB
@

; optimize FAIL ('@print', detect.pas), line = 78

	@printSTRING #CODEORIGIN+$0056
	@printEOL

	jmp a_0004
l_02EB
	cmp #$00
	jne l_02F7
@

; optimize FAIL ('@print', detect.pas), line = 79

	@printSTRING #CODEORIGIN+$005B
	@printEOL

l_02F7
a_0004

; optimize FAIL ('@print', detect.pas), line = 87

	@printSTRING #CODEORIGIN+$0061

; optimize FAIL ('MISC.DETECTBASIC', detect.pas), line = 89

	jsr MISC.DETECTBASIC
	lda MISC.DETECTBASIC.RESULT
	sta @CASETMP_0005
	cmp #$00
	jne l_030C
@

; optimize FAIL ('@print', detect.pas), line = 90

	@printSTRING #CODEORIGIN+$006C
	@printEOL

	jmp a_0005
l_030C
	cmp #$A2
	jne l_0318
@

; optimize FAIL ('@print', detect.pas), line = 91

	@printSTRING #CODEORIGIN+$0075
	@printEOL

	jmp a_0005
l_0318
	cmp #$60
	jne l_0324
@

; optimize FAIL ('@print', detect.pas), line = 92

	@printSTRING #CODEORIGIN+$0088
	@printEOL

	jmp a_0005
l_0324
	cmp #$EA
	jne l_0330
@

; optimize FAIL ('@print', detect.pas), line = 93

	@printSTRING #CODEORIGIN+$009B
	@printEOL

	jmp a_0005
l_0330

; optimize FAIL ('@print', detect.pas), line = 95

	@printSTRING #CODEORIGIN+$00AE
	@printEOL
a_0005

; optimize FAIL ('@print', detect.pas), line = 103

	@printSTRING #CODEORIGIN+$00B7

; optimize OK (detect.pas), line = 105

	lda MISC.DETECTOS
	sta @CASETMP_0006
	cmp #$01
	jne l_034C
@

; optimize FAIL ('@print', detect.pas), line = 106

	@printSTRING #CODEORIGIN+$00C2
	@printEOL

	jmp a_0006
l_034C
	cmp #$02
	jne l_0358
@

; optimize FAIL ('@print', detect.pas), line = 107

	@printSTRING #CODEORIGIN+$00D2
	@printEOL

	jmp a_0006
l_0358
	cmp #$03
	jne l_0364
@

; optimize FAIL ('@print', detect.pas), line = 108

	@printSTRING #CODEORIGIN+$00E2
	@printEOL

	jmp a_0006
l_0364
	cmp #$04
	jne l_0370
@

; optimize FAIL ('@print', detect.pas), line = 109

	@printSTRING #CODEORIGIN+$00F2
	@printEOL

	jmp a_0006
l_0370
	cmp #$0A
	jne l_037C
@

; optimize FAIL ('@print', detect.pas), line = 110

	@printSTRING #CODEORIGIN+$0107
	@printEOL

	jmp a_0006
l_037C
	cmp #$0B
	jne l_0388
@

; optimize FAIL ('@print', detect.pas), line = 111

	@printSTRING #CODEORIGIN+$0118
	@printEOL

	jmp a_0006
l_0388
	cmp #$3B
	jne l_0394
@

; optimize FAIL ('@print', detect.pas), line = 112

	@printSTRING #CODEORIGIN+$0129
	@printEOL

	jmp a_0006
l_0394
	cmp #$40
	jne l_03A0
@

; optimize FAIL ('@print', detect.pas), line = 113

	@printSTRING #CODEORIGIN+$013A
	@printEOL

	jmp a_0006
l_03A0
	cmp #$FD
	jne l_03AC
@

; optimize FAIL ('@print', detect.pas), line = 114

	@printSTRING #CODEORIGIN+$0148
	@printEOL

	jmp a_0006
l_03AC

; optimize OK (detect.pas), line = 116

	lda ATARI.PORTB
	and #$01
	jne l_03C9

; optimize FAIL ('@print', detect.pas), line = 117

	@printSTRING #CODEORIGIN+$006C
	@printEOL
	jmp l_03D6
l_03C9

; optimize FAIL ('@print', detect.pas), line = 119

	@printSTRING #CODEORIGIN+$00AE
	@printEOL
l_03D6
a_0006

; optimize FAIL ('@print', detect.pas), line = 127

	@printSTRING #CODEORIGIN+$0156
	jsr MISC.DETECTSTEREO
	inx
	mva MISC.DETECTSTEREO.RESULT :STACKORIGIN,x
	jsr @printBOOLEAN
	dex
	@printEOL

; optimize FAIL ('@print', detect.pas), line = 134

	@printSTRING #CODEORIGIN+$0161
	jsr MISC.DETECTMAPRAM
	inx
	mva MISC.DETECTMAPRAM.RESULT :STACKORIGIN,x
	jsr @printBOOLEAN
	dex
	@printEOL

; optimize OK (detect.pas), line = 141

	lda CPU
	jpl l_0406

; optimize FAIL ('@print', detect.pas), line = 142

	@printSTRING #CODEORIGIN+$016C
	jsr MISC.DETECTHIGHMEM
	inx
	mva MISC.DETECTHIGHMEM.RESULT :STACKORIGIN,x
	mva MISC.DETECTHIGHMEM.RESULT+1 :STACKORIGIN+STACKWIDTH,x
	inx
	mva #$FF :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr andAX_CX
	mva #$40 :STACKORIGIN,x
	mva #$00 :STACKORIGIN+STACKWIDTH,x
	jsr imulWORD
	jsr movaBX_EAX
	dex
	jsr @printCARD
	dex
	@printSTRING #CODEORIGIN+$0177
	@printEOL
l_0406

; optimize FAIL ('MISC.DETECTMEM', detect.pas), line = 149

	jsr MISC.DETECTMEM
	lda MISC.DETECTMEM.RESULT
	sta BNK

; optimize FAIL ('@print', detect.pas), line = 150

	@printSTRING #CODEORIGIN+$017B
	inx
	mva BNK :STACKORIGIN,x
	jsr @printSHORTINT
	dex
	@printSTRING #CODEORIGIN+$0186
	@printEOL

; optimize OK (detect.pas), line = 152

	lda #$00
	sta I
	ldy BNK
	dey
	sty @FORTMP_043B_0

l_043E
; --- ForToDoCondition
	lda I
	sub @FORTMP_043B_0:#$00
	svc
	eor #$80
	bmi *+7
	beq *+5
	jmp l_044C

; optimize FAIL ('divmulSHORTINT.MOD', detect.pas), line = 154

	inx
	mva I :STACKORIGIN,x
	inx
	mva #$08 :STACKORIGIN,x
	jsr divmulSHORTINT.MOD
	dex
	dex
	lda :STACKORIGIN+1,x
	jne l_0467
@
	@printEOL
	@printSTRING #CODEORIGIN+$018E
l_0467

; optimize OK (detect.pas), line = 156

	ldy I
	lda MISC.adr.BANKS,y
	sta SYSTEM.HEXSTR.VALUE
	lda #$00
	sta SYSTEM.HEXSTR.VALUE+1
	sta SYSTEM.HEXSTR.VALUE+2
	sta SYSTEM.HEXSTR.VALUE+3
	lda #$02
	sta SYSTEM.HEXSTR.DIGITS
	jsr SYSTEM.HEXSTR
	@printSTRING SYSTEM.HEXSTR.RESULT
	@print #$20

; --- ForToDoEpilog
	inc I
	lda I
	cmp #$80
	jne l_043E
l_044C

; optimize FAIL ('@print', detect.pas), line = 160

	@print #$9B
	@printEOL

; optimize FAIL ('@print', detect.pas), line = 161

	@printSTRING #CODEORIGIN+$0194
	@printEOL

; --- RepeatUntilProlog
l_0482

; optimize FAIL ('CRT.KEYPRESSED', detect.pas), line = 163

	jsr CRT.KEYPRESSED
	lda CRT.KEYPRESSED.RESULT
	jeq l_0482

; ------------------------------------------------------------

I	= DATAORIGIN+$003E
BNK	= DATAORIGIN+$003F
A	= DATAORIGIN+$0040
P	= DATAORIGIN+$0041
CPU	= DATAORIGIN+$0043
@CASETMP_0003	= DATAORIGIN+$0044
@CASETMP_0004	= DATAORIGIN+$0045
@CASETMP_0005	= DATAORIGIN+$0046
@CASETMP_0006	= DATAORIGIN+$0047
@exit

@halt	ldx #$00
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.fi

	ldy #$01

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	.fi

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	.fi

	.ifdef MAIN.MISC.@UnitInit
	jsr MAIN.MISC.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.MISC) > 0
	.print 'MISC: ',MAIN.MISC,'..',MAIN.MISC+.SIZEOF(MAIN.MISC)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 73

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $09 $20 $20 $20 $20 $43 $50 $55  $3A $20 $00 $04 $36 $35 $30 $32  $00 $05 $36 $35 $63 $30 $32 $00
.by  $05 $36 $35 $38 $31 $36 $00 $04  $20 $4D $48 $7A $00 $09 $20 $20  $20 $56 $42 $58 $45 $3A $20 $00
.by  $03 $20 $28 $24 $00 $0C $30 $30  $29 $2C $20 $43 $4F $52 $45 $20  $31 $2E $00 $06 $20 $52 $41 $4D
.by  $42 $4F $00 $09 $20 $20 $41 $4E  $54 $49 $43 $3A $20 $00 $03 $50  $41 $4C $00 $04 $4E $54 $53 $43
.by  $00 $09 $20 $20 $42 $61 $73 $69  $63 $3A $20 $00 $07 $52 $4F $4D  $20 $4F $46 $46 $00 $11 $41 $74
.by  $61 $72 $69 $20 $42 $61 $73 $69  $63 $20 $52 $65 $76 $2E $41 $00  $11 $41 $74 $61 $72 $69 $20 $42
.by  $61 $73 $69 $63 $20 $52 $65 $76  $2E $42 $00 $11 $41 $74 $61 $72  $69 $20 $42 $61 $73 $69 $63 $20
.by  $52 $65 $76 $2E $43 $00 $07 $55  $4E $4B $4E $4F $57 $4E $00 $09  $20 $53 $79 $73 $74 $65 $6D $3A
.by  $20 $00 $0E $58 $4C $2F $58 $45  $20 $4F $53 $20 $52 $65 $76 $2E  $31 $00 $0E $58 $4C $2F $58 $45
.by  $20 $4F $53 $20 $52 $65 $76 $2E  $32 $00 $0E $58 $4C $2F $58 $45  $20 $4F $53 $20 $52 $65 $76 $2E
.by  $33 $00 $13 $58 $4C $2F $58 $45  $2F $58 $45 $47 $53 $20 $4F $53  $20 $52 $65 $76 $2E $34 $00 $0F
.by  $58 $4C $2F $58 $45 $20 $4F $53  $20 $52 $65 $76 $2E $31 $30 $00  $0F $58 $4C $2F $58 $45 $20 $4F
.by  $53 $20 $52 $65 $76 $2E $31 $31  $00 $0F $58 $4C $2F $58 $45 $20  $4F $53 $20 $52 $65 $76 $2E $33
.by  $42 $00 $0C $51 $4D $45 $47 $2B  $4F $53 $20 $34 $2E $30 $34 $00  $0C $51 $4D $45 $47 $2B $4F $53
.by  $20 $52 $43 $30 $31 $00 $09 $20  $53 $74 $65 $72 $65 $6F $3A $20  $00 $09 $20 $4D $61 $70 $52 $61
.by  $6D $3A $20 $00 $09 $48 $69 $67  $68 $4D $65 $6D $3A $20 $00 $02  $4B $42 $00 $09 $20 $45 $78 $74
.by  $4D $65 $6D $3A $20 $00 $06 $20  $62 $61 $6E $6B $73 $00 $04 $7F  $1F $1F $1F $00 $0D $50 $72 $65
.by  $73 $73 $20 $61 $6E $79 $20 $6B  $65 $79 $00
.endm

	end
