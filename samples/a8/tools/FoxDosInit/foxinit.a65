; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.4 [2020/05/22] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16
CODEORIGIN	= $2000

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $80

fxptr	.ds 2						; VBXE pointer
psptr	.ds 2						; PROGRAMSTACK Pointer

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4
bp	.ds 2
bp2	.ds 2

ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

TMP	.ds 2

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1

FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

	.ifdef MAIN.@DEFINES.S_VBXE
	opt h-
	ins 'atari\s_vbxe\sdxld2.obx'
	opt h+
	.endif

; ------------------------------------------------------------

	org CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502.asm'

.print 'ZPAGE: ',fxptr,'..',zpend

.print 'RTLIB: ',RTLIB,'..',*

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	eif

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #0
	sta:rne VADR+VLEN-256,x+
	eli VLEN>0
	@fill #VADR #VLEN #0
	eif

	.ifdef MAIN.@DEFINES.ROMOFF
	icl 'atari\romoff.asm'
	.endif

	mwa #PROGRAMSTACK psptr

	ldx #$0f					; DOS II+/D ParamStr
	mva:rpl $340,x MAIN.IOCB@COPY,x-

	inx						; X = 0
	stx bp						; BP = 0

	stx audctl					; reset POKEY
	lda #3
	sta skctl

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0093

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	UPCASE						; FUNCTION

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x A
	dex						; sub bx, 1

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva A :STACKORIGIN,x

; GenerateCaseProlog
	dex						; sub bx, 1

	lda :STACKORIGIN+1,x
	clc						; clear carry for add
	adc #$FF-122					; make m = $FF
	adc #122-97+1					; carry set if in range n to m
	jcc l_00CA
@

; optimize OK (SYSTEM), line = 1364

	lda A
	sub #$20
	sta RESULT

; GenerateCaseStatementEpilog
	jmp a_0001
l_00CA

; optimize OK (SYSTEM), line = 1366

	mva A RESULT

; GenerateCaseEpilog
a_0001
@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= DATAORIGIN+$000B
RESULT	= DATAORIGIN+$000C

@VarData	= A
@VarDataSize	= 2

	rts						; ret
.endl

; ------------------------------------------------------------

__PORTB_BANKS	= $0101
M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
MGTIA	= $00
MVBXE	= $80
VBXE_XDLADR	= $00
VBXE_BCBADR	= $0100
VBXE_MAPADR	= $1000
VBXE_OVRADR	= $5000
VBXE_WINDOW	= $B000
IDLI	= $00
IVBL	= $01
CH_DELCHR	= $FE
CH_ENTER	= $9B
CH_ESC	= $1B
CH_CURS_UP	= $1C
CH_CURS_DOWN	= $1D
CH_CURS_LEFT	= $1E
CH_CURS_RIGHT	= $1F
CH_TAB	= $7F
CH_EOL	= $9B
CH_CLR	= $7D
CH_BELL	= $FD
CH_DEL	= $7E
CH_DELLINE	= $9C
CH_INSLINE	= $9D
COLOR_BLACK	= $00
COLOR_WHITE	= $0E
COLOR_RED	= $32
COLOR_CYAN	= $96
COLOR_VIOLET	= $68
COLOR_GREEN	= $C4
COLOR_BLUE	= $74
COLOR_YELLOW	= $EE
COLOR_ORANGE	= $28
COLOR_BROWN	= $E4
COLOR_LIGHTRED	= $3C
COLOR_GRAY1	= $04
COLOR_GRAY2	= $06
COLOR_GRAY3	= $0A
COLOR_LIGHTGREEN	= $CC
COLOR_LIGHTBLUE	= $7C
FMOPENREAD	= $04
FMOPENWRITE	= $08
FMOPENAPPEND	= $09
FMOPENREADWRITE	= $0C
SCREENWIDTH	= DATAORIGIN+$0000
SCREENHEIGHT	= DATAORIGIN+$0002
DATESEPARATOR	= DATAORIGIN+$0004
TVSYSTEM	= $D014
adr.PALETTE	= $02C0
.var PALETTE	= adr.PALETTE .word
adr.HPALETTE	= $D012
.var HPALETTE	= adr.HPALETTE .word
FILEMODE	= DATAORIGIN+$0005
GRAPHMODE	= DATAORIGIN+$0006
IORESULT	= DATAORIGIN+$0007
EOLN	= DATAORIGIN+$0008
RNDSEED	= DATAORIGIN+$0009

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	ATARI						; UNIT

; ------------------------------------------------------------

RTCLOK	= $12
ATRACT	= $4D
LMARGIN	= $52
RMARGIN	= $53
ROWCRS	= $54
COLCRS	= $55
DINDEX	= $57
SAVMSC	= $58
PALNTS	= $62
RAMTOP	= $6A
VDSLST	= $0200
SDLSTL	= $0230
TXTROW	= $0290
TXTCOL	= $0291
TINDEX	= $0293
TXTMSC	= $0294
SDMCTL	= $022F
GPRIOR	= $026F
CRSINH	= $02F0
CHACT	= $02F3
CHBAS	= $02F4
CH	= $02FC
PCOLR0	= $02C0
PCOLR1	= $02C1
PCOLR2	= $02C2
PCOLR3	= $02C3
COLOR0	= $02C4
COLOR1	= $02C5
COLOR2	= $02C6
COLOR3	= $02C7
COLOR4	= $02C8
COLBAKS	= $02C8
HPOSP0	= $D000
HPOSP1	= $D001
HPOSP2	= $D002
HPOSP3	= $D003
HPOSM0	= $D004
HPOSM1	= $D005
HPOSM2	= $D006
HPOSM3	= $D007
SIZEP0	= $D008
SIZEP1	= $D009
SIZEP2	= $D00A
SIZEP3	= $D00B
SIZEM	= $D00C
GRAFP0	= $D00D
GRAFP1	= $D00E
GRAFP2	= $D00F
GRAFP3	= $D010
GRAFM	= $D011
P0PF	= $D004
PAL	= $D014
COLPM0	= $D012
COLPM1	= $D013
COLPM2	= $D014
COLPM3	= $D015
COLPF0	= $D016
COLPF1	= $D017
COLPF2	= $D018
COLPF3	= $D019
COLBK	= $D01A
PRIOR	= $D01B
GRACTL	= $D01D
HITCLR	= $D01E
AUDF1	= $D200
AUDC1	= $D201
AUDF2	= $D202
AUDC2	= $D203
AUDF3	= $D204
AUDC3	= $D205
AUDF4	= $D206
AUDC4	= $D207
AUDCTL	= $D208
SKSTAT	= $D20F
PORTB	= $D301
DMACTL	= $D400
CHACTL	= $D401
DLISTL	= $D402
HSCROL	= $D404
VSCROL	= $D405
PMBASE	= $D407
CHBASE	= $D409
WSYNC	= $D40A
VCOUNT	= $D40B
PENH	= $D40C
PENV	= $D40D
NMIEN	= $D40E

.endl							; UNIT ATARI

; ------------------------------------------------------------

.local	CRT						; UNIT

; ------------------------------------------------------------

TEXTATTR	= DATAORIGIN+$000D
CONSOL	= $D01F
CN_START_SELECT_OPTION	= $00
CN_SELECT_OPTION	= $01
CN_START_OPTION	= $02
CN_OPTION	= $03
CN_START_SELECT	= $04
CN_SELECT	= $05
CN_START	= $06
CN_NONE	= $07
BW40	= $00
CO40	= $01
BW80	= $02
CO80	= $03
MONO	= $07
C40	= $01
C80	= $03
BLACK	= $00
BLUE	= $01
GREEN	= $02
CYAN	= $03
RED	= $04
MAGENTA	= $05
BROWN	= $06
LIGHTGRAY	= $07
DARKGRAY	= $08
LIGHTBLUE	= $09
LIGHTGREEN	= $0A
LIGHTCYAN	= $0B
LIGHTRED	= $0C
LIGHTMAGENTA	= $0D
YELLOW	= $0E
WHITE	= $0F
BLINK	= $80

.endl							; UNIT CRT

; ------------------------------------------------------------

.local	SIODISK						; UNIT

.local	READCONFIG					; FUNCTION | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x DEVNUM
	dex						; sub bx, 1

; ---------------------  ASM Block 060  ---------------------

	txa:pha

	lda devnum
	m@call	@sio.devnrm
	tya
	bmi _err

	lda #'S'	; odczyt statusu stacji
	sta dcmnd

	m@call	jdskint	; $e453
	tya
	bmi _err

	ldx <256	; 256 bajtow
	ldy >256	; w sektorze

	lda dvstat
	and #%00100000
	bne _skp

	ldx <128	;128 bajtow
	ldy >128	;w sektorze

_skp	m@call	@sio.devsec

	mva dvstat result
	mva dvstat+1 result+1
	mva dvstat+2 result+2
	mva dvstat+3 result+3

	ldy #1

_err	sty MAIN.SYSTEM.IOResult

	pla:tax

@exit

; ------------------------------------------------------------

; Push CARDINAL / INTEGER / REAL / SINGLE
; as Pointer

	inx						; add bx, 1
	mva RESULT :STACKORIGIN,x
	mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
	mva RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
	mva RESULT+3 :STACKORIGIN+STACKWIDTH*3,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

DEVNUM	= DATAORIGIN+$000E
RESULT	= DATAORIGIN+$000F

@VarData	= DEVNUM
@VarDataSize	= 5

	rts						; ret
.endl

.local	WRITEBOOT					; PROCEDURE | ASSEMBLER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	mva :STACKORIGIN,x BUF
	mva :STACKORIGIN+STACKWIDTH,x BUF+1
	dex						; sub bx, 1

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	mva :STACKORIGIN,x DEVNUM
	dex						; sub bx, 1

; ---------------------  ASM Block 064  ---------------------

	txa:pha

	lda devnum
	m@call	@sio.devnrm
	tya
	bmi _err

	lda <1
	sta daux1
	lda >1
	sta daux2

lp	ldx buf
	ldy buf+1
	lda #'P'	; $50 - Put Sector, without verify

	m@call	@sio.boot
	tya
	bmi _err

	adw buf #128

	inc daux1
	lda daux1
	cmp #4
	bne lp

_err	sty MAIN.SYSTEM.IOResult

	pla:tax


; ------------------------------------------------------------

DEVNUM	= DATAORIGIN+$0013
BUF	= DATAORIGIN+$0014

@VarData	= DEVNUM
@VarDataSize	= 3

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif
	rts						; ret
.endl

; ------------------------------------------------------------

.endl							; UNIT SIODISK
l_0093

; optimize FAIL (100, foxinit.pas), line = 73
	@printSTRING #CODEORIGIN+$0000
	@printSTRING #CODEORIGIN+$0016
	@print #$9B
	@printEOL
AGAIN

; optimize OK (foxinit.pas), line = 77

	mva #$00 OK

; --- RepeatUntilProlog
l_012A

; optimize FAIL (100, foxinit.pas), line = 81
	@printSTRING #CODEORIGIN+$0022
	@getline
	mva @buf+1 CH

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx						; add bx, 1
	mva CH :STACKORIGIN,x

; GenerateCaseProlog
	dex						; sub bx, 1

	lda :STACKORIGIN+1,x
	clc						; clear carry for add
	adc #$FF-56					; make m = $FF
	adc #56-49+1					; carry set if in range n to m
	jcc l_013B
@

; optimize OK (foxinit.pas), line = 85

	mva #$01 OK

; GenerateCaseStatementEpilog
	jmp a_0002
l_013B

; optimize OK (foxinit.pas), line = 87

	mva #$00 OK

; GenerateCaseEpilog
a_0002

; optimize OK (foxinit.pas), line = 90

	lda OK
	jeq l_012A

; optimize OK (foxinit.pas), line = 92

	lda CH
	sub #$30
	sta DRV

; optimize FAIL ('SIODISK.READCONFIG', foxinit.pas), line = 94
	inx
	mva DRV :STACKORIGIN,x
	jsr SIODISK.READCONFIG
	inx
	mva #$20 :STACKORIGIN,x
	jsr @expandToCARD.BYTE
	jsr andEAX_ECX
	dex
	mva :STACKORIGIN,x DENSITY
	dex

; optimize OK (foxinit.pas), line = 96

	lda SYSTEM.IORESULT
	jpl l_0176

; optimize FAIL (100, foxinit.pas), line = 97
	@printSTRING #CODEORIGIN+$0038
	lda SYSTEM.IORESULT
	jsr @printBYTE._a
	@print #$9B
	@printEOL
	jmp AGAIN
l_0176

; optimize FAIL (100, foxinit.pas), line = 101
	@print #$44
	lda DRV
	jsr @printBYTE._a
	@printSTRING #CODEORIGIN+$0041

; optimize OK (foxinit.pas), line = 103

	lda DENSITY
	jeq l_01A7

; optimize FAIL (100, foxinit.pas), line = 104
	@printSTRING #CODEORIGIN+$0045
	jmp l_01B4
l_01A7

; optimize FAIL (100, foxinit.pas), line = 106
	@printSTRING #CODEORIGIN+$004D
l_01B4

; optimize FAIL (100, foxinit.pas), line = 108
	@printSTRING #CODEORIGIN+$005E
	@print #$9B
	@printEOL

; optimize FAIL (100, foxinit.pas), line = 110
	@printSTRING #CODEORIGIN+$0068
	@getline
	mva @buf+1 CH

; optimize FAIL ('SYSTEM.UPCASE', foxinit.pas), line = 113
	inx
	mva CH :STACKORIGIN,x
	jsr SYSTEM.UPCASE
	dex
	lda :STACKORIGIN+1,x
	cmp #$59
	jne l_01D8
@

; optimize OK (foxinit.pas), line = 115

	lda DENSITY
	jeq l_01EB

; optimize FAIL ('SIODISK.WRITEBOOT', foxinit.pas), line = 116
	inx
	mva DRV :STACKORIGIN,x
	inx
	mva XDOS_D :STACKORIGIN,x
	mva XDOS_D+1 :STACKORIGIN+STACKWIDTH,x
	jsr SIODISK.WRITEBOOT
	jmp l_01FB
l_01EB

; optimize FAIL ('SIODISK.WRITEBOOT', foxinit.pas), line = 118
	inx
	mva DRV :STACKORIGIN,x
	inx
	mva XDOS_S :STACKORIGIN,x
	mva XDOS_S+1 :STACKORIGIN+STACKWIDTH,x
	jsr SIODISK.WRITEBOOT
l_01FB
l_01D8

; optimize OK (foxinit.pas), line = 122

	lda SYSTEM.IORESULT
	jpl l_0215

; optimize FAIL (100, foxinit.pas), line = 123
	@printSTRING #CODEORIGIN+$0038
	lda SYSTEM.IORESULT
	jsr @printBYTE._a
	@print #$9B
	@printEOL
	jmp AGAIN
l_0215

; optimize FAIL (100, foxinit.pas), line = 127
	@printSTRING #CODEORIGIN+$007D
	@printEOL
	@getline
	mva @buf+1 CH

; optimize FAIL ('SYSTEM.UPCASE', foxinit.pas), line = 130
	inx
	mva CH :STACKORIGIN,x
	jsr SYSTEM.UPCASE
	dex
	lda :STACKORIGIN+1,x
	cmp #$59
	jne l_0241
@
	jmp AGAIN
l_0241

; ------------------------------------------------------------

adr.XDOS_S	= CODEORIGIN+$008C
.var XDOS_S	= adr.XDOS_S .word
adr.XDOS_D	= CODEORIGIN+$020C
.var XDOS_D	= adr.XDOS_D .word
DENSITY	= DATAORIGIN+$0016
DRV	= DATAORIGIN+$0017
CH	= DATAORIGIN+$0018
OK	= DATAORIGIN+$0019
@exit

@halt	ldx #0
	txs
	.ifdef MAIN.@DEFINES.ROMOFF
	inc portb
	.endif

	rts

; ------------------------------------------------------------

IOCB@COPY	:16 brk

; ------------------------------------------------------------

.local	@DEFINES
ATARI
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	eif

	.ifdef MAIN.ATARI.@UnitInit
	jsr MAIN.ATARI.@UnitInit
	eif

	.ifdef MAIN.CRT.@UnitInit
	jsr MAIN.CRT.@UnitInit
	eif

	.ifdef MAIN.SIODISK.@UnitInit
	jsr MAIN.SIODISK.@UnitInit
	eif
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.ATARI) > 0
	.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
	eif

	ift .SIZEOF(MAIN.CRT) > 0
	.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
	eif

	ift .SIZEOF(MAIN.SIODISK) > 0
	.print 'SIODISK: ',MAIN.SIODISK,'..',MAIN.SIODISK+.SIZEOF(MAIN.SIODISK)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',*-1

; ------------------------------------------------------------

DATAORIGIN
.by  $28 $00 $18 $00 $2D $0C

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 26

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

	run START

; ------------------------------------------------------------

.macro	STATICDATA
.by  $14 $78 $30 $46 $20 $44 $6F $73  $20 $49 $6E $69 $74 $69 $61 $6C  $69 $7A $65 $72 $20 $00 $0A $32
.by  $30 $32 $30 $2D $30 $35 $2D $32  $34 $00 $14 $53 $65 $6C $65 $63  $74 $20 $64 $72 $69 $76 $65 $20
.by  $28 $31 $2D $38 $29 $3A $20 $00  $07 $45 $72 $72 $6F $72 $3A $20  $00 $02 $3A $20 $00 $06 $44 $6F
.by  $75 $62 $6C $65 $00 $0F $53 $69  $6E $67 $6C $65 $2F $45 $6E $68  $61 $6E $63 $65 $64 $00 $08 $20
.by  $64 $65 $6E $73 $69 $74 $79 $00  $13 $57 $72 $69 $74 $65 $20 $78  $30 $46 $20 $44 $6F $73 $20 $28
.by  $59 $2F $4E $29 $00 $0D $41 $67  $61 $69 $6E $20 $28 $59 $2F $4E  $29 $3F $20 $00 $46 $03 $EB $07
.by  $09 $09 $8D $05 $03 $A9 $5C $8D  $E7 $02 $A9 $09 $8D $E8 $02 $A2  $44 $A8 $20 $86 $E4 $20 $8C $08
.by  $30 $56 $20 $E8 $08 $30 $43 $85  $44 $20 $E8 $08 $30 $4A $85 $45  $C9 $FF $B0 $EE $20 $E8 $08 $30
.by  $3F $85 $46 $20 $E8 $08 $30 $38  $85 $47 $A9 $09 $8D $E2 $02 $8D  $E3 $02 $20 $E8 $08 $30 $29 $A0
.by  $00 $91 $44 $A4 $44 $A5 $45 $E6  $44 $D0 $02 $E6 $45 $C4 $46 $E5  $47 $90 $E7 $A9 $08 $48 $48 $6C
.by  $E2 $02 $6C $E0 $02 $A5 $22 $C9  $28 $D0 $05 $20 $61 $08 $10 $A5  $38 $60 $A2 $00 $86 $43 $A9 $3A
.by  $A0 $01 $D1 $24 $F0 $01 $C8 $C8  $B1 $24 $C9 $60 $B0 $0C $C9 $30  $B0 $0B $C9 $2E $D0 $04 $E0 $08
.by  $F0 $ED $88 $A9 $20 $9D $51 $09  $E8 $E0 $0B $90 $E2 $A0 $69 $A9  $01 $A2 $52 $20 $3A $09 $30 $3A
.by  $A2 $0B $BD $F5 $06 $F0 $69 $29  $DF $C9 $42 $D0 $2E $A0 $0B $BD  $04 $07 $D9 $50 $09 $D0 $24 $CA
.by  $88 $D0 $F4 $BD $03 $07 $8D $7E  $07 $A5 $43 $0A $0A $5D $04 $07  $8D $7D $07 $8C $7F $07 $8C $E9
.by  $08 $A0 $7D $99 $FF $06 $88 $D0  $FA $C8 $60 $E6 $43 $8A $29 $F0  $18 $69 $1B $AA $10 $BC $EE $0A
.by  $03 $A2 $52 $20 $4B $09 $10 $B0  $60 $A0 $00 $CC $7F $07 $90 $0E  $A2 $52 $20 $2C $09 $30 $13 $AC
.by  $7F $07 $F0 $1A $A0 $00 $B9 $00  $07 $C8 $8C $E9 $08 $A0 $01 $60  $A0 $AA $60 $08 $23 $09 $E7 $08
.by  $17 $09 $08 $09 $53 $08 $A0 $88  $60 $AC $7F $07 $EE $7F $07 $99  $00 $07 $A0 $01 $60 $A5 $2A $C9
.by  $08 $D0 $F7 $A2 $57 $AD $7D $07  $29 $03 $AC $7E $07 $D0 $04 $C9  $00 $F0 $DB $8C $0A $03 $8D $0B
.by  $03 $4D $7D $07 $8D $7D $07 $A9  $00 $8D $7E $07 $8E $02 $03 $4C  $53 $E4 $41 $55 $54 $4F $52 $55
.by  $4E $20 $20 $20 $20 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $46 $03 $E1 $07
.by  $09 $09 $A0 $00 $8C $D5 $02 $A0  $01 $8C $D6 $02 $8D $05 $03 $A9  $5C $8D $E7 $02 $A9 $09 $8D $E8
.by  $02 $A2 $44 $A8 $20 $86 $E4 $20  $8C $08 $30 $56 $20 $E8 $08 $30  $43 $85 $44 $20 $E8 $08 $30 $4A
.by  $85 $45 $C9 $FF $B0 $EE $20 $E8  $08 $30 $3F $85 $46 $20 $E8 $08  $30 $38 $85 $47 $A9 $09 $8D $E2
.by  $02 $8D $E3 $02 $20 $E8 $08 $30  $29 $A0 $00 $91 $44 $A4 $44 $A5  $45 $E6 $44 $D0 $02 $E6 $45 $C4
.by  $46 $E5 $47 $90 $E7 $A9 $08 $48  $48 $6C $E2 $02 $6C $E0 $02 $A5  $22 $C9 $28 $D0 $05 $20 $61 $08
.by  $10 $A5 $38 $60 $A2 $00 $86 $43  $A9 $3A $A0 $01 $D1 $24 $F0 $01  $C8 $C8 $B1 $24 $C9 $60 $B0 $0C
.by  $C9 $30 $B0 $0B $C9 $2E $D0 $04  $E0 $08 $F0 $ED $88 $A9 $20 $9D  $51 $09 $E8 $E0 $0B $90 $E2 $A0
.by  $69 $A9 $01 $A2 $52 $20 $3A $09  $30 $3A $A2 $0B $BD $F5 $06 $F0  $69 $29 $DF $C9 $42 $D0 $2E $A0
.by  $0B $BD $04 $07 $D9 $50 $09 $D0  $24 $CA $88 $D0 $F4 $BD $03 $07  $8D $FE $07 $A5 $43 $0A $0A $5D
.by  $04 $07 $8D $FD $07 $8C $FF $07  $8C $E9 $08 $A0 $FD $99 $FF $06  $88 $D0 $FA $C8 $60 $E6 $43 $8A
.by  $29 $F0 $18 $69 $1B $AA $10 $BC  $EE $0A $03 $A2 $52 $20 $4B $09  $10 $B0 $60 $A0 $00 $CC $FF $07
.by  $90 $0E $A2 $52 $20 $2C $09 $30  $13 $AC $FF $07 $F0 $1A $A0 $00  $B9 $00 $07 $C8 $8C $E9 $08 $A0
.by  $01 $60 $A0 $AA $60 $08 $23 $09  $E7 $08 $17 $09 $08 $09 $53 $08  $A0 $88 $60 $AC $FF $07 $EE $FF
.by  $07 $99 $00 $07 $A0 $01 $60 $A5  $2A $C9 $08 $D0 $F7 $A2 $57 $AD  $FD $07 $29 $03 $AC $FE $07 $D0
.by  $04 $C9 $00 $F0 $DB $8C $0A $03  $8D $0B $03 $4D $FD $07 $8D $FD  $07 $A9 $00 $8D $FE $07 $8E $02
.by  $03 $4C $53 $E4 $41 $55 $54 $4F  $52 $55 $4E $20 $20 $20 $20 $00  $00 $00 $00 $00
.endm

	end
