mads 2.1.0 build 8 (23 Dec 19)
Source: foxinit.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.4 [2020/05/22] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 = 0080			fxptr	.ds 2						; VBXE pointer
    16 = 0082			psptr	.ds 2						; PROGRAMSTACK Pointer
    17
    18 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    19 = 0088			edx	.ds 4
    20 = 008C			ecx	.ds 4
    21 = 0090			bp	.ds 2
    22 = 0092			bp2	.ds 2
    23
    24 				ztmp
    25 = 0094			ztmp8	.ds 1
    26 = 0095			ztmp9	.ds 1
    27 = 0096			ztmp10	.ds 1
    28 = 0097			ztmp11	.ds 1
    29
    30 = 0098			TMP	.ds 2
    31
    32 = 009A			STACKORIGIN	.ds STACKWIDTH*4
    33 				zpend
    34
    35 				; ------------------------------------------------------------
    36
    37 = 0084			ax	= eax
    38 = 0084			al	= eax
    39 = 0085			ah	= eax+1
    40
    41 = 008C			cx	= ecx
    42 = 008C			cl	= ecx
    43 = 008D			ch	= ecx+1
    44
    45 = 0088			dx	= edx
    46 = 0088			dl	= edx
    47 = 0089			dh	= edx+1
    48
    49 					org eax
    50
    51 = 0084			FP1MAN0	.ds 1
    52 = 0085			FP1MAN1	.ds 1
    53 = 0086			FP1MAN2	.ds 1
    54 = 0087			FP1MAN3	.ds 1
    55
    56 					org ztmp8
    57
    58 = 0094			FP1SGN	.ds 1
    59 = 0095			FP1EXP	.ds 1
    60
    61 					org edx
    62
    63 = 0088			FP2MAN0	.ds 1
    64
    65 = 0089			FP2MAN1	.ds 1
    66 = 008A			FP2MAN2	.ds 1
    67 = 008B			FP2MAN3	.ds 1
    68
    69 					org ztmp10
    70
    71 = 0096			FP2SGN	.ds 1
    72 = 0097			FP2EXP	.ds 1
    73
    74 					org ecx
    75
    76 = 008C			FPMAN0	.ds 1
    77 = 008D			FPMAN1	.ds 1
    78 = 008E			FPMAN2	.ds 1
    79 = 008F			FPMAN3	.ds 1
    80
    81 					org bp2
    82
    83 = 0092			FPSGN	.ds 1
    84 = 0093			FPEXP	.ds 1
    85
    86 					.ifdef MAIN.@DEFINES.S_VBXE
    87 					opt h-
    88 					ins 'atari\s_vbxe\sdxld2.obx'
    89 					opt h+
    90 					.endif
    91
    92 				; ------------------------------------------------------------
    93
    94 					org CODEORIGIN
    95
    96 2000				STATICDATA
Macro: STATICDATA [Source: foxinit.a65]
     1 FFFF> 2000-27D8> 14 78 + .by  $14 $78 $30 $46 $20 $44 $6F $73  $20 $49 $6E $69 $74 $69 $61 $6C  $69 $7A $65 $72 $20 $00 $0A $32
     2 2018 30 32 30 2D 30 35 + .by  $30 $32 $30 $2D $30 $35 $2D $32  $34 $00 $14 $53 $65 $6C $65 $63  $74 $20 $64 $72 $69 $76 $65 $20
     3 2030 28 31 2D 38 29 3A + .by  $28 $31 $2D $38 $29 $3A $20 $00  $07 $45 $72 $72 $6F $72 $3A $20  $00 $02 $3A $20 $00 $06 $44 $6F
     4 2048 75 62 6C 65 00 0F + .by  $75 $62 $6C $65 $00 $0F $53 $69  $6E $67 $6C $65 $2F $45 $6E $68  $61 $6E $63 $65 $64 $00 $08 $20
     5 2060 64 65 6E 73 69 74 + .by  $64 $65 $6E $73 $69 $74 $79 $00  $13 $57 $72 $69 $74 $65 $20 $78  $30 $46 $20 $44 $6F $73 $20 $28
     6 2078 59 2F 4E 29 00 0D + .by  $59 $2F $4E $29 $00 $0D $41 $67  $61 $69 $6E $20 $28 $59 $2F $4E  $29 $3F $20 $00 $46 $03 $EB $07
     7 2090 09 09 8D 05 03 A9 + .by  $09 $09 $8D $05 $03 $A9 $5C $8D  $E7 $02 $A9 $09 $8D $E8 $02 $A2  $44 $A8 $20 $86 $E4 $20 $8C $08
     8 20A8 30 56 20 E8 08 30 + .by  $30 $56 $20 $E8 $08 $30 $43 $85  $44 $20 $E8 $08 $30 $4A $85 $45  $C9 $FF $B0 $EE $20 $E8 $08 $30
     9 20C0 3F 85 46 20 E8 08 + .by  $3F $85 $46 $20 $E8 $08 $30 $38  $85 $47 $A9 $09 $8D $E2 $02 $8D  $E3 $02 $20 $E8 $08 $30 $29 $A0
    10 20D8 00 91 44 A4 44 A5 + .by  $00 $91 $44 $A4 $44 $A5 $45 $E6  $44 $D0 $02 $E6 $45 $C4 $46 $E5  $47 $90 $E7 $A9 $08 $48 $48 $6C
    11 20F0 E2 02 6C E0 02 A5 + .by  $E2 $02 $6C $E0 $02 $A5 $22 $C9  $28 $D0 $05 $20 $61 $08 $10 $A5  $38 $60 $A2 $00 $86 $43 $A9 $3A
    12 2108 A0 01 D1 24 F0 01 + .by  $A0 $01 $D1 $24 $F0 $01 $C8 $C8  $B1 $24 $C9 $60 $B0 $0C $C9 $30  $B0 $0B $C9 $2E $D0 $04 $E0 $08
    13 2120 F0 ED 88 A9 20 9D + .by  $F0 $ED $88 $A9 $20 $9D $51 $09  $E8 $E0 $0B $90 $E2 $A0 $69 $A9  $01 $A2 $52 $20 $3A $09 $30 $3A
    14 2138 A2 0B BD F5 06 F0 + .by  $A2 $0B $BD $F5 $06 $F0 $69 $29  $DF $C9 $42 $D0 $2E $A0 $0B $BD  $04 $07 $D9 $50 $09 $D0 $24 $CA
    15 2150 88 D0 F4 BD 03 07 + .by  $88 $D0 $F4 $BD $03 $07 $8D $7E  $07 $A5 $43 $0A $0A $5D $04 $07  $8D $7D $07 $8C $7F $07 $8C $E9
    16 2168 08 A0 7D 99 FF 06 + .by  $08 $A0 $7D $99 $FF $06 $88 $D0  $FA $C8 $60 $E6 $43 $8A $29 $F0  $18 $69 $1B $AA $10 $BC $EE $0A
    17 2180 03 A2 52 20 4B 09 + .by  $03 $A2 $52 $20 $4B $09 $10 $B0  $60 $A0 $00 $CC $7F $07 $90 $0E  $A2 $52 $20 $2C $09 $30 $13 $AC
    18 2198 7F 07 F0 1A A0 00 + .by  $7F $07 $F0 $1A $A0 $00 $B9 $00  $07 $C8 $8C $E9 $08 $A0 $01 $60  $A0 $AA $60 $08 $23 $09 $E7 $08
    19 21B0 17 09 08 09 53 08 + .by  $17 $09 $08 $09 $53 $08 $A0 $88  $60 $AC $7F $07 $EE $7F $07 $99  $00 $07 $A0 $01 $60 $A5 $2A $C9
    20 21C8 08 D0 F7 A2 57 AD + .by  $08 $D0 $F7 $A2 $57 $AD $7D $07  $29 $03 $AC $7E $07 $D0 $04 $C9  $00 $F0 $DB $8C $0A $03 $8D $0B
    21 21E0 03 4D 7D 07 8D 7D + .by  $03 $4D $7D $07 $8D $7D $07 $A9  $00 $8D $7E $07 $8E $02 $03 $4C  $53 $E4 $41 $55 $54 $4F $52 $55
    22 21F8 4E 20 20 20 20 00 + .by  $4E $20 $20 $20 $20 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $46 $03 $E1 $07
    23 2210 09 09 A0 00 8C D5 + .by  $09 $09 $A0 $00 $8C $D5 $02 $A0  $01 $8C $D6 $02 $8D $05 $03 $A9  $5C $8D $E7 $02 $A9 $09 $8D $E8
    24 2228 02 A2 44 A8 20 86 + .by  $02 $A2 $44 $A8 $20 $86 $E4 $20  $8C $08 $30 $56 $20 $E8 $08 $30  $43 $85 $44 $20 $E8 $08 $30 $4A
    25 2240 85 45 C9 FF B0 EE + .by  $85 $45 $C9 $FF $B0 $EE $20 $E8  $08 $30 $3F $85 $46 $20 $E8 $08  $30 $38 $85 $47 $A9 $09 $8D $E2
    26 2258 02 8D E3 02 20 E8 + .by  $02 $8D $E3 $02 $20 $E8 $08 $30  $29 $A0 $00 $91 $44 $A4 $44 $A5  $45 $E6 $44 $D0 $02 $E6 $45 $C4
    27 2270 46 E5 47 90 E7 A9 + .by  $46 $E5 $47 $90 $E7 $A9 $08 $48  $48 $6C $E2 $02 $6C $E0 $02 $A5  $22 $C9 $28 $D0 $05 $20 $61 $08
    28 2288 10 A5 38 60 A2 00 + .by  $10 $A5 $38 $60 $A2 $00 $86 $43  $A9 $3A $A0 $01 $D1 $24 $F0 $01  $C8 $C8 $B1 $24 $C9 $60 $B0 $0C
    29 22A0 C9 30 B0 0B C9 2E + .by  $C9 $30 $B0 $0B $C9 $2E $D0 $04  $E0 $08 $F0 $ED $88 $A9 $20 $9D  $51 $09 $E8 $E0 $0B $90 $E2 $A0
    30 22B8 69 A9 01 A2 52 20 + .by  $69 $A9 $01 $A2 $52 $20 $3A $09  $30 $3A $A2 $0B $BD $F5 $06 $F0  $69 $29 $DF $C9 $42 $D0 $2E $A0
    31 22D0 0B BD 04 07 D9 50 + .by  $0B $BD $04 $07 $D9 $50 $09 $D0  $24 $CA $88 $D0 $F4 $BD $03 $07  $8D $FE $07 $A5 $43 $0A $0A $5D
    32 22E8 04 07 8D FD 07 8C + .by  $04 $07 $8D $FD $07 $8C $FF $07  $8C $E9 $08 $A0 $FD $99 $FF $06  $88 $D0 $FA $C8 $60 $E6 $43 $8A
    33 2300 29 F0 18 69 1B AA + .by  $29 $F0 $18 $69 $1B $AA $10 $BC  $EE $0A $03 $A2 $52 $20 $4B $09  $10 $B0 $60 $A0 $00 $CC $FF $07
    34 2318 90 0E A2 52 20 2C + .by  $90 $0E $A2 $52 $20 $2C $09 $30  $13 $AC $FF $07 $F0 $1A $A0 $00  $B9 $00 $07 $C8 $8C $E9 $08 $A0
    35 2330 01 60 A0 AA 60 08 + .by  $01 $60 $A0 $AA $60 $08 $23 $09  $E7 $08 $17 $09 $08 $09 $53 $08  $A0 $88 $60 $AC $FF $07 $EE $FF
    36 2348 07 99 00 07 A0 01 + .by  $07 $99 $00 $07 $A0 $01 $60 $A5  $2A $C9 $08 $D0 $F7 $A2 $57 $AD  $FD $07 $29 $03 $AC $FE $07 $D0
    37 2360 04 C9 00 F0 DB 8C + .by  $04 $C9 $00 $F0 $DB $8C $0A $03  $8D $0B $03 $4D $FD $07 $8D $FD  $07 $A9 $00 $8D $FE $07 $8E $02
    38 2378 03 4C 53 E4 41 55 + .by  $03 $4C $53 $E4 $41 $55 $54 $4F  $52 $55 $4E $20 $20 $20 $20 $00  $00 $00 $00 $00
Source: foxinit.a65
    97
    98 				; ------------------------------------------------------------
    99
   100 238C			RTLIB
   101 238C				icl 'rtl6502.asm'
Source: rtl6502.asm
   388 					opt l+
   102
   103 				.print 'ZPAGE: ',fxptr,'..',zpend
   103 				ZPAGE: $0080..$00DA
   104
   105 				.print 'RTLIB: ',RTLIB,'..',*
   105 				RTLIB: $238C..$254B
   106
   107 				; ------------------------------------------------------------
   108
   109 254B			START
   110 254B BA				tsx
   111 254C 8E BC 27			stx MAIN.@halt+1
   112
   113 					.ifdef fmulinit
   114 					fmulinit
   115 					eif
   116
   117 = 0014			VLEN	= VARDATASIZE-VARINITSIZE
   118 = 27D9			VADR	= DATAORIGIN+VARINITSIZE
   119
   120 					ift VADR > $BFFF
   121 					ert 'Invalid memory address range ',VADR
   122 					eli (VLEN>0) && (VLEN<=256)
   123 254F A2 EC			ldx #256-VLEN
   124 2551 A9 00			lda #0
   125 2553 9D ED 26 E8 D0 FA		sta:rne VADR+VLEN-256,x+
   126 					eli VLEN>0
   127 					@fill #VADR #VLEN #0
   128 					eif
   129
   130 					.ifdef MAIN.@DEFINES.ROMOFF
   131 					icl 'atari\romoff.asm'
   132 					.endif
   133
   134 2559 A9 ED 85 82 A9 27 + 	mwa #PROGRAMSTACK psptr
   135
   136 2561 A2 0F			ldx #$0f					; DOS II+/D ParamStr
   137 2563 BD 40 03 9D BF 27 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   138
   139 256C E8				inx						; X = 0
   140 256D 86 90			stx bp						; BP = 0
   141
   142 256F 8E 08 D2			stx audctl					; reset POKEY
   143 2572 A9 03			lda #3
   144 2574 8D 0F D2			sta skctl
   145
   146 2577 CA				dex						; X = 255
   147
   148 2578				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: foxinit.a65]
   149
   150 2578			.local	MAIN						; PROCEDURE
   151
   152 2578 4C 63 26			jmp l_0093
   153
   154 				; ------------------------------------------------------------
   155
   156 257B			.local	SYSTEM						; UNIT
   157
   158 257B			.local	UPCASE						; FUNCTION
   159
   160 				; ------------------------------------------------------------
   161
   162 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   163 				; as Pointer
   164 257B B5 9A 8D DE 27		mva :STACKORIGIN,x A
   165 2580 CA				dex						; sub bx, 1
   166
   167 				; ------------------------------------------------------------
   168
   169 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   170 				; as Pointer
   171
   172 2581 E8				inx						; add bx, 1
   173 2582 AD DE 27 95 9A		mva A :STACKORIGIN,x
   174
   175 				; GenerateCaseProlog
   176 2587 CA				dex						; sub bx, 1
   177
   178 2588 B5 9B			lda :STACKORIGIN+1,x
   179 258A 18				clc						; clear carry for add
   180 258B 69 85			adc #$FF-122					; make m = $FF
   181 258D 69 1A			adc #122-97+1					; carry set if in range n to m
   182 258F 90 0C			jcc l_00CA
   183 2591			@
   184
   185 				; optimize OK (SYSTEM), line = 1364
   186
   187 2591 AD DE 27			lda A
   188 2594 38 E9 20			sub #$20
   189 2597 8D DF 27			sta RESULT
   190
   191 				; GenerateCaseStatementEpilog
   192 259A 4C A3 25			jmp a_0001
   193 259D			l_00CA
   194
   195 				; optimize OK (SYSTEM), line = 1366
   196
   197 259D AD DE 27 8D DF 27		mva A RESULT
   198
   199 				; GenerateCaseEpilog
   200 25A3			a_0001
   201 25A3			@exit
   202
   203 				; ------------------------------------------------------------
   204
   205 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   206 				; as Pointer
   207
   208 25A3 E8				inx						; add bx, 1
   209 25A4 AD DF 27 95 9A		mva RESULT :STACKORIGIN,x
   210
   211 					.ifdef @new
   212 					lda <@VarData
   213 					sta :ztmp
   214 					lda >@VarData
   215 					ldy #@VarDataSize-1
   216 					jmp @FreeMem
   217 					eif
   218
   219 				; ------------------------------------------------------------
   220
   221 = 27DE			A	= DATAORIGIN+$000B
   222 = 27DF			RESULT	= DATAORIGIN+$000C
   223
   224 = 27DE			@VarData	= A
   225 = 0002			@VarDataSize	= 2
   226
   227 25A9 60				rts						; ret
   228 				.endl
   229
   230 				; ------------------------------------------------------------
   231
   232 = 0101			__PORTB_BANKS	= $0101
   233 = 0648			M_PI_2	= $0648
   234 = 0192			D_PI_2	= $0192
   235 = 0004			D_PI_180	= $04
   236 = 0000			MGTIA	= $00
   237 = 0080			MVBXE	= $80
   238 = 0000			VBXE_XDLADR	= $00
   239 = 0100			VBXE_BCBADR	= $0100
   240 = 1000			VBXE_MAPADR	= $1000
   241 = 5000			VBXE_OVRADR	= $5000
   242 = B000			VBXE_WINDOW	= $B000
   243 = 0000			IDLI	= $00
   244 = 0001			IVBL	= $01
   245 = 00FE			CH_DELCHR	= $FE
   246 = 009B			CH_ENTER	= $9B
   247 = 001B			CH_ESC	= $1B
   248 = 001C			CH_CURS_UP	= $1C
   249 = 001D			CH_CURS_DOWN	= $1D
   250 = 001E			CH_CURS_LEFT	= $1E
   251 = 001F			CH_CURS_RIGHT	= $1F
   252 = 007F			CH_TAB	= $7F
   253 = 009B			CH_EOL	= $9B
   254 = 007D			CH_CLR	= $7D
   255 = 00FD			CH_BELL	= $FD
   256 = 007E			CH_DEL	= $7E
   257 = 009C			CH_DELLINE	= $9C
   258 = 009D			CH_INSLINE	= $9D
   259 = 0000			COLOR_BLACK	= $00
   260 = 000E			COLOR_WHITE	= $0E
   261 = 0032			COLOR_RED	= $32
   262 = 0096			COLOR_CYAN	= $96
   263 = 0068			COLOR_VIOLET	= $68
   264 = 00C4			COLOR_GREEN	= $C4
   265 = 0074			COLOR_BLUE	= $74
   266 = 00EE			COLOR_YELLOW	= $EE
   267 = 0028			COLOR_ORANGE	= $28
   268 = 00E4			COLOR_BROWN	= $E4
   269 = 003C			COLOR_LIGHTRED	= $3C
   270 = 0004			COLOR_GRAY1	= $04
   271 = 0006			COLOR_GRAY2	= $06
   272 = 000A			COLOR_GRAY3	= $0A
   273 = 00CC			COLOR_LIGHTGREEN	= $CC
   274 = 007C			COLOR_LIGHTBLUE	= $7C
   275 = 0004			FMOPENREAD	= $04
   276 = 0008			FMOPENWRITE	= $08
   277 = 0009			FMOPENAPPEND	= $09
   278 = 000C			FMOPENREADWRITE	= $0C
   279 = 27D3			SCREENWIDTH	= DATAORIGIN+$0000
   280 = 27D5			SCREENHEIGHT	= DATAORIGIN+$0002
   281 = 27D7			DATESEPARATOR	= DATAORIGIN+$0004
   282 = D014			TVSYSTEM	= $D014
   283 = 02C0			adr.PALETTE	= $02C0
   284 25AA			.var PALETTE	= adr.PALETTE .word
   285 = D012			adr.HPALETTE	= $D012
   286 25AA			.var HPALETTE	= adr.HPALETTE .word
   287 = 27D8			FILEMODE	= DATAORIGIN+$0005
   288 = 27D9			GRAPHMODE	= DATAORIGIN+$0006
   289 = 27DA			IORESULT	= DATAORIGIN+$0007
   290 = 27DB			EOLN	= DATAORIGIN+$0008
   291 = 27DC			RNDSEED	= DATAORIGIN+$0009
   292
   293 = 25AA C0 02		PALETTE
   293 = 25AC 12 D0		HPALETTE
   293 				.endl							; UNIT SYSTEM
   294
   295 				; ------------------------------------------------------------
   296
   297 25AE			.local	ATARI						; UNIT
   298
   299 				; ------------------------------------------------------------
   300
   301 = 0012			RTCLOK	= $12
   302 = 004D			ATRACT	= $4D
   303 = 0052			LMARGIN	= $52
   304 = 0053			RMARGIN	= $53
   305 = 0054			ROWCRS	= $54
   306 = 0055			COLCRS	= $55
   307 = 0057			DINDEX	= $57
   308 = 0058			SAVMSC	= $58
   309 = 0062			PALNTS	= $62
   310 = 006A			RAMTOP	= $6A
   311 = 0200			VDSLST	= $0200
   312 = 0230			SDLSTL	= $0230
   313 = 0290			TXTROW	= $0290
   314 = 0291			TXTCOL	= $0291
   315 = 0293			TINDEX	= $0293
   316 = 0294			TXTMSC	= $0294
   317 = 022F			SDMCTL	= $022F
   318 = 026F			GPRIOR	= $026F
   319 = 02F0			CRSINH	= $02F0
   320 = 02F3			CHACT	= $02F3
   321 = 02F4			CHBAS	= $02F4
   322 = 02FC			CH	= $02FC
   323 = 02C0			PCOLR0	= $02C0
   324 = 02C1			PCOLR1	= $02C1
   325 = 02C2			PCOLR2	= $02C2
   326 = 02C3			PCOLR3	= $02C3
   327 = 02C4			COLOR0	= $02C4
   328 = 02C5			COLOR1	= $02C5
   329 = 02C6			COLOR2	= $02C6
   330 = 02C7			COLOR3	= $02C7
   331 = 02C8			COLOR4	= $02C8
   332 = 02C8			COLBAKS	= $02C8
   333 = D000			HPOSP0	= $D000
   334 = D001			HPOSP1	= $D001
   335 = D002			HPOSP2	= $D002
   336 = D003			HPOSP3	= $D003
   337 = D004			HPOSM0	= $D004
   338 = D005			HPOSM1	= $D005
   339 = D006			HPOSM2	= $D006
   340 = D007			HPOSM3	= $D007
   341 = D008			SIZEP0	= $D008
   342 = D009			SIZEP1	= $D009
   343 = D00A			SIZEP2	= $D00A
   344 = D00B			SIZEP3	= $D00B
   345 = D00C			SIZEM	= $D00C
   346 = D00D			GRAFP0	= $D00D
   347 = D00E			GRAFP1	= $D00E
   348 = D00F			GRAFP2	= $D00F
   349 = D010			GRAFP3	= $D010
   350 = D011			GRAFM	= $D011
   351 = D004			P0PF	= $D004
   352 = D014			PAL	= $D014
   353 = D012			COLPM0	= $D012
   354 = D013			COLPM1	= $D013
   355 = D014			COLPM2	= $D014
   356 = D015			COLPM3	= $D015
   357 = D016			COLPF0	= $D016
   358 = D017			COLPF1	= $D017
   359 = D018			COLPF2	= $D018
   360 = D019			COLPF3	= $D019
   361 = D01A			COLBK	= $D01A
   362 = D01B			PRIOR	= $D01B
   363 = D01D			GRACTL	= $D01D
   364 = D01E			HITCLR	= $D01E
   365 = D200			AUDF1	= $D200
   366 = D201			AUDC1	= $D201
   367 = D202			AUDF2	= $D202
   368 = D203			AUDC2	= $D203
   369 = D204			AUDF3	= $D204
   370 = D205			AUDC3	= $D205
   371 = D206			AUDF4	= $D206
   372 = D207			AUDC4	= $D207
   373 = D208			AUDCTL	= $D208
   374 = D20F			SKSTAT	= $D20F
   375 = D301			PORTB	= $D301
   376 = D400			DMACTL	= $D400
   377 = D401			CHACTL	= $D401
   378 = D402			DLISTL	= $D402
   379 = D404			HSCROL	= $D404
   380 = D405			VSCROL	= $D405
   381 = D407			PMBASE	= $D407
   382 = D409			CHBASE	= $D409
   383 = D40A			WSYNC	= $D40A
   384 = D40B			VCOUNT	= $D40B
   385 = D40C			PENH	= $D40C
   386 = D40D			PENV	= $D40D
   387 = D40E			NMIEN	= $D40E
   388
   389 				.endl							; UNIT ATARI
   390
   391 				; ------------------------------------------------------------
   392
   393 25AE			.local	CRT						; UNIT
   394
   395 				; ------------------------------------------------------------
   396
   397 = 27E0			TEXTATTR	= DATAORIGIN+$000D
   398 = D01F			CONSOL	= $D01F
   399 = 0000			CN_START_SELECT_OPTION	= $00
   400 = 0001			CN_SELECT_OPTION	= $01
   401 = 0002			CN_START_OPTION	= $02
   402 = 0003			CN_OPTION	= $03
   403 = 0004			CN_START_SELECT	= $04
   404 = 0005			CN_SELECT	= $05
   405 = 0006			CN_START	= $06
   406 = 0007			CN_NONE	= $07
   407 = 0000			BW40	= $00
   408 = 0001			CO40	= $01
   409 = 0002			BW80	= $02
   410 = 0003			CO80	= $03
   411 = 0007			MONO	= $07
   412 = 0001			C40	= $01
   413 = 0003			C80	= $03
   414 = 0000			BLACK	= $00
   415 = 0001			BLUE	= $01
   416 = 0002			GREEN	= $02
   417 = 0003			CYAN	= $03
   418 = 0004			RED	= $04
   419 = 0005			MAGENTA	= $05
   420 = 0006			BROWN	= $06
   421 = 0007			LIGHTGRAY	= $07
   422 = 0008			DARKGRAY	= $08
   423 = 0009			LIGHTBLUE	= $09
   424 = 000A			LIGHTGREEN	= $0A
   425 = 000B			LIGHTCYAN	= $0B
   426 = 000C			LIGHTRED	= $0C
   427 = 000D			LIGHTMAGENTA	= $0D
   428 = 000E			YELLOW	= $0E
   429 = 000F			WHITE	= $0F
   430 = 0080			BLINK	= $80
   431
   432 				.endl							; UNIT CRT
   433
   434 				; ------------------------------------------------------------
   435
   436 25AE			.local	SIODISK						; UNIT
   437
   438 25AE			.local	READCONFIG					; FUNCTION | ASSEMBLER
   439
   440 				; ------------------------------------------------------------
   441
   442 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   443 				; as Pointer
   444 25AE B5 9A 8D E1 27		mva :STACKORIGIN,x DEVNUM
   445 25B3 CA				dex						; sub bx, 1
   446
   447 				; ---------------------  ASM Block 060  ---------------------
   448
   449 25B4 8A 48			txa:pha
   450
   451 25B6 AD E1 27			lda devnum
   452 25B9				m@call	@sio.devnrm
Macro: M@CALL [Source: rtl6502.asm]
    12 25B9 20 C1 23				jsr @SIO.DEVNRM
   453 25BC 98				tya
   454 25BD 30 37			bmi _err
   455
   456 25BF A9 53			lda #'S'	; odczyt statusu stacji
   457 25C1 8D 02 03			sta dcmnd
   458
   459 25C4				m@call	jdskint	; $e453
Macro: M@CALL [Source: rtl6502.asm]
    12 25C4 20 53 E4				jsr JDSKINT
   460 25C7 98				tya
   461 25C8 30 2C			bmi _err
   462
   463 25CA A2 00			ldx <256	; 256 bajtow
   464 25CC A0 01			ldy >256	; w sektorze
   465
   466 25CE AD EA 02			lda dvstat
   467 25D1 29 20			and #%00100000
   468 25D3 D0 04			bne _skp
   469
   470 25D5 A2 80			ldx <128	;128 bajtow
   471 25D7 A0 00			ldy >128	;w sektorze
   472
   473 25D9			_skp	m@call	@sio.devsec
Macro: M@CALL [Source: rtl6502.asm]
    12 25D9 20 D8 23				jsr @SIO.DEVSEC
   474
   475 25DC AD EA 02 8D E2 27		mva dvstat result
   476 25E2 AD EB 02 8D E3 27		mva dvstat+1 result+1
   477 25E8 AD EC 02 8D E4 27		mva dvstat+2 result+2
   478 25EE AD ED 02 8D E5 27		mva dvstat+3 result+3
   479
   480 25F4 A0 01			ldy #1
   481
   482 25F6 8C DA 27		_err	sty MAIN.SYSTEM.IOResult
   483
   484 25F9 68 AA			pla:tax
   485
   486 25FB			@exit
   487
   488 				; ------------------------------------------------------------
   489
   490 				; Push CARDINAL / INTEGER / REAL / SINGLE
   491 				; as Pointer
   492
   493 25FB E8				inx						; add bx, 1
   494 25FC AD E2 27 95 9A		mva RESULT :STACKORIGIN,x
   495 2601 AD E3 27 95 AA		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   496 2606 AD E4 27 95 BA		mva RESULT+2 :STACKORIGIN+STACKWIDTH*2,x
   497 260B AD E5 27 95 CA		mva RESULT+3 :STACKORIGIN+STACKWIDTH*3,x
   498
   499 					.ifdef @new
   500 					lda <@VarData
   501 					sta :ztmp
   502 					lda >@VarData
   503 					ldy #@VarDataSize-1
   504 					jmp @FreeMem
   505 					eif
   506
   507 				; ------------------------------------------------------------
   508
   509 = 27E1			DEVNUM	= DATAORIGIN+$000E
   510 = 27E2			RESULT	= DATAORIGIN+$000F
   511
   512 = 27E1			@VarData	= DEVNUM
   513 = 0005			@VarDataSize	= 5
   514
   515 2610 60				rts						; ret
   516 				.endl
   517
   518 2611			.local	WRITEBOOT					; PROCEDURE | ASSEMBLER
   519
   520 				; ------------------------------------------------------------
   521
   522 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   523 				; as Pointer
   524 2611 B5 9A 8D E7 27		mva :STACKORIGIN,x BUF
   525 2616 B5 AA 8D E8 27		mva :STACKORIGIN+STACKWIDTH,x BUF+1
   526 261B CA				dex						; sub bx, 1
   527
   528 				; ------------------------------------------------------------
   529
   530 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   531 				; as Pointer
   532 261C B5 9A 8D E6 27		mva :STACKORIGIN,x DEVNUM
   533 2621 CA				dex						; sub bx, 1
   534
   535 				; ---------------------  ASM Block 064  ---------------------
   536
   537 2622 8A 48			txa:pha
   538
   539 2624 AD E6 27			lda devnum
   540 2627				m@call	@sio.devnrm
Macro: M@CALL [Source: rtl6502.asm]
    12 2627 20 C1 23				jsr @SIO.DEVNRM
   541 262A 98				tya
   542 262B 30 30			bmi _err
   543
   544 262D A9 01			lda <1
   545 262F 8D 0A 03			sta daux1
   546 2632 A9 00			lda >1
   547 2634 8D 0B 03			sta daux2
   548
   549 2637 AE E7 27		lp	ldx buf
   550 263A AC E8 27			ldy buf+1
   551 263D A9 50			lda #'P'	; $50 - Put Sector, without verify
   552
   553 263F				m@call	@sio.boot
Macro: M@CALL [Source: rtl6502.asm]
    12 263F 20 B1 23				jsr @SIO.BOOT
   554 2642 98				tya
   555 2643 30 18			bmi _err
   556
   557 2645 18 AD E7 27 69 80 + 	adw buf #128
   558
   559 2653 EE 0A 03			inc daux1
   560 2656 AD 0A 03			lda daux1
   561 2659 C9 04			cmp #4
   562 265B D0 DA			bne lp
   563
   564 265D 8C DA 27		_err	sty MAIN.SYSTEM.IOResult
   565
   566 2660 68 AA			pla:tax
   567
   568
   569 				; ------------------------------------------------------------
   570
   571 = 27E6			DEVNUM	= DATAORIGIN+$0013
   572 = 27E7			BUF	= DATAORIGIN+$0014
   573
   574 = 27E6			@VarData	= DEVNUM
   575 = 0003			@VarDataSize	= 3
   576
   577 2662			@exit
   578 					.ifdef @new
   579 					lda <@VarData
   580 					sta :ztmp
   581 					lda >@VarData
   582 					ldy #@VarDataSize-1
   583 					jmp @FreeMem
   584 					eif
   585 2662 60				rts						; ret
   586 				.endl
   587
   588 				; ------------------------------------------------------------
   589
   590 				.endl							; UNIT SIODISK
   591 2663			l_0093
   592
   593 				; optimize FAIL (100, foxinit.pas), line = 73
   594 					@printSTRING #CODEORIGIN+$0000
   594 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
   594 2663 A0 20		 LDY> CODEORIGIN+$0000
   594 2665 A9 00		 LDA< CODEORIGIN+$0000
   594 2667 20 8F 24		 JSR @PRINTSTRING
   595 					@printSTRING #CODEORIGIN+$0016
   595 				 LDY> CODEORIGIN+$0016\ LDA< CODEORIGIN+$0016\ JSR @PRINTSTRING
   595 266A A0 20		 LDY> CODEORIGIN+$0016
   595 266C A9 16		 LDA< CODEORIGIN+$0016
   595 266E 20 8F 24		 JSR @PRINTSTRING
   596 					@print #$9B
   596 				 LDY# $9B\ JSR @PRINT
   596 2671 A0 9B		 LDY# $9B
   596 2673 20 86 24		 JSR @PRINT
   597 2676 20 81 24			@printEOL
   598 2679			AGAIN
   599
   600 				; optimize OK (foxinit.pas), line = 77
   601
   602 2679 A9 00 8D EC 27		mva #$00 OK
   603
   604 				; --- RepeatUntilProlog
   605 267E			l_012A
   606
   607 				; optimize FAIL (100, foxinit.pas), line = 81
   608 					@printSTRING #CODEORIGIN+$0022
   608 				 LDY> CODEORIGIN+$0022\ LDA< CODEORIGIN+$0022\ JSR @PRINTSTRING
   608 267E A0 20		 LDY> CODEORIGIN+$0022
   608 2680 A9 22		 LDA< CODEORIGIN+$0022
   608 2682 20 8F 24		 JSR @PRINTSTRING
   609 2685 20 F4 23			@getline
   610 2688 AD 01 04 8D EB 27		mva @buf+1 CH
   611
   612 				; ------------------------------------------------------------
   613
   614 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   615 				; as Pointer
   616
   617 268E E8				inx						; add bx, 1
   618 268F AD EB 27 95 9A		mva CH :STACKORIGIN,x
   619
   620 				; GenerateCaseProlog
   621 2694 CA				dex						; sub bx, 1
   622
   623 2695 B5 9B			lda :STACKORIGIN+1,x
   624 2697 18				clc						; clear carry for add
   625 2698 69 C7			adc #$FF-56					; make m = $FF
   626 269A 69 08			adc #56-49+1					; carry set if in range n to m
   627 269C 90 08			jcc l_013B
   628 269E			@
   629
   630 				; optimize OK (foxinit.pas), line = 85
   631
   632 269E A9 01 8D EC 27		mva #$01 OK
   633
   634 				; GenerateCaseStatementEpilog
   635 26A3 4C AB 26			jmp a_0002
   636 26A6			l_013B
   637
   638 				; optimize OK (foxinit.pas), line = 87
   639
   640 26A6 A9 00 8D EC 27		mva #$00 OK
   641
   642 				; GenerateCaseEpilog
   643 26AB			a_0002
   644
   645 				; optimize OK (foxinit.pas), line = 90
   646
   647 26AB AD EC 27			lda OK
   648 26AE F0 CE			jeq l_012A
   649
   650 				; optimize OK (foxinit.pas), line = 92
   651
   652 26B0 AD EB 27			lda CH
   653 26B3 38 E9 30			sub #$30
   654 26B6 8D EA 27			sta DRV
   655
   656 				; optimize FAIL ('SIODISK.READCONFIG', foxinit.pas), line = 94
   657 26B9 E8				inx
   658 26BA AD EA 27 95 9A		mva DRV :STACKORIGIN,x
   659 26BF 20 AE 25			jsr SIODISK.READCONFIG
   660 26C2 E8				inx
   661 26C3 A9 20 95 9A			mva #$20 :STACKORIGIN,x
   662 26C7 20 78 24			jsr @expandToCARD.BYTE
   663 26CA 20 4B 24			jsr andEAX_ECX
   664 26CD CA				dex
   665 26CE B5 9A 8D E9 27		mva :STACKORIGIN,x DENSITY
   666 26D3 CA				dex
   667
   668 				; optimize OK (foxinit.pas), line = 96
   669
   670 26D4 AD DA 27			lda SYSTEM.IORESULT
   671 26D7 10 18			jpl l_0176
   672
   673 				; optimize FAIL (100, foxinit.pas), line = 97
   674 					@printSTRING #CODEORIGIN+$0038
   674 				 LDY> CODEORIGIN+$0038\ LDA< CODEORIGIN+$0038\ JSR @PRINTSTRING
   674 26D9 A0 20		 LDY> CODEORIGIN+$0038
   674 26DB A9 38		 LDA< CODEORIGIN+$0038
   674 26DD 20 8F 24		 JSR @PRINTSTRING
   675 26E0 AD DA 27			lda SYSTEM.IORESULT
   676 26E3 20 C0 24			jsr @printBYTE._a
   677 					@print #$9B
   677 				 LDY# $9B\ JSR @PRINT
   677 26E6 A0 9B		 LDY# $9B
   677 26E8 20 86 24		 JSR @PRINT
   678 26EB 20 81 24			@printEOL
   679 26EE 4C 79 26			jmp AGAIN
   680 26F1			l_0176
   681
   682 				; optimize FAIL (100, foxinit.pas), line = 101
   683 					@print #$44
   683 				 LDY# $44\ JSR @PRINT
   683 26F1 A0 44		 LDY# $44
   683 26F3 20 86 24		 JSR @PRINT
   684 26F6 AD EA 27			lda DRV
   685 26F9 20 C0 24			jsr @printBYTE._a
   686 					@printSTRING #CODEORIGIN+$0041
   686 				 LDY> CODEORIGIN+$0041\ LDA< CODEORIGIN+$0041\ JSR @PRINTSTRING
   686 26FC A0 20		 LDY> CODEORIGIN+$0041
   686 26FE A9 41		 LDA< CODEORIGIN+$0041
   686 2700 20 8F 24		 JSR @PRINTSTRING
   687
   688 				; optimize OK (foxinit.pas), line = 103
   689
   690 2703 AD E9 27			lda DENSITY
   691 2706 F0 0A			jeq l_01A7
   692
   693 				; optimize FAIL (100, foxinit.pas), line = 104
   694 					@printSTRING #CODEORIGIN+$0045
   694 				 LDY> CODEORIGIN+$0045\ LDA< CODEORIGIN+$0045\ JSR @PRINTSTRING
   694 2708 A0 20		 LDY> CODEORIGIN+$0045
   694 270A A9 45		 LDA< CODEORIGIN+$0045
   694 270C 20 8F 24		 JSR @PRINTSTRING
   695 270F 4C 19 27			jmp l_01B4
   696 2712			l_01A7
   697
   698 				; optimize FAIL (100, foxinit.pas), line = 106
   699 					@printSTRING #CODEORIGIN+$004D
   699 				 LDY> CODEORIGIN+$004D\ LDA< CODEORIGIN+$004D\ JSR @PRINTSTRING
   699 2712 A0 20		 LDY> CODEORIGIN+$004D
   699 2714 A9 4D		 LDA< CODEORIGIN+$004D
   699 2716 20 8F 24		 JSR @PRINTSTRING
   700 2719			l_01B4
   701
   702 				; optimize FAIL (100, foxinit.pas), line = 108
   703 					@printSTRING #CODEORIGIN+$005E
   703 				 LDY> CODEORIGIN+$005E\ LDA< CODEORIGIN+$005E\ JSR @PRINTSTRING
   703 2719 A0 20		 LDY> CODEORIGIN+$005E
   703 271B A9 5E		 LDA< CODEORIGIN+$005E
   703 271D 20 8F 24		 JSR @PRINTSTRING
   704 					@print #$9B
   704 				 LDY# $9B\ JSR @PRINT
   704 2720 A0 9B		 LDY# $9B
   704 2722 20 86 24		 JSR @PRINT
   705 2725 20 81 24			@printEOL
   706
   707 				; optimize FAIL (100, foxinit.pas), line = 110
   708 					@printSTRING #CODEORIGIN+$0068
   708 				 LDY> CODEORIGIN+$0068\ LDA< CODEORIGIN+$0068\ JSR @PRINTSTRING
   708 2728 A0 20		 LDY> CODEORIGIN+$0068
   708 272A A9 68		 LDA< CODEORIGIN+$0068
   708 272C 20 8F 24		 JSR @PRINTSTRING
   709 272F 20 F4 23			@getline
   710 2732 AD 01 04 8D EB 27		mva @buf+1 CH
   711
   712 				; optimize FAIL ('SYSTEM.UPCASE', foxinit.pas), line = 113
   713 2738 E8				inx
   714 2739 AD EB 27 95 9A		mva CH :STACKORIGIN,x
   715 273E 20 7B 25			jsr SYSTEM.UPCASE
   716 2741 CA				dex
   717 2742 B5 9B			lda :STACKORIGIN+1,x
   718 2744 C9 59			cmp #$59
   719 2746 D0 30			jne l_01D8
   720 2748			@
   721
   722 				; optimize OK (foxinit.pas), line = 115
   723
   724 2748 AD E9 27			lda DENSITY
   725 274B F0 17			jeq l_01EB
   726
   727 				; optimize FAIL ('SIODISK.WRITEBOOT', foxinit.pas), line = 116
   728 274D E8				inx
   729 274E AD EA 27 95 9A		mva DRV :STACKORIGIN,x
   730 2753 E8				inx
   731 2754 AD D1 27 95 9A		mva XDOS_D :STACKORIGIN,x
   732 2759 AD D2 27 95 AA		mva XDOS_D+1 :STACKORIGIN+STACKWIDTH,x
   733 275E 20 11 26			jsr SIODISK.WRITEBOOT
   734 2761 4C 78 27			jmp l_01FB
   735 2764			l_01EB
   736
   737 				; optimize FAIL ('SIODISK.WRITEBOOT', foxinit.pas), line = 118
   738 2764 E8				inx
   739 2765 AD EA 27 95 9A		mva DRV :STACKORIGIN,x
   740 276A E8				inx
   741 276B AD CF 27 95 9A		mva XDOS_S :STACKORIGIN,x
   742 2770 AD D0 27 95 AA		mva XDOS_S+1 :STACKORIGIN+STACKWIDTH,x
   743 2775 20 11 26			jsr SIODISK.WRITEBOOT
   744 2778			l_01FB
   745 2778			l_01D8
   746
   747 				; optimize OK (foxinit.pas), line = 122
   748
   749 2778 AD DA 27			lda SYSTEM.IORESULT
   750 277B 10 18			jpl l_0215
   751
   752 				; optimize FAIL (100, foxinit.pas), line = 123
   753 					@printSTRING #CODEORIGIN+$0038
   753 				 LDY> CODEORIGIN+$0038\ LDA< CODEORIGIN+$0038\ JSR @PRINTSTRING
   753 277D A0 20		 LDY> CODEORIGIN+$0038
   753 277F A9 38		 LDA< CODEORIGIN+$0038
   753 2781 20 8F 24		 JSR @PRINTSTRING
   754 2784 AD DA 27			lda SYSTEM.IORESULT
   755 2787 20 C0 24			jsr @printBYTE._a
   756 					@print #$9B
   756 				 LDY# $9B\ JSR @PRINT
   756 278A A0 9B		 LDY# $9B
   756 278C 20 86 24		 JSR @PRINT
   757 278F 20 81 24			@printEOL
   758 2792 4C 79 26			jmp AGAIN
   759 2795			l_0215
   760
   761 				; optimize FAIL (100, foxinit.pas), line = 127
   762 					@printSTRING #CODEORIGIN+$007D
   762 				 LDY> CODEORIGIN+$007D\ LDA< CODEORIGIN+$007D\ JSR @PRINTSTRING
   762 2795 A0 20		 LDY> CODEORIGIN+$007D
   762 2797 A9 7D		 LDA< CODEORIGIN+$007D
   762 2799 20 8F 24		 JSR @PRINTSTRING
   763 279C 20 81 24			@printEOL
   764 279F 20 F4 23			@getline
   765 27A2 AD 01 04 8D EB 27		mva @buf+1 CH
   766
   767 				; optimize FAIL ('SYSTEM.UPCASE', foxinit.pas), line = 130
   768 27A8 E8				inx
   769 27A9 AD EB 27 95 9A		mva CH :STACKORIGIN,x
   770 27AE 20 7B 25			jsr SYSTEM.UPCASE
   771 27B1 CA				dex
   772 27B2 B5 9B			lda :STACKORIGIN+1,x
   773 27B4 C9 59			cmp #$59
   774 27B6 D0 03			jne l_0241
   775 27B8			@
   776 27B8 4C 79 26			jmp AGAIN
   777 27BB			l_0241
   778
   779 				; ------------------------------------------------------------
   780
   781 = 208C			adr.XDOS_S	= CODEORIGIN+$008C
   782 27BB			.var XDOS_S	= adr.XDOS_S .word
   783 = 220C			adr.XDOS_D	= CODEORIGIN+$020C
   784 27BB			.var XDOS_D	= adr.XDOS_D .word
   785 = 27E9			DENSITY	= DATAORIGIN+$0016
   786 = 27EA			DRV	= DATAORIGIN+$0017
   787 = 27EB			CH	= DATAORIGIN+$0018
   788 = 27EC			OK	= DATAORIGIN+$0019
   789 27BB			@exit
   790
   791 27BB A2 00		@halt	ldx #0
   792 27BD 9A				txs
   793 					.ifdef MAIN.@DEFINES.ROMOFF
   794 					inc portb
   795 					.endif
   796
   797 27BE 60				rts
   798
   799 				; ------------------------------------------------------------
   800
   801 27BF 00 00 00 00 00 00 + IOCB@COPY	:16 brk
   802
   803 				; ------------------------------------------------------------
   804
   805 27CF			.local	@DEFINES
   806 27CF			ATARI
   807 				.endl
   808
   809 = 27CF 8C 20		XDOS_S
   809 = 27D1 0C 22		XDOS_D
   809 				.endl							; MAIN
   810
   811 				; ------------------------------------------------------------
   812 				; ------------------------------------------------------------
   813
   814 				.macro	UNITINITIALIZATION
   815 				
   816 					.ifdef MAIN.SYSTEM.@UnitInit
   817 					jsr MAIN.SYSTEM.@UnitInit
   818 					eif
   819 				
   820 					.ifdef MAIN.ATARI.@UnitInit
   821 					jsr MAIN.ATARI.@UnitInit
   822 					eif
   823 				
   824 					.ifdef MAIN.CRT.@UnitInit
   825 					jsr MAIN.CRT.@UnitInit
   826 					eif
   827 				
   828 					.ifdef MAIN.SIODISK.@UnitInit
   829 					jsr MAIN.SIODISK.@UnitInit
   830 					eif
   831 				.endm
   832
   833 				; ------------------------------------------------------------
   834
   835 					ift .SIZEOF(MAIN.SYSTEM) > 0
   836 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
   836 				SYSTEM: $257B..$25AD
   837 					eif
   838
   839 					ift .SIZEOF(MAIN.ATARI) > 0
   840 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
   841 					eif
   842
   843 					ift .SIZEOF(MAIN.CRT) > 0
   844 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
   845 					eif
   846
   847 					ift .SIZEOF(MAIN.SIODISK) > 0
   848 					.print 'SIODISK: ',MAIN.SIODISK,'..',MAIN.SIODISK+.SIZEOF(MAIN.SIODISK)-1
   848 				SIODISK: $25AE..$2662
   849 					eif
   850
   851 					.print 'CODE: ',CODEORIGIN,'..',*-1
   851 				CODE: $2000..$27D2
   852
   853 				; ------------------------------------------------------------
   854
   855 27D3			DATAORIGIN
   856 27D3 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
   857
   858 = 0006			VARINITSIZE	= *-DATAORIGIN
   859 = 001A			VARDATASIZE	= 26
   860
   861 = 27ED			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
   862
   863 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
   863 				DATA: $27D3..$27ED
   864
   865 02E0-02E1> 4B 25			run START
   866
   867 				; ------------------------------------------------------------
   868
   869 				.macro	STATICDATA
   870 				.by  $14 $78 $30 $46 $20 $44 $6F $73  $20 $49 $6E $69 $74 $69 $61 $6C  $69 $7A $65 $72 $20 $00 $0A $32
   871 				.by  $30 $32 $30 $2D $30 $35 $2D $32  $34 $00 $14 $53 $65 $6C $65 $63  $74 $20 $64 $72 $69 $76 $65 $20
   872 				.by  $28 $31 $2D $38 $29 $3A $20 $00  $07 $45 $72 $72 $6F $72 $3A $20  $00 $02 $3A $20 $00 $06 $44 $6F
   873 				.by  $75 $62 $6C $65 $00 $0F $53 $69  $6E $67 $6C $65 $2F $45 $6E $68  $61 $6E $63 $65 $64 $00 $08 $20
   874 				.by  $64 $65 $6E $73 $69 $74 $79 $00  $13 $57 $72 $69 $74 $65 $20 $78  $30 $46 $20 $44 $6F $73 $20 $28
   875 				.by  $59 $2F $4E $29 $00 $0D $41 $67  $61 $69 $6E $20 $28 $59 $2F $4E  $29 $3F $20 $00 $46 $03 $EB $07
   876 				.by  $09 $09 $8D $05 $03 $A9 $5C $8D  $E7 $02 $A9 $09 $8D $E8 $02 $A2  $44 $A8 $20 $86 $E4 $20 $8C $08
   877 				.by  $30 $56 $20 $E8 $08 $30 $43 $85  $44 $20 $E8 $08 $30 $4A $85 $45  $C9 $FF $B0 $EE $20 $E8 $08 $30
   878 				.by  $3F $85 $46 $20 $E8 $08 $30 $38  $85 $47 $A9 $09 $8D $E2 $02 $8D  $E3 $02 $20 $E8 $08 $30 $29 $A0
   879 				.by  $00 $91 $44 $A4 $44 $A5 $45 $E6  $44 $D0 $02 $E6 $45 $C4 $46 $E5  $47 $90 $E7 $A9 $08 $48 $48 $6C
   880 				.by  $E2 $02 $6C $E0 $02 $A5 $22 $C9  $28 $D0 $05 $20 $61 $08 $10 $A5  $38 $60 $A2 $00 $86 $43 $A9 $3A
   881 				.by  $A0 $01 $D1 $24 $F0 $01 $C8 $C8  $B1 $24 $C9 $60 $B0 $0C $C9 $30  $B0 $0B $C9 $2E $D0 $04 $E0 $08
   882 				.by  $F0 $ED $88 $A9 $20 $9D $51 $09  $E8 $E0 $0B $90 $E2 $A0 $69 $A9  $01 $A2 $52 $20 $3A $09 $30 $3A
   883 				.by  $A2 $0B $BD $F5 $06 $F0 $69 $29  $DF $C9 $42 $D0 $2E $A0 $0B $BD  $04 $07 $D9 $50 $09 $D0 $24 $CA
   884 				.by  $88 $D0 $F4 $BD $03 $07 $8D $7E  $07 $A5 $43 $0A $0A $5D $04 $07  $8D $7D $07 $8C $7F $07 $8C $E9
   885 				.by  $08 $A0 $7D $99 $FF $06 $88 $D0  $FA $C8 $60 $E6 $43 $8A $29 $F0  $18 $69 $1B $AA $10 $BC $EE $0A
   886 				.by  $03 $A2 $52 $20 $4B $09 $10 $B0  $60 $A0 $00 $CC $7F $07 $90 $0E  $A2 $52 $20 $2C $09 $30 $13 $AC
   887 				.by  $7F $07 $F0 $1A $A0 $00 $B9 $00  $07 $C8 $8C $E9 $08 $A0 $01 $60  $A0 $AA $60 $08 $23 $09 $E7 $08
   888 				.by  $17 $09 $08 $09 $53 $08 $A0 $88  $60 $AC $7F $07 $EE $7F $07 $99  $00 $07 $A0 $01 $60 $A5 $2A $C9
   889 				.by  $08 $D0 $F7 $A2 $57 $AD $7D $07  $29 $03 $AC $7E $07 $D0 $04 $C9  $00 $F0 $DB $8C $0A $03 $8D $0B
   890 				.by  $03 $4D $7D $07 $8D $7D $07 $A9  $00 $8D $7E $07 $8E $02 $03 $4C  $53 $E4 $41 $55 $54 $4F $52 $55
   891 				.by  $4E $20 $20 $20 $20 $00 $00 $00  $00 $00 $00 $00 $00 $00 $00 $00  $00 $00 $00 $00 $46 $03 $E1 $07
   892 				.by  $09 $09 $A0 $00 $8C $D5 $02 $A0  $01 $8C $D6 $02 $8D $05 $03 $A9  $5C $8D $E7 $02 $A9 $09 $8D $E8
   893 				.by  $02 $A2 $44 $A8 $20 $86 $E4 $20  $8C $08 $30 $56 $20 $E8 $08 $30  $43 $85 $44 $20 $E8 $08 $30 $4A
   894 				.by  $85 $45 $C9 $FF $B0 $EE $20 $E8  $08 $30 $3F $85 $46 $20 $E8 $08  $30 $38 $85 $47 $A9 $09 $8D $E2
   895 				.by  $02 $8D $E3 $02 $20 $E8 $08 $30  $29 $A0 $00 $91 $44 $A4 $44 $A5  $45 $E6 $44 $D0 $02 $E6 $45 $C4
   896 				.by  $46 $E5 $47 $90 $E7 $A9 $08 $48  $48 $6C $E2 $02 $6C $E0 $02 $A5  $22 $C9 $28 $D0 $05 $20 $61 $08
   897 				.by  $10 $A5 $38 $60 $A2 $00 $86 $43  $A9 $3A $A0 $01 $D1 $24 $F0 $01  $C8 $C8 $B1 $24 $C9 $60 $B0 $0C
   898 				.by  $C9 $30 $B0 $0B $C9 $2E $D0 $04  $E0 $08 $F0 $ED $88 $A9 $20 $9D  $51 $09 $E8 $E0 $0B $90 $E2 $A0
   899 				.by  $69 $A9 $01 $A2 $52 $20 $3A $09  $30 $3A $A2 $0B $BD $F5 $06 $F0  $69 $29 $DF $C9 $42 $D0 $2E $A0
   900 				.by  $0B $BD $04 $07 $D9 $50 $09 $D0  $24 $CA $88 $D0 $F4 $BD $03 $07  $8D $FE $07 $A5 $43 $0A $0A $5D
   901 				.by  $04 $07 $8D $FD $07 $8C $FF $07  $8C $E9 $08 $A0 $FD $99 $FF $06  $88 $D0 $FA $C8 $60 $E6 $43 $8A
   902 				.by  $29 $F0 $18 $69 $1B $AA $10 $BC  $EE $0A $03 $A2 $52 $20 $4B $09  $10 $B0 $60 $A0 $00 $CC $FF $07
   903 				.by  $90 $0E $A2 $52 $20 $2C $09 $30  $13 $AC $FF $07 $F0 $1A $A0 $00  $B9 $00 $07 $C8 $8C $E9 $08 $A0
   904 				.by  $01 $60 $A0 $AA $60 $08 $23 $09  $E7 $08 $17 $09 $08 $09 $53 $08  $A0 $88 $60 $AC $FF $07 $EE $FF
   905 				.by  $07 $99 $00 $07 $A0 $01 $60 $A5  $2A $C9 $08 $D0 $F7 $A2 $57 $AD  $FD $07 $29 $03 $AC $FE $07 $D0
   906 				.by  $04 $C9 $00 $F0 $DB $8C $0A $03  $8D $0B $03 $4D $FD $07 $8D $FD  $07 $A9 $00 $8D $FE $07 $8E $02
   907 				.by  $03 $4C $53 $E4 $41 $55 $54 $4F  $52 $55 $4E $20 $20 $20 $20 $00  $00 $00 $00 $00
   908 				.endm
   909
   910 					end
