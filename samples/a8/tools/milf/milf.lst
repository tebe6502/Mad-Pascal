mads 2.1.0 build 8 (23 Dec 19)
Source: milf.a65
     1 				; ------------------------------------------------------------
     2 				; Mad Pascal Compiler version 1.6.4 [2020/05/28] for 6502
     3 				; ------------------------------------------------------------
     4
     5 = 0010			STACKWIDTH	= 16
     6 = 2000			CODEORIGIN	= $2000
     7
     8 = 0001			TRUE		= 1
     9 = 0000			FALSE		= 0
    10
    11 				; ------------------------------------------------------------
    12
    13 					org $80
    14
    15 = 0080			fxptr	.ds 2						; VBXE pointer
    16 = 0082			psptr	.ds 2						; PROGRAMSTACK Pointer
    17
    18 = 0084			eax	.ds 4						;8 bytes (aex + edx) -> divREAL
    19 = 0088			edx	.ds 4
    20 = 008C			ecx	.ds 4
    21 = 0090			bp	.ds 2
    22 = 0092			bp2	.ds 2
    23
    24 				ztmp
    25 = 0094			ztmp8	.ds 1
    26 = 0095			ztmp9	.ds 1
    27 = 0096			ztmp10	.ds 1
    28 = 0097			ztmp11	.ds 1
    29
    30 = 0098			TMP	.ds 2
    31
    32 = 009A			STACKORIGIN	.ds STACKWIDTH*4
    33 				zpend
    34
    35 				; ------------------------------------------------------------
    36
    37 = 0084			ax	= eax
    38 = 0084			al	= eax
    39 = 0085			ah	= eax+1
    40
    41 = 008C			cx	= ecx
    42 = 008C			cl	= ecx
    43 = 008D			ch	= ecx+1
    44
    45 = 0088			dx	= edx
    46 = 0088			dl	= edx
    47 = 0089			dh	= edx+1
    48
    49 					org eax
    50
    51 = 0084			FP1MAN0	.ds 1
    52 = 0085			FP1MAN1	.ds 1
    53 = 0086			FP1MAN2	.ds 1
    54 = 0087			FP1MAN3	.ds 1
    55
    56 					org ztmp8
    57
    58 = 0094			FP1SGN	.ds 1
    59 = 0095			FP1EXP	.ds 1
    60
    61 					org edx
    62
    63 = 0088			FP2MAN0	.ds 1
    64
    65 = 0089			FP2MAN1	.ds 1
    66 = 008A			FP2MAN2	.ds 1
    67 = 008B			FP2MAN3	.ds 1
    68
    69 					org ztmp10
    70
    71 = 0096			FP2SGN	.ds 1
    72 = 0097			FP2EXP	.ds 1
    73
    74 					org ecx
    75
    76 = 008C			FPMAN0	.ds 1
    77 = 008D			FPMAN1	.ds 1
    78 = 008E			FPMAN2	.ds 1
    79 = 008F			FPMAN3	.ds 1
    80
    81 					org bp2
    82
    83 = 0092			FPSGN	.ds 1
    84 = 0093			FPEXP	.ds 1
    85
    86 					.ifdef MAIN.@DEFINES.S_VBXE
    87 					opt h-
    88 					ins 'atari\s_vbxe\sdxld2.obx'
    89 					opt h+
    90 					.endif
    91
    92 				; ------------------------------------------------------------
    93
    94 					org CODEORIGIN
    95
    96 2000				STATICDATA
Macro: STATICDATA [Source: milf.a65]
     1 FFFF> 2000-4701> 0C 50 + .by  $0C $50 $72 $65 $73 $73 $20 $6B  $65 $79 $2E $2E $2E $00 $00 $00  $17 $44 $72 $69 $76 $65 $20 $64
     2 2018 6F 65 73 20 6E 6F + .by  $6F $65 $73 $20 $6E $6F $74 $20  $72 $65 $73 $70 $6F $6E $64 $2E  $00 $1E $44 $72 $69 $76 $65 $20
     3 2030 64 6F 65 73 20 6E + .by  $64 $6F $65 $73 $20 $6E $6F $74  $20 $73 $75 $70 $70 $6F $72 $74  $20 $50 $45 $52 $43 $4F $4D $2E
     4 2048 00 21 50 72 6F 62 + .by  $00 $21 $50 $72 $6F $62 $61 $62  $6C $79 $20 $41 $74 $61 $72 $69  $20 $38 $31 $30 $20 $6F $72 $20
     5 2060 41 74 61 72 69 20 + .by  $41 $74 $61 $72 $69 $20 $31 $30  $35 $30 $2E $00 $1B $54 $72 $79  $69 $6E $67 $20 $74 $6F $20 $64
     6 2078 65 74 65 63 74 20 + .by  $65 $74 $65 $63 $74 $20 $64 $65  $6E $73 $69 $74 $79 $2E $2E $2E  $00 $0C $20 $73 $65 $63 $74 $6F
     7 2090 72 73 20 6F 66 20 + .by  $72 $73 $20 $6F $66 $20 $00 $07  $20 $62 $79 $74 $65 $73 $2E $00  $08 $53 $74 $61 $74 $75 $73 $3A
     8 20A8 20 00 06 65 72 72 + .by  $20 $00 $06 $65 $72 $72 $6F $72  $20 $00 $02 $4F $4B $00 $17 $43  $75 $72 $72 $65 $6E $74 $20 $73
     9 20C0 6F 75 72 63 65 20 + .by  $6F $75 $72 $63 $65 $20 $64 $72  $69 $76 $65 $3A $20 $44 $00 $25  $2D $2D $2D $2D $2D $2D $2D $2D
    10 20D8 2D 2D 2D 2D 2D 2D + .by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D
    11 20F0 2D 2D 2D 2D 2D 00 + .by  $2D $2D $2D $2D $2D $00 $1C $43  $75 $72 $72 $65 $6E $74 $20 $64  $65 $73 $74 $69 $6E $61 $74 $69
    12 2108 6F 6E 20 64 72 69 + .by  $6F $6E $20 $64 $72 $69 $76 $65  $3A $20 $44 $00 $19 $44 $65 $73  $74 $69 $6E $61 $74 $69 $6F $6E
    13 2120 20 64 72 69 76 65 + .by  $20 $64 $72 $69 $76 $65 $20 $6E  $6F $74 $20 $73 $65 $74 $00 $1C  $D2 $20 $2D $20 $52 $65 $61 $64
    14 2138 20 64 72 69 76 65 + .by  $20 $64 $72 $69 $76 $65 $20 $63  $6F $6E $66 $69 $67 $75 $72 $61  $74 $69 $6F $6E $00 $1D $D7 $20
    15 2150 2D 20 57 72 69 74 + .by  $2D $20 $57 $72 $69 $74 $65 $20  $64 $72 $69 $76 $65 $20 $63 $6F  $6E $66 $69 $67 $75 $72 $61 $74
    16 2168 69 6F 6E 00 10 C6 + .by  $69 $6F $6E $00 $10 $C6 $20 $2D  $20 $46 $6F $72 $6D $61 $74 $20  $64 $72 $69 $76 $65 $00 $22 $C4
    17 2180 20 2D 20 53 65 74 + .by  $20 $2D $20 $53 $65 $74 $20 $73  $6F $75 $72 $63 $65 $2C $20 $64  $65 $73 $74 $69 $6E $61 $74 $69
    18 2198 6F 6E 20 64 72 69 + .by  $6F $6E $20 $64 $72 $69 $76 $65  $73 $00 $23 $D8 $20 $2D $20 $45  $78 $63 $68 $61 $6E $67 $65 $20
    19 21B0 73 6F 75 72 63 65 + .by  $73 $6F $75 $72 $63 $65 $20 $61  $6E $64 $20 $64 $65 $73 $74 $69  $6E $61 $74 $69 $6F $6E $00 $10
    20 21C8 C3 20 2D 20 43 6F + .by  $C3 $20 $2D $20 $43 $6F $70 $79  $20 $73 $65 $63 $74 $6F $72 $73  $00 $0F $D1 $20 $2D $20 $45 $78
    21 21E0 69 74 20 74 6F 20 + .by  $69 $74 $20 $74 $6F $20 $44 $4F  $53 $00 $0E $C2 $20 $2D $20 $43  $6F $6C $64 $20 $73 $74 $61 $72
    22 21F8 74 00 19 4F 6E 65 + .by  $74 $00 $19 $4F $6E $65 $20 $6F  $66 $20 $64 $72 $69 $76 $65 $73  $20 $69 $73 $20 $6E $6F $74 $20
    23 2210 73 65 74 2E 00 12 + .by  $73 $65 $74 $2E $00 $12 $43 $61  $6E $20 $6E $6F $74 $20 $65 $78  $63 $68 $61 $6E $67 $65 $2E $20
    24 2228 00 13 44 72 69 76 + .by  $00 $13 $44 $72 $69 $76 $65 $20  $77 $65 $72 $65 $20 $73 $77 $61  $70 $70 $65 $64 $2E $00 $10 $53
    25 2240 20 2D 20 53 6F 75 + .by  $20 $2D $20 $53 $6F $75 $72 $63  $65 $20 $64 $72 $69 $76 $65 $00  $15 $44 $20 $2D $20 $44 $65 $73
    26 2258 74 69 6E 61 74 69 + .by  $74 $69 $6E $61 $74 $69 $6F $6E  $20 $64 $72 $69 $76 $65 $00 $1E  $54 $68 $69 $73 $20 $64 $72 $69
    27 2270 76 65 20 69 73 20 + .by  $76 $65 $20 $69 $73 $20 $6E $6F  $74 $20 $63 $6F $6E $66 $69 $67  $75 $72 $61 $62 $6C $65 $00 $05
    28 2288 4F 6E 6C 79 20 00 + .by  $4F $6E $6C $79 $20 $00 $0B $D3  $20 $2D $20 $39 $30 $20 $4B $42  $2C $20 $00 $0A $C5 $20 $2D $20
    29 22A0 31 33 30 20 4B 42 + .by  $31 $33 $30 $20 $4B $42 $00 $18  $64 $65 $6E $73 $69 $74 $69 $65  $73 $20 $61 $72 $65 $20 $61 $76
    30 22B8 61 69 6C 61 62 6C + .by  $61 $69 $6C $61 $62 $6C $65 $2E  $00 $10 $46 $6F $72 $6D $61 $74  $74 $69 $6E $67 $20 $64 $69 $73
    31 22D0 6B 2E 00 06 73 6F + .by  $6B $2E $00 $06 $73 $6F $75 $72  $63 $65 $00 $0B $64 $65 $73 $74  $69 $6E $61 $74 $69 $6F $6E $00
    32 22E8 07 53 65 6C 65 63 + .by  $07 $53 $65 $6C $65 $63 $74 $20  $00 $13 $20 $64 $72 $69 $76 $65  $20 $6E $75 $6D $62 $65 $72 $20
    33 2300 28 31 2D 38 29 00 + .by  $28 $31 $2D $38 $29 $00 $21 $44  $65 $73 $74 $69 $6E $61 $74 $69  $6F $6E $20 $64 $72 $69 $76 $65
    34 2318 20 6E 75 6D 62 65 + .by  $20 $6E $75 $6D $62 $65 $72 $20  $6D $75 $73 $74 $20 $62 $65 $20  $00 $1D $64 $69 $66 $66 $65 $72
    35 2330 65 6E 74 20 74 68 + .by  $65 $6E $74 $20 $74 $68 $61 $6E  $20 $73 $6F $75 $72 $63 $65 $20  $6E $75 $6D $62 $65 $72 $2E $00
    36 2348 1F 54 68 69 73 20 + .by  $1F $54 $68 $69 $73 $20 $64 $72  $69 $76 $65 $20 $69 $73 $20 $6E  $6F $74 $20 $63 $6F $6E $66 $69
    37 2360 67 75 72 61 62 6C + .by  $67 $75 $72 $61 $62 $6C $65 $2E  $00 $0E $50 $72 $65 $73 $73 $20  $61 $6E $79 $20 $6B $65 $79 $2E
    38 2378 00 1B 53 65 6C 65 + .by  $00 $1B $53 $65 $6C $65 $63 $74  $20 $64 $72 $69 $76 $65 $20 $63  $6F $6E $66 $69 $67 $75 $72 $61
    39 2390 74 69 6F 6E 3A 00 + .by  $74 $69 $6F $6E $3A $00 $12 $31  $20 $2D $20 $53 $53 $20 $53 $44  $20 $20 $28 $39 $30 $20 $4B $42
    40 23A8 29 00 12 32 20 2D + .by  $29 $00 $12 $32 $20 $2D $20 $53  $53 $20 $45 $44 $20 $28 $31 $33  $30 $20 $4B $42 $29 $00 $12 $33
    41 23C0 20 2D 20 53 53 20 + .by  $20 $2D $20 $53 $53 $20 $44 $44  $20 $28 $31 $38 $30 $20 $4B $42  $29 $00 $12 $34 $20 $2D $20 $44
    42 23D8 53 20 44 44 20 28 + .by  $53 $20 $44 $44 $20 $28 $33 $36  $30 $20 $4B $42 $29 $00 $12 $35  $20 $2D $20 $44 $53 $20 $51 $44
    43 23F0 20 28 37 32 30 20 + .by  $20 $28 $37 $32 $30 $20 $4B $42  $29 $00 $17 $43 $6F $6E $66 $69  $67 $75 $72 $61 $74 $69 $6F $6E
    44 2408 20 63 6F 6E 66 69 + .by  $20 $63 $6F $6E $66 $69 $72 $6D  $65 $64 $00 $23 $57 $61 $72 $6E  $69 $6E $67 $2E $20 $44 $72 $69
    45 2420 76 65 20 6D 61 79 + .by  $76 $65 $20 $6D $61 $79 $20 $6E  $6F $74 $20 $73 $75 $70 $70 $6F  $72 $74 $20 $74 $68 $61 $74 $00
    46 2438 24 63 6F 6E 66 69 + .by  $24 $63 $6F $6E $66 $69 $67 $75  $72 $61 $74 $69 $6F $6E $2E $20  $50 $72 $6F $63 $65 $65 $64 $20
    47 2450 77 69 74 68 20 63 + .by  $77 $69 $74 $68 $20 $63 $61 $75  $74 $69 $6F $6E $21 $00 $07 $72  $65 $61 $64 $69 $6E $67 $00 $07
    48 2468 77 72 69 74 69 6E + .by  $77 $72 $69 $74 $69 $6E $67 $00  $06 $45 $72 $72 $6F $72 $20 $00  $08 $20 $73 $65 $63 $74 $6F $72
    49 2480 20 00 0B C1 20 2D + .by  $20 $00 $0B $C1 $20 $2D $20 $41  $62 $6F $72 $74 $2C $20 $00 $0B  $D2 $20 $2D $20 $52 $65 $74 $72
    50 2498 79 2C 20 00 09 D3 + .by  $79 $2C $20 $00 $09 $D3 $20 $2D  $20 $53 $6B $69 $70 $2C $00 $1E  $D7 $20 $2D $20 $77 $72 $69 $74
    51 24B0 65 20 62 75 66 66 + .by  $65 $20 $62 $75 $66 $66 $65 $72  $20 $61 $6E $64 $20 $63 $6F $6E  $74 $69 $6E $75 $65 $2E $00 $21
    52 24C8 45 6E 74 65 72 20 + .by  $45 $6E $74 $65 $72 $20 $66 $69  $6C $65 $6E $61 $6D $65 $20 $77  $69 $74 $68 $20 $64 $72 $69 $76
    53 24E0 65 20 6E 75 6D 62 + .by  $65 $20 $6E $75 $6D $62 $65 $72  $2E $00 $12 $45 $67 $2E $20 $44  $31 $3A $4C $4F $47 $46 $49 $4C
    54 24F8 45 2E 4C 4F 47 00 + .by  $45 $2E $4C $4F $47 $00 $1B $42  $72 $65 $61 $6B $20 $6B $65 $79  $20 $70 $72 $65 $73 $73 $65 $64
    55 2510 2C 20 61 62 6F 72 + .by  $2C $20 $61 $62 $6F $72 $74 $69  $6E $67 $00 $0A $46 $69 $6C $65  $20 $73 $61 $76 $65 $64 $00 $1A
    56 2528 44 65 73 74 69 6E + .by  $44 $65 $73 $74 $69 $6E $61 $74  $69 $6F $6E $20 $64 $72 $69 $76  $65 $20 $6E $6F $74 $20 $73 $65
    57 2540 74 2E 00 24 53 65 + .by  $74 $2E $00 $24 $53 $65 $63 $74  $6F $72 $20 $73 $69 $7A $65 $20  $69 $6E $20 $64 $65 $73 $74 $69
    58 2558 6E 61 74 69 6F 6E + .by  $6E $61 $74 $69 $6F $6E $20 $64  $72 $69 $76 $65 $20 $64 $6F $20  $00 $20 $6E $6F $74 $20 $6D $61
    59 2570 74 63 68 20 73 65 + .by  $74 $63 $68 $20 $73 $65 $63 $74  $6F $72 $20 $73 $69 $7A $65 $20  $69 $6E $20 $73 $6F $75 $72 $63
    60 2588 65 20 00 1A 64 72 + .by  $65 $20 $00 $1A $64 $72 $69 $76  $65 $2E $20 $41 $72 $65 $20 $79  $6F $75 $20 $73 $75 $72 $65 $20
    61 25A0 28 59 2F 4E 29 3F + .by  $28 $59 $2F $4E $29 $3F $00 $0D  $53 $74 $61 $72 $74 $20 $73 $65  $63 $74 $6F $72 $3A $00 $22 $53
    62 25B8 74 61 72 74 20 73 + .by  $74 $61 $72 $74 $20 $73 $65 $63  $74 $6F $72 $20 $69 $73 $20 $67  $72 $65 $61 $74 $65 $72 $20 $74
    63 25D0 68 61 6E 20 74 6F + .by  $68 $61 $6E $20 $74 $6F $74 $61  $6C $00 $12 $6E $75 $6D $62 $65  $72 $20 $6F $66 $20 $73 $65 $63
    64 25E8 74 6F 72 73 2E 00 + .by  $74 $6F $72 $73 $2E $00 $19 $4C  $6F $77 $65 $73 $74 $20 $73 $65  $63 $74 $6F $72 $20 $6E $75 $6D
    65 2600 62 65 72 20 69 73 + .by  $62 $65 $72 $20 $69 $73 $20 $31  $00 $0B $45 $6E $64 $20 $73 $65  $63 $74 $6F $72 $3A $00 $21 $45
    66 2618 6E 64 20 73 65 63 + .by  $6E $64 $20 $73 $65 $63 $74 $6F  $72 $20 $69 $73 $20 $67 $72 $65  $61 $74 $65 $72 $20 $74 $68 $61
    67 2630 6E 20 74 6F 74 61 + .by  $6E $20 $74 $6F $74 $61 $6C $20  $00 $1F $45 $6E $64 $20 $73 $65  $63 $74 $6F $72 $20 $69 $73 $20
    68 2648 6C 65 73 73 65 72 + .by  $6C $65 $73 $73 $65 $72 $20 $74  $68 $61 $6E $20 $73 $74 $61 $72  $74 $00 $07 $73 $65 $63 $74 $6F
    69 2660 72 2E 00 08 43 6F + .by  $72 $2E $00 $08 $43 $6F $70 $79  $69 $6E $67 $20 $00 $09 $20 $73  $65 $63 $74 $6F $72 $73 $2E $00
    70 2678 1C 52 65 61 64 69 + .by  $1C $52 $65 $61 $64 $69 $6E $67  $20 $61 $6E $64 $20 $77 $72 $69  $74 $69 $6E $67 $20 $73 $65 $63
    71 2690 74 6F 72 20 23 00 + .by  $74 $6F $72 $20 $23 $00 $0E $43  $6F $70 $79 $20 $66 $69 $6E $69  $73 $68 $65 $64 $2E $00 $1D $57
    72 26A8 72 69 74 65 20 6C + .by  $72 $69 $74 $65 $20 $6C $6F $67  $20 $66 $69 $6C $65 $20 $74 $6F  $20 $64 $69 $73 $6B $3F $20 $28
    73 26C0 59 2F 4E 29 00 18 + .by  $59 $2F $4E $29 $00 $18 $4D $49  $4C $46 $20 $30 $2E $37 $20 $2D  $20 $64 $65 $6C $79 $2F $62 $6A
    74 26D8 62 20 32 30 32 30 + .by  $62 $20 $32 $30 $32 $30 $00 $28  $02 $00 $12 $00 $00 $00 $80 $00  $00 $00 $00 $28 $02 $00 $1A $00
    75 26F0 04 00 80 00 00 00 + .by  $04 $00 $80 $00 $00 $00 $00 $28  $02 $00 $12 $00 $04 $01 $00 $00  $00 $00 $00 $28 $02 $00 $12 $01
    76 2708 04 01 00 00 00 00 + .by  $04 $01 $00 $00 $00 $00 $00 $50  $02 $00 $12 $01 $04 $01 $00 $00  $00 $00 $00 $D3 $22 $DB $22
Source: milf.a65
    97
    98 				; ------------------------------------------------------------
    99
   100 271F			RTLIB
   101 271F				icl 'rtl6502.asm'
Source: rtl6502.asm
   388 					opt l+
   102
   103 				.print 'ZPAGE: ',fxptr,'..',zpend
   103 				ZPAGE: $0080..$00DA
   104
   105 				.print 'RTLIB: ',RTLIB,'..',*
   105 				RTLIB: $271F..$2C7B
   106
   107 				; ------------------------------------------------------------
   108
   109 2C7B			START
   110 2C7B BA				tsx
   111 2C7C 8E D7 46			stx MAIN.@halt+1
   112
   113 					.ifdef fmulinit
   114 					fmulinit
   115 					eif
   116
   117 = 05BB			VLEN	= VARDATASIZE-VARINITSIZE
   118 = 4702			VADR	= DATAORIGIN+VARINITSIZE
   119
   120 					ift VADR > $BFFF
   121 					ert 'Invalid memory address range ',VADR
   122 					eli (VLEN>0) && (VLEN<=256)
   123 					ldx #256-VLEN
   124 					lda #0
   125 					sta:rne VADR+VLEN-256,x+
   126 					eli VLEN>0
   127 					@fill #VADR #VLEN #0
   127 				 MWA #VADR @FILL.PTR1\ MWA #VLEN @FILL.PTR3\ MVA #0 @FILL.PTR2\ JSR @FILL
   127 2C7F A9 02 85 88 A9 47 +  MWA #VADR @FILL.PTR1
   127 2C87 A9 BB 85 8C A9 05 +  MWA #VLEN @FILL.PTR3
   127 2C8F A9 00 85 84		 MVA #0 @FILL.PTR2
   127 2C93 20 DB 29		 JSR @FILL
   128 					eif
   129
   130 					.ifdef MAIN.@DEFINES.ROMOFF
   131 					icl 'atari\romoff.asm'
   132 					.endif
   133
   134 2C96 A9 BD 85 82 A9 4C + 	mwa #PROGRAMSTACK psptr
   135
   136 2C9E A2 0F			ldx #$0f					; DOS II+/D ParamStr
   137 2CA0 BD 40 03 9D DA 46 + 	mva:rpl $340,x MAIN.IOCB@COPY,x-
   138
   139 2CA9 E8				inx						; X = 0
   140 2CAA 86 90			stx bp						; BP = 0
   141
   142 2CAC 8E 08 D2			stx audctl					; reset POKEY
   143 2CAF A9 03			lda #3
   144 2CB1 8D 0F D2			sta skctl
   145
   146 2CB4 CA				dex						; X = 255
   147
   148 2CB5				UNITINITIALIZATION
Macro: UNITINITIALIZATION [Source: milf.a65]
Source: milf.a65
   149
   150 2CB5			.local	MAIN						; PROCEDURE
   151
   152 2CB5 4C FD 45			jmp l_06E6
   153
   154 				; ------------------------------------------------------------
   155
   156 2CB8			.local	SYSTEM						; UNIT
   157
   158 2CB8			.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER
   159
   160 				; ------------------------------------------------------------
   161
   162 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   163 				; as Pointer
   164 2CB8 B5 9A 85 88			mva :STACKORIGIN,x A
   165 2CBC B5 AA 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   166 2CC0 CA				dex
   167
   168 				; ---------------------  ASM Block 001  ---------------------
   169
   170 2CC1 A0 00			ldy #0
   171 2CC3 B1 88 8D 07 47		mva (edx),y Result
   172
   173 2CC8			@exit
   174
   175 				; ------------------------------------------------------------
   176
   177 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   178 				; as Pointer
   179
   180 2CC8 E8				inx
   181 2CC9 AD 07 47 95 9A		mva RESULT :STACKORIGIN,x
   182
   183 					.ifdef @new
   184 					lda <@VarData
   185 					sta :ztmp
   186 					lda >@VarData
   187 					ldy #@VarDataSize-1
   188 					jmp @FreeMem
   189 					eif
   190
   191 				; ------------------------------------------------------------
   192
   193 = 0088			A	= edx
   194 = 4707			RESULT	= DATAORIGIN+$000B
   195
   196 = 4707			@VarData	= RESULT
   197 = 0001			@VarDataSize	= 1
   198
   199 2CCE 60				rts						; ret
   200 				.endl
   201
   202 2CCF			.local	VAL_0712					; PROCEDURE | ASSEMBLER | OVERLOAD
   203
   204 				; ------------------------------------------------------------
   205
   206 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   207 				; as Pointer
   208 2CCF B5 9A 8D 0C 47		mva :STACKORIGIN,x CODE
   209 2CD4 B5 AA 8D 0D 47		mva :STACKORIGIN+STACKWIDTH,x CODE+1
   210 2CD9 CA				dex
   211
   212 				; ------------------------------------------------------------
   213
   214 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   215 				; as Pointer
   216 2CDA B5 9A 8D 0A 47		mva :STACKORIGIN,x V
   217 2CDF B5 AA 8D 0B 47		mva :STACKORIGIN+STACKWIDTH,x V+1
   218 2CE4 CA				dex
   219
   220 				; ------------------------------------------------------------
   221
   222 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   223 				; as Pointer
   224 2CE5 B5 9A 8D 08 47		mva :STACKORIGIN,x S
   225 2CEA B5 AA 8D 09 47		mva :STACKORIGIN+STACKWIDTH,x S+1
   226 2CEF CA				dex
   227
   228 				; ---------------------  ASM Block 017  ---------------------
   229
   230 					@StrToInt s
   230 				 LDY S+1\ LDA S\ JSR @STRTOINT
   230 2CF0 AC 09 47		 LDY S+1
   230 2CF3 AD 08 47		 LDA S
   230 2CF6 20 DD 2A		 JSR @STRTOINT
   231
   232 2CF9 98				tya
   233 2CFA 48				pha
   234
   235 2CFB AD 0C 47 85 92 AD + 	mwa code :bp2
   236 2D05 A0 00			ldy #0
   237
   238 2D07 68				pla
   239 2D08 91 92			sta (:bp2),y
   240
   241 2D0A AD 0A 47 85 92 AD + 	mwa v :bp2
   242 					
   243 2D14 A5 88 91 92 C8		mva edx (:bp2),y+
   244 2D19 A5 89 91 92 C8		mva edx+1 (:bp2),y+
   245 2D1E A5 8A 91 92 C8		mva edx+2 (:bp2),y+
   246 2D23 A5 8B 91 92			mva edx+3 (:bp2),y
   247
   248
   249 				; ------------------------------------------------------------
   250
   251 = 4708			S	= DATAORIGIN+$000C
   252 = 470A			V	= DATAORIGIN+$000E
   253 = 470C			CODE	= DATAORIGIN+$0010
   254
   255 = 4708			@VarData	= S
   256 = 0006			@VarDataSize	= 6
   257
   258 2D27			@exit
   259 					.ifdef @new
   260 					lda <@VarData
   261 					sta :ztmp
   262 					lda >@VarData
   263 					ldy #@VarDataSize-1
   264 					jmp @FreeMem
   265 					eif
   266 2D27 60				rts						; ret
   267 				.endl
   268
   269 2D28			.local	STR_0732					; PROCEDURE | ASSEMBLER | OVERLOAD
   270
   271 				; ------------------------------------------------------------
   272
   273 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   274 				; as Pointer
   275 2D28 B5 9A 8D 12 47		mva :STACKORIGIN,x S
   276 2D2D B5 AA 8D 13 47		mva :STACKORIGIN+STACKWIDTH,x S+1
   277 2D32 CA				dex
   278
   279 				; ------------------------------------------------------------
   280
   281 				; Generate Assignment for CARDINAL / INTEGER / REAL / SINGLE
   282 				; as Pointer
   283 2D33 B5 9A 8D 0E 47		mva :STACKORIGIN,x A
   284 2D38 B5 AA 8D 0F 47		mva :STACKORIGIN+STACKWIDTH,x A+1
   285 2D3D B5 BA 8D 10 47		mva :STACKORIGIN+STACKWIDTH*2,x A+2
   286 2D42 B5 CA 8D 11 47		mva :STACKORIGIN+STACKWIDTH*3,x A+3
   287 2D47 CA				dex
   288
   289 				; ---------------------  ASM Block 019  ---------------------
   290
   291 2D48 8A 48			txa:pha
   292
   293 2D4A E8				inx
   294
   295 					@ValueToStr #@printINT
   295 				 LDY> @PRINTINT\ LDA< @PRINTINT\ JSR @VALUETOSTR
   295 2D4B A0 2B		 LDY> @PRINTINT
   295 2D4D A9 B8		 LDA< @PRINTINT
   295 2D4F 20 C2 2A		 JSR @VALUETOSTR
   296
   297 					@move #@buf s #16	; !!! koniecznie przez wskaznik
   297 				 MWA #@BUF @MOVE.PTR1\ MWA S @MOVE.PTR2\ MWA #16 @MOVE.PTR3\ JSR @MOVE
   297 2D52 A9 00 85 88 A9 04 +  MWA #@BUF @MOVE.PTR1
   297 2D5A AD 12 47 85 8C AD +  MWA S @MOVE.PTR2
   297 2D64 A9 10 85 84 A9 00 +  MWA #16 @MOVE.PTR3
   297 2D6C 20 86 29		 JSR @MOVE
   298
   299 2D6F 68 AA			pla:tax
   300
   301
   302 				; ------------------------------------------------------------
   303
   304 = 470E			A	= DATAORIGIN+$0012
   305 = 4712			S	= DATAORIGIN+$0016
   306
   307 = 470E			@VarData	= A
   308 = 0006			@VarDataSize	= 6
   309
   310 2D71			@exit
   311 					.ifdef @new
   312 					lda <@VarData
   313 					sta :ztmp
   314 					lda >@VarData
   315 					ldy #@VarDataSize-1
   316 					jmp @FreeMem
   317 					eif
   318 2D71 60				rts						; ret
   319 				.endl
   320
   321 2D72			.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER
   322
   323 				; ------------------------------------------------------------
   324
   325 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   326 				; as Pointer
   327 2D72 B5 9A 85 8C			mva :STACKORIGIN,x VALUE
   328 2D76 CA				dex
   329
   330 				; ------------------------------------------------------------
   331
   332 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   333 				; as Pointer
   334 2D77 B5 9A 85 88			mva :STACKORIGIN,x A
   335 2D7B B5 AA 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   336 2D7F CA				dex
   337
   338 				; ---------------------  ASM Block 021  ---------------------
   339
   340 2D80 A0 00			ldy #0
   341 2D82 A5 8C 91 88			mva value (edx),y
   342
   343
   344 				; ------------------------------------------------------------
   345
   346 = 0088			A	= edx
   347 = 008C			VALUE	= ecx
   348 2D86			@exit
   349 					.ifdef @new
   350 					lda <@VarData
   351 					sta :ztmp
   352 					lda >@VarData
   353 					ldy #@VarDataSize-1
   354 					jmp @FreeMem
   355 					eif
   356 2D86 60				rts						; ret
   357 				.endl
   358
   359 2D87			.local	FILLBYTE_0740					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   360
   361 				; ------------------------------------------------------------
   362
   363 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   364 				; as Pointer
   365 2D87 B5 9A 85 84			mva :STACKORIGIN,x VALUE
   366 2D8B CA				dex
   367
   368 				; ------------------------------------------------------------
   369
   370 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   371 				; as Pointer
   372 2D8C B5 9A 85 8C			mva :STACKORIGIN,x COUNT
   373 2D90 B5 AA 85 8D			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   374 2D94 CA				dex
   375
   376 				; ------------------------------------------------------------
   377
   378 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   379 				; as Pointer
   380 2D95 B5 9A 85 88			mva :STACKORIGIN,x A
   381 2D99 B5 AA 85 89			mva :STACKORIGIN+STACKWIDTH,x A+1
   382 2D9D CA				dex
   383
   384 				; ---------------------  ASM Block 029  ---------------------
   385
   386 2D9E 20 DB 29			jsr @fill
   387
   388
   389 				; ------------------------------------------------------------
   390
   391 = 0088			A	= edx
   392 = 008C			COUNT	= ecx
   393 = 0084			VALUE	= eax
   394 2DA1			@exit
   395 					.ifdef @new
   396 					lda <@VarData
   397 					sta :ztmp
   398 					lda >@VarData
   399 					ldy #@VarDataSize-1
   400 					jmp @FreeMem
   401 					eif
   402 2DA1 60				rts						; ret
   403 				.endl
   404
   405 2DA2			.local	MOVE_074A					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
   406
   407 				; ------------------------------------------------------------
   408
   409 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   410 				; as Pointer
   411 2DA2 B5 9A 85 84			mva :STACKORIGIN,x COUNT
   412 2DA6 B5 AA 85 85			mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   413 2DAA CA				dex
   414
   415 				; ------------------------------------------------------------
   416
   417 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   418 				; as Pointer
   419 2DAB B5 9A 85 8C			mva :STACKORIGIN,x DEST
   420 2DAF B5 AA 85 8D			mva :STACKORIGIN+STACKWIDTH,x DEST+1
   421 2DB3 CA				dex
   422
   423 				; ------------------------------------------------------------
   424
   425 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   426 				; as Pointer
   427 2DB4 B5 9A 85 88			mva :STACKORIGIN,x SOURCE
   428 2DB8 B5 AA 85 89			mva :STACKORIGIN+STACKWIDTH,x SOURCE+1
   429 2DBC CA				dex
   430
   431 				; ---------------------  ASM Block 033  ---------------------
   432
   433 2DBD 20 86 29			jsr @move
   434
   435
   436 				; ------------------------------------------------------------
   437
   438 = 0088			SOURCE	= edx
   439 = 008C			DEST	= ecx
   440 = 0084			COUNT	= eax
   441 2DC0			@exit
   442 					.ifdef @new
   443 					lda <@VarData
   444 					sta :ztmp
   445 					lda >@VarData
   446 					ldy #@VarDataSize-1
   447 					jmp @FreeMem
   448 					eif
   449 2DC0 60				rts						; ret
   450 				.endl
   451
   452 2DC1			.local	SPACE						; FUNCTION | ASSEMBLER
   453
   454 				; ------------------------------------------------------------
   455
   456 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   457 				; as Pointer
   458 2DC1 B5 9A 8D 14 47		mva :STACKORIGIN,x B
   459 2DC6 CA				dex
   460
   461 				; ---------------------  ASM Block 034  ---------------------
   462
   463 2DC7 A0 00			ldy #0
   464 2DC9 A9 20			lda #' '
   465 2DCB 99 00 04 C8 D0 FA		sta:rne @buf,y+
   466
   467 2DD1 AD 14 47 8D 00 04		mva b @buf
   468
   469 2DD7 A9 00 8D 15 47 A9 + 	mwa #@buf Result
   470
   471 2DE1			@exit
   472
   473 				; ------------------------------------------------------------
   474
   475 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   476 				; as Pointer
   477
   478 2DE1 E8				inx
   479 2DE2 AD 15 47 95 9A		mva RESULT :STACKORIGIN,x
   480 2DE7 AD 16 47 95 AA		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   481
   482 					.ifdef @new
   483 					lda <@VarData
   484 					sta :ztmp
   485 					lda >@VarData
   486 					ldy #@VarDataSize-1
   487 					jmp @FreeMem
   488 					eif
   489
   490 				; ------------------------------------------------------------
   491
   492 = 4714			B	= DATAORIGIN+$0018
   493 = 4715			RESULT	= DATAORIGIN+$0019
   494
   495 = 4714			@VarData	= B
   496 = 0003			@VarDataSize	= 3
   497
   498 2DEC 60				rts						; ret
   499 				.endl
   500
   501 2DED			.local	CONCAT_076E					; FUNCTION | ASSEMBLER | OVERLOAD
   502
   503 				; ------------------------------------------------------------
   504
   505 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   506 				; as Pointer
   507 2DED B5 9A 85 92			mva :STACKORIGIN,x :bp2
   508 2DF1 B5 AA 85 93			mva :STACKORIGIN+STACKWIDTH,x :bp2+1
   509 2DF5 A0 00			ldy #$00
   510 2DF7 B1 92 99 17 48 C8 + 	mva:rne (:bp2),y adr.B,y+
   511 2DFF A9 17 8D 65 2E A9 + 	mwa #adr.B B
   512 2E09 CA				dex
   513
   514 				; ------------------------------------------------------------
   515
   516 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   517 				; as Pointer
   518 2E0A B5 9A 85 92			mva :STACKORIGIN,x :bp2
   519 2E0E B5 AA 85 93			mva :STACKORIGIN+STACKWIDTH,x :bp2+1
   520 2E12 A0 00			ldy #$00
   521 2E14 B1 92 99 17 47 C8 + 	mva:rne (:bp2),y adr.A,y+
   522 2E1C A9 17 8D 63 2E A9 + 	mwa #adr.A A
   523 2E26 CA				dex
   524
   525 				; ---------------------  ASM Block 043  ---------------------
   526
   527 2E27 AD 64 2E C9 04 D0 + 	cpw a #@buf
   528 2E33 F0 0E			beq skp
   529
   530 2E35 A9 00 8D 00 04		mva #0 @buf
   531 					@addString a
   531 				 LDY A+1\ LDA A\ JSR @ADDSTRING
   531 2E3A AC 64 2E		 LDY A+1
   531 2E3D AD 63 2E		 LDA A
   531 2E40 20 40 2A		 JSR @ADDSTRING
   532 2E43			skp
   533 					@addString b
   533 				 LDY B+1\ LDA B\ JSR @ADDSTRING
   533 2E43 AC 66 2E		 LDY B+1
   533 2E46 AD 65 2E		 LDA B
   533 2E49 20 40 2A		 JSR @ADDSTRING
   534
   535 2E4C A0 00			ldy #0
   536 2E4E B9 00 04 99 17 49 + 	mva:rne @buf,y adr.Result,y+
   537
   538 2E57			@exit
   539
   540 				; ------------------------------------------------------------
   541
   542 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   543 				; as Pointer
   544
   545 2E57 E8				inx
   546 2E58 AD 67 2E 95 9A		mva RESULT :STACKORIGIN,x
   547 2E5D AD 68 2E 95 AA		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   548
   549 					.ifdef @new
   550 					lda <@VarData
   551 					sta :ztmp
   552 					lda >@VarData
   553 					ldy #@VarDataSize-1
   554 					jmp @FreeMem
   555 					eif
   556
   557 				; ------------------------------------------------------------
   558
   559 = 4717			adr.A	= DATAORIGIN+$001B
   560 2E62			.var A	= adr.A .word
   561 = 4817			adr.B	= DATAORIGIN+$011B
   562 2E62			.var B	= adr.B .word
   563 = 4917			adr.RESULT	= DATAORIGIN+$021B
   564 2E62			.var RESULT	= adr.RESULT .word
   565
   566 = 2E63			@VarData	= A
   567 = 0300			@VarDataSize	= 768
   568
   569 2E62 60				rts						; ret
   570 = 2E63 17 47		A
   570 = 2E65 17 48		B
   570 = 2E67 17 49		RESULT
   570 				.endl
   571
   572 2E69			.local	CONCAT_0777					; FUNCTION | ASSEMBLER | OVERLOAD
   573
   574 				; ------------------------------------------------------------
   575
   576 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   577 				; as Pointer
   578 2E69 B5 9A 8D 19 4A		mva :STACKORIGIN,x B
   579 2E6E CA				dex
   580
   581 				; ------------------------------------------------------------
   582
   583 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   584 				; as Pointer
   585 2E6F B5 9A 8D 17 4A		mva :STACKORIGIN,x A
   586 2E74 B5 AA 8D 18 4A		mva :STACKORIGIN+STACKWIDTH,x A+1
   587 2E79 CA				dex
   588
   589 				; ---------------------  ASM Block 044  ---------------------
   590
   591 2E7A AD 18 4A C9 04 D0 + 	cpw a #@buf
   592 2E86 F0 0E			beq skp
   593
   594 2E88 A9 00 8D 00 04		mva #0 @buf
   595 					@addString a
   595 				 LDY A+1\ LDA A\ JSR @ADDSTRING
   595 2E8D AC 18 4A		 LDY A+1
   595 2E90 AD 17 4A		 LDA A
   595 2E93 20 40 2A		 JSR @ADDSTRING
   596 2E96			skp
   597 2E96 EE 00 04			inc @buf
   598 2E99 AC 00 04			ldy @buf
   599 2E9C AD 19 4A			lda b
   600 2E9F 99 00 04			sta @buf,y
   601
   602 2EA2 A0 00			ldy #0
   603 2EA4 B9 00 04 99 1A 4A + 	mva:rne @buf,y adr.Result,y+
   604
   605 2EAD			@exit
   606
   607 				; ------------------------------------------------------------
   608
   609 				; Push WORD / SMALLINT / SHORTREAL / POINTER
   610 				; as Pointer
   611
   612 2EAD E8				inx
   613 2EAE AD B9 2E 95 9A		mva RESULT :STACKORIGIN,x
   614 2EB3 AD BA 2E 95 AA		mva RESULT+1 :STACKORIGIN+STACKWIDTH,x
   615
   616 					.ifdef @new
   617 					lda <@VarData
   618 					sta :ztmp
   619 					lda >@VarData
   620 					ldy #@VarDataSize-1
   621 					jmp @FreeMem
   622 					eif
   623
   624 				; ------------------------------------------------------------
   625
   626 = 4A17			A	= DATAORIGIN+$031B
   627 = 4A19			B	= DATAORIGIN+$031D
   628 = 4A1A			adr.RESULT	= DATAORIGIN+$031E
   629 2EB8			.var RESULT	= adr.RESULT .word
   630
   631 = 4A17			@VarData	= A
   632 = 0103			@VarDataSize	= 259
   633
   634 2EB8 60				rts						; ret
   635 = 2EB9 1A 4A		RESULT
   635 				.endl
   636
   637 				; ------------------------------------------------------------
   638
   639 = 0101			__PORTB_BANKS	= $0101
   640 = 0648			M_PI_2	= $0648
   641 = 0192			D_PI_2	= $0192
   642 = 0004			D_PI_180	= $04
   643 = 0000			MGTIA	= $00
   644 = 0080			MVBXE	= $80
   645 = 0000			VBXE_XDLADR	= $00
   646 = 0100			VBXE_BCBADR	= $0100
   647 = 1000			VBXE_MAPADR	= $1000
   648 = 5000			VBXE_OVRADR	= $5000
   649 = B000			VBXE_WINDOW	= $B000
   650 = 0000			IDLI	= $00
   651 = 0001			IVBL	= $01
   652 = 00FE			CH_DELCHR	= $FE
   653 = 009B			CH_ENTER	= $9B
   654 = 001B			CH_ESC	= $1B
   655 = 001C			CH_CURS_UP	= $1C
   656 = 001D			CH_CURS_DOWN	= $1D
   657 = 001E			CH_CURS_LEFT	= $1E
   658 = 001F			CH_CURS_RIGHT	= $1F
   659 = 007F			CH_TAB	= $7F
   660 = 009B			CH_EOL	= $9B
   661 = 007D			CH_CLR	= $7D
   662 = 00FD			CH_BELL	= $FD
   663 = 007E			CH_DEL	= $7E
   664 = 009C			CH_DELLINE	= $9C
   665 = 009D			CH_INSLINE	= $9D
   666 = 0000			COLOR_BLACK	= $00
   667 = 000E			COLOR_WHITE	= $0E
   668 = 0032			COLOR_RED	= $32
   669 = 0096			COLOR_CYAN	= $96
   670 = 0068			COLOR_VIOLET	= $68
   671 = 00C4			COLOR_GREEN	= $C4
   672 = 0074			COLOR_BLUE	= $74
   673 = 00EE			COLOR_YELLOW	= $EE
   674 = 0028			COLOR_ORANGE	= $28
   675 = 00E4			COLOR_BROWN	= $E4
   676 = 003C			COLOR_LIGHTRED	= $3C
   677 = 0004			COLOR_GRAY1	= $04
   678 = 0006			COLOR_GRAY2	= $06
   679 = 000A			COLOR_GRAY3	= $0A
   680 = 00CC			COLOR_LIGHTGREEN	= $CC
   681 = 007C			COLOR_LIGHTBLUE	= $7C
   682 = 0004			FMOPENREAD	= $04
   683 = 0008			FMOPENWRITE	= $08
   684 = 0009			FMOPENAPPEND	= $09
   685 = 000C			FMOPENREADWRITE	= $0C
   686 = 46FC			SCREENWIDTH	= DATAORIGIN+$0000
   687 = 46FE			SCREENHEIGHT	= DATAORIGIN+$0002
   688 = 4700			DATESEPARATOR	= DATAORIGIN+$0004
   689 = D014			TVSYSTEM	= $D014
   690 = 02C0			adr.PALETTE	= $02C0
   691 2EBB			.var PALETTE	= adr.PALETTE .word
   692 = D012			adr.HPALETTE	= $D012
   693 2EBB			.var HPALETTE	= adr.HPALETTE .word
   694 = 4701			FILEMODE	= DATAORIGIN+$0005
   695 = 4702			GRAPHMODE	= DATAORIGIN+$0006
   696 = 4703			IORESULT	= DATAORIGIN+$0007
   697 = 4704			EOLN	= DATAORIGIN+$0008
   698 = 4705			RNDSEED	= DATAORIGIN+$0009
   699
   700 = 2EBB C0 02		PALETTE
   700 = 2EBD 12 D0		HPALETTE
   700 				.endl							; UNIT SYSTEM
   701
   702 				; ------------------------------------------------------------
   703
   704 2EBF			.local	ATARI						; UNIT
   705
   706 				; ------------------------------------------------------------
   707
   708 = 0012			RTCLOK	= $12
   709 = 004D			ATRACT	= $4D
   710 = 0052			LMARGIN	= $52
   711 = 0053			RMARGIN	= $53
   712 = 0054			ROWCRS	= $54
   713 = 0055			COLCRS	= $55
   714 = 0057			DINDEX	= $57
   715 = 0058			SAVMSC	= $58
   716 = 0062			PALNTS	= $62
   717 = 006A			RAMTOP	= $6A
   718 = 0200			VDSLST	= $0200
   719 = 0230			SDLSTL	= $0230
   720 = 0290			TXTROW	= $0290
   721 = 0291			TXTCOL	= $0291
   722 = 0293			TINDEX	= $0293
   723 = 0294			TXTMSC	= $0294
   724 = 022F			SDMCTL	= $022F
   725 = 026F			GPRIOR	= $026F
   726 = 02F0			CRSINH	= $02F0
   727 = 02F3			CHACT	= $02F3
   728 = 02F4			CHBAS	= $02F4
   729 = 02FC			CH	= $02FC
   730 = 02C0			PCOLR0	= $02C0
   731 = 02C1			PCOLR1	= $02C1
   732 = 02C2			PCOLR2	= $02C2
   733 = 02C3			PCOLR3	= $02C3
   734 = 02C4			COLOR0	= $02C4
   735 = 02C5			COLOR1	= $02C5
   736 = 02C6			COLOR2	= $02C6
   737 = 02C7			COLOR3	= $02C7
   738 = 02C8			COLOR4	= $02C8
   739 = 02C8			COLBAKS	= $02C8
   740 = D000			HPOSP0	= $D000
   741 = D001			HPOSP1	= $D001
   742 = D002			HPOSP2	= $D002
   743 = D003			HPOSP3	= $D003
   744 = D004			HPOSM0	= $D004
   745 = D005			HPOSM1	= $D005
   746 = D006			HPOSM2	= $D006
   747 = D007			HPOSM3	= $D007
   748 = D008			SIZEP0	= $D008
   749 = D009			SIZEP1	= $D009
   750 = D00A			SIZEP2	= $D00A
   751 = D00B			SIZEP3	= $D00B
   752 = D00C			SIZEM	= $D00C
   753 = D00D			GRAFP0	= $D00D
   754 = D00E			GRAFP1	= $D00E
   755 = D00F			GRAFP2	= $D00F
   756 = D010			GRAFP3	= $D010
   757 = D011			GRAFM	= $D011
   758 = D004			P0PF	= $D004
   759 = D014			PAL	= $D014
   760 = D012			COLPM0	= $D012
   761 = D013			COLPM1	= $D013
   762 = D014			COLPM2	= $D014
   763 = D015			COLPM3	= $D015
   764 = D016			COLPF0	= $D016
   765 = D017			COLPF1	= $D017
   766 = D018			COLPF2	= $D018
   767 = D019			COLPF3	= $D019
   768 = D01A			COLBK	= $D01A
   769 = D01B			PRIOR	= $D01B
   770 = D01D			GRACTL	= $D01D
   771 = D01E			HITCLR	= $D01E
   772 = D200			AUDF1	= $D200
   773 = D201			AUDC1	= $D201
   774 = D202			AUDF2	= $D202
   775 = D203			AUDC2	= $D203
   776 = D204			AUDF3	= $D204
   777 = D205			AUDC3	= $D205
   778 = D206			AUDF4	= $D206
   779 = D207			AUDC4	= $D207
   780 = D208			AUDCTL	= $D208
   781 = D20F			SKSTAT	= $D20F
   782 = D301			PORTB	= $D301
   783 = D400			DMACTL	= $D400
   784 = D401			CHACTL	= $D401
   785 = D402			DLISTL	= $D402
   786 = D404			HSCROL	= $D404
   787 = D405			VSCROL	= $D405
   788 = D407			PMBASE	= $D407
   789 = D409			CHBASE	= $D409
   790 = D40A			WSYNC	= $D40A
   791 = D40B			VCOUNT	= $D40B
   792 = D40C			PENH	= $D40C
   793 = D40D			PENV	= $D40D
   794 = D40E			NMIEN	= $D40E
   795
   796 				.endl							; UNIT ATARI
   797
   798 				; ------------------------------------------------------------
   799
   800 2EBF			.local	CRT						; UNIT
   801
   802 2EBF			.local	CURSOROFF					; PROCEDURE
   803
   804 				; optimize OK (CRT), line = 116
   805
   806 2EBF A9 01 8D F0 02		mva #$01 ATARI.CRSINH
   807
   808 				; optimize FAIL (100, CRT), line = 118
   809 					@print #$1F
   809 				 LDY# $1F\ JSR @PRINT
   809 2EC4 A0 1F		 LDY# $1F
   809 2EC6 20 80 2B		 JSR @PRINT
   810 					@print #$1E
   810 				 LDY# $1E\ JSR @PRINT
   810 2EC9 A0 1E		 LDY# $1E
   810 2ECB 20 80 2B		 JSR @PRINT
   811 2ECE			@exit
   812 					.ifdef @new
   813 					lda <@VarData
   814 					sta :ztmp
   815 					lda >@VarData
   816 					ldy #@VarDataSize-1
   817 					jmp @FreeMem
   818 					eif
   819 2ECE 60				rts						; ret
   820 				.endl
   821
   822 2ECF			.local	CURSORON					; PROCEDURE
   823
   824 				; optimize OK (CRT), line = 129
   825
   826 2ECF A9 00 8D F0 02		mva #$00 ATARI.CRSINH
   827
   828 				; optimize FAIL (100, CRT), line = 131
   829 					@print #$1F
   829 				 LDY# $1F\ JSR @PRINT
   829 2ED4 A0 1F		 LDY# $1F
   829 2ED6 20 80 2B		 JSR @PRINT
   830 					@print #$1E
   830 				 LDY# $1E\ JSR @PRINT
   830 2ED9 A0 1E		 LDY# $1E
   830 2EDB 20 80 2B		 JSR @PRINT
   831 2EDE			@exit
   832 					.ifdef @new
   833 					lda <@VarData
   834 					sta :ztmp
   835 					lda >@VarData
   836 					ldy #@VarDataSize-1
   837 					jmp @FreeMem
   838 					eif
   839 2EDE 60				rts						; ret
   840 				.endl
   841
   842 2EDF			.local	CLRSCR						; PROCEDURE
   843
   844 				; optimize FAIL (100, CRT), line = 141
   845 					@print #$7D
   845 				 LDY# $7D\ JSR @PRINT
   845 2EDF A0 7D		 LDY# $7D
   845 2EE1 20 80 2B		 JSR @PRINT
   846 2EE4			@exit
   847 					.ifdef @new
   848 					lda <@VarData
   849 					sta :ztmp
   850 					lda >@VarData
   851 					ldy #@VarDataSize-1
   852 					jmp @FreeMem
   853 					eif
   854 2EE4 60				rts						; ret
   855 				.endl
   856
   857 2EE5			.local	READKEY						; FUNCTION | ASSEMBLER
   858
   859 				; ---------------------  ASM Block 049  ---------------------
   860
   861 2EE5 8A 48			txa:pha
   862
   863 2EE7 20 D0 28			@GetKey
   864
   865 2EEA 8D 1B 4B			sta Result
   866
   867 2EED 68 AA			pla:tax
   868
   869 2EEF			@exit
   870
   871 				; ------------------------------------------------------------
   872
   873 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   874 				; as Pointer
   875
   876 2EEF E8				inx
   877 2EF0 AD 1B 4B 95 9A		mva RESULT :STACKORIGIN,x
   878
   879 					.ifdef @new
   880 					lda <@VarData
   881 					sta :ztmp
   882 					lda >@VarData
   883 					ldy #@VarDataSize-1
   884 					jmp @FreeMem
   885 					eif
   886
   887 				; ------------------------------------------------------------
   888
   889 = 4B1B			RESULT	= DATAORIGIN+$041F
   890
   891 = 4B1B			@VarData	= RESULT
   892 = 0001			@VarDataSize	= 1
   893
   894 2EF5 60				rts						; ret
   895 				.endl
   896
   897 2EF6			.local	DELAY						; PROCEDURE | ASSEMBLER
   898
   899 				; ------------------------------------------------------------
   900
   901 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
   902 				; as Pointer
   903 2EF6 B5 9A 8D 1C 4B		mva :STACKORIGIN,x COUNT
   904 2EFB B5 AA 8D 1D 4B		mva :STACKORIGIN+STACKWIDTH,x COUNT+1
   905 2F00 CA				dex
   906
   907 				; ---------------------  ASM Block 052  ---------------------
   908
   909 2F01 8A 48			txa:pha
   910
   911 2F03 A2 00			ldx #0
   912 2F05 A0 00			ldy #0
   913
   914 2F07 CC 1C 4B		loop	cpy count
   915 2F0A D0 05			bne @+
   916 2F0C EC 1D 4B			cpx count+1
   917 2F0F F0 46			beq stop
   918
   919 2F11 AD 0B D4 CD 0B D4 + @	:8 lda:cmp:req vcount
   920
   921 2F51 C8				iny
   922 2F52 D0 01			sne
   923 2F54 E8				inx
   924
   925 2F55 D0 B0			bne loop
   926
   927 2F57 68 AA		stop	pla:tax
   928
   929
   930 				; ------------------------------------------------------------
   931
   932 = 4B1C			COUNT	= DATAORIGIN+$0420
   933
   934 = 4B1C			@VarData	= COUNT
   935 = 0002			@VarDataSize	= 2
   936
   937 2F59			@exit
   938 					.ifdef @new
   939 					lda <@VarData
   940 					sta :ztmp
   941 					lda >@VarData
   942 					ldy #@VarDataSize-1
   943 					jmp @FreeMem
   944 					eif
   945 2F59 60				rts						; ret
   946 				.endl
   947
   948 2F5A			.local	KEYPRESSED					; FUNCTION | ASSEMBLER
   949
   950 				; ---------------------  ASM Block 053  ---------------------
   951
   952 2F5A A0 00			ldy #$00	; false
   953 2F5C AD FC 02			lda kbcodes
   954 2F5F C9 FF			cmp #$ff
   955 2F61 F0 01			beq skp
   956 2F63 C8				iny		; true
   957
   958 				;	sty kbcodes
   959
   960 2F64 8C 1E 4B		skp	sty Result
   961
   962 2F67			@exit
   963
   964 				; ------------------------------------------------------------
   965
   966 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
   967 				; as Pointer
   968
   969 2F67 E8				inx
   970 2F68 AD 1E 4B 95 9A		mva RESULT :STACKORIGIN,x
   971
   972 					.ifdef @new
   973 					lda <@VarData
   974 					sta :ztmp
   975 					lda >@VarData
   976 					ldy #@VarDataSize-1
   977 					jmp @FreeMem
   978 					eif
   979
   980 				; ------------------------------------------------------------
   981
   982 = 4B1E			RESULT	= DATAORIGIN+$0422
   983
   984 = 4B1E			@VarData	= RESULT
   985 = 0001			@VarDataSize	= 1
   986
   987 2F6D 60				rts						; ret
   988 				.endl
   989
   990 2F6E			.local	GOTOXY						; PROCEDURE | ASSEMBLER
   991
   992 				; ------------------------------------------------------------
   993
   994 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
   995 				; as Pointer
   996 2F6E B5 9A 8D 20 4B		mva :STACKORIGIN,x Y
   997 2F73 CA				dex
   998
   999 				; ------------------------------------------------------------
  1000
  1001 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1002 				; as Pointer
  1003 2F74 B5 9A 8D 1F 4B		mva :STACKORIGIN,x X
  1004 2F79 CA				dex
  1005
  1006 				; ---------------------  ASM Block 054  ---------------------
  1007
  1008 2F7A AC 1F 4B			ldy x
  1009 2F7D F0 01			beq @+
  1010
  1011 2F7F 88				dey
  1012
  1013 2F80 84 55		@	sty colcrs
  1014 2F82 A0 00 84 56			mvy #$00 colcrs+1
  1015
  1016 2F86 AC 20 4B			ldy y
  1017 2F89 F0 01			beq @+
  1018
  1019 2F8B 88				dey
  1020
  1021 2F8C 84 54		@	sty rowcrs
  1022
  1023
  1024 				; ------------------------------------------------------------
  1025
  1026 = 4B1F			X	= DATAORIGIN+$0423
  1027 = 4B20			Y	= DATAORIGIN+$0424
  1028
  1029 = 4B1F			@VarData	= X
  1030 = 0002			@VarDataSize	= 2
  1031
  1032 2F8E			@exit
  1033 					.ifdef @new
  1034 					lda <@VarData
  1035 					sta :ztmp
  1036 					lda >@VarData
  1037 					ldy #@VarDataSize-1
  1038 					jmp @FreeMem
  1039 					eif
  1040 2F8E 60				rts						; ret
  1041 				.endl
  1042
  1043 2F8F			.local	WHEREY						; FUNCTION | ASSEMBLER
  1044
  1045 				; ---------------------  ASM Block 056  ---------------------
  1046
  1047
  1048 2F8F A4 54			ldy rowcrs
  1049 2F91 C8				iny
  1050 2F92 8C 21 4B			sty Result
  1051
  1052 2F95			@exit
  1053
  1054 				; ------------------------------------------------------------
  1055
  1056 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1057 				; as Pointer
  1058
  1059 2F95 E8				inx
  1060 2F96 AD 21 4B 95 9A		mva RESULT :STACKORIGIN,x
  1061
  1062 					.ifdef @new
  1063 					lda <@VarData
  1064 					sta :ztmp
  1065 					lda >@VarData
  1066 					ldy #@VarDataSize-1
  1067 					jmp @FreeMem
  1068 					eif
  1069
  1070 				; ------------------------------------------------------------
  1071
  1072 = 4B21			RESULT	= DATAORIGIN+$0425
  1073
  1074 = 4B21			@VarData	= RESULT
  1075 = 0001			@VarDataSize	= 1
  1076
  1077 2F9B 60				rts						; ret
  1078 				.endl
  1079
  1080 				; ------------------------------------------------------------
  1081
  1082 = 4B1A			TEXTATTR	= DATAORIGIN+$041E
  1083 = D01F			CONSOL	= $D01F
  1084 = 0000			CN_START_SELECT_OPTION	= $00
  1085 = 0001			CN_SELECT_OPTION	= $01
  1086 = 0002			CN_START_OPTION	= $02
  1087 = 0003			CN_OPTION	= $03
  1088 = 0004			CN_START_SELECT	= $04
  1089 = 0005			CN_SELECT	= $05
  1090 = 0006			CN_START	= $06
  1091 = 0007			CN_NONE	= $07
  1092 = 0000			BW40	= $00
  1093 = 0001			CO40	= $01
  1094 = 0002			BW80	= $02
  1095 = 0003			CO80	= $03
  1096 = 0007			MONO	= $07
  1097 = 0001			C40	= $01
  1098 = 0003			C80	= $03
  1099 = 0000			BLACK	= $00
  1100 = 0001			BLUE	= $01
  1101 = 0002			GREEN	= $02
  1102 = 0003			CYAN	= $03
  1103 = 0004			RED	= $04
  1104 = 0005			MAGENTA	= $05
  1105 = 0006			BROWN	= $06
  1106 = 0007			LIGHTGRAY	= $07
  1107 = 0008			DARKGRAY	= $08
  1108 = 0009			LIGHTBLUE	= $09
  1109 = 000A			LIGHTGREEN	= $0A
  1110 = 000B			LIGHTCYAN	= $0B
  1111 = 000C			LIGHTRED	= $0C
  1112 = 000D			LIGHTMAGENTA	= $0D
  1113 = 000E			YELLOW	= $0E
  1114 = 000F			WHITE	= $0F
  1115 = 0080			BLINK	= $80
  1116
  1117 				.endl							; UNIT CRT
  1118
  1119 2F9C			.local	GETSTRING					; PROCEDURE
  1120
  1121 				; ------------------------------------------------------------
  1122
  1123 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1124 				; as Pointer
  1125 2F9C B5 9A 8D 89 4B		mva :STACKORIGIN,x MAXCHARS
  1126 2FA1 CA				dex
  1127
  1128 				; ---------------------  ASM Block 060  ---------------------
  1129
  1130
  1131 				          
  1132 = 0342			               iccmd    = $0342
  1133 = 0344			               icbufa   = $0344
  1134 = 0348			               icbufl   = $0348
  1135
  1136 2FA2 A9 00		               lda #<COPY_BUFFER_MEM
  1137 2FA4 A0 60		               ldy #>COPY_BUFFER_MEM
  1138 2FA6 A2 00		               ldx #$00
  1139 2FA8 9D 44 03		               sta icbufa,x
  1140 2FAB 98			               tya
  1141 2FAC 9D 45 03		               sta icbufa+1,x
  1142 2FAF AD 89 4B		               lda maxChars
  1143 2FB2 9D 48 03		               sta icbufl,x
  1144 2FB5 A9 00		               lda #$00
  1145 2FB7 9D 49 03		               sta icbufl+1,x
  1146 2FBA A9 05		               lda #$05
  1147 2FBC 9D 42 03		               sta iccmd,x
  1148 2FBF 20 56 E4		               jsr $E456
  1149 				               
  1150 2FC2 8C 31 4B		               sty CIOresult
  1151 				          
  1152 				          
  1153
  1154 				; ------------------------------------------------------------
  1155
  1156 = 4B89			MAXCHARS	= DATAORIGIN+$048D
  1157
  1158 = 4B89			@VarData	= MAXCHARS
  1159 = 0001			@VarDataSize	= 1
  1160
  1161 2FC5			@exit
  1162 					.ifdef @new
  1163 					lda <@VarData
  1164 					sta :ztmp
  1165 					lda >@VarData
  1166 					ldy #@VarDataSize-1
  1167 					jmp @FreeMem
  1168 					eif
  1169 2FC5 60				rts						; ret
  1170 				.endl
  1171
  1172 2FC6			.local	EXEC_SIO					; PROCEDURE
  1173
  1174 				; ------------------------------------------------------------
  1175
  1176 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1177 				; as Pointer
  1178 2FC6 B5 9A 8D 92 4B		mva :STACKORIGIN,x AUX
  1179 2FCB B5 AA 8D 93 4B		mva :STACKORIGIN+STACKWIDTH,x AUX+1
  1180 2FD0 CA				dex
  1181
  1182 				; ------------------------------------------------------------
  1183
  1184 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1185 				; as Pointer
  1186 2FD1 B5 9A 8D 90 4B		mva :STACKORIGIN,x SIZE
  1187 2FD6 B5 AA 8D 91 4B		mva :STACKORIGIN+STACKWIDTH,x SIZE+1
  1188 2FDB CA				dex
  1189
  1190 				; ------------------------------------------------------------
  1191
  1192 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  1193 				; as Pointer
  1194 2FDC B5 9A 8D 8E 4B		mva :STACKORIGIN,x BUFFER
  1195 2FE1 B5 AA 8D 8F 4B		mva :STACKORIGIN+STACKWIDTH,x BUFFER+1
  1196 2FE6 CA				dex
  1197
  1198 				; ------------------------------------------------------------
  1199
  1200 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1201 				; as Pointer
  1202 2FE7 B5 9A 8D 8D 4B		mva :STACKORIGIN,x TIMEOUT
  1203 2FEC CA				dex
  1204
  1205 				; ------------------------------------------------------------
  1206
  1207 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1208 				; as Pointer
  1209 2FED B5 9A 8D 8C 4B		mva :STACKORIGIN,x DIRECTION
  1210 2FF2 CA				dex
  1211
  1212 				; ------------------------------------------------------------
  1213
  1214 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1215 				; as Pointer
  1216 2FF3 B5 9A 8D 8B 4B		mva :STACKORIGIN,x COMMAND
  1217 2FF8 CA				dex
  1218
  1219 				; ------------------------------------------------------------
  1220
  1221 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1222 				; as Pointer
  1223 2FF9 B5 9A 8D 8A 4B		mva :STACKORIGIN,x SUNIT
  1224 2FFE CA				dex
  1225
  1226 				; optimize OK (milf.pas), line = 133
  1227
  1228 2FFF AD 8E 4B 8D 94 4B		mva BUFFER BL
  1229
  1230 				; optimize OK (milf.pas), line = 134
  1231
  1232 3005 AD 8F 4B			lda BUFFER+1
  1233 3008 8D 95 4B			sta BH
  1234
  1235 				; optimize OK (milf.pas), line = 135
  1236
  1237 300B AD 92 4B 8D 96 4B		mva AUX AL
  1238
  1239 				; optimize OK (milf.pas), line = 136
  1240
  1241 3011 AD 93 4B			lda AUX+1
  1242 3014 8D 97 4B			sta AH
  1243
  1244 				; optimize OK (milf.pas), line = 137
  1245
  1246 3017 AD 90 4B 8D 98 4B		mva SIZE SL
  1247
  1248 				; optimize OK (milf.pas), line = 138
  1249
  1250 301D AD 91 4B			lda SIZE+1
  1251 3020 8D 99 4B			sta SH
  1252
  1253 				; ---------------------  ASM Block 061  ---------------------
  1254
  1255
  1256 3023 A9 31		               lda  #$31
  1257 3025 8D 00 03		               sta  DDEVIC
  1258 3028 AD 8A 4B		               lda  sunit
  1259 302B 8D 01 03		               sta  DUNIT
  1260 302E AD 8B 4B		               lda  command
  1261 3031 8D 02 03		               sta  DCOMND
  1262 3034 AD 96 4B		               lda  al
  1263 3037 8D 0A 03		               sta  DAUX1
  1264 303A AD 97 4B		               lda  ah
  1265 303D 8D 0B 03		               sta  DAUX2
  1266 3040 AD 8C 4B		               lda  direction
  1267 3043 8D 03 03		               sta  DSTATS
  1268 3046 AD 94 4B		               lda  bl
  1269 3049 8D 04 03		               sta  DBUFLO
  1270 304C AD 95 4B		               lda  bh
  1271 304F 8D 05 03		               sta  DBUFHI
  1272 3052 AD 8D 4B		               lda  timeout
  1273 3055 8D 06 03		               sta  DTIMLO
  1274 3058 AD 98 4B		               lda  sl
  1275 305B 8D 08 03		               sta  DBYTLO
  1276 305E AD 99 4B		               lda  sh
  1277 3061 8D 09 03		               sta  DBYTHI
  1278 3064 20 59 E4		               jsr  $E459
  1279 				               
  1280 3067 8C 30 4B		               sty  SIOresult
  1281 				          
  1282
  1283 				; ------------------------------------------------------------
  1284
  1285 = 4B8A			SUNIT	= DATAORIGIN+$048E
  1286 = 4B8B			COMMAND	= DATAORIGIN+$048F
  1287 = 4B8C			DIRECTION	= DATAORIGIN+$0490
  1288 = 4B8D			TIMEOUT	= DATAORIGIN+$0491
  1289 = 4B8E			BUFFER	= DATAORIGIN+$0492
  1290 = 4B90			SIZE	= DATAORIGIN+$0494
  1291 = 4B92			AUX	= DATAORIGIN+$0496
  1292 = 4B94			BL	= DATAORIGIN+$0498
  1293 = 4B95			BH	= DATAORIGIN+$0499
  1294 = 4B96			AL	= DATAORIGIN+$049A
  1295 = 4B97			AH	= DATAORIGIN+$049B
  1296 = 4B98			SL	= DATAORIGIN+$049C
  1297 = 4B99			SH	= DATAORIGIN+$049D
  1298
  1299 = 4B8A			@VarData	= SUNIT
  1300 = 0010			@VarDataSize	= 16
  1301
  1302 306A			@exit
  1303 					.ifdef @new
  1304 					lda <@VarData
  1305 					sta :ztmp
  1306 					lda >@VarData
  1307 					ldy #@VarDataSize-1
  1308 					jmp @FreeMem
  1309 					eif
  1310 306A 60				rts						; ret
  1311 				.endl
  1312
  1313 306B			.local	EXITTODOS					; PROCEDURE
  1314
  1315 				; ---------------------  ASM Block 062  ---------------------
  1316
  1317
  1318 306B 6C 0A 00		               jmp ($a)
  1319 306E 60			               rts
  1320 				          
  1321 306F			@exit
  1322 					.ifdef @new
  1323 					lda <@VarData
  1324 					sta :ztmp
  1325 					lda >@VarData
  1326 					ldy #@VarDataSize-1
  1327 					jmp @FreeMem
  1328 					eif
  1329 306F 60				rts						; ret
  1330 				.endl
  1331
  1332 3070			.local	COLDSTART					; PROCEDURE
  1333
  1334 				; ---------------------  ASM Block 063  ---------------------
  1335
  1336
  1337 3070 4C 77 E4		               jmp $e477;
  1338 3073 60			               rts
  1339 				          
  1340 3074			@exit
  1341 					.ifdef @new
  1342 					lda <@VarData
  1343 					sta :ztmp
  1344 					lda >@VarData
  1345 					ldy #@VarDataSize-1
  1346 					jmp @FreeMem
  1347 					eif
  1348 3074 60				rts						; ret
  1349 				.endl
  1350
  1351 3075			.local	BREAKPRESSED					; FUNCTION
  1352
  1353 				; optimize OK (milf.pas), line = 194
  1354
  1355 3075 AD 31 4B			lda CIORESULT
  1356 3078 C9 80			cmp #$80
  1357 307A D0 07			jne l_0824
  1358
  1359 				; optimize OK (milf.pas), line = 195
  1360
  1361 307C A9 01 8D 9A 4B		mva #$01 RESULT
  1362 3081 D0 05			jne l_0832
  1363 3083			l_0824
  1364
  1365 				; optimize OK (milf.pas), line = 197
  1366
  1367 3083 A9 00 8D 9A 4B		mva #$00 RESULT
  1368 3088			l_0832
  1369 3088			@exit
  1370
  1371 				; ------------------------------------------------------------
  1372
  1373 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1374 				; as Pointer
  1375
  1376 3088 E8				inx
  1377 3089 AD 9A 4B 95 9A		mva RESULT :STACKORIGIN,x
  1378
  1379 					.ifdef @new
  1380 					lda <@VarData
  1381 					sta :ztmp
  1382 					lda >@VarData
  1383 					ldy #@VarDataSize-1
  1384 					jmp @FreeMem
  1385 					eif
  1386
  1387 				; ------------------------------------------------------------
  1388
  1389 = 4B9A			RESULT	= DATAORIGIN+$049E
  1390
  1391 = 4B9A			@VarData	= RESULT
  1392 = 0001			@VarDataSize	= 1
  1393
  1394 308E 60				rts						; ret
  1395 				.endl
  1396
  1397 308F			.local	CLEARKEYS					; PROCEDURE
  1398
  1399 				; optimize OK (milf.pas), line = 204
  1400
  1401 308F A9 FF 8D FC 02		mva #$FF CH
  1402
  1403 				; optimize OK (milf.pas), line = 204
  1404
  1405 3094 A9 00 8D 5B 4B		mva #$00 KEY
  1406 3099			@exit
  1407 					.ifdef @new
  1408 					lda <@VarData
  1409 					sta :ztmp
  1410 					lda >@VarData
  1411 					ldy #@VarDataSize-1
  1412 					jmp @FreeMem
  1413 					eif
  1414 3099 60				rts						; ret
  1415 				.endl
  1416
  1417 309A			.local	PRESSKEY					; PROCEDURE
  1418
  1419 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 212
  1420 309A 20 8F 30			jsr CLEARKEYS
  1421
  1422 				; optimize FAIL ('CRT.DELAY', milf.pas), line = 213
  1423 309D E8				inx
  1424 309E A9 02 95 9A			mva #$02 :STACKORIGIN,x
  1425 30A2 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1426 30A6 20 F6 2E			jsr CRT.DELAY
  1427
  1428 				; optimize FAIL (100, milf.pas), line = 215
  1429 30A9 20 7B 2B			@printEOL
  1430
  1431 				; optimize FAIL (100, milf.pas), line = 216
  1432 					@printSTRING #CODEORIGIN+$0000
  1432 				 LDY> CODEORIGIN+$0000\ LDA< CODEORIGIN+$0000\ JSR @PRINTSTRING
  1432 30AC A0 20		 LDY> CODEORIGIN+$0000
  1432 30AE A9 00		 LDA< CODEORIGIN+$0000
  1432 30B0 20 89 2B		 JSR @PRINTSTRING
  1433 30B3 20 7B 2B			@printEOL
  1434
  1435 				; optimize FAIL (100, milf.pas), line = 217
  1436 30B6 20 7B 2B			@printEOL
  1437
  1438 				; --- RepeatUntilProlog
  1439 30B9			l_0850
  1440
  1441 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 218
  1442 30B9 20 5A 2F			jsr CRT.KEYPRESSED
  1443 30BC CA				dex
  1444 30BD B5 9B			lda :STACKORIGIN+1,x
  1445 30BF F0 F8			jeq l_0850
  1446 30C1			@exit
  1447 					.ifdef @new
  1448 					lda <@VarData
  1449 					sta :ztmp
  1450 					lda >@VarData
  1451 					ldy #@VarDataSize-1
  1452 					jmp @FreeMem
  1453 					eif
  1454 30C1 60				rts						; ret
  1455 				.endl
  1456
  1457 30C2			.local	CLEARBUFFER					; PROCEDURE
  1458
  1459 				; optimize OK (milf.pas), line = 226
  1460
  1461 30C2				.LOCAL
  1462 30C2 A0 00			ldy #$00
  1463 30C4 98				tya
  1464 30C5 99 00 60 99 80 60 + fill	:4 sta $6000+#*$80,y
  1465 30D1 C8				iny
  1466 30D2 10 F1			bpl fill
  1467 					.ENDL
  1468 30D4			@exit
  1469 					.ifdef @new
  1470 					lda <@VarData
  1471 					sta :ztmp
  1472 					lda >@VarData
  1473 					ldy #@VarDataSize-1
  1474 					jmp @FreeMem
  1475 					eif
  1476 30D4 60				rts						; ret
  1477 				.endl
  1478
  1479 30D5			.local	CLEARLOGBUFFER					; PROCEDURE
  1480
  1481 				; optimize OK (milf.pas), line = 233
  1482
  1483 30D5 A9 00			lda #$00
  1484 30D7 85 88			sta :edx
  1485 30D9 A9 62			lda #$62
  1486 30DB 85 89			sta :edx+1
  1487 30DD A9 C0			lda #$C0
  1488 30DF 85 8C			sta :ecx
  1489 30E1 A9 4E			lda #$4E
  1490 30E3 85 8D			sta :ecx+1
  1491 30E5 A9 00			lda #$00
  1492 30E7 85 84			sta :eax
  1493 30E9 20 DB 29			jsr @fill
  1494 30EC			@exit
  1495 					.ifdef @new
  1496 					lda <@VarData
  1497 					sta :ztmp
  1498 					lda >@VarData
  1499 					ldy #@VarDataSize-1
  1500 					jmp @FreeMem
  1501 					eif
  1502 30EC 60				rts						; ret
  1503 				.endl
  1504
  1505 30ED			.local	CLEARPERCOMBUFFER				; PROCEDURE
  1506
  1507 				; optimize OK (milf.pas), line = 240
  1508
  1509 30ED A0 F2			ldy #256-$0E
  1510 30EF A9 00			lda #$00
  1511 30F1 99 0E 05 C8 D0 FA		sta:rne $0600+$0E-256,y+
  1512 30F7			@exit
  1513 					.ifdef @new
  1514 					lda <@VarData
  1515 					sta :ztmp
  1516 					lda >@VarData
  1517 					ldy #@VarDataSize-1
  1518 					jmp @FreeMem
  1519 					eif
  1520 30F7 60				rts						; ret
  1521 				.endl
  1522
  1523 30F8			.local	PARSEINPUT					; PROCEDURE
  1524
  1525 				; ------------------------------------------------------------
  1526
  1527 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1528 				; as Pointer
  1529 30F8 B5 9A 8D 9B 4B		mva :STACKORIGIN,x NUMBEROFBYTESTOREAD
  1530 30FD CA				dex
  1531
  1532 30FE A9 00 8D 37 4B		mva #$00 adr.TMPSTRING
  1533 				; --- For
  1534
  1535 				; optimize OK (milf.pas), line = 250
  1536
  1537 3103 A9 00 8D 33 4B		mva #$00 TMPBYTE
  1538
  1539 				; optimize OK (milf.pas), line = 250
  1540
  1541 3108 AD 9B 4B 8D 12 31		mva NUMBEROFBYTESTOREAD :@FORTMP?087C_0
  1542 310E			l_087F
  1543 				; --- ForToDoCondition
  1544
  1545 				; optimize OK (milf.pas), line = 250
  1546
  1547 310E AD 33 4B			lda TMPBYTE
  1548 = 3112			.def :@FORTMP?087C_0 = *+1
  1549 3111 C9 00			cmp #$00
  1550 3113 90 02			scc
  1551 3115 D0 4A			jne l_088D
  1552
  1553 				; optimize OK (milf.pas), line = 251
  1554
  1555 3117 A0 60 84 91			mvy #$60 :bp+1
  1556 311B AC 33 4B			ldy TMPBYTE
  1557 311E B1 90			lda (:bp),y
  1558 3120 C9 9B			cmp #$9B
  1559 3122 F0 35			jeq l_08A4
  1560
  1561 				; optimize FAIL ('SYSTEM.CONCAT_0777', milf.pas), line = 252
  1562 3124 E8				inx
  1563 3125 AD F6 46 95 9A		mva TMPSTRING :STACKORIGIN,x
  1564 312A AD F7 46 95 AA		mva TMPSTRING+1 :STACKORIGIN+STACKWIDTH,x
  1565 312F E8				inx
  1566 3130 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1567 3134 A9 60 95 AA			mva #$60 :STACKORIGIN+STACKWIDTH,x
  1568 3138 E8				inx
  1569 3139 AD 33 4B 95 9A		mva TMPBYTE :STACKORIGIN,x
  1570 313E A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1571 3142 20 F3 28			jsr addAX_CX
  1572 3145 CA				dex
  1573 3146 20 B8 2C			jsr SYSTEM.PEEK
  1574 3149 20 69 2E			jsr SYSTEM.CONCAT_0777
  1575 					@moveSTRING TMPSTRING
  1575 				 LDY TMPSTRING+1\ LDA TMPSTRING\ JSR @MOVESTRING
  1575 314C AC F7 46		 LDY TMPSTRING+1
  1575 314F AD F6 46		 LDA TMPSTRING
  1575 3152 20 23 2A		 JSR @MOVESTRING
  1576 3155 CA				dex
  1577 3156 4C 5C 31			jmp l_08B9
  1578 3159			l_08A4
  1579
  1580 3159 4C 61 31			jmp b_087F					; break
  1581 315C			l_08B9
  1582
  1583 				; --- ForToDoEpilog
  1584 315C EE 33 4B			inc TMPBYTE					; inc ptr byte [CounterAddress]
  1585 315F D0 AD			jne l_087F
  1586 3161			l_088D
  1587 3161			b_087F
  1588
  1589 				; ------------------------------------------------------------
  1590
  1591 = 4B9B			NUMBEROFBYTESTOREAD	= DATAORIGIN+$049F
  1592 = 0000			@FORTMP_087C	= $00
  1593
  1594 = 4B9B			@VarData	= NUMBEROFBYTESTOREAD
  1595 = 0001			@VarDataSize	= 1
  1596
  1597 3161			@exit
  1598 					.ifdef @new
  1599 					lda <@VarData
  1600 					sta :ztmp
  1601 					lda >@VarData
  1602 					ldy #@VarDataSize-1
  1603 					jmp @FreeMem
  1604 					eif
  1605 3161 60				rts						; ret
  1606 				.endl
  1607
  1608 3162			.local	READPERCOM					; PROCEDURE
  1609
  1610 				; ------------------------------------------------------------
  1611
  1612 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1613 				; as Pointer
  1614 3162 B5 9A 8D 9E 4B		mva :STACKORIGIN,x SILENT
  1615 3167 CA				dex
  1616
  1617 				; ------------------------------------------------------------
  1618
  1619 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  1620 				; as Pointer
  1621 3168 B5 9A 8D 9D 4B		mva :STACKORIGIN,x DRIVE
  1622 316D CA				dex
  1623
  1624 				; optimize OK (milf.pas), line = 274
  1625
  1626 316E A9 00 8D 79 4B		mva #$00 NUMBER_OF_SECTORS
  1627 3173 8D 7A 4B			sta NUMBER_OF_SECTORS+1
  1628
  1629 				; optimize FAIL ('CLEARPERCOMBUFFER', milf.pas), line = 276
  1630 3176 20 ED 30			jsr CLEARPERCOMBUFFER
  1631
  1632 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 280
  1633 3179 E8				inx
  1634 317A AD 9D 4B 95 9A		mva DRIVE :STACKORIGIN,x
  1635 317F E8				inx
  1636 3180 A9 53 95 9A			mva #$53 :STACKORIGIN,x
  1637 3184 E8				inx
  1638 3185 A9 40 95 9A			mva #$40 :STACKORIGIN,x
  1639 3189 E8				inx
  1640 318A A9 07 95 9A			mva #$07 :STACKORIGIN,x
  1641 318E E8				inx
  1642 318F A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1643 3193 A9 06 95 AA			mva #$06 :STACKORIGIN+STACKWIDTH,x
  1644 3197 E8				inx
  1645 3198 A9 04 95 9A			mva #$04 :STACKORIGIN,x
  1646 319C A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1647 31A0 E8				inx
  1648 31A1 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1649 31A5 95 AA			sta :STACKORIGIN+STACKWIDTH,x
  1650 31A7 20 C6 2F			jsr EXEC_SIO
  1651
  1652 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 291
  1653 31AA E8				inx
  1654 31AB AD 9D 4B 95 9A		mva DRIVE :STACKORIGIN,x
  1655 31B0 E8				inx
  1656 31B1 A9 4E 95 9A			mva #$4E :STACKORIGIN,x
  1657 31B5 E8				inx
  1658 31B6 A9 40 95 9A			mva #$40 :STACKORIGIN,x
  1659 31BA E8				inx
  1660 31BB A9 07 95 9A			mva #$07 :STACKORIGIN,x
  1661 31BF E8				inx
  1662 31C0 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1663 31C4 A9 06 95 AA			mva #$06 :STACKORIGIN+STACKWIDTH,x
  1664 31C8 E8				inx
  1665 31C9 A9 0C 95 9A			mva #$0C :STACKORIGIN,x
  1666 31CD A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1667 31D1 E8				inx
  1668 31D2 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1669 31D6 95 AA			sta :STACKORIGIN+STACKWIDTH,x
  1670 31D8 20 C6 2F			jsr EXEC_SIO
  1671
  1672 				; ------------------------------------------------------------
  1673
  1674 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  1675 				; as Pointer
  1676
  1677 31DB E8				inx
  1678 31DC AD 30 4B 95 9A		mva SIORESULT :STACKORIGIN,x
  1679
  1680 				; GenerateCaseProlog
  1681 31E1 CA				dex
  1682
  1683 				; GenerateCaseEqualityCheck
  1684 31E2 B5 9B			lda :STACKORIGIN+1,x
  1685 31E4 C9 8A			cmp #138
  1686 31E6 D0 0D			jne l_08ED
  1687 31E8			@
  1688
  1689 				; optimize FAIL (100, milf.pas), line = 295
  1690 					@printSTRING #CODEORIGIN+$0010
  1690 				 LDY> CODEORIGIN+$0010\ LDA< CODEORIGIN+$0010\ JSR @PRINTSTRING
  1690 31E8 A0 20		 LDY> CODEORIGIN+$0010
  1690 31EA A9 10		 LDA< CODEORIGIN+$0010
  1690 31EC 20 89 2B		 JSR @PRINTSTRING
  1691 31EF 20 7B 2B			@printEOL
  1692 31F2 4C 49 34			jmp a_0002
  1693 31F5			l_08ED
  1694 31F5 B5 9B			lda :STACKORIGIN+1,x
  1695 31F7 C9 8B			cmp #139
  1696 31F9 F0 03 4C 0D 33		jne l_08F9
  1697 31FE			@
  1698
  1699 				; optimize OK (milf.pas), line = 297
  1700
  1701 31FE AD 9E 4B			lda SILENT
  1702 3201 D0 1E			jne l_0908
  1703
  1704 				; optimize FAIL (100, milf.pas), line = 298
  1705 					@printSTRING #CODEORIGIN+$0029
  1705 				 LDY> CODEORIGIN+$0029\ LDA< CODEORIGIN+$0029\ JSR @PRINTSTRING
  1705 3203 A0 20		 LDY> CODEORIGIN+$0029
  1705 3205 A9 29		 LDA< CODEORIGIN+$0029
  1705 3207 20 89 2B		 JSR @PRINTSTRING
  1706 320A 20 7B 2B			@printEOL
  1707
  1708 				; optimize FAIL (100, milf.pas), line = 299
  1709 					@printSTRING #CODEORIGIN+$0049
  1709 				 LDY> CODEORIGIN+$0049\ LDA< CODEORIGIN+$0049\ JSR @PRINTSTRING
  1709 320D A0 20		 LDY> CODEORIGIN+$0049
  1709 320F A9 49		 LDA< CODEORIGIN+$0049
  1709 3211 20 89 2B		 JSR @PRINTSTRING
  1710 3214 20 7B 2B			@printEOL
  1711
  1712 				; optimize FAIL (100, milf.pas), line = 300
  1713 					@printSTRING #CODEORIGIN+$006C
  1713 				 LDY> CODEORIGIN+$006C\ LDA< CODEORIGIN+$006C\ JSR @PRINTSTRING
  1713 3217 A0 20		 LDY> CODEORIGIN+$006C
  1713 3219 A9 6C		 LDA< CODEORIGIN+$006C
  1713 321B 20 89 2B		 JSR @PRINTSTRING
  1714 321E 20 7B 2B			@printEOL
  1715 3221			l_0908
  1716
  1717 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 302
  1718 3221 E8				inx
  1719 3222 AD 9D 4B 95 9A		mva DRIVE :STACKORIGIN,x
  1720 3227 E8				inx
  1721 3228 A9 52 95 9A			mva #$52 :STACKORIGIN,x
  1722 322C E8				inx
  1723 322D A9 40 95 9A			mva #$40 :STACKORIGIN,x
  1724 3231 E8				inx
  1725 3232 A9 07 95 9A			mva #$07 :STACKORIGIN,x
  1726 3236 E8				inx
  1727 3237 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  1728 323B A9 06 95 AA			mva #$06 :STACKORIGIN+STACKWIDTH,x
  1729 323F E8				inx
  1730 3240 A9 80 95 9A			mva #$80 :STACKORIGIN,x
  1731 3244 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  1732 3248 E8				inx
  1733 3249 A9 D1 95 9A			mva #$D1 :STACKORIGIN,x
  1734 324D A9 02 95 AA			mva #$02 :STACKORIGIN+STACKWIDTH,x
  1735 3251 20 C6 2F			jsr EXEC_SIO
  1736
  1737 				; optimize OK (milf.pas), line = 303
  1738
  1739 3254 AD 30 4B			lda SIORESULT
  1740 3257 C9 01			cmp #$01
  1741 3259 D0 16			jne l_0930
  1742
  1743 				; optimize OK (milf.pas), line = 304
  1744
  1745 325B A9 10 8D 79 4B		mva #$10 NUMBER_OF_SECTORS
  1746 3260 A9 04 8D 7A 4B		mva #$04 NUMBER_OF_SECTORS+1
  1747
  1748 				; optimize OK (milf.pas), line = 305
  1749
  1750 3265 A9 80 8D 77 4B		mva #$80 BYTES_PER_SECTOR
  1751 326A A9 00 8D 78 4B		mva #$00 BYTES_PER_SECTOR+1
  1752 326F F0 14			jeq l_0942
  1753 3271			l_0930
  1754
  1755 				; optimize OK (milf.pas), line = 307
  1756
  1757 3271 A9 D0 8D 79 4B		mva #$D0 NUMBER_OF_SECTORS
  1758 3276 A9 02 8D 7A 4B		mva #$02 NUMBER_OF_SECTORS+1
  1759
  1760 				; optimize OK (milf.pas), line = 308
  1761
  1762 327B A9 80 8D 77 4B		mva #$80 BYTES_PER_SECTOR
  1763 3280 A9 00 8D 78 4B		mva #$00 BYTES_PER_SECTOR+1
  1764 3285			l_0942
  1765
  1766 				; optimize OK (milf.pas), line = 310
  1767
  1768 3285 AD 9E 4B			lda SILENT
  1769 3288 D0 68			jne l_0959
  1770
  1771 				; optimize OK (milf.pas), line = 311
  1772
  1773 328A AD 9D 4B			lda DRIVE
  1774 328D C9 01			cmp #$01
  1775 328F D0 32			jne l_096C
  1776
  1777 				; optimize OK (milf.pas), line = 312
  1778
  1779 3291 AD 77 4B 8D 73 4B		mva BYTES_PER_SECTOR BYTES_PER_SECTOR_SOURCE
  1780 3297 AD 78 4B 8D 74 4B		mva BYTES_PER_SECTOR+1 BYTES_PER_SECTOR_SOURCE+1
  1781
  1782 				; optimize FAIL (100, milf.pas), line = 313
  1783 329D AD 79 4B			lda NUMBER_OF_SECTORS
  1784 32A0 AC 7A 4B			ldy NUMBER_OF_SECTORS+1
  1785 32A3 20 D5 2B			jsr @printWORD._ay
  1786 					@printSTRING #CODEORIGIN+$0089
  1786 				 LDY> CODEORIGIN+$0089\ LDA< CODEORIGIN+$0089\ JSR @PRINTSTRING
  1786 32A6 A0 20		 LDY> CODEORIGIN+$0089
  1786 32A8 A9 89		 LDA< CODEORIGIN+$0089
  1786 32AA 20 89 2B		 JSR @PRINTSTRING
  1787 32AD AD 73 4B			lda BYTES_PER_SECTOR_SOURCE
  1788 32B0 AC 74 4B			ldy BYTES_PER_SECTOR_SOURCE+1
  1789 32B3 20 D5 2B			jsr @printWORD._ay
  1790 					@printSTRING #CODEORIGIN+$0097
  1790 				 LDY> CODEORIGIN+$0097\ LDA< CODEORIGIN+$0097\ JSR @PRINTSTRING
  1790 32B6 A0 20		 LDY> CODEORIGIN+$0097
  1790 32B8 A9 97		 LDA< CODEORIGIN+$0097
  1790 32BA 20 89 2B		 JSR @PRINTSTRING
  1791 32BD 20 7B 2B			@printEOL
  1792 32C0 4C F2 32			jmp l_098F
  1793 32C3			l_096C
  1794
  1795 				; optimize OK (milf.pas), line = 315
  1796
  1797 32C3 AD 77 4B 8D 75 4B		mva BYTES_PER_SECTOR BYTES_PER_SECTOR_DEST
  1798 32C9 AD 78 4B 8D 76 4B		mva BYTES_PER_SECTOR+1 BYTES_PER_SECTOR_DEST+1
  1799
  1800 				; optimize FAIL (100, milf.pas), line = 316
  1801 32CF AD 79 4B			lda NUMBER_OF_SECTORS
  1802 32D2 AC 7A 4B			ldy NUMBER_OF_SECTORS+1
  1803 32D5 20 D5 2B			jsr @printWORD._ay
  1804 					@printSTRING #CODEORIGIN+$0089
  1804 				 LDY> CODEORIGIN+$0089\ LDA< CODEORIGIN+$0089\ JSR @PRINTSTRING
  1804 32D8 A0 20		 LDY> CODEORIGIN+$0089
  1804 32DA A9 89		 LDA< CODEORIGIN+$0089
  1804 32DC 20 89 2B		 JSR @PRINTSTRING
  1805 32DF AD 75 4B			lda BYTES_PER_SECTOR_DEST
  1806 32E2 AC 76 4B			ldy BYTES_PER_SECTOR_DEST+1
  1807 32E5 20 D5 2B			jsr @printWORD._ay
  1808 					@printSTRING #CODEORIGIN+$0097
  1808 				 LDY> CODEORIGIN+$0097\ LDA< CODEORIGIN+$0097\ JSR @PRINTSTRING
  1808 32E8 A0 20		 LDY> CODEORIGIN+$0097
  1808 32EA A9 97		 LDA< CODEORIGIN+$0097
  1808 32EC 20 89 2B		 JSR @PRINTSTRING
  1809 32EF 20 7B 2B			@printEOL
  1810 32F2			l_098F
  1811 32F2			l_0959
  1812
  1813 				; optimize OK (milf.pas), line = 319
  1814
  1815 32F2 A9 01 8D 30 4B		mva #$01 SIORESULT
  1816
  1817 				; optimize OK (milf.pas), line = 320
  1818
  1819 32F7 AD 9D 4B			lda DRIVE
  1820 32FA C9 01			cmp #$01
  1821 32FC D0 07			jne l_09C0
  1822
  1823 				; optimize OK (milf.pas), line = 321
  1824
  1825 32FE A9 01 8D 71 4B		mva #$01 SOURCE_DRIVE_NOT_CONFIGURABLE
  1826 3303 D0 05			jne l_09CE
  1827 3305			l_09C0
  1828
  1829 				; optimize OK (milf.pas), line = 323
  1830
  1831 3305 A9 01 8D 72 4B		mva #$01 DEST_DRIVE_NOT_CONFIGURABLE
  1832 330A			l_09CE
  1833
  1834 				; GenerateCaseStatementEpilog
  1835 330A 4C 49 34			jmp a_0002
  1836 330D			l_08F9
  1837 				; --- For
  1838
  1839 				; optimize OK (milf.pas), line = 328
  1840
  1841 330D A9 00 8D 33 4B		mva #$00 TMPBYTE
  1842
  1843 				; optimize OK (milf.pas), line = 328
  1844
  1845 3312			l_09DF
  1846 				; --- ForToDoCondition
  1847
  1848 				; optimize OK (milf.pas), line = 328
  1849
  1850 3312 AD 33 4B			lda TMPBYTE
  1851 3315 C9 0C			cmp #$0C
  1852 3317 B0 1A			jcs l_09ED
  1853
  1854 				; optimize OK (milf.pas), line = 329
  1855
  1856 3319 8D 35 4B			sta TMPWORD
  1857 331C A9 06			lda #$06
  1858 331E 8D 36 4B			sta TMPWORD+1
  1859
  1860 				; optimize OK (milf.pas), line = 330
  1861
  1862 3321 85 91			sta :bp+1
  1863 3323 AC 35 4B			ldy TMPWORD
  1864 3326 B1 90			lda (:bp),y
  1865 3328 AC 33 4B			ldy TMPBYTE
  1866 332B 99 22 4B			sta adr.PERCOMBLOCK,y
  1867
  1868 				; --- ForToDoEpilog
  1869 332E EE 33 4B			inc TMPBYTE					; inc ptr byte [CounterAddress]
  1870 3331 D0 DF			jne l_09DF
  1871 3333			l_09ED
  1872
  1873 				; optimize OK (milf.pas), line = 333
  1874
  1875 3333 AD 22 4B			lda adr.PERCOMBLOCK+$00
  1876 3336 85 A3			sta :STACKORIGIN+9
  1877 3338 AD 24 4B			lda adr.PERCOMBLOCK+$02
  1878 333B 85 84			sta :eax
  1879 333D A9 00			lda #$00
  1880 333F 85 8C			sta :ecx
  1881 3341 A9 01			lda #$01
  1882 3343 85 8D			sta :ecx+1
  1883 3345 A9 00			lda #$00
  1884 3347 85 85			sta :eax+1
  1885 					.ifdef fmulinit
  1886 					fmulu_16
  1887 					els
  1888 3349 20 6D 2A			imulCX
  1889 					eif
  1890 334C A5 84			lda :eax
  1891 334E 18 6D 25 4B			add adr.PERCOMBLOCK+$03
  1892 3352 85 8C			sta :ecx
  1893 3354 A5 85			lda :eax+1
  1894 3356 69 00			adc #$00
  1895 3358 85 8D			sta :ecx+1
  1896 335A A5 A3			lda :STACKORIGIN+9
  1897 335C 85 84			sta :eax
  1898 335E A9 00			lda #$00
  1899 3360 85 85			sta :eax+1
  1900 					.ifdef fmulinit
  1901 					fmulu_16
  1902 					els
  1903 3362 20 6D 2A			imulCX
  1904 					eif
  1905 3365 A5 84			lda :eax
  1906 3367 8D 79 4B			sta NUMBER_OF_SECTORS
  1907 336A A5 85			lda :eax+1
  1908 336C 8D 7A 4B			sta NUMBER_OF_SECTORS+1
  1909
  1910 				; optimize OK (milf.pas), line = 334
  1911
  1912 336F AD 26 4B			lda adr.PERCOMBLOCK+$04
  1913 3372 18 69 01			add #$01
  1914 3375 85 8C			sta :ecx
  1915 3377 A9 00			lda #$00
  1916 3379 69 00			adc #$00
  1917 337B 85 8D			sta :ecx+1
  1918 337D AD 79 4B			lda NUMBER_OF_SECTORS
  1919 3380 85 84			sta :eax
  1920 3382 AD 7A 4B			lda NUMBER_OF_SECTORS+1
  1921 3385 85 85			sta :eax+1
  1922 					.ifdef fmulinit
  1923 					fmulu_16
  1924 					els
  1925 3387 20 6D 2A			imulCX
  1926 					eif
  1927 338A A5 84			lda :eax
  1928 338C 8D 79 4B			sta NUMBER_OF_SECTORS
  1929 338F A5 85			lda :eax+1
  1930 3391 8D 7A 4B			sta NUMBER_OF_SECTORS+1
  1931
  1932 				; optimize OK (milf.pas), line = 335
  1933
  1934 3394 AD 28 4B			lda adr.PERCOMBLOCK+$06
  1935 3397 85 85			sta :eax+1
  1936 3399 AD 29 4B			lda adr.PERCOMBLOCK+$07
  1937 339C 8D 77 4B			sta BYTES_PER_SECTOR
  1938 339F A5 85			lda :eax+1
  1939 33A1 8D 78 4B			sta BYTES_PER_SECTOR+1
  1940
  1941 				; optimize OK (milf.pas), line = 337
  1942
  1943 33A4 AD 9D 4B			lda DRIVE
  1944 33A7 C9 01			cmp #$01
  1945 33A9 D0 07			jne l_0A52
  1946
  1947 				; optimize OK (milf.pas), line = 337
  1948
  1949 33AB A9 00 8D 71 4B		mva #$00 SOURCE_DRIVE_NOT_CONFIGURABLE
  1950 33B0 F0 05			jeq l_0A60
  1951 33B2			l_0A52
  1952
  1953 				; optimize OK (milf.pas), line = 338
  1954
  1955 33B2 A9 00 8D 72 4B		mva #$00 DEST_DRIVE_NOT_CONFIGURABLE
  1956 33B7			l_0A60
  1957
  1958 				; optimize OK (milf.pas), line = 340
  1959
  1960 33B7 AD 9E 4B			lda SILENT
  1961 33BA D0 6B			jne l_0A73
  1962
  1963 				; optimize OK (milf.pas), line = 341
  1964
  1965 33BC AD 9D 4B			lda DRIVE
  1966 33BF C9 01			cmp #$01
  1967 33C1 D0 32			jne l_0A86
  1968
  1969 				; optimize OK (milf.pas), line = 342
  1970
  1971 33C3 AD 77 4B 8D 73 4B		mva BYTES_PER_SECTOR BYTES_PER_SECTOR_SOURCE
  1972 33C9 AD 78 4B 8D 74 4B		mva BYTES_PER_SECTOR+1 BYTES_PER_SECTOR_SOURCE+1
  1973
  1974 				; optimize FAIL (100, milf.pas), line = 343
  1975 33CF AD 79 4B			lda NUMBER_OF_SECTORS
  1976 33D2 AC 7A 4B			ldy NUMBER_OF_SECTORS+1
  1977 33D5 20 D5 2B			jsr @printWORD._ay
  1978 					@printSTRING #CODEORIGIN+$0089
  1978 				 LDY> CODEORIGIN+$0089\ LDA< CODEORIGIN+$0089\ JSR @PRINTSTRING
  1978 33D8 A0 20		 LDY> CODEORIGIN+$0089
  1978 33DA A9 89		 LDA< CODEORIGIN+$0089
  1978 33DC 20 89 2B		 JSR @PRINTSTRING
  1979 33DF AD 77 4B			lda BYTES_PER_SECTOR
  1980 33E2 AC 78 4B			ldy BYTES_PER_SECTOR+1
  1981 33E5 20 D5 2B			jsr @printWORD._ay
  1982 					@printSTRING #CODEORIGIN+$0097
  1982 				 LDY> CODEORIGIN+$0097\ LDA< CODEORIGIN+$0097\ JSR @PRINTSTRING
  1982 33E8 A0 20		 LDY> CODEORIGIN+$0097
  1982 33EA A9 97		 LDA< CODEORIGIN+$0097
  1982 33EC 20 89 2B		 JSR @PRINTSTRING
  1983 33EF 20 7B 2B			@printEOL
  1984 33F2 4C 24 34			jmp l_0AA9
  1985 33F5			l_0A86
  1986
  1987 				; optimize OK (milf.pas), line = 345
  1988
  1989 33F5 AD 77 4B 8D 75 4B		mva BYTES_PER_SECTOR BYTES_PER_SECTOR_DEST
  1990 33FB AD 78 4B 8D 76 4B		mva BYTES_PER_SECTOR+1 BYTES_PER_SECTOR_DEST+1
  1991
  1992 				; optimize FAIL (100, milf.pas), line = 346
  1993 3401 AD 79 4B			lda NUMBER_OF_SECTORS
  1994 3404 AC 7A 4B			ldy NUMBER_OF_SECTORS+1
  1995 3407 20 D5 2B			jsr @printWORD._ay
  1996 					@printSTRING #CODEORIGIN+$0089
  1996 				 LDY> CODEORIGIN+$0089\ LDA< CODEORIGIN+$0089\ JSR @PRINTSTRING
  1996 340A A0 20		 LDY> CODEORIGIN+$0089
  1996 340C A9 89		 LDA< CODEORIGIN+$0089
  1996 340E 20 89 2B		 JSR @PRINTSTRING
  1997 3411 AD 77 4B			lda BYTES_PER_SECTOR
  1998 3414 AC 78 4B			ldy BYTES_PER_SECTOR+1
  1999 3417 20 D5 2B			jsr @printWORD._ay
  2000 					@printSTRING #CODEORIGIN+$0097
  2000 				 LDY> CODEORIGIN+$0097\ LDA< CODEORIGIN+$0097\ JSR @PRINTSTRING
  2000 341A A0 20		 LDY> CODEORIGIN+$0097
  2000 341C A9 97		 LDA< CODEORIGIN+$0097
  2000 341E 20 89 2B		 JSR @PRINTSTRING
  2001 3421 20 7B 2B			@printEOL
  2002 3424			l_0AA9
  2003 3424 4C 49 34			jmp l_0ACB
  2004 3427			l_0A73
  2005
  2006 				; optimize OK (milf.pas), line = 349
  2007
  2008 3427 AD 9D 4B			lda DRIVE
  2009 342A C9 01			cmp #$01
  2010 342C D0 0F			jne l_0ADD
  2011
  2012 				; optimize OK (milf.pas), line = 350
  2013
  2014 342E AD 77 4B 8D 73 4B		mva BYTES_PER_SECTOR BYTES_PER_SECTOR_SOURCE
  2015 3434 AD 78 4B 8D 74 4B		mva BYTES_PER_SECTOR+1 BYTES_PER_SECTOR_SOURCE+1
  2016 343A 4C 49 34			jmp l_0AEC
  2017 343D			l_0ADD
  2018
  2019 				; optimize OK (milf.pas), line = 352
  2020
  2021 343D AD 77 4B 8D 75 4B		mva BYTES_PER_SECTOR BYTES_PER_SECTOR_DEST
  2022 3443 AD 78 4B 8D 76 4B		mva BYTES_PER_SECTOR+1 BYTES_PER_SECTOR_DEST+1
  2023 3449			l_0AEC
  2024 3449			l_0ACB
  2025
  2026 				; GenerateCaseEpilog
  2027 3449			a_0002
  2028
  2029 				; ------------------------------------------------------------
  2030
  2031 = 4B9D			DRIVE	= DATAORIGIN+$04A1
  2032 = 4B9E			SILENT	= DATAORIGIN+$04A2
  2033 = 000B			@FORTMP_09DC	= $0B
  2034
  2035 = 4B9D			@VarData	= DRIVE
  2036 = 0002			@VarDataSize	= 2
  2037
  2038 3449			@exit
  2039 					.ifdef @new
  2040 					lda <@VarData
  2041 					sta :ztmp
  2042 					lda >@VarData
  2043 					ldy #@VarDataSize-1
  2044 					jmp @FreeMem
  2045 					eif
  2046 3449 60				rts						; ret
  2047 				.endl
  2048
  2049 344A			.local	ERRORMESSAGE					; PROCEDURE
  2050
  2051 				; ------------------------------------------------------------
  2052
  2053 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  2054 				; as Pointer
  2055 344A B5 9A 8D 9F 4B		mva :STACKORIGIN,x ERR
  2056 344F CA				dex
  2057
  2058 				; optimize FAIL ('SYSTEM.STR_0732', milf.pas), line = 366
  2059 3450 E8				inx
  2060 3451 AD 9F 4B 95 9A		mva ERR :STACKORIGIN,x
  2061 3456 20 52 29			jsr @expandToCARD.BYTE
  2062 3459 E8				inx
  2063 345A AD F6 46 95 9A		mva TMPSTRING :STACKORIGIN,x
  2064 345F AD F7 46 95 AA		mva TMPSTRING+1 :STACKORIGIN+STACKWIDTH,x
  2065 3464 20 28 2D			jsr SYSTEM.STR_0732
  2066
  2067 				; optimize FAIL (100, milf.pas), line = 367
  2068 					@printSTRING #CODEORIGIN+$00A0
  2068 				 LDY> CODEORIGIN+$00A0\ LDA< CODEORIGIN+$00A0\ JSR @PRINTSTRING
  2068 3467 A0 20		 LDY> CODEORIGIN+$00A0
  2068 3469 A9 A0		 LDA< CODEORIGIN+$00A0
  2068 346B 20 89 2B		 JSR @PRINTSTRING
  2069
  2070 				; optimize OK (milf.pas), line = 368
  2071
  2072 346E AD 9F 4B			lda ERR
  2073 3471 10 16			jpl l_0B15
  2074
  2075 				; optimize FAIL (100, milf.pas), line = 369
  2076 					@printSTRING #CODEORIGIN+$00AA
  2076 				 LDY> CODEORIGIN+$00AA\ LDA< CODEORIGIN+$00AA\ JSR @PRINTSTRING
  2076 3473 A0 20		 LDY> CODEORIGIN+$00AA
  2076 3475 A9 AA		 LDA< CODEORIGIN+$00AA
  2076 3477 20 89 2B		 JSR @PRINTSTRING
  2077 					@printSTRING TMPSTRING
  2077 				 LDY TMPSTRING+1\ LDA TMPSTRING\ JSR @PRINTSTRING
  2077 347A AC F7 46		 LDY TMPSTRING+1
  2077 347D AD F6 46		 LDA TMPSTRING
  2077 3480 20 89 2B		 JSR @PRINTSTRING
  2078 3483 20 7B 2B			@printEOL
  2079 3486 4C 93 34			jmp l_0B28
  2080 3489			l_0B15
  2081
  2082 				; optimize FAIL (100, milf.pas), line = 370
  2083 					@printSTRING #CODEORIGIN+$00B2
  2083 				 LDY> CODEORIGIN+$00B2\ LDA< CODEORIGIN+$00B2\ JSR @PRINTSTRING
  2083 3489 A0 20		 LDY> CODEORIGIN+$00B2
  2083 348B A9 B2		 LDA< CODEORIGIN+$00B2
  2083 348D 20 89 2B		 JSR @PRINTSTRING
  2084 3490 20 7B 2B			@printEOL
  2085 3493			l_0B28
  2086
  2087 				; ------------------------------------------------------------
  2088
  2089 = 4B9F			ERR	= DATAORIGIN+$04A3
  2090
  2091 = 4B9F			@VarData	= ERR
  2092 = 0001			@VarDataSize	= 1
  2093
  2094 3493			@exit
  2095 					.ifdef @new
  2096 					lda <@VarData
  2097 					sta :ztmp
  2098 					lda >@VarData
  2099 					ldy #@VarDataSize-1
  2100 					jmp @FreeMem
  2101 					eif
  2102 3493 60				rts						; ret
  2103 				.endl
  2104
  2105 3494			.local	WRITEMENU					; PROCEDURE
  2106
  2107 				; optimize FAIL (100, milf.pas), line = 378
  2108 3494 20 7B 2B			@printEOL
  2109
  2110 				; optimize FAIL ('SYSTEM.STR_0732', milf.pas), line = 380
  2111 3497 E8				inx
  2112 3498 AD 6E 4B 95 9A		mva SOURCE_DRIVE :STACKORIGIN,x
  2113 349D 20 52 29			jsr @expandToCARD.BYTE
  2114 34A0 E8				inx
  2115 34A1 AD F6 46 95 9A		mva TMPSTRING :STACKORIGIN,x
  2116 34A6 AD F7 46 95 AA		mva TMPSTRING+1 :STACKORIGIN+STACKWIDTH,x
  2117 34AB 20 28 2D			jsr SYSTEM.STR_0732
  2118
  2119 				; optimize FAIL (100, milf.pas), line = 381
  2120 					@printSTRING #CODEORIGIN+$00B6
  2120 				 LDY> CODEORIGIN+$00B6\ LDA< CODEORIGIN+$00B6\ JSR @PRINTSTRING
  2120 34AE A0 20		 LDY> CODEORIGIN+$00B6
  2120 34B0 A9 B6		 LDA< CODEORIGIN+$00B6
  2120 34B2 20 89 2B		 JSR @PRINTSTRING
  2121 					@printSTRING TMPSTRING
  2121 				 LDY TMPSTRING+1\ LDA TMPSTRING\ JSR @PRINTSTRING
  2121 34B5 AC F7 46		 LDY TMPSTRING+1
  2121 34B8 AD F6 46		 LDA TMPSTRING
  2121 34BB 20 89 2B		 JSR @PRINTSTRING
  2122 34BE 20 7B 2B			@printEOL
  2123
  2124 				; optimize FAIL ('READPERCOM', milf.pas), line = 382
  2125 34C1 E8				inx
  2126 34C2 AD 6E 4B 95 9A		mva SOURCE_DRIVE :STACKORIGIN,x
  2127 34C7 E8				inx
  2128 34C8 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  2129 34CC 20 62 31			jsr READPERCOM
  2130
  2131 				; optimize FAIL (100, milf.pas), line = 383
  2132 					@printSTRING #CODEORIGIN+$00CF
  2132 				 LDY> CODEORIGIN+$00CF\ LDA< CODEORIGIN+$00CF\ JSR @PRINTSTRING
  2132 34CF A0 20		 LDY> CODEORIGIN+$00CF
  2132 34D1 A9 CF		 LDA< CODEORIGIN+$00CF
  2132 34D3 20 89 2B		 JSR @PRINTSTRING
  2133 34D6 20 7B 2B			@printEOL
  2134
  2135 				; optimize OK (milf.pas), line = 384
  2136
  2137 34D9 AD 6F 4B			lda DEST_DRIVE
  2138 34DC C9 FF			cmp #$FF
  2139 34DE B0 3B			jcs l_0B58
  2140
  2141 				; optimize FAIL ('SYSTEM.STR_0732', milf.pas), line = 385
  2142 34E0 E8				inx
  2143 34E1 AD 6F 4B 95 9A		mva DEST_DRIVE :STACKORIGIN,x
  2144 34E6 20 52 29			jsr @expandToCARD.BYTE
  2145 34E9 E8				inx
  2146 34EA AD F8 46 95 9A		mva TMPSTRING2 :STACKORIGIN,x
  2147 34EF AD F9 46 95 AA		mva TMPSTRING2+1 :STACKORIGIN+STACKWIDTH,x
  2148 34F4 20 28 2D			jsr SYSTEM.STR_0732
  2149
  2150 				; optimize FAIL (100, milf.pas), line = 386
  2151 					@printSTRING #CODEORIGIN+$00F6
  2151 				 LDY> CODEORIGIN+$00F6\ LDA< CODEORIGIN+$00F6\ JSR @PRINTSTRING
  2151 34F7 A0 20		 LDY> CODEORIGIN+$00F6
  2151 34F9 A9 F6		 LDA< CODEORIGIN+$00F6
  2151 34FB 20 89 2B		 JSR @PRINTSTRING
  2152 					@printSTRING TMPSTRING2
  2152 				 LDY TMPSTRING2+1\ LDA TMPSTRING2\ JSR @PRINTSTRING
  2152 34FE AC F9 46		 LDY TMPSTRING2+1
  2152 3501 AD F8 46		 LDA TMPSTRING2
  2152 3504 20 89 2B		 JSR @PRINTSTRING
  2153 3507 20 7B 2B			@printEOL
  2154
  2155 				; optimize FAIL ('READPERCOM', milf.pas), line = 387
  2156 350A E8				inx
  2157 350B AD 6F 4B 95 9A		mva DEST_DRIVE :STACKORIGIN,x
  2158 3510 E8				inx
  2159 3511 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  2160 3515 20 62 31			jsr READPERCOM
  2161 3518 4C 25 35			jmp l_0B76
  2162 351B			l_0B58
  2163
  2164 				; optimize FAIL (100, milf.pas), line = 389
  2165 					@printSTRING #CODEORIGIN+$0114
  2165 				 LDY> CODEORIGIN+$0114\ LDA< CODEORIGIN+$0114\ JSR @PRINTSTRING
  2165 351B A0 21		 LDY> CODEORIGIN+$0114
  2165 351D A9 14		 LDA< CODEORIGIN+$0114
  2165 351F 20 89 2B		 JSR @PRINTSTRING
  2166 3522 20 7B 2B			@printEOL
  2167 3525			l_0B76
  2168
  2169 				; optimize FAIL (100, milf.pas), line = 392
  2170 3525 20 7B 2B			@printEOL
  2171
  2172 				; optimize FAIL (100, milf.pas), line = 393
  2173 					@printSTRING #CODEORIGIN+$012F
  2173 				 LDY> CODEORIGIN+$012F\ LDA< CODEORIGIN+$012F\ JSR @PRINTSTRING
  2173 3528 A0 21		 LDY> CODEORIGIN+$012F
  2173 352A A9 2F		 LDA< CODEORIGIN+$012F
  2173 352C 20 89 2B		 JSR @PRINTSTRING
  2174 352F 20 7B 2B			@printEOL
  2175
  2176 				; optimize FAIL (100, milf.pas), line = 394
  2177 					@printSTRING #CODEORIGIN+$014D
  2177 				 LDY> CODEORIGIN+$014D\ LDA< CODEORIGIN+$014D\ JSR @PRINTSTRING
  2177 3532 A0 21		 LDY> CODEORIGIN+$014D
  2177 3534 A9 4D		 LDA< CODEORIGIN+$014D
  2177 3536 20 89 2B		 JSR @PRINTSTRING
  2178 3539 20 7B 2B			@printEOL
  2179
  2180 				; optimize FAIL (100, milf.pas), line = 395
  2181 					@printSTRING #CODEORIGIN+$016C
  2181 				 LDY> CODEORIGIN+$016C\ LDA< CODEORIGIN+$016C\ JSR @PRINTSTRING
  2181 353C A0 21		 LDY> CODEORIGIN+$016C
  2181 353E A9 6C		 LDA< CODEORIGIN+$016C
  2181 3540 20 89 2B		 JSR @PRINTSTRING
  2182 3543 20 7B 2B			@printEOL
  2183
  2184 				; optimize FAIL (100, milf.pas), line = 396
  2185 					@printSTRING #CODEORIGIN+$017E
  2185 				 LDY> CODEORIGIN+$017E\ LDA< CODEORIGIN+$017E\ JSR @PRINTSTRING
  2185 3546 A0 21		 LDY> CODEORIGIN+$017E
  2185 3548 A9 7E		 LDA< CODEORIGIN+$017E
  2185 354A 20 89 2B		 JSR @PRINTSTRING
  2186 354D 20 7B 2B			@printEOL
  2187
  2188 				; optimize FAIL (100, milf.pas), line = 397
  2189 					@printSTRING #CODEORIGIN+$01A2
  2189 				 LDY> CODEORIGIN+$01A2\ LDA< CODEORIGIN+$01A2\ JSR @PRINTSTRING
  2189 3550 A0 21		 LDY> CODEORIGIN+$01A2
  2189 3552 A9 A2		 LDA< CODEORIGIN+$01A2
  2189 3554 20 89 2B		 JSR @PRINTSTRING
  2190 3557 20 7B 2B			@printEOL
  2191
  2192 				; optimize FAIL (100, milf.pas), line = 398
  2193 					@printSTRING #CODEORIGIN+$01C7
  2193 				 LDY> CODEORIGIN+$01C7\ LDA< CODEORIGIN+$01C7\ JSR @PRINTSTRING
  2193 355A A0 21		 LDY> CODEORIGIN+$01C7
  2193 355C A9 C7		 LDA< CODEORIGIN+$01C7
  2193 355E 20 89 2B		 JSR @PRINTSTRING
  2194 3561 20 7B 2B			@printEOL
  2195
  2196 				; optimize FAIL (100, milf.pas), line = 399
  2197 3564 20 7B 2B			@printEOL
  2198
  2199 				; optimize FAIL (100, milf.pas), line = 400
  2200 					@printSTRING #CODEORIGIN+$01D9
  2200 				 LDY> CODEORIGIN+$01D9\ LDA< CODEORIGIN+$01D9\ JSR @PRINTSTRING
  2200 3567 A0 21		 LDY> CODEORIGIN+$01D9
  2200 3569 A9 D9		 LDA< CODEORIGIN+$01D9
  2200 356B 20 89 2B		 JSR @PRINTSTRING
  2201 356E 20 7B 2B			@printEOL
  2202
  2203 				; optimize FAIL (100, milf.pas), line = 401
  2204 					@printSTRING #CODEORIGIN+$01EA
  2204 				 LDY> CODEORIGIN+$01EA\ LDA< CODEORIGIN+$01EA\ JSR @PRINTSTRING
  2204 3571 A0 21		 LDY> CODEORIGIN+$01EA
  2204 3573 A9 EA		 LDA< CODEORIGIN+$01EA
  2204 3575 20 89 2B		 JSR @PRINTSTRING
  2205 3578 20 7B 2B			@printEOL
  2206
  2207 				; optimize FAIL (100, milf.pas), line = 402
  2208 357B 20 7B 2B			@printEOL
  2209 357E			@exit
  2210 					.ifdef @new
  2211 					lda <@VarData
  2212 					sta :ztmp
  2213 					lda >@VarData
  2214 					ldy #@VarDataSize-1
  2215 					jmp @FreeMem
  2216 					eif
  2217 357E 60				rts						; ret
  2218 				.endl
  2219
  2220 357F			.local	SWAPDRIVES					; PROCEDURE
  2221
  2222 				; optimize OK (milf.pas), line = 411
  2223
  2224 357F AD 6F 4B			lda DEST_DRIVE
  2225 3582 C9 FF			cmp #$FF
  2226 3584 F0 07			jeq l_0BB3x
  2227 3586 AD 6E 4B			lda SOURCE_DRIVE
  2228 3589 C9 FF			cmp #$FF
  2229 358B D0 17			jne l_0BB3
  2230 358D			l_0BB3x
  2231
  2232 				; optimize FAIL (100, milf.pas), line = 413
  2233 					@printSTRING #CODEORIGIN+$01FA
  2233 				 LDY> CODEORIGIN+$01FA\ LDA< CODEORIGIN+$01FA\ JSR @PRINTSTRING
  2233 358D A0 21		 LDY> CODEORIGIN+$01FA
  2233 358F A9 FA		 LDA< CODEORIGIN+$01FA
  2233 3591 20 89 2B		 JSR @PRINTSTRING
  2234 3594 20 7B 2B			@printEOL
  2235
  2236 				; optimize FAIL (100, milf.pas), line = 414
  2237 					@printSTRING #CODEORIGIN+$0215
  2237 				 LDY> CODEORIGIN+$0215\ LDA< CODEORIGIN+$0215\ JSR @PRINTSTRING
  2237 3597 A0 22		 LDY> CODEORIGIN+$0215
  2237 3599 A9 15		 LDA< CODEORIGIN+$0215
  2237 359B 20 89 2B		 JSR @PRINTSTRING
  2238 359E 20 7B 2B			@printEOL
  2239 35A1 4C F6 35			jmp l_0BC3
  2240 35A4			l_0BB3
  2241
  2242 				; optimize OK (milf.pas), line = 418
  2243
  2244 35A4 AD 6E 4B 8D 33 4B		mva SOURCE_DRIVE TMPBYTE
  2245
  2246 				; optimize OK (milf.pas), line = 419
  2247
  2248 35AA AD 6F 4B 8D 6E 4B		mva DEST_DRIVE SOURCE_DRIVE
  2249
  2250 				; optimize OK (milf.pas), line = 420
  2251
  2252 35B0 AD 33 4B 8D 6F 4B		mva TMPBYTE DEST_DRIVE
  2253
  2254 				; optimize OK (milf.pas), line = 422
  2255
  2256 35B6 AD 71 4B 8D 32 4B		mva SOURCE_DRIVE_NOT_CONFIGURABLE TMPBOOL
  2257
  2258 				; optimize OK (milf.pas), line = 423
  2259
  2260 35BC AD 72 4B 8D 71 4B		mva DEST_DRIVE_NOT_CONFIGURABLE SOURCE_DRIVE_NOT_CONFIGURABLE
  2261
  2262 				; optimize OK (milf.pas), line = 424
  2263
  2264 35C2 AD 32 4B 8D 72 4B		mva TMPBOOL DEST_DRIVE_NOT_CONFIGURABLE
  2265
  2266 				; optimize OK (milf.pas), line = 426
  2267
  2268 35C8 AD 73 4B 8D 35 4B		mva BYTES_PER_SECTOR_SOURCE TMPWORD
  2269 35CE AD 74 4B 8D 36 4B		mva BYTES_PER_SECTOR_SOURCE+1 TMPWORD+1
  2270
  2271 				; optimize OK (milf.pas), line = 427
  2272
  2273 35D4 AD 75 4B 8D 73 4B		mva BYTES_PER_SECTOR_DEST BYTES_PER_SECTOR_SOURCE
  2274 35DA AD 76 4B 8D 74 4B		mva BYTES_PER_SECTOR_DEST+1 BYTES_PER_SECTOR_SOURCE+1
  2275
  2276 				; optimize OK (milf.pas), line = 428
  2277
  2278 35E0 AD 35 4B 8D 75 4B		mva TMPWORD BYTES_PER_SECTOR_DEST
  2279 35E6 AD 36 4B 8D 76 4B		mva TMPWORD+1 BYTES_PER_SECTOR_DEST+1
  2280
  2281 				; optimize FAIL (100, milf.pas), line = 430
  2282 					@printSTRING #CODEORIGIN+$0229
  2282 				 LDY> CODEORIGIN+$0229\ LDA< CODEORIGIN+$0229\ JSR @PRINTSTRING
  2282 35EC A0 22		 LDY> CODEORIGIN+$0229
  2282 35EE A9 29		 LDA< CODEORIGIN+$0229
  2282 35F0 20 89 2B		 JSR @PRINTSTRING
  2283 35F3 20 7B 2B			@printEOL
  2284 35F6			l_0BC3
  2285
  2286 				; optimize FAIL ('PRESSKEY', milf.pas), line = 434
  2287 35F6 20 9A 30			jsr PRESSKEY
  2288
  2289 				; optimize FAIL ('WRITEMENU', milf.pas), line = 436
  2290 35F9 20 94 34			jsr WRITEMENU
  2291 35FC			@exit
  2292 					.ifdef @new
  2293 					lda <@VarData
  2294 					sta :ztmp
  2295 					lda >@VarData
  2296 					ldy #@VarDataSize-1
  2297 					jmp @FreeMem
  2298 					eif
  2299 35FC 60				rts						; ret
  2300 				.endl
  2301
  2302 35FD			.local	FORMAT						; PROCEDURE
  2303
  2304 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 446
  2305 35FD 20 8F 30			jsr CLEARKEYS
  2306
  2307 				; optimize FAIL ('CRT.DELAY', milf.pas), line = 448
  2308 3600 E8				inx
  2309 3601 A9 0A 95 9A			mva #$0A :STACKORIGIN,x
  2310 3605 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2311 3609 20 F6 2E			jsr CRT.DELAY
  2312
  2313 				; optimize FAIL (100, milf.pas), line = 451
  2314 					@printSTRING #CODEORIGIN+$023E
  2314 				 LDY> CODEORIGIN+$023E\ LDA< CODEORIGIN+$023E\ JSR @PRINTSTRING
  2314 360C A0 22		 LDY> CODEORIGIN+$023E
  2314 360E A9 3E		 LDA< CODEORIGIN+$023E
  2314 3610 20 89 2B		 JSR @PRINTSTRING
  2315 3613 20 7B 2B			@printEOL
  2316
  2317 				; optimize FAIL (100, milf.pas), line = 452
  2318 					@printSTRING #CODEORIGIN+$0250
  2318 				 LDY> CODEORIGIN+$0250\ LDA< CODEORIGIN+$0250\ JSR @PRINTSTRING
  2318 3616 A0 22		 LDY> CODEORIGIN+$0250
  2318 3618 A9 50		 LDA< CODEORIGIN+$0250
  2318 361A 20 89 2B		 JSR @PRINTSTRING
  2319 361D 20 7B 2B			@printEOL
  2320 3620			FORMATSEL
  2321
  2322 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 455
  2323 3620 20 5A 2F			jsr CRT.KEYPRESSED
  2324 3623 CA				dex
  2325 3624 B5 9B			lda :STACKORIGIN+1,x
  2326 3626 F0 0C			jeq l_0C12
  2327
  2328 				; optimize FAIL ('CRT.READKEY', milf.pas), line = 455
  2329 3628 20 E5 2E			jsr CRT.READKEY
  2330 362B B5 9A 8D 5B 4B		mva :STACKORIGIN,x KEY
  2331 3630 CA				dex
  2332 3631 4C 37 36			jmp l_0C20
  2333 3634			l_0C12
  2334 3634 4C 20 36			jmp FORMATSEL
  2335 3637			l_0C20
  2336
  2337 				; ------------------------------------------------------------
  2338
  2339 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  2340 				; as Pointer
  2341
  2342 3637 E8				inx
  2343 3638 AD 5B 4B 95 9A		mva KEY :STACKORIGIN,x
  2344
  2345 				; GenerateCaseProlog
  2346 363D CA				dex
  2347
  2348 				; GenerateCaseEqualityCheck
  2349 363E B5 9B			lda :STACKORIGIN+1,x
  2350 3640 C9 53			cmp #83
  2351 3642 F0 06			beq @+
  2352
  2353 				; GenerateCaseEqualityCheck
  2354 3644 B5 9B			lda :STACKORIGIN+1,x
  2355 3646 C9 73			cmp #115
  2356 3648 D0 15			jne l_0C2E
  2357 364A			@
  2358
  2359 				; optimize OK (milf.pas), line = 458
  2360
  2361 364A AD 6E 4B 8D 34 4B		mva SOURCE_DRIVE TMPBYTE2
  2362
  2363 				; optimize OK (milf.pas), line = 458
  2364
  2365 3650 AD 73 4B 8D 35 4B		mva BYTES_PER_SECTOR_SOURCE TMPWORD
  2366 3656 AD 74 4B 8D 36 4B		mva BYTES_PER_SECTOR_SOURCE+1 TMPWORD+1
  2367
  2368 				; GenerateCaseStatementEpilog
  2369 365C 4C 8F 36			jmp a_0003
  2370 365F			l_0C2E
  2371
  2372 				; GenerateCaseEqualityCheck
  2373 365F B5 9B			lda :STACKORIGIN+1,x
  2374 3661 C9 44			cmp #68
  2375 3663 F0 06			beq @+
  2376
  2377 				; GenerateCaseEqualityCheck
  2378 3665 B5 9B			lda :STACKORIGIN+1,x
  2379 3667 C9 64			cmp #100
  2380 3669 D0 15			jne l_0C44
  2381 366B			@
  2382
  2383 				; optimize OK (milf.pas), line = 459
  2384
  2385 366B AD 6F 4B 8D 34 4B		mva DEST_DRIVE TMPBYTE2
  2386
  2387 				; optimize OK (milf.pas), line = 459
  2388
  2389 3671 AD 75 4B 8D 35 4B		mva BYTES_PER_SECTOR_DEST TMPWORD
  2390 3677 AD 76 4B 8D 36 4B		mva BYTES_PER_SECTOR_DEST+1 TMPWORD+1
  2391
  2392 				; GenerateCaseStatementEpilog
  2393 367D 4C 8F 36			jmp a_0003
  2394 3680			l_0C44
  2395
  2396 				; GenerateCaseEqualityCheck
  2397 3680 B5 9B			lda :STACKORIGIN+1,x
  2398 3682 C9 1B			cmp #27
  2399 3684 D0 06			jne l_0C58
  2400 3686			@
  2401 3686 4C 07 38			jmp EXITFORMAT
  2402
  2403 				; GenerateCaseStatementEpilog
  2404 3689 4C 8F 36			jmp a_0003
  2405 368C			l_0C58
  2406 368C 4C 20 36			jmp FORMATSEL
  2407
  2408 				; GenerateCaseEpilog
  2409 368F			a_0003
  2410
  2411 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 464
  2412 368F 20 8F 30			jsr CLEARKEYS
  2413
  2414 				; optimize FAIL ('CRT.DELAY', milf.pas), line = 465
  2415 3692 E8				inx
  2416 3693 A9 02 95 9A			mva #$02 :STACKORIGIN,x
  2417 3697 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2418 369B 20 F6 2E			jsr CRT.DELAY
  2419
  2420 				; optimize OK (milf.pas), line = 467
  2421
  2422 369E A0 01			ldy #1
  2423 36A0 AD 34 4B			lda TMPBYTE2
  2424 36A3 CD 6E 4B			cmp SOURCE_DRIVE
  2425 36A6 F0 01			beq @+
  2426 36A8 88				dey
  2427 36A9			@
  2428 36A9 98				tya
  2429 36AA 2D 71 4B			and SOURCE_DRIVE_NOT_CONFIGURABLE
  2430 36AD 85 A3			sta :STACKORIGIN+9
  2431 36AF A0 01			ldy #1
  2432 36B1 AD 34 4B			lda TMPBYTE2
  2433 36B4 CD 6F 4B			cmp DEST_DRIVE
  2434 36B7 F0 01			beq @+
  2435 36B9 88				dey
  2436 36BA			@
  2437 36BA 98				tya
  2438 36BB 2D 72 4B			and DEST_DRIVE_NOT_CONFIGURABLE
  2439 36BE 05 A3			ora :STACKORIGIN+9
  2440 36C0 D0 03 4C BE 37		jeq l_0C90
  2441
  2442 				; optimize FAIL (100, milf.pas), line = 469
  2443 36C5 20 7B 2B			@printEOL
  2444
  2445 				; optimize FAIL (100, milf.pas), line = 470
  2446 					@printSTRING #CODEORIGIN+$0267
  2446 				 LDY> CODEORIGIN+$0267\ LDA< CODEORIGIN+$0267\ JSR @PRINTSTRING
  2446 36C8 A0 22		 LDY> CODEORIGIN+$0267
  2446 36CA A9 67		 LDA< CODEORIGIN+$0267
  2446 36CC 20 89 2B		 JSR @PRINTSTRING
  2447 36CF 20 7B 2B			@printEOL
  2448
  2449 				; optimize FAIL (100, milf.pas), line = 471
  2450 					@printSTRING #CODEORIGIN+$0287
  2450 				 LDY> CODEORIGIN+$0287\ LDA< CODEORIGIN+$0287\ JSR @PRINTSTRING
  2450 36D2 A0 22		 LDY> CODEORIGIN+$0287
  2450 36D4 A9 87		 LDA< CODEORIGIN+$0287
  2450 36D6 20 89 2B		 JSR @PRINTSTRING
  2451 					@printSTRING #CODEORIGIN+$028E
  2451 				 LDY> CODEORIGIN+$028E\ LDA< CODEORIGIN+$028E\ JSR @PRINTSTRING
  2451 36D9 A0 22		 LDY> CODEORIGIN+$028E
  2451 36DB A9 8E		 LDA< CODEORIGIN+$028E
  2451 36DD 20 89 2B		 JSR @PRINTSTRING
  2452 					@printSTRING #CODEORIGIN+$029B
  2452 				 LDY> CODEORIGIN+$029B\ LDA< CODEORIGIN+$029B\ JSR @PRINTSTRING
  2452 36E0 A0 22		 LDY> CODEORIGIN+$029B
  2452 36E2 A9 9B		 LDA< CODEORIGIN+$029B
  2452 36E4 20 89 2B		 JSR @PRINTSTRING
  2453 36E7 20 7B 2B			@printEOL
  2454
  2455 				; optimize FAIL (100, milf.pas), line = 472
  2456 					@printSTRING #CODEORIGIN+$02A7
  2456 				 LDY> CODEORIGIN+$02A7\ LDA< CODEORIGIN+$02A7\ JSR @PRINTSTRING
  2456 36EA A0 22		 LDY> CODEORIGIN+$02A7
  2456 36EC A9 A7		 LDA< CODEORIGIN+$02A7
  2456 36EE 20 89 2B		 JSR @PRINTSTRING
  2457 36F1 20 7B 2B			@printEOL
  2458 36F4			NOTPERCOM
  2459
  2460 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 475
  2461 36F4 20 5A 2F			jsr CRT.KEYPRESSED
  2462 36F7 CA				dex
  2463 36F8 B5 9B			lda :STACKORIGIN+1,x
  2464 36FA F0 0C			jeq l_0CAA
  2465
  2466 				; optimize FAIL ('CRT.READKEY', milf.pas), line = 475
  2467 36FC 20 E5 2E			jsr CRT.READKEY
  2468 36FF B5 9A 8D 5B 4B		mva :STACKORIGIN,x KEY
  2469 3704 CA				dex
  2470 3705 4C 0B 37			jmp l_0CB8
  2471 3708			l_0CAA
  2472 3708 4C F4 36			jmp NOTPERCOM
  2473 370B			l_0CB8
  2474
  2475 				; ------------------------------------------------------------
  2476
  2477 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  2478 				; as Pointer
  2479
  2480 370B E8				inx
  2481 370C AD 5B 4B 95 9A		mva KEY :STACKORIGIN,x
  2482
  2483 				; GenerateCaseProlog
  2484 3711 CA				dex
  2485
  2486 				; GenerateCaseEqualityCheck
  2487 3712 B5 9B			lda :STACKORIGIN+1,x
  2488 3714 C9 53			cmp #83
  2489 3716 F0 06			beq @+
  2490
  2491 				; GenerateCaseEqualityCheck
  2492 3718 B5 9B			lda :STACKORIGIN+1,x
  2493 371A C9 73			cmp #115
  2494 371C D0 41			jne l_0CC6
  2495 371E			@
  2496
  2497 				; optimize FAIL (100, milf.pas), line = 478
  2498 371E 20 7B 2B			@printEOL
  2499
  2500 				; optimize FAIL (100, milf.pas), line = 478
  2501 					@printSTRING #CODEORIGIN+$02C1
  2501 				 LDY> CODEORIGIN+$02C1\ LDA< CODEORIGIN+$02C1\ JSR @PRINTSTRING
  2501 3721 A0 22		 LDY> CODEORIGIN+$02C1
  2501 3723 A9 C1		 LDA< CODEORIGIN+$02C1
  2501 3725 20 89 2B		 JSR @PRINTSTRING
  2502 3728 20 7B 2B			@printEOL
  2503
  2504 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 478
  2505 372B E8				inx
  2506 372C AD 34 4B 95 9A		mva TMPBYTE2 :STACKORIGIN,x
  2507 3731 E8				inx
  2508 3732 A9 21 95 9A			mva #$21 :STACKORIGIN,x
  2509 3736 E8				inx
  2510 3737 A9 40 95 9A			mva #$40 :STACKORIGIN,x
  2511 373B E8				inx
  2512 373C 95 9A			sta :STACKORIGIN,x
  2513 373E E8				inx
  2514 373F A9 00 95 9A			mva #$00 :STACKORIGIN,x
  2515 3743 A9 60 95 AA			mva #$60 :STACKORIGIN+STACKWIDTH,x
  2516 3747 E8				inx
  2517 3748 A9 80 95 9A			mva #$80 :STACKORIGIN,x
  2518 374C A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2519 3750 E8				inx
  2520 3751 A9 01 95 9A			mva #$01 :STACKORIGIN,x
  2521 3755 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2522 3759 20 C6 2F			jsr EXEC_SIO
  2523
  2524 				; GenerateCaseStatementEpilog
  2525 375C 4C BB 37			jmp a_0004
  2526 375F			l_0CC6
  2527
  2528 				; GenerateCaseEqualityCheck
  2529 375F B5 9B			lda :STACKORIGIN+1,x
  2530 3761 C9 45			cmp #69
  2531 3763 F0 06			beq @+
  2532
  2533 				; GenerateCaseEqualityCheck
  2534 3765 B5 9B			lda :STACKORIGIN+1,x
  2535 3767 C9 65			cmp #101
  2536 3769 D0 41			jne l_0CDE
  2537 376B			@
  2538
  2539 				; optimize FAIL (100, milf.pas), line = 479
  2540 376B 20 7B 2B			@printEOL
  2541
  2542 				; optimize FAIL (100, milf.pas), line = 479
  2543 					@printSTRING #CODEORIGIN+$02C1
  2543 				 LDY> CODEORIGIN+$02C1\ LDA< CODEORIGIN+$02C1\ JSR @PRINTSTRING
  2543 376E A0 22		 LDY> CODEORIGIN+$02C1
  2543 3770 A9 C1		 LDA< CODEORIGIN+$02C1
  2543 3772 20 89 2B		 JSR @PRINTSTRING
  2544 3775 20 7B 2B			@printEOL
  2545
  2546 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 479
  2547 3778 E8				inx
  2548 3779 AD 34 4B 95 9A		mva TMPBYTE2 :STACKORIGIN,x
  2549 377E E8				inx
  2550 377F A9 22 95 9A			mva #$22 :STACKORIGIN,x
  2551 3783 E8				inx
  2552 3784 A9 40 95 9A			mva #$40 :STACKORIGIN,x
  2553 3788 E8				inx
  2554 3789 95 9A			sta :STACKORIGIN,x
  2555 378B E8				inx
  2556 378C A9 00 95 9A			mva #$00 :STACKORIGIN,x
  2557 3790 A9 60 95 AA			mva #$60 :STACKORIGIN+STACKWIDTH,x
  2558 3794 E8				inx
  2559 3795 A9 80 95 9A			mva #$80 :STACKORIGIN,x
  2560 3799 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2561 379D E8				inx
  2562 379E A9 01 95 9A			mva #$01 :STACKORIGIN,x
  2563 37A2 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2564 37A6 20 C6 2F			jsr EXEC_SIO
  2565
  2566 				; GenerateCaseStatementEpilog
  2567 37A9 4C BB 37			jmp a_0004
  2568 37AC			l_0CDE
  2569
  2570 				; GenerateCaseEqualityCheck
  2571 37AC B5 9B			lda :STACKORIGIN+1,x
  2572 37AE C9 1B			cmp #27
  2573 37B0 D0 06			jne l_0CF4
  2574 37B2			@
  2575 37B2 4C 07 38			jmp EXITFORMAT
  2576
  2577 				; GenerateCaseStatementEpilog
  2578 37B5 4C BB 37			jmp a_0004
  2579 37B8			l_0CF4
  2580 37B8 4C F4 36			jmp NOTPERCOM
  2581
  2582 				; GenerateCaseEpilog
  2583 37BB			a_0004
  2584 37BB 4C FE 37			jmp l_0D04
  2585 37BE			l_0C90
  2586
  2587 				; optimize FAIL (100, milf.pas), line = 485
  2588 37BE 20 7B 2B			@printEOL
  2589
  2590 				; optimize FAIL (100, milf.pas), line = 486
  2591 					@printSTRING #CODEORIGIN+$02C1
  2591 				 LDY> CODEORIGIN+$02C1\ LDA< CODEORIGIN+$02C1\ JSR @PRINTSTRING
  2591 37C1 A0 22		 LDY> CODEORIGIN+$02C1
  2591 37C3 A9 C1		 LDA< CODEORIGIN+$02C1
  2591 37C5 20 89 2B		 JSR @PRINTSTRING
  2592 37C8 20 7B 2B			@printEOL
  2593
  2594 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 487
  2595 37CB E8				inx
  2596 37CC AD 34 4B 95 9A		mva TMPBYTE2 :STACKORIGIN,x
  2597 37D1 E8				inx
  2598 37D2 A9 21 95 9A			mva #$21 :STACKORIGIN,x
  2599 37D6 E8				inx
  2600 37D7 A9 40 95 9A			mva #$40 :STACKORIGIN,x
  2601 37DB E8				inx
  2602 37DC 95 9A			sta :STACKORIGIN,x
  2603 37DE E8				inx
  2604 37DF A9 00 95 9A			mva #$00 :STACKORIGIN,x
  2605 37E3 A9 60 95 AA			mva #$60 :STACKORIGIN+STACKWIDTH,x
  2606 37E7 E8				inx
  2607 37E8 AD 35 4B 95 9A		mva TMPWORD :STACKORIGIN,x
  2608 37ED AD 36 4B 95 AA		mva TMPWORD+1 :STACKORIGIN+STACKWIDTH,x
  2609 37F2 E8				inx
  2610 37F3 A9 01 95 9A			mva #$01 :STACKORIGIN,x
  2611 37F7 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2612 37FB 20 C6 2F			jsr EXEC_SIO
  2613 37FE			l_0D04
  2614
  2615 				; optimize FAIL ('ERRORMESSAGE', milf.pas), line = 490
  2616 37FE E8				inx
  2617 37FF AD 30 4B 95 9A		mva SIORESULT :STACKORIGIN,x
  2618 3804 20 4A 34			jsr ERRORMESSAGE
  2619 3807			EXITFORMAT
  2620
  2621 				; optimize FAIL ('PRESSKEY', milf.pas), line = 494
  2622 3807 20 9A 30			jsr PRESSKEY
  2623
  2624 				; optimize FAIL ('WRITEMENU', milf.pas), line = 496
  2625 380A 20 94 34			jsr WRITEMENU
  2626 380D			@exit
  2627 					.ifdef @new
  2628 					lda <@VarData
  2629 					sta :ztmp
  2630 					lda >@VarData
  2631 					ldy #@VarDataSize-1
  2632 					jmp @FreeMem
  2633 					eif
  2634 380D 60				rts						; ret
  2635 				.endl
  2636
  2637 380E			.local	CHANGEDRIVES					; PROCEDURE
  2638
  2639 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 510
  2640 380E 20 8F 30			jsr CLEARKEYS
  2641
  2642 				; optimize FAIL ('CRT.DELAY', milf.pas), line = 511
  2643 3811 E8				inx
  2644 3812 A9 02 95 9A			mva #$02 :STACKORIGIN,x
  2645 3816 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2646 381A 20 F6 2E			jsr CRT.DELAY
  2647
  2648 				; optimize OK (milf.pas), line = 513
  2649
  2650 381D A9 00 8D A0 4B		mva #$00 TMPBYTE3
  2651
  2652 				; --- WhileProlog
  2653 3822 4C 68 39			jmp l_0D25
  2654 3825			l_0D26
  2655
  2656 				; optimize FAIL (100, milf.pas), line = 517
  2657 3825 20 7B 2B			@printEOL
  2658
  2659 				; optimize FAIL (100, milf.pas), line = 518
  2660 					@printSTRING #CODEORIGIN+$02E8
  2660 				 LDY> CODEORIGIN+$02E8\ LDA< CODEORIGIN+$02E8\ JSR @PRINTSTRING
  2660 3828 A0 22		 LDY> CODEORIGIN+$02E8
  2660 382A A9 E8		 LDA< CODEORIGIN+$02E8
  2660 382C 20 89 2B		 JSR @PRINTSTRING
  2661 382F E8				inx
  2662 3830 AD A0 4B			lda TMPBYTE3
  2663 3833 0A				asl @
  2664 3834 A8				tay
  2665 3835 B9 1B 27 95 9A		mva adr.TMPARR,y :STACKORIGIN,x
  2666 383A B9 1C 27 95 AA		mva adr.TMPARR+1,y :STACKORIGIN+STACKWIDTH,x
  2667 383F B5 9A			lda :STACKORIGIN,x
  2668 3841 B4 AA			ldy :STACKORIGIN+STACKWIDTH,x
  2669 3843 20 89 2B			jsr @printSTRING
  2670 3846 CA				dex
  2671 					@printSTRING #CODEORIGIN+$02F1
  2671 				 LDY> CODEORIGIN+$02F1\ LDA< CODEORIGIN+$02F1\ JSR @PRINTSTRING
  2671 3847 A0 22		 LDY> CODEORIGIN+$02F1
  2671 3849 A9 F1		 LDA< CODEORIGIN+$02F1
  2671 384B 20 89 2B		 JSR @PRINTSTRING
  2672 384E 20 7B 2B			@printEOL
  2673 3851			DRIVESELECTIONSOURCE
  2674
  2675 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 522
  2676 3851 20 5A 2F			jsr CRT.KEYPRESSED
  2677 3854 CA				dex
  2678 3855 B5 9B			lda :STACKORIGIN+1,x
  2679 3857 F0 0C			jeq l_0D3F
  2680
  2681 				; optimize FAIL ('CRT.READKEY', milf.pas), line = 522
  2682 3859 20 E5 2E			jsr CRT.READKEY
  2683 385C B5 9A 8D 5B 4B		mva :STACKORIGIN,x KEY
  2684 3861 CA				dex
  2685 3862 4C 68 38			jmp l_0D4D
  2686 3865			l_0D3F
  2687 3865 4C 51 38			jmp DRIVESELECTIONSOURCE
  2688 3868			l_0D4D
  2689
  2690 				; optimize OK (milf.pas), line = 524
  2691
  2692 3868 AD 5B 4B			lda KEY
  2693 386B C9 1B			cmp #$1B
  2694 386D D0 03			jne l_0D5F
  2695
  2696 386F 4C 72 39			jmp b_0D26					; break
  2697 3872			l_0D5F
  2698
  2699 				; optimize OK (milf.pas), line = 526
  2700
  2701 3872 AD 5B 4B			lda KEY
  2702 3875 38 E9 30			sub #$30
  2703 3878 8D 70 4B			sta SELECTED_DRIVE
  2704
  2705 				; optimize OK (milf.pas), line = 528
  2706
  2707 387B C9 01			cmp #$01
  2708 387D 90 04			jcc l_0D8Ax
  2709 387F C9 09			cmp #$09
  2710 3881 90 2F			jcc l_0D8A
  2711 3883			l_0D8Ax
  2712
  2713 				; optimize FAIL (100, milf.pas), line = 529
  2714 3883 20 7B 2B			@printEOL
  2715
  2716 				; optimize FAIL (100, milf.pas), line = 530
  2717 					@printSTRING #CODEORIGIN+$02E8
  2717 				 LDY> CODEORIGIN+$02E8\ LDA< CODEORIGIN+$02E8\ JSR @PRINTSTRING
  2717 3886 A0 22		 LDY> CODEORIGIN+$02E8
  2717 3888 A9 E8		 LDA< CODEORIGIN+$02E8
  2717 388A 20 89 2B		 JSR @PRINTSTRING
  2718 388D E8				inx
  2719 388E AD A0 4B			lda TMPBYTE3
  2720 3891 0A				asl @
  2721 3892 A8				tay
  2722 3893 B9 1B 27 95 9A		mva adr.TMPARR,y :STACKORIGIN,x
  2723 3898 B9 1C 27 95 AA		mva adr.TMPARR+1,y :STACKORIGIN+STACKWIDTH,x
  2724 389D B5 9A			lda :STACKORIGIN,x
  2725 389F B4 AA			ldy :STACKORIGIN+STACKWIDTH,x
  2726 38A1 20 89 2B			jsr @printSTRING
  2727 38A4 CA				dex
  2728 					@printSTRING #CODEORIGIN+$02F1
  2728 				 LDY> CODEORIGIN+$02F1\ LDA< CODEORIGIN+$02F1\ JSR @PRINTSTRING
  2728 38A5 A0 22		 LDY> CODEORIGIN+$02F1
  2728 38A7 A9 F1		 LDA< CODEORIGIN+$02F1
  2728 38A9 20 89 2B		 JSR @PRINTSTRING
  2729 38AC 20 7B 2B			@printEOL
  2730 38AF 4C 51 38			jmp DRIVESELECTIONSOURCE
  2731 38B2			l_0D8A
  2732
  2733 				; optimize FAIL ('READPERCOM', milf.pas), line = 534
  2734 38B2 E8				inx
  2735 38B3 AD 70 4B 95 9A		mva SELECTED_DRIVE :STACKORIGIN,x
  2736 38B8 E8				inx
  2737 38B9 A9 01 95 9A			mva #$01 :STACKORIGIN,x
  2738 38BD 20 62 31			jsr READPERCOM
  2739
  2740 				; optimize OK (milf.pas), line = 536
  2741
  2742 38C0 AD 30 4B			lda SIORESULT
  2743 38C3 10 2F			jpl l_0DB3
  2744
  2745 				; optimize FAIL (100, milf.pas), line = 537
  2746 38C5 20 7B 2B			@printEOL
  2747
  2748 				; optimize FAIL (100, milf.pas), line = 538
  2749 					@printSTRING #CODEORIGIN+$02E8
  2749 				 LDY> CODEORIGIN+$02E8\ LDA< CODEORIGIN+$02E8\ JSR @PRINTSTRING
  2749 38C8 A0 22		 LDY> CODEORIGIN+$02E8
  2749 38CA A9 E8		 LDA< CODEORIGIN+$02E8
  2749 38CC 20 89 2B		 JSR @PRINTSTRING
  2750 38CF E8				inx
  2751 38D0 AD A0 4B			lda TMPBYTE3
  2752 38D3 0A				asl @
  2753 38D4 A8				tay
  2754 38D5 B9 1B 27 95 9A		mva adr.TMPARR,y :STACKORIGIN,x
  2755 38DA B9 1C 27 95 AA		mva adr.TMPARR+1,y :STACKORIGIN+STACKWIDTH,x
  2756 38DF B5 9A			lda :STACKORIGIN,x
  2757 38E1 B4 AA			ldy :STACKORIGIN+STACKWIDTH,x
  2758 38E3 20 89 2B			jsr @printSTRING
  2759 38E6 CA				dex
  2760 					@printSTRING #CODEORIGIN+$02F1
  2760 				 LDY> CODEORIGIN+$02F1\ LDA< CODEORIGIN+$02F1\ JSR @PRINTSTRING
  2760 38E7 A0 22		 LDY> CODEORIGIN+$02F1
  2760 38E9 A9 F1		 LDA< CODEORIGIN+$02F1
  2760 38EB 20 89 2B		 JSR @PRINTSTRING
  2761 38EE 20 7B 2B			@printEOL
  2762 38F1 4C 51 38			jmp DRIVESELECTIONSOURCE
  2763 38F4			l_0DB3
  2764
  2765 				; optimize OK (milf.pas), line = 542
  2766
  2767 38F4 AD A0 4B			lda TMPBYTE3
  2768 38F7 D0 09			jne l_0DD7
  2769
  2770 				; optimize OK (milf.pas), line = 543
  2771
  2772 38F9 AD 70 4B 8D 6E 4B		mva SELECTED_DRIVE SOURCE_DRIVE
  2773 38FF 4C 56 39			jmp l_0DE7
  2774 3902			l_0DD7
  2775
  2776 				; optimize OK (milf.pas), line = 545
  2777
  2778 3902 AD 70 4B			lda SELECTED_DRIVE
  2779 3905 CD 6E 4B			cmp SOURCE_DRIVE
  2780 3908 D0 46			jne l_0DFB
  2781
  2782 				; optimize FAIL (100, milf.pas), line = 546
  2783 390A 20 7B 2B			@printEOL
  2784
  2785 				; optimize FAIL (100, milf.pas), line = 547
  2786 					@printSTRING #CODEORIGIN+$0306
  2786 				 LDY> CODEORIGIN+$0306\ LDA< CODEORIGIN+$0306\ JSR @PRINTSTRING
  2786 390D A0 23		 LDY> CODEORIGIN+$0306
  2786 390F A9 06		 LDA< CODEORIGIN+$0306
  2786 3911 20 89 2B		 JSR @PRINTSTRING
  2787 3914 20 7B 2B			@printEOL
  2788
  2789 				; optimize FAIL (100, milf.pas), line = 548
  2790 					@printSTRING #CODEORIGIN+$0329
  2790 				 LDY> CODEORIGIN+$0329\ LDA< CODEORIGIN+$0329\ JSR @PRINTSTRING
  2790 3917 A0 23		 LDY> CODEORIGIN+$0329
  2790 3919 A9 29		 LDA< CODEORIGIN+$0329
  2790 391B 20 89 2B		 JSR @PRINTSTRING
  2791 391E 20 7B 2B			@printEOL
  2792
  2793 				; optimize FAIL (100, milf.pas), line = 549
  2794 3921 20 7B 2B			@printEOL
  2795
  2796 				; optimize FAIL (100, milf.pas), line = 550
  2797 					@printSTRING #CODEORIGIN+$02E8
  2797 				 LDY> CODEORIGIN+$02E8\ LDA< CODEORIGIN+$02E8\ JSR @PRINTSTRING
  2797 3924 A0 22		 LDY> CODEORIGIN+$02E8
  2797 3926 A9 E8		 LDA< CODEORIGIN+$02E8
  2797 3928 20 89 2B		 JSR @PRINTSTRING
  2798 392B E8				inx
  2799 392C AD A0 4B			lda TMPBYTE3
  2800 392F 0A				asl @
  2801 3930 A8				tay
  2802 3931 B9 1B 27 95 9A		mva adr.TMPARR,y :STACKORIGIN,x
  2803 3936 B9 1C 27 95 AA		mva adr.TMPARR+1,y :STACKORIGIN+STACKWIDTH,x
  2804 393B B5 9A			lda :STACKORIGIN,x
  2805 393D B4 AA			ldy :STACKORIGIN+STACKWIDTH,x
  2806 393F 20 89 2B			jsr @printSTRING
  2807 3942 CA				dex
  2808 					@printSTRING #CODEORIGIN+$02F1
  2808 				 LDY> CODEORIGIN+$02F1\ LDA< CODEORIGIN+$02F1\ JSR @PRINTSTRING
  2808 3943 A0 22		 LDY> CODEORIGIN+$02F1
  2808 3945 A9 F1		 LDA< CODEORIGIN+$02F1
  2808 3947 20 89 2B		 JSR @PRINTSTRING
  2809 394A 20 7B 2B			@printEOL
  2810 394D 4C 51 38			jmp DRIVESELECTIONSOURCE
  2811 3950			l_0DFB
  2812
  2813 				; optimize OK (milf.pas), line = 553
  2814
  2815 3950 AD 70 4B 8D 6F 4B		mva SELECTED_DRIVE DEST_DRIVE
  2816 3956			l_0DE7
  2817
  2818 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 556
  2819 3956 20 8F 30			jsr CLEARKEYS
  2820
  2821 				; optimize FAIL ('CRT.DELAY', milf.pas), line = 557
  2822 3959 E8				inx
  2823 395A A9 32 95 9A			mva #$32 :STACKORIGIN,x
  2824 395E A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2825 3962 20 F6 2E			jsr CRT.DELAY
  2826
  2827 				; optimize FAIL (0, milf.pas), line = 559
  2828 3965 EE A0 4B			inc TMPBYTE3
  2829 3968			l_0D25
  2830
  2831 				; optimize OK (milf.pas), line = 515
  2832
  2833 3968 AD A0 4B			lda TMPBYTE3
  2834 396B C9 02			cmp #$02
  2835 396D B0 03 4C 25 38		jcc l_0D26
  2836 3972			b_0D26
  2837
  2838 				; optimize FAIL ('WRITEMENU', milf.pas), line = 563
  2839 3972 20 94 34			jsr WRITEMENU
  2840
  2841 				; ------------------------------------------------------------
  2842
  2843 = 271B			adr.TMPARR	= CODEORIGIN+$071B
  2844 3975			.var TMPARR	= adr.TMPARR .word
  2845 = 4BA0			TMPBYTE3	= DATAORIGIN+$04A4
  2846
  2847 = 4BA0			@VarData	= TMPBYTE3
  2848 = 0001			@VarDataSize	= 1
  2849
  2850 3975			@exit
  2851 					.ifdef @new
  2852 					lda <@VarData
  2853 					sta :ztmp
  2854 					lda >@VarData
  2855 					ldy #@VarDataSize-1
  2856 					jmp @FreeMem
  2857 					eif
  2858 3975 60				rts						; ret
  2859 = 3976 1B 27		TMPARR
  2859 				.endl
  2860
  2861 3978			.local	WRITEPERCOM					; PROCEDURE
  2862
  2863 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 573
  2864 3978 20 8F 30			jsr CLEARKEYS
  2865
  2866 				; optimize FAIL ('CRT.DELAY', milf.pas), line = 575
  2867 397B E8				inx
  2868 397C A9 0A 95 9A			mva #$0A :STACKORIGIN,x
  2869 3980 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  2870 3984 20 F6 2E			jsr CRT.DELAY
  2871
  2872 				; optimize FAIL (100, milf.pas), line = 577
  2873 					@printSTRING #CODEORIGIN+$023E
  2873 				 LDY> CODEORIGIN+$023E\ LDA< CODEORIGIN+$023E\ JSR @PRINTSTRING
  2873 3987 A0 22		 LDY> CODEORIGIN+$023E
  2873 3989 A9 3E		 LDA< CODEORIGIN+$023E
  2873 398B 20 89 2B		 JSR @PRINTSTRING
  2874 398E 20 7B 2B			@printEOL
  2875
  2876 				; optimize FAIL (100, milf.pas), line = 578
  2877 					@printSTRING #CODEORIGIN+$0250
  2877 				 LDY> CODEORIGIN+$0250\ LDA< CODEORIGIN+$0250\ JSR @PRINTSTRING
  2877 3991 A0 22		 LDY> CODEORIGIN+$0250
  2877 3993 A9 50		 LDA< CODEORIGIN+$0250
  2877 3995 20 89 2B		 JSR @PRINTSTRING
  2878 3998 20 7B 2B			@printEOL
  2879 399B			WRITEPERCOMSELDRIVE
  2880
  2881 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 582
  2882 399B 20 5A 2F			jsr CRT.KEYPRESSED
  2883 399E CA				dex
  2884 399F B5 9B			lda :STACKORIGIN+1,x
  2885 39A1 F0 0C			jeq l_0E44
  2886
  2887 				; optimize FAIL ('CRT.READKEY', milf.pas), line = 582
  2888 39A3 20 E5 2E			jsr CRT.READKEY
  2889 39A6 B5 9A 8D 5B 4B		mva :STACKORIGIN,x KEY
  2890 39AB CA				dex
  2891 39AC 4C B2 39			jmp l_0E52
  2892 39AF			l_0E44
  2893 39AF 4C 9B 39			jmp WRITEPERCOMSELDRIVE
  2894 39B2			l_0E52
  2895
  2896 				; ------------------------------------------------------------
  2897
  2898 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  2899 				; as Pointer
  2900
  2901 39B2 E8				inx
  2902 39B3 AD 5B 4B 95 9A		mva KEY :STACKORIGIN,x
  2903
  2904 				; GenerateCaseProlog
  2905 39B8 CA				dex
  2906
  2907 				; GenerateCaseEqualityCheck
  2908 39B9 B5 9B			lda :STACKORIGIN+1,x
  2909 39BB C9 53			cmp #83
  2910 39BD F0 06			beq @+
  2911
  2912 				; GenerateCaseEqualityCheck
  2913 39BF B5 9B			lda :STACKORIGIN+1,x
  2914 39C1 C9 73			cmp #115
  2915 39C3 D0 2D			jne l_0E60
  2916 39C5			@
  2917
  2918 				; optimize OK (milf.pas), line = 586
  2919
  2920 39C5 AD 6E 4B 8D 34 4B		mva SOURCE_DRIVE TMPBYTE2
  2921
  2922 				; optimize OK (milf.pas), line = 587
  2923
  2924 39CB AD 71 4B			lda SOURCE_DRIVE_NOT_CONFIGURABLE
  2925 39CE F0 1F			jeq l_0E72
  2926
  2927 				; optimize FAIL (100, milf.pas), line = 588
  2928 					@printSTRING #CODEORIGIN+$0348
  2928 				 LDY> CODEORIGIN+$0348\ LDA< CODEORIGIN+$0348\ JSR @PRINTSTRING
  2928 39D0 A0 23		 LDY> CODEORIGIN+$0348
  2928 39D2 A9 48		 LDA< CODEORIGIN+$0348
  2928 39D4 20 89 2B		 JSR @PRINTSTRING
  2929 39D7 20 7B 2B			@printEOL
  2930
  2931 				; optimize FAIL (100, milf.pas), line = 589
  2932 					@printSTRING #CODEORIGIN+$0369
  2932 				 LDY> CODEORIGIN+$0369\ LDA< CODEORIGIN+$0369\ JSR @PRINTSTRING
  2932 39DA A0 23		 LDY> CODEORIGIN+$0369
  2932 39DC A9 69		 LDA< CODEORIGIN+$0369
  2932 39DE 20 89 2B		 JSR @PRINTSTRING
  2933 39E1 20 7B 2B			@printEOL
  2934
  2935 				; --- RepeatUntilProlog
  2936 39E4			l_0E7A
  2937
  2938 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 590
  2939 39E4 20 5A 2F			jsr CRT.KEYPRESSED
  2940 39E7 CA				dex
  2941 39E8 B5 9B			lda :STACKORIGIN+1,x
  2942 39EA F0 F8			jeq l_0E7A
  2943 39EC 4C B7 3C			jmp WRITEPERCOMABORT
  2944 39EF			l_0E72
  2945
  2946 				; GenerateCaseStatementEpilog
  2947 39EF 4C 3A 3A			jmp a_0005
  2948 39F2			l_0E60
  2949
  2950 				; GenerateCaseEqualityCheck
  2951 39F2 B5 9B			lda :STACKORIGIN+1,x
  2952 39F4 C9 44			cmp #68
  2953 39F6 F0 06			beq @+
  2954
  2955 				; GenerateCaseEqualityCheck
  2956 39F8 B5 9B			lda :STACKORIGIN+1,x
  2957 39FA C9 64			cmp #100
  2958 39FC D0 2D			jne l_0E8C
  2959 39FE			@
  2960
  2961 				; optimize OK (milf.pas), line = 595
  2962
  2963 39FE AD 6F 4B 8D 34 4B		mva DEST_DRIVE TMPBYTE2
  2964
  2965 				; optimize OK (milf.pas), line = 596
  2966
  2967 3A04 AD 71 4B			lda SOURCE_DRIVE_NOT_CONFIGURABLE
  2968 3A07 F0 1F			jeq l_0E9E
  2969
  2970 				; optimize FAIL (100, milf.pas), line = 597
  2971 					@printSTRING #CODEORIGIN+$0348
  2971 				 LDY> CODEORIGIN+$0348\ LDA< CODEORIGIN+$0348\ JSR @PRINTSTRING
  2971 3A09 A0 23		 LDY> CODEORIGIN+$0348
  2971 3A0B A9 48		 LDA< CODEORIGIN+$0348
  2971 3A0D 20 89 2B		 JSR @PRINTSTRING
  2972 3A10 20 7B 2B			@printEOL
  2973
  2974 				; optimize FAIL (100, milf.pas), line = 598
  2975 					@printSTRING #CODEORIGIN+$0369
  2975 				 LDY> CODEORIGIN+$0369\ LDA< CODEORIGIN+$0369\ JSR @PRINTSTRING
  2975 3A13 A0 23		 LDY> CODEORIGIN+$0369
  2975 3A15 A9 69		 LDA< CODEORIGIN+$0369
  2975 3A17 20 89 2B		 JSR @PRINTSTRING
  2976 3A1A 20 7B 2B			@printEOL
  2977
  2978 				; --- RepeatUntilProlog
  2979 3A1D			l_0EA6
  2980
  2981 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 599
  2982 3A1D 20 5A 2F			jsr CRT.KEYPRESSED
  2983 3A20 CA				dex
  2984 3A21 B5 9B			lda :STACKORIGIN+1,x
  2985 3A23 F0 F8			jeq l_0EA6
  2986 3A25 4C B7 3C			jmp WRITEPERCOMABORT
  2987 3A28			l_0E9E
  2988
  2989 				; GenerateCaseStatementEpilog
  2990 3A28 4C 3A 3A			jmp a_0005
  2991 3A2B			l_0E8C
  2992
  2993 				; GenerateCaseEqualityCheck
  2994 3A2B B5 9B			lda :STACKORIGIN+1,x
  2995 3A2D C9 1B			cmp #27
  2996 3A2F D0 06			jne l_0EB6
  2997 3A31			@
  2998 3A31 4C B7 3C			jmp WRITEPERCOMABORT
  2999
  3000 				; GenerateCaseStatementEpilog
  3001 3A34 4C 3A 3A			jmp a_0005
  3002 3A37			l_0EB6
  3003 3A37 4C 9B 39			jmp WRITEPERCOMSELDRIVE
  3004
  3005 				; GenerateCaseEpilog
  3006 3A3A			a_0005
  3007
  3008 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 607
  3009 3A3A 20 8F 30			jsr CLEARKEYS
  3010
  3011 				; optimize FAIL ('CRT.DELAY', milf.pas), line = 608
  3012 3A3D E8				inx
  3013 3A3E A9 0A 95 9A			mva #$0A :STACKORIGIN,x
  3014 3A42 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3015 3A46 20 F6 2E			jsr CRT.DELAY
  3016
  3017 				; optimize FAIL (100, milf.pas), line = 610
  3018 3A49 20 7B 2B			@printEOL
  3019
  3020 				; optimize FAIL (100, milf.pas), line = 611
  3021 					@printSTRING #CODEORIGIN+$0379
  3021 				 LDY> CODEORIGIN+$0379\ LDA< CODEORIGIN+$0379\ JSR @PRINTSTRING
  3021 3A4C A0 23		 LDY> CODEORIGIN+$0379
  3021 3A4E A9 79		 LDA< CODEORIGIN+$0379
  3021 3A50 20 89 2B		 JSR @PRINTSTRING
  3022 3A53 20 7B 2B			@printEOL
  3023
  3024 				; optimize FAIL (100, milf.pas), line = 612
  3025 					@printSTRING #CODEORIGIN+$0396
  3025 				 LDY> CODEORIGIN+$0396\ LDA< CODEORIGIN+$0396\ JSR @PRINTSTRING
  3025 3A56 A0 23		 LDY> CODEORIGIN+$0396
  3025 3A58 A9 96		 LDA< CODEORIGIN+$0396
  3025 3A5A 20 89 2B		 JSR @PRINTSTRING
  3026 3A5D 20 7B 2B			@printEOL
  3027
  3028 				; optimize FAIL (100, milf.pas), line = 613
  3029 					@printSTRING #CODEORIGIN+$03AA
  3029 				 LDY> CODEORIGIN+$03AA\ LDA< CODEORIGIN+$03AA\ JSR @PRINTSTRING
  3029 3A60 A0 23		 LDY> CODEORIGIN+$03AA
  3029 3A62 A9 AA		 LDA< CODEORIGIN+$03AA
  3029 3A64 20 89 2B		 JSR @PRINTSTRING
  3030 3A67 20 7B 2B			@printEOL
  3031
  3032 				; optimize FAIL (100, milf.pas), line = 614
  3033 					@printSTRING #CODEORIGIN+$03BE
  3033 				 LDY> CODEORIGIN+$03BE\ LDA< CODEORIGIN+$03BE\ JSR @PRINTSTRING
  3033 3A6A A0 23		 LDY> CODEORIGIN+$03BE
  3033 3A6C A9 BE		 LDA< CODEORIGIN+$03BE
  3033 3A6E 20 89 2B		 JSR @PRINTSTRING
  3034 3A71 20 7B 2B			@printEOL
  3035
  3036 				; optimize FAIL (100, milf.pas), line = 615
  3037 					@printSTRING #CODEORIGIN+$03D2
  3037 				 LDY> CODEORIGIN+$03D2\ LDA< CODEORIGIN+$03D2\ JSR @PRINTSTRING
  3037 3A74 A0 23		 LDY> CODEORIGIN+$03D2
  3037 3A76 A9 D2		 LDA< CODEORIGIN+$03D2
  3037 3A78 20 89 2B		 JSR @PRINTSTRING
  3038 3A7B 20 7B 2B			@printEOL
  3039
  3040 				; optimize FAIL (100, milf.pas), line = 616
  3041 					@printSTRING #CODEORIGIN+$03E6
  3041 				 LDY> CODEORIGIN+$03E6\ LDA< CODEORIGIN+$03E6\ JSR @PRINTSTRING
  3041 3A7E A0 23		 LDY> CODEORIGIN+$03E6
  3041 3A80 A9 E6		 LDA< CODEORIGIN+$03E6
  3041 3A82 20 89 2B		 JSR @PRINTSTRING
  3042 3A85 20 7B 2B			@printEOL
  3043 3A88			PERCOMSEL
  3044
  3045 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 620
  3046 3A88 20 5A 2F			jsr CRT.KEYPRESSED
  3047 3A8B CA				dex
  3048 3A8C B5 9B			lda :STACKORIGIN+1,x
  3049 3A8E F0 09			jeq l_0EDC
  3050
  3051 				; optimize FAIL ('CRT.READKEY', milf.pas), line = 620
  3052 3A90 20 E5 2E			jsr CRT.READKEY
  3053 3A93 B5 9A 8D 5B 4B		mva :STACKORIGIN,x KEY
  3054 3A98 CA				dex
  3055 3A99			l_0EDC
  3056
  3057 				; ------------------------------------------------------------
  3058
  3059 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  3060 				; as Pointer
  3061
  3062 3A99 E8				inx
  3063 3A9A AD 5B 4B 95 9A		mva KEY :STACKORIGIN,x
  3064
  3065 				; GenerateCaseProlog
  3066 3A9F CA				dex
  3067
  3068 				; GenerateCaseEqualityCheck
  3069 3AA0 B5 9B			lda :STACKORIGIN+1,x
  3070 3AA2 C9 31			cmp #49
  3071 3AA4 D0 44			jne l_0EEF
  3072 3AA6			@
  3073 				; --- For
  3074
  3075 				; optimize OK (milf.pas), line = 624
  3076
  3077 3AA6 A9 00 8D 33 4B		mva #$00 TMPBYTE
  3078
  3079 				; optimize OK (milf.pas), line = 624
  3080
  3081 3AAB			l_0EF8
  3082 				; --- ForToDoCondition
  3083
  3084 				; optimize OK (milf.pas), line = 624
  3085
  3086 3AAB AD 33 4B			lda TMPBYTE
  3087 3AAE C9 0C			cmp #$0C
  3088 3AB0 B0 21			jcs l_0F06
  3089
  3090 				; optimize OK (milf.pas), line = 625
  3091
  3092 3AB2 8D 35 4B			sta TMPWORD
  3093 3AB5 A9 06			lda #$06
  3094 3AB7 8D 36 4B			sta TMPWORD+1
  3095
  3096 				; optimize OK (milf.pas), line = 626
  3097
  3098 3ABA AC 33 4B			ldy TMPBYTE
  3099 3ABD B9 DF 26			lda adr.SSSD,y
  3100 3AC0 85 A4			sta :STACKORIGIN+10
  3101 3AC2 AD 36 4B			lda TMPWORD+1
  3102 3AC5 85 91			sta :bp+1
  3103 3AC7 AC 35 4B			ldy TMPWORD
  3104 3ACA A5 A4			lda :STACKORIGIN+10
  3105 3ACC 91 90			sta (:bp),y
  3106
  3107 				; --- ForToDoEpilog
  3108 3ACE EE 33 4B			inc TMPBYTE					; inc ptr byte [CounterAddress]
  3109 3AD1 D0 D8			jne l_0EF8
  3110 3AD3			l_0F06
  3111
  3112 				; optimize OK (milf.pas), line = 628
  3113
  3114 3AD3 A9 80 8D 6C 4B		mva #$80 REQUESTEDSECTORSIZE
  3115 3AD8 A9 00 8D 6D 4B		mva #$00 REQUESTEDSECTORSIZE+1
  3116
  3117 				; optimize OK (milf.pas), line = 629
  3118
  3119 3ADD A9 D0 8D 6A 4B		mva #$D0 REQUESTEDSECTORS
  3120 3AE2 A9 02 8D 6B 4B		mva #$02 REQUESTEDSECTORS+1
  3121
  3122 				; GenerateCaseStatementEpilog
  3123 3AE7 4C 21 3C			jmp a_0006
  3124 3AEA			l_0EEF
  3125
  3126 				; GenerateCaseEqualityCheck
  3127 3AEA B5 9B			lda :STACKORIGIN+1,x
  3128 3AEC C9 32			cmp #50
  3129 3AEE D0 44			jne l_0F2F
  3130 3AF0			@
  3131 				; --- For
  3132
  3133 				; optimize OK (milf.pas), line = 632
  3134
  3135 3AF0 A9 00 8D 33 4B		mva #$00 TMPBYTE
  3136
  3137 				; optimize OK (milf.pas), line = 632
  3138
  3139 3AF5			l_0F38
  3140 				; --- ForToDoCondition
  3141
  3142 				; optimize OK (milf.pas), line = 632
  3143
  3144 3AF5 AD 33 4B			lda TMPBYTE
  3145 3AF8 C9 0C			cmp #$0C
  3146 3AFA B0 21			jcs l_0F46
  3147
  3148 				; optimize OK (milf.pas), line = 633
  3149
  3150 3AFC 8D 35 4B			sta TMPWORD
  3151 3AFF A9 06			lda #$06
  3152 3B01 8D 36 4B			sta TMPWORD+1
  3153
  3154 				; optimize OK (milf.pas), line = 634
  3155
  3156 3B04 AC 33 4B			ldy TMPBYTE
  3157 3B07 B9 EB 26			lda adr.SSED,y
  3158 3B0A 85 A4			sta :STACKORIGIN+10
  3159 3B0C AD 36 4B			lda TMPWORD+1
  3160 3B0F 85 91			sta :bp+1
  3161 3B11 AC 35 4B			ldy TMPWORD
  3162 3B14 A5 A4			lda :STACKORIGIN+10
  3163 3B16 91 90			sta (:bp),y
  3164
  3165 				; --- ForToDoEpilog
  3166 3B18 EE 33 4B			inc TMPBYTE					; inc ptr byte [CounterAddress]
  3167 3B1B D0 D8			jne l_0F38
  3168 3B1D			l_0F46
  3169
  3170 				; optimize OK (milf.pas), line = 636
  3171
  3172 3B1D A9 80 8D 6C 4B		mva #$80 REQUESTEDSECTORSIZE
  3173 3B22 A9 00 8D 6D 4B		mva #$00 REQUESTEDSECTORSIZE+1
  3174
  3175 				; optimize OK (milf.pas), line = 637
  3176
  3177 3B27 A9 10 8D 6A 4B		mva #$10 REQUESTEDSECTORS
  3178 3B2C A9 04 8D 6B 4B		mva #$04 REQUESTEDSECTORS+1
  3179
  3180 				; GenerateCaseStatementEpilog
  3181 3B31 4C 21 3C			jmp a_0006
  3182 3B34			l_0F2F
  3183
  3184 				; GenerateCaseEqualityCheck
  3185 3B34 B5 9B			lda :STACKORIGIN+1,x
  3186 3B36 C9 33			cmp #51
  3187 3B38 D0 44			jne l_0F6F
  3188 3B3A			@
  3189 				; --- For
  3190
  3191 				; optimize OK (milf.pas), line = 640
  3192
  3193 3B3A A9 00 8D 33 4B		mva #$00 TMPBYTE
  3194
  3195 				; optimize OK (milf.pas), line = 640
  3196
  3197 3B3F			l_0F78
  3198 				; --- ForToDoCondition
  3199
  3200 				; optimize OK (milf.pas), line = 640
  3201
  3202 3B3F AD 33 4B			lda TMPBYTE
  3203 3B42 C9 0C			cmp #$0C
  3204 3B44 B0 21			jcs l_0F86
  3205
  3206 				; optimize OK (milf.pas), line = 641
  3207
  3208 3B46 8D 35 4B			sta TMPWORD
  3209 3B49 A9 06			lda #$06
  3210 3B4B 8D 36 4B			sta TMPWORD+1
  3211
  3212 				; optimize OK (milf.pas), line = 642
  3213
  3214 3B4E AC 33 4B			ldy TMPBYTE
  3215 3B51 B9 F7 26			lda adr.SSDD,y
  3216 3B54 85 A4			sta :STACKORIGIN+10
  3217 3B56 AD 36 4B			lda TMPWORD+1
  3218 3B59 85 91			sta :bp+1
  3219 3B5B AC 35 4B			ldy TMPWORD
  3220 3B5E A5 A4			lda :STACKORIGIN+10
  3221 3B60 91 90			sta (:bp),y
  3222
  3223 				; --- ForToDoEpilog
  3224 3B62 EE 33 4B			inc TMPBYTE					; inc ptr byte [CounterAddress]
  3225 3B65 D0 D8			jne l_0F78
  3226 3B67			l_0F86
  3227
  3228 				; optimize OK (milf.pas), line = 644
  3229
  3230 3B67 A9 00 8D 6C 4B		mva #$00 REQUESTEDSECTORSIZE
  3231 3B6C A9 01 8D 6D 4B		mva #$01 REQUESTEDSECTORSIZE+1
  3232
  3233 				; optimize OK (milf.pas), line = 645
  3234
  3235 3B71 A9 D0 8D 6A 4B		mva #$D0 REQUESTEDSECTORS
  3236 3B76 A9 02 8D 6B 4B		mva #$02 REQUESTEDSECTORS+1
  3237
  3238 				; GenerateCaseStatementEpilog
  3239 3B7B 4C 21 3C			jmp a_0006
  3240 3B7E			l_0F6F
  3241
  3242 				; GenerateCaseEqualityCheck
  3243 3B7E B5 9B			lda :STACKORIGIN+1,x
  3244 3B80 C9 34			cmp #52
  3245 3B82 D0 44			jne l_0FAF
  3246 3B84			@
  3247 				; --- For
  3248
  3249 				; optimize OK (milf.pas), line = 648
  3250
  3251 3B84 A9 00 8D 33 4B		mva #$00 TMPBYTE
  3252
  3253 				; optimize OK (milf.pas), line = 648
  3254
  3255 3B89			l_0FB8
  3256 				; --- ForToDoCondition
  3257
  3258 				; optimize OK (milf.pas), line = 648
  3259
  3260 3B89 AD 33 4B			lda TMPBYTE
  3261 3B8C C9 0C			cmp #$0C
  3262 3B8E B0 21			jcs l_0FC6
  3263
  3264 				; optimize OK (milf.pas), line = 649
  3265
  3266 3B90 8D 35 4B			sta TMPWORD
  3267 3B93 A9 06			lda #$06
  3268 3B95 8D 36 4B			sta TMPWORD+1
  3269
  3270 				; optimize OK (milf.pas), line = 650
  3271
  3272 3B98 AC 33 4B			ldy TMPBYTE
  3273 3B9B B9 03 27			lda adr.DSDD,y
  3274 3B9E 85 A4			sta :STACKORIGIN+10
  3275 3BA0 AD 36 4B			lda TMPWORD+1
  3276 3BA3 85 91			sta :bp+1
  3277 3BA5 AC 35 4B			ldy TMPWORD
  3278 3BA8 A5 A4			lda :STACKORIGIN+10
  3279 3BAA 91 90			sta (:bp),y
  3280
  3281 				; --- ForToDoEpilog
  3282 3BAC EE 33 4B			inc TMPBYTE					; inc ptr byte [CounterAddress]
  3283 3BAF D0 D8			jne l_0FB8
  3284 3BB1			l_0FC6
  3285
  3286 				; optimize OK (milf.pas), line = 652
  3287
  3288 3BB1 A9 00 8D 6C 4B		mva #$00 REQUESTEDSECTORSIZE
  3289 3BB6 A9 01 8D 6D 4B		mva #$01 REQUESTEDSECTORSIZE+1
  3290
  3291 				; optimize OK (milf.pas), line = 653
  3292
  3293 3BBB A9 A0 8D 6A 4B		mva #$A0 REQUESTEDSECTORS
  3294 3BC0 A9 05 8D 6B 4B		mva #$05 REQUESTEDSECTORS+1
  3295
  3296 				; GenerateCaseStatementEpilog
  3297 3BC5 4C 21 3C			jmp a_0006
  3298 3BC8			l_0FAF
  3299
  3300 				; GenerateCaseEqualityCheck
  3301 3BC8 B5 9B			lda :STACKORIGIN+1,x
  3302 3BCA C9 35			cmp #53
  3303 3BCC D0 44			jne l_0FEF
  3304 3BCE			@
  3305 				; --- For
  3306
  3307 				; optimize OK (milf.pas), line = 656
  3308
  3309 3BCE A9 00 8D 33 4B		mva #$00 TMPBYTE
  3310
  3311 				; optimize OK (milf.pas), line = 656
  3312
  3313 3BD3			l_0FF8
  3314 				; --- ForToDoCondition
  3315
  3316 				; optimize OK (milf.pas), line = 656
  3317
  3318 3BD3 AD 33 4B			lda TMPBYTE
  3319 3BD6 C9 0C			cmp #$0C
  3320 3BD8 B0 21			jcs l_1006
  3321
  3322 				; optimize OK (milf.pas), line = 657
  3323
  3324 3BDA 8D 35 4B			sta TMPWORD
  3325 3BDD A9 06			lda #$06
  3326 3BDF 8D 36 4B			sta TMPWORD+1
  3327
  3328 				; optimize OK (milf.pas), line = 658
  3329
  3330 3BE2 AC 33 4B			ldy TMPBYTE
  3331 3BE5 B9 0F 27			lda adr.DSQD,y
  3332 3BE8 85 A4			sta :STACKORIGIN+10
  3333 3BEA AD 36 4B			lda TMPWORD+1
  3334 3BED 85 91			sta :bp+1
  3335 3BEF AC 35 4B			ldy TMPWORD
  3336 3BF2 A5 A4			lda :STACKORIGIN+10
  3337 3BF4 91 90			sta (:bp),y
  3338
  3339 				; --- ForToDoEpilog
  3340 3BF6 EE 33 4B			inc TMPBYTE					; inc ptr byte [CounterAddress]
  3341 3BF9 D0 D8			jne l_0FF8
  3342 3BFB			l_1006
  3343
  3344 				; optimize OK (milf.pas), line = 660
  3345
  3346 3BFB A9 00 8D 6C 4B		mva #$00 REQUESTEDSECTORSIZE
  3347 3C00 A9 01 8D 6D 4B		mva #$01 REQUESTEDSECTORSIZE+1
  3348
  3349 				; optimize OK (milf.pas), line = 661
  3350
  3351 3C05 A9 40 8D 6A 4B		mva #$40 REQUESTEDSECTORS
  3352 3C0A A9 0B 8D 6B 4B		mva #$0B REQUESTEDSECTORS+1
  3353
  3354 				; GenerateCaseStatementEpilog
  3355 3C0F 4C 21 3C			jmp a_0006
  3356 3C12			l_0FEF
  3357
  3358 				; GenerateCaseEqualityCheck
  3359 3C12 B5 9B			lda :STACKORIGIN+1,x
  3360 3C14 C9 1B			cmp #27
  3361 3C16 D0 06			jne l_102F
  3362 3C18			@
  3363 3C18 4C B7 3C			jmp WRITEPERCOMABORT
  3364
  3365 				; GenerateCaseStatementEpilog
  3366 3C1B 4C 21 3C			jmp a_0006
  3367 3C1E			l_102F
  3368 3C1E 4C 88 3A			jmp PERCOMSEL
  3369
  3370 				; GenerateCaseEpilog
  3371 3C21			a_0006
  3372
  3373 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 668
  3374 3C21 E8				inx
  3375 3C22 AD 34 4B 95 9A		mva TMPBYTE2 :STACKORIGIN,x
  3376 3C27 E8				inx
  3377 3C28 A9 4F 95 9A			mva #$4F :STACKORIGIN,x
  3378 3C2C E8				inx
  3379 3C2D A9 80 95 9A			mva #$80 :STACKORIGIN,x
  3380 3C31 E8				inx
  3381 3C32 A9 07 95 9A			mva #$07 :STACKORIGIN,x
  3382 3C36 E8				inx
  3383 3C37 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  3384 3C3B A9 06 95 AA			mva #$06 :STACKORIGIN+STACKWIDTH,x
  3385 3C3F E8				inx
  3386 3C40 A9 0C 95 9A			mva #$0C :STACKORIGIN,x
  3387 3C44 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3388 3C48 E8				inx
  3389 3C49 A9 00 95 9A			mva #$00 :STACKORIGIN,x
  3390 3C4D 95 AA			sta :STACKORIGIN+STACKWIDTH,x
  3391 3C4F 20 C6 2F			jsr EXEC_SIO
  3392
  3393 				; optimize FAIL (100, milf.pas), line = 670
  3394 3C52 20 7B 2B			@printEOL
  3395
  3396 				; optimize FAIL ('ERRORMESSAGE', milf.pas), line = 671
  3397 3C55 E8				inx
  3398 3C56 AD 30 4B 95 9A		mva SIORESULT :STACKORIGIN,x
  3399 3C5B 20 4A 34			jsr ERRORMESSAGE
  3400
  3401 				; optimize OK (milf.pas), line = 673
  3402
  3403 3C5E AD 30 4B			lda SIORESULT
  3404 3C61 C9 01			cmp #$01
  3405 3C63 D0 4F			jne l_1059
  3406
  3407 				; optimize FAIL ('READPERCOM', milf.pas), line = 674
  3408 3C65 E8				inx
  3409 3C66 AD 34 4B 95 9A		mva TMPBYTE2 :STACKORIGIN,x
  3410 3C6B E8				inx
  3411 3C6C A9 01 95 9A			mva #$01 :STACKORIGIN,x
  3412 3C70 20 62 31			jsr READPERCOM
  3413
  3414 				; optimize OK (milf.pas), line = 675
  3415
  3416 3C73 AD 6B 4B			lda REQUESTEDSECTORS+1
  3417 3C76 CD 7A 4B			cmp NUMBER_OF_SECTORS+1
  3418 3C79 D0 06			bne @+
  3419 3C7B AD 6A 4B			lda REQUESTEDSECTORS
  3420 3C7E CD 79 4B			cmp NUMBER_OF_SECTORS
  3421 3C81			@
  3422 3C81 D0 1D			jne l_107D
  3423 3C83 AD 6D 4B			lda REQUESTEDSECTORSIZE+1
  3424 3C86 CD 78 4B			cmp BYTES_PER_SECTOR+1
  3425 3C89 D0 06			bne @+
  3426 3C8B AD 6C 4B			lda REQUESTEDSECTORSIZE
  3427 3C8E CD 77 4B			cmp BYTES_PER_SECTOR
  3428 3C91			@
  3429 3C91 D0 0D			jne l_107D
  3430
  3431 				; optimize FAIL (100, milf.pas), line = 676
  3432 					@printSTRING #CODEORIGIN+$03FA
  3432 				 LDY> CODEORIGIN+$03FA\ LDA< CODEORIGIN+$03FA\ JSR @PRINTSTRING
  3432 3C93 A0 23		 LDY> CODEORIGIN+$03FA
  3432 3C95 A9 FA		 LDA< CODEORIGIN+$03FA
  3432 3C97 20 89 2B		 JSR @PRINTSTRING
  3433 3C9A 20 7B 2B			@printEOL
  3434 3C9D 4C B4 3C			jmp l_108A
  3435 3CA0			l_107D
  3436
  3437 				; optimize FAIL (100, milf.pas), line = 678
  3438 					@printSTRING #CODEORIGIN+$0413
  3438 				 LDY> CODEORIGIN+$0413\ LDA< CODEORIGIN+$0413\ JSR @PRINTSTRING
  3438 3CA0 A0 24		 LDY> CODEORIGIN+$0413
  3438 3CA2 A9 13		 LDA< CODEORIGIN+$0413
  3438 3CA4 20 89 2B		 JSR @PRINTSTRING
  3439 3CA7 20 7B 2B			@printEOL
  3440
  3441 				; optimize FAIL (100, milf.pas), line = 679
  3442 					@printSTRING #CODEORIGIN+$0438
  3442 				 LDY> CODEORIGIN+$0438\ LDA< CODEORIGIN+$0438\ JSR @PRINTSTRING
  3442 3CAA A0 24		 LDY> CODEORIGIN+$0438
  3442 3CAC A9 38		 LDA< CODEORIGIN+$0438
  3442 3CAE 20 89 2B		 JSR @PRINTSTRING
  3443 3CB1 20 7B 2B			@printEOL
  3444 3CB4			l_108A
  3445 3CB4			l_1059
  3446
  3447 				; optimize FAIL ('PRESSKEY', milf.pas), line = 683
  3448 3CB4 20 9A 30			jsr PRESSKEY
  3449 3CB7			WRITEPERCOMABORT
  3450
  3451 				; optimize FAIL ('WRITEMENU', milf.pas), line = 687
  3452 3CB7 20 94 34			jsr WRITEMENU
  3453
  3454 				; ------------------------------------------------------------
  3455
  3456 = 000B			@FORTMP_0EF5	= $0B
  3457 = 000B			@FORTMP_0F35	= $0B
  3458 = 000B			@FORTMP_0F75	= $0B
  3459 = 000B			@FORTMP_0FB5	= $0B
  3460 = 000B			@FORTMP_0FF5	= $0B
  3461 3CBA			@exit
  3462 					.ifdef @new
  3463 					lda <@VarData
  3464 					sta :ztmp
  3465 					lda >@VarData
  3466 					ldy #@VarDataSize-1
  3467 					jmp @FreeMem
  3468 					eif
  3469 3CBA 60				rts						; ret
  3470 				.endl
  3471
  3472 3CBB			.local	COPYERROR					; FUNCTION
  3473
  3474 				; ------------------------------------------------------------
  3475
  3476 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  3477 				; as Pointer
  3478 3CBB B5 9A 8D A4 4B		mva :STACKORIGIN,x OPERATION
  3479 3CC0 CA				dex
  3480
  3481 				; ------------------------------------------------------------
  3482
  3483 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  3484 				; as Pointer
  3485 3CC1 B5 9A 8D A2 4B		mva :STACKORIGIN,x CURRENT_SECTOR
  3486 3CC6 B5 AA 8D A3 4B		mva :STACKORIGIN+STACKWIDTH,x CURRENT_SECTOR+1
  3487 3CCB CA				dex
  3488
  3489 				; ------------------------------------------------------------
  3490
  3491 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  3492 				; as Pointer
  3493 3CCC B5 9A 8D A1 4B		mva :STACKORIGIN,x SIORESULTC
  3494 3CD1 CA				dex
  3495
  3496 				; optimize OK (milf.pas), line = 697
  3497
  3498 3CD2 AD A4 4B			lda OPERATION
  3499 3CD5 C9 01			cmp #$01
  3500 3CD7 D0 0E			jne l_10B3
  3501 3CD9 A0 F8			ldy #256-8
  3502 3CDB B9 66 23 99 AE 4A + 	mva:rne CODEORIGIN+$045E+8-256,y adr.C+8-256,y+
  3503 3CE4 4C F2 3C			jmp l_10BD
  3504 3CE7			l_10B3
  3505 3CE7 A0 F8			ldy #256-8
  3506 3CE9 B9 6F 23 99 AE 4A + 	mva:rne CODEORIGIN+$0467+8-256,y adr.C+8-256,y+
  3507 3CF2			l_10BD
  3508
  3509 				; optimize FAIL (100, milf.pas), line = 700
  3510 3CF2 20 7B 2B			@printEOL
  3511
  3512 				; optimize FAIL (100, milf.pas), line = 701
  3513 3CF5 20 7B 2B			@printEOL
  3514
  3515 				; optimize FAIL (100, milf.pas), line = 702
  3516 					@printSTRING #CODEORIGIN+$0470
  3516 				 LDY> CODEORIGIN+$0470\ LDA< CODEORIGIN+$0470\ JSR @PRINTSTRING
  3516 3CF8 A0 24		 LDY> CODEORIGIN+$0470
  3516 3CFA A9 70		 LDA< CODEORIGIN+$0470
  3516 3CFC 20 89 2B		 JSR @PRINTSTRING
  3517 3CFF AD A1 4B			lda SIORESULTC
  3518 3D02 20 C4 2B			jsr @printBYTE._a
  3519 					@print #$20
  3519 				 LDY# $20\ JSR @PRINT
  3519 3D05 A0 20		 LDY# $20
  3519 3D07 20 80 2B		 JSR @PRINT
  3520 					@printSTRING C
  3520 				 LDY C+1\ LDA C\ JSR @PRINTSTRING
  3520 3D0A AC DF 3D		 LDY C+1
  3520 3D0D AD DE 3D		 LDA C
  3520 3D10 20 89 2B		 JSR @PRINTSTRING
  3521 					@printSTRING #CODEORIGIN+$0478
  3521 				 LDY> CODEORIGIN+$0478\ LDA< CODEORIGIN+$0478\ JSR @PRINTSTRING
  3521 3D13 A0 24		 LDY> CODEORIGIN+$0478
  3521 3D15 A9 78		 LDA< CODEORIGIN+$0478
  3521 3D17 20 89 2B		 JSR @PRINTSTRING
  3522 3D1A AD A2 4B			lda CURRENT_SECTOR
  3523 3D1D AC A3 4B			ldy CURRENT_SECTOR+1
  3524 3D20 20 D5 2B			jsr @printWORD._ay
  3525 					@print #$2E
  3525 				 LDY# $2E\ JSR @PRINT
  3525 3D23 A0 2E		 LDY# $2E
  3525 3D25 20 80 2B		 JSR @PRINT
  3526 3D28 20 7B 2B			@printEOL
  3527
  3528 				; optimize FAIL (100, milf.pas), line = 703
  3529 					@printSTRING #CODEORIGIN+$0482
  3529 				 LDY> CODEORIGIN+$0482\ LDA< CODEORIGIN+$0482\ JSR @PRINTSTRING
  3529 3D2B A0 24		 LDY> CODEORIGIN+$0482
  3529 3D2D A9 82		 LDA< CODEORIGIN+$0482
  3529 3D2F 20 89 2B		 JSR @PRINTSTRING
  3530 					@printSTRING #CODEORIGIN+$048F
  3530 				 LDY> CODEORIGIN+$048F\ LDA< CODEORIGIN+$048F\ JSR @PRINTSTRING
  3530 3D32 A0 24		 LDY> CODEORIGIN+$048F
  3530 3D34 A9 8F		 LDA< CODEORIGIN+$048F
  3530 3D36 20 89 2B		 JSR @PRINTSTRING
  3531 					@printSTRING #CODEORIGIN+$049C
  3531 				 LDY> CODEORIGIN+$049C\ LDA< CODEORIGIN+$049C\ JSR @PRINTSTRING
  3531 3D39 A0 24		 LDY> CODEORIGIN+$049C
  3531 3D3B A9 9C		 LDA< CODEORIGIN+$049C
  3531 3D3D 20 89 2B		 JSR @PRINTSTRING
  3532 3D40 20 7B 2B			@printEOL
  3533
  3534 				; optimize OK (milf.pas), line = 705
  3535
  3536 3D43 AD A4 4B			lda OPERATION
  3537 3D46 C9 01			cmp #$01
  3538 3D48 D0 0A			jne l_10F3
  3539
  3540 				; optimize FAIL (100, milf.pas), line = 706
  3541 					@printSTRING #CODEORIGIN+$04A7
  3541 				 LDY> CODEORIGIN+$04A7\ LDA< CODEORIGIN+$04A7\ JSR @PRINTSTRING
  3541 3D4A A0 24		 LDY> CODEORIGIN+$04A7
  3541 3D4C A9 A7		 LDA< CODEORIGIN+$04A7
  3541 3D4E 20 89 2B		 JSR @PRINTSTRING
  3542 3D51 20 7B 2B			@printEOL
  3543 3D54			l_10F3
  3544
  3545 				; optimize FAIL (100, milf.pas), line = 709
  3546 3D54 20 7B 2B			@printEOL
  3547
  3548 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 711
  3549 3D57 20 8F 30			jsr CLEARKEYS
  3550
  3551 				; optimize FAIL ('CRT.DELAY', milf.pas), line = 712
  3552 3D5A E8				inx
  3553 3D5B A9 02 95 9A			mva #$02 :STACKORIGIN,x
  3554 3D5F A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  3555 3D63 20 F6 2E			jsr CRT.DELAY
  3556 3D66			COPYERRORKEY
  3557
  3558 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 716
  3559 3D66 20 5A 2F			jsr CRT.KEYPRESSED
  3560 3D69 CA				dex
  3561 3D6A B5 9B			lda :STACKORIGIN+1,x
  3562 3D6C F0 0C			jeq l_1106
  3563
  3564 				; optimize FAIL ('CRT.READKEY', milf.pas), line = 716
  3565 3D6E 20 E5 2E			jsr CRT.READKEY
  3566 3D71 B5 9A 8D 5B 4B		mva :STACKORIGIN,x KEY
  3567 3D76 CA				dex
  3568 3D77 4C 7D 3D			jmp l_1114
  3569 3D7A			l_1106
  3570 3D7A 4C 66 3D			jmp COPYERRORKEY
  3571 3D7D			l_1114
  3572
  3573 				; ------------------------------------------------------------
  3574
  3575 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  3576 				; as Pointer
  3577
  3578 3D7D E8				inx
  3579 3D7E AD 5B 4B 95 9A		mva KEY :STACKORIGIN,x
  3580
  3581 				; GenerateCaseProlog
  3582 3D83 CA				dex
  3583
  3584 				; GenerateCaseEqualityCheck
  3585 3D84 B5 9B			lda :STACKORIGIN+1,x
  3586 3D86 C9 41			cmp #65
  3587 3D88 F0 06			beq @+
  3588
  3589 				; GenerateCaseEqualityCheck
  3590 3D8A B5 9B			lda :STACKORIGIN+1,x
  3591 3D8C C9 61			cmp #97
  3592 3D8E D0 08			jne l_1122
  3593 3D90			@
  3594
  3595 				; optimize OK (milf.pas), line = 719
  3596
  3597 3D90 A9 01 8D A5 4B		mva #$01 RESULT
  3598
  3599 				; GenerateCaseStatementEpilog
  3600 3D95 4C D7 3D			jmp a_0007
  3601 3D98			l_1122
  3602
  3603 				; GenerateCaseEqualityCheck
  3604 3D98 B5 9B			lda :STACKORIGIN+1,x
  3605 3D9A C9 52			cmp #82
  3606 3D9C F0 06			beq @+
  3607
  3608 				; GenerateCaseEqualityCheck
  3609 3D9E B5 9B			lda :STACKORIGIN+1,x
  3610 3DA0 C9 72			cmp #114
  3611 3DA2 D0 08			jne l_1131
  3612 3DA4			@
  3613
  3614 				; optimize OK (milf.pas), line = 720
  3615
  3616 3DA4 A9 02 8D A5 4B		mva #$02 RESULT
  3617
  3618 				; GenerateCaseStatementEpilog
  3619 3DA9 4C D7 3D			jmp a_0007
  3620 3DAC			l_1131
  3621
  3622 				; GenerateCaseEqualityCheck
  3623 3DAC B5 9B			lda :STACKORIGIN+1,x
  3624 3DAE C9 53			cmp #83
  3625 3DB0 F0 06			beq @+
  3626
  3627 				; GenerateCaseEqualityCheck
  3628 3DB2 B5 9B			lda :STACKORIGIN+1,x
  3629 3DB4 C9 73			cmp #115
  3630 3DB6 D0 08			jne l_1140
  3631 3DB8			@
  3632
  3633 				; optimize OK (milf.pas), line = 721
  3634
  3635 3DB8 A9 03 8D A5 4B		mva #$03 RESULT
  3636
  3637 				; GenerateCaseStatementEpilog
  3638 3DBD 4C D7 3D			jmp a_0007
  3639 3DC0			l_1140
  3640
  3641 				; GenerateCaseEqualityCheck
  3642 3DC0 B5 9B			lda :STACKORIGIN+1,x
  3643 3DC2 C9 57			cmp #87
  3644 3DC4 F0 06			beq @+
  3645
  3646 				; GenerateCaseEqualityCheck
  3647 3DC6 B5 9B			lda :STACKORIGIN+1,x
  3648 3DC8 C9 77			cmp #119
  3649 3DCA D0 08			jne l_114F
  3650 3DCC			@
  3651
  3652 				; optimize OK (milf.pas), line = 722
  3653
  3654 3DCC A9 04 8D A5 4B		mva #$04 RESULT
  3655
  3656 				; GenerateCaseStatementEpilog
  3657 3DD1 4C D7 3D			jmp a_0007
  3658 3DD4			l_114F
  3659 3DD4 4C 66 3D			jmp COPYERRORKEY
  3660
  3661 				; GenerateCaseEpilog
  3662 3DD7			a_0007
  3663 3DD7			@exit
  3664
  3665 				; ------------------------------------------------------------
  3666
  3667 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  3668 				; as Pointer
  3669
  3670 3DD7 E8				inx
  3671 3DD8 AD A5 4B 95 9A		mva RESULT :STACKORIGIN,x
  3672
  3673 					.ifdef @new
  3674 					lda <@VarData
  3675 					sta :ztmp
  3676 					lda >@VarData
  3677 					ldy #@VarDataSize-1
  3678 					jmp @FreeMem
  3679 					eif
  3680
  3681 				; ------------------------------------------------------------
  3682
  3683 = 4BA1			SIORESULTC	= DATAORIGIN+$04A5
  3684 = 4BA2			CURRENT_SECTOR	= DATAORIGIN+$04A6
  3685 = 4BA4			OPERATION	= DATAORIGIN+$04A8
  3686 = 4BA5			RESULT	= DATAORIGIN+$04A9
  3687 = 4BA6			adr.C	= DATAORIGIN+$04AA
  3688 3DDD			.var C	= adr.C .word
  3689
  3690 = 4BA1			@VarData	= SIORESULTC
  3691 = 0105			@VarDataSize	= 261
  3692
  3693 3DDD 60				rts						; ret
  3694 = 3DDE A6 4B		C
  3694 				.endl
  3695
  3696 3DE0			.local	WRITELOG					; PROCEDURE
  3697
  3698 				; ------------------------------------------------------------
  3699
  3700 				; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
  3701 				; as Pointer
  3702 3DE0 B5 9A 8D A6 4C		mva :STACKORIGIN,x LOGFILESIZE
  3703 3DE5 B5 AA 8D A7 4C		mva :STACKORIGIN+STACKWIDTH,x LOGFILESIZE+1
  3704 3DEA CA				dex
  3705
  3706 				; optimize OK (milf.pas), line = 737
  3707
  3708 3DEB A9 00 8D A8 4C		mva #$00 LOGFILEBUFFER
  3709 3DF0 A9 62 8D A9 4C		mva #$62 LOGFILEBUFFER+1
  3710
  3711 				; optimize OK (milf.pas), line = 738
  3712
  3713 3DF5 A9 07			lda #$07
  3714 3DF7 85 8C			sta :ecx
  3715 3DF9 A9 00			lda #$00
  3716 3DFB 85 8D			sta :ecx+1
  3717 3DFD AD A6 4C			lda LOGFILESIZE
  3718 3E00 85 84			sta :eax
  3719 3E02 AD A7 4C			lda LOGFILESIZE+1
  3720 3E05 85 85			sta :eax+1
  3721 					.ifdef fmulinit
  3722 					fmulu_16
  3723 					els
  3724 3E07 20 6D 2A			imulCX
  3725 					eif
  3726 3E0A A5 84			lda :eax
  3727 3E0C 8D A6 4C			sta LOGFILESIZE
  3728 3E0F A5 85			lda :eax+1
  3729 3E11 8D A7 4C			sta LOGFILESIZE+1
  3730 3E14			WRITELOGDRIVEDIALOG
  3731
  3732 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 742
  3733 3E14 20 8F 30			jsr CLEARKEYS
  3734
  3735 				; optimize FAIL ('CLEARBUFFER', milf.pas), line = 743
  3736 3E17 20 C2 30			jsr CLEARBUFFER
  3737
  3738 				; optimize FAIL (100, milf.pas), line = 745
  3739 3E1A 20 7B 2B			@printEOL
  3740
  3741 				; optimize FAIL (100, milf.pas), line = 746
  3742 					@printSTRING #CODEORIGIN+$04C7
  3742 				 LDY> CODEORIGIN+$04C7\ LDA< CODEORIGIN+$04C7\ JSR @PRINTSTRING
  3742 3E1D A0 24		 LDY> CODEORIGIN+$04C7
  3742 3E1F A9 C7		 LDA< CODEORIGIN+$04C7
  3742 3E21 20 89 2B		 JSR @PRINTSTRING
  3743 3E24 20 7B 2B			@printEOL
  3744
  3745 				; optimize FAIL (100, milf.pas), line = 747
  3746 					@printSTRING #CODEORIGIN+$04EA
  3746 				 LDY> CODEORIGIN+$04EA\ LDA< CODEORIGIN+$04EA\ JSR @PRINTSTRING
  3746 3E27 A0 24		 LDY> CODEORIGIN+$04EA
  3746 3E29 A9 EA		 LDA< CODEORIGIN+$04EA
  3746 3E2B 20 89 2B		 JSR @PRINTSTRING
  3747 3E2E 20 7B 2B			@printEOL
  3748
  3749 				; optimize FAIL ('GETSTRING', milf.pas), line = 749
  3750 3E31 E8				inx
  3751 3E32 A9 10 95 9A			mva #$10 :STACKORIGIN,x
  3752 3E36 20 9C 2F			jsr GETSTRING
  3753
  3754 				; optimize FAIL ('BREAKPRESSED', milf.pas), line = 751
  3755 3E39 20 75 30			jsr BREAKPRESSED
  3756 3E3C CA				dex
  3757 3E3D B5 9B			lda :STACKORIGIN+1,x
  3758 3E3F F0 0D			jeq l_1186
  3759
  3760 				; optimize FAIL (100, milf.pas), line = 752
  3761 					@printSTRING #CODEORIGIN+$04FE
  3761 				 LDY> CODEORIGIN+$04FE\ LDA< CODEORIGIN+$04FE\ JSR @PRINTSTRING
  3761 3E41 A0 24		 LDY> CODEORIGIN+$04FE
  3761 3E43 A9 FE		 LDA< CODEORIGIN+$04FE
  3761 3E45 20 89 2B		 JSR @PRINTSTRING
  3762 3E48 20 7B 2B			@printEOL
  3763 3E4B 4C 05 3F			jmp WRITELOGEXIT
  3764 3E4E			l_1186
  3765
  3766 				; optimize FAIL ('PARSEINPUT', milf.pas), line = 756
  3767 3E4E E8				inx
  3768 3E4F A9 10 95 9A			mva #$10 :STACKORIGIN,x
  3769 3E53 20 F8 30			jsr PARSEINPUT
  3770
  3771 				; optimize OK (milf.pas), line = 758
  3772
  3773 3E56 A0 02			ldy #$02
  3774 3E58 AD 39 4B			lda adr.TMPSTRING+$02
  3775 3E5B C9 30			cmp #$30
  3776 3E5D 90 04			jcc l_11AEx
  3777 3E5F C9 3A			cmp #$3A
  3778 3E61 90 03			jcc l_11AE
  3779 3E63			l_11AEx
  3780 3E63 4C 14 3E			jmp WRITELOGDRIVEDIALOG
  3781 3E66			l_11AE
  3782 				; AssignFile
  3783
  3784 				; optimize OK (milf.pas), line = 760
  3785
  3786 3E66 AC FA 46 84 92 AC + 	mwy F :bp2
  3787 3E70 A0 00			ldy #s@file.pfname
  3788 3E72 AD F6 46			lda TMPSTRING
  3789 3E75 91 92			sta (:bp2),y
  3790 3E77 C8				iny
  3791 3E78 AD F7 46			lda TMPSTRING+1
  3792 3E7B 91 92			sta (:bp2),y
  3793
  3794 				; optimize OK (milf.pas), line = 760
  3795
  3796 3E7D A0 05			ldy #s@file.status
  3797 3E7F A9 00			lda #$00
  3798 3E81 91 92			sta (:bp2),y
  3799 				; Rewrite
  3800
  3801 				; optimize OK (milf.pas), line = 761
  3802
  3803 3E83 A0 02			ldy #s@file.record
  3804 3E85 A9 01			lda #$01
  3805 3E87 91 92			sta (:bp2),y
  3806 3E89 C8				iny
  3807 3E8A A9 00			lda #$00
  3808 3E8C 91 92			sta (:bp2),y
  3809
  3810 3E8E 8A 48			txa:pha
  3811 3E90 18				clc
  3812 					@openfile F, #8
  3812 				 LDY F+1\ LDA F\ LDX# 8\ JSR @OPENFILE
  3812 3E91 AC FB 46		 LDY F+1
  3812 3E94 AD FA 46		 LDA F
  3812 3E97 A2 08		 LDX# 8
  3812 3E99 20 1F 27		 JSR @OPENFILE
  3813 3E9C 68 AA			pla:tax
  3814
  3815 				; BlockWrite
  3816
  3817 				; optimize OK (milf.pas), line = 762
  3818
  3819 3E9E AC FA 46 84 92 AC + 	mwy F :bp2
  3820 3EA8 A0 06			ldy #s@file.buffer
  3821 3EAA AD A8 4C			lda LOGFILEBUFFER
  3822 3EAD 91 92			sta (:bp2),y
  3823 3EAF C8				iny
  3824 3EB0 AD A9 4C			lda LOGFILEBUFFER+1
  3825 3EB3 91 92			sta (:bp2),y
  3826
  3827 				; optimize OK (milf.pas), line = 762
  3828
  3829 3EB5 A0 08			ldy #s@file.nrecord
  3830 3EB7 AD A6 4C			lda LOGFILESIZE
  3831 3EBA 91 92			sta (:bp2),y
  3832 3EBC C8				iny
  3833 3EBD AD A7 4C			lda LOGFILESIZE+1
  3834 3EC0 91 92			sta (:bp2),y
  3835
  3836 3EC2 8A 48			txa:pha
  3837 3EC4 18				clc
  3838 					@readfile F, #11
  3838 				 LDY F+1\ LDA F\ LDX# 11\ JSR @READFILE
  3838 3EC5 AC FB 46		 LDY F+1
  3838 3EC8 AD FA 46		 LDA F
  3838 3ECB A2 0B		 LDX# 11
  3838 3ECD 20 E2 27		 JSR @READFILE
  3839 3ED0 68 AA			pla:tax
  3840
  3841 				; optimize FAIL (100, milf.pas), line = 764
  3842 3ED2 20 7B 2B			@printEOL
  3843
  3844 				; optimize OK (milf.pas), line = 766
  3845
  3846 3ED5 AD 03 47			lda SYSTEM.IORESULT
  3847 3ED8 10 13			jpl l_11DA
  3848
  3849 				; optimize FAIL (100, milf.pas), line = 767
  3850 					@printSTRING #CODEORIGIN+$0470
  3850 				 LDY> CODEORIGIN+$0470\ LDA< CODEORIGIN+$0470\ JSR @PRINTSTRING
  3850 3EDA A0 24		 LDY> CODEORIGIN+$0470
  3850 3EDC A9 70		 LDA< CODEORIGIN+$0470
  3850 3EDE 20 89 2B		 JSR @PRINTSTRING
  3851 3EE1 AD 03 47			lda SYSTEM.IORESULT
  3852 3EE4 20 C4 2B			jsr @printBYTE._a
  3853 3EE7 20 7B 2B			@printEOL
  3854 3EEA 4C F7 3E			jmp l_11EF
  3855 3EED			l_11DA
  3856
  3857 				; optimize FAIL (100, milf.pas), line = 769
  3858 					@printSTRING #CODEORIGIN+$051B
  3858 				 LDY> CODEORIGIN+$051B\ LDA< CODEORIGIN+$051B\ JSR @PRINTSTRING
  3858 3EED A0 25		 LDY> CODEORIGIN+$051B
  3858 3EEF A9 1B		 LDA< CODEORIGIN+$051B
  3858 3EF1 20 89 2B		 JSR @PRINTSTRING
  3859 3EF4 20 7B 2B			@printEOL
  3860 3EF7			l_11EF
  3861 				; CloseFile
  3862
  3863 3EF7 8A 48			txa:pha
  3864 3EF9 18				clc
  3865 					@closefile F
  3865 				 LDY F+1\ LDA F\ JSR @CLOSEFILE
  3865 3EFA AC FB 46		 LDY F+1
  3865 3EFD AD FA 46		 LDA F
  3865 3F00 20 B5 27		 JSR @CLOSEFILE
  3866 3F03 68 AA			pla:tax
  3867
  3868 3F05			WRITELOGEXIT
  3869
  3870 				; ------------------------------------------------------------
  3871
  3872 = 4CA6			LOGFILESIZE	= DATAORIGIN+$05AA
  3873 = 4CA8			LOGFILEBUFFER	= DATAORIGIN+$05AC
  3874
  3875 = 4CA6			@VarData	= LOGFILESIZE
  3876 = 0004			@VarDataSize	= 4
  3877
  3878 3F05			@exit
  3879 					.ifdef @new
  3880 					lda <@VarData
  3881 					sta :ztmp
  3882 					lda >@VarData
  3883 					ldy #@VarDataSize-1
  3884 					jmp @FreeMem
  3885 					eif
  3886 3F05 60				rts						; ret
  3887 				.endl
  3888
  3889 3F06			.local	PUTTOLOG					; PROCEDURE
  3890
  3891 				; ------------------------------------------------------------
  3892
  3893 				; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
  3894 				; as Pointer
  3895 3F06 B5 9A 8D AA 4C		mva :STACKORIGIN,x INFO
  3896 3F0B CA				dex
  3897
  3898 				; optimize OK (milf.pas), line = 788
  3899
  3900 3F0C AD 80 4B			lda SECTORS_TO_READ+1
  3901 3F0F C9 0B			cmp #$0B
  3902 3F11 D0 05			bne @+
  3903 3F13 AD 7F 4B			lda SECTORS_TO_READ
  3904 3F16 C9 41			cmp #$41
  3905 3F18			@
  3906 3F18 90 03 4C E9 3F		jcs l_120A
  3907
  3908 				; optimize FAIL ('SYSTEM.STR_0732', milf.pas), line = 789
  3909 3F1D E8				inx
  3910 3F1E AD 7B 4B 95 9A		mva CURRENT_SECTOR :STACKORIGIN,x
  3911 3F23 AD 7C 4B 95 AA		mva CURRENT_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  3912 3F28 20 46 29			jsr @expandToCARD.WORD
  3913 3F2B E8				inx
  3914 3F2C AD EA 3F 95 9A		mva SECTOR_NUMBER :STACKORIGIN,x
  3915 3F31 AD EB 3F 95 AA		mva SECTOR_NUMBER+1 :STACKORIGIN+STACKWIDTH,x
  3916 3F36 20 28 2D			jsr SYSTEM.STR_0732
  3917
  3918 				; optimize OK (milf.pas), line = 790
  3919
  3920 3F39 A9 04			lda #$04
  3921 3F3B 38 ED AB 4C			sub adr.SECTOR_NUMBER
  3922 3F3F 8D B8 4C			sta SPACE_NUMBER
  3923
  3924 				; optimize FAIL ('SYSTEM.SPACE', milf.pas), line = 791
  3925 3F42 E8				inx
  3926 3F43 AD B8 4C 95 9A		mva SPACE_NUMBER :STACKORIGIN,x
  3927 3F48 20 C1 2D			jsr SYSTEM.SPACE
  3928 3F4B E8				inx
  3929 3F4C AD EA 3F 95 9A		mva SECTOR_NUMBER :STACKORIGIN,x
  3930 3F51 AD EB 3F 95 AA		mva SECTOR_NUMBER+1 :STACKORIGIN+STACKWIDTH,x
  3931 3F56 20 ED 2D			jsr SYSTEM.CONCAT_076E
  3932 					@moveSTRING SECTOR_DATA
  3932 				 LDY SECTOR_DATA+1\ LDA SECTOR_DATA\ JSR @MOVESTRING
  3932 3F59 AC ED 3F		 LDY SECTOR_DATA+1
  3932 3F5C AD EC 3F		 LDA SECTOR_DATA
  3932 3F5F 20 23 2A		 JSR @MOVESTRING
  3933 3F62 CA				dex
  3934
  3935 				; optimize FAIL ('SYSTEM.CONCAT_0777', milf.pas), line = 792
  3936 3F63 E8				inx
  3937 3F64 AD EC 3F 95 9A		mva SECTOR_DATA :STACKORIGIN,x
  3938 3F69 AD ED 3F 95 AA		mva SECTOR_DATA+1 :STACKORIGIN+STACKWIDTH,x
  3939 3F6E E8				inx
  3940 3F6F A9 3A 95 9A			mva #$3A :STACKORIGIN,x
  3941 3F73 20 69 2E			jsr SYSTEM.CONCAT_0777
  3942 					@moveSTRING SECTOR_DATA
  3942 				 LDY SECTOR_DATA+1\ LDA SECTOR_DATA\ JSR @MOVESTRING
  3942 3F76 AC ED 3F		 LDY SECTOR_DATA+1
  3942 3F79 AD EC 3F		 LDA SECTOR_DATA
  3942 3F7C 20 23 2A		 JSR @MOVESTRING
  3943 3F7F CA				dex
  3944
  3945 				; optimize FAIL ('SYSTEM.CONCAT_0777', milf.pas), line = 793
  3946 3F80 E8				inx
  3947 3F81 AD EC 3F 95 9A		mva SECTOR_DATA :STACKORIGIN,x
  3948 3F86 AD ED 3F 95 AA		mva SECTOR_DATA+1 :STACKORIGIN+STACKWIDTH,x
  3949 3F8B E8				inx
  3950 3F8C AD AA 4C 95 9A		mva INFO :STACKORIGIN,x
  3951 3F91 20 69 2E			jsr SYSTEM.CONCAT_0777
  3952 					@moveSTRING SECTOR_DATA
  3952 				 LDY SECTOR_DATA+1\ LDA SECTOR_DATA\ JSR @MOVESTRING
  3952 3F94 AC ED 3F		 LDY SECTOR_DATA+1
  3952 3F97 AD EC 3F		 LDA SECTOR_DATA
  3952 3F9A 20 23 2A		 JSR @MOVESTRING
  3953 3F9D CA				dex
  3954
  3955 				; optimize FAIL ('SYSTEM.CONCAT_0777', milf.pas), line = 794
  3956 3F9E E8				inx
  3957 3F9F AD EC 3F 95 9A		mva SECTOR_DATA :STACKORIGIN,x
  3958 3FA4 AD ED 3F 95 AA		mva SECTOR_DATA+1 :STACKORIGIN+STACKWIDTH,x
  3959 3FA9 E8				inx
  3960 3FAA A9 9B 95 9A			mva #$9B :STACKORIGIN,x
  3961 3FAE 20 69 2E			jsr SYSTEM.CONCAT_0777
  3962 					@moveSTRING SECTOR_DATA
  3962 				 LDY SECTOR_DATA+1\ LDA SECTOR_DATA\ JSR @MOVESTRING
  3962 3FB1 AC ED 3F		 LDY SECTOR_DATA+1
  3962 3FB4 AD EC 3F		 LDA SECTOR_DATA
  3962 3FB7 20 23 2A		 JSR @MOVESTRING
  3963 3FBA CA				dex
  3964
  3965 				; optimize OK (milf.pas), line = 795
  3966
  3967 3FBB A9 B1			lda <adr.SECTOR_DATA+$01
  3968 3FBD 85 88			sta :edx
  3969 3FBF A9 4C			lda >adr.SECTOR_DATA+$01
  3970 3FC1 85 89			sta :edx+1
  3971 3FC3 AD 7D 4B			lda SECTOR_INDEX
  3972 3FC6 85 8C			sta :ecx
  3973 3FC8 A9 62			lda #$62
  3974 3FCA 18 6D 7E 4B			add SECTOR_INDEX+1
  3975 3FCE 85 8D			sta :ecx+1
  3976 3FD0 A9 07			lda #$07
  3977 3FD2 85 84			sta :eax
  3978 3FD4 A9 00			lda #$00
  3979 3FD6 85 85			sta :eax+1
  3980 3FD8 20 86 29			jsr @move
  3981
  3982 				; optimize OK (milf.pas), line = 796
  3983
  3984 3FDB AD 7D 4B			lda SECTOR_INDEX
  3985 3FDE 18 69 07			add #$07
  3986 3FE1 8D 7D 4B			sta SECTOR_INDEX
  3987 3FE4 90 03			scc
  3988 3FE6 EE 7E 4B			inc SECTOR_INDEX+1
  3989 3FE9			l_120A
  3990
  3991 				; ------------------------------------------------------------
  3992
  3993 = 4CAA			INFO	= DATAORIGIN+$05AE
  3994 = 4CAB			adr.SECTOR_NUMBER	= DATAORIGIN+$05AF
  3995 3FE9			.var SECTOR_NUMBER	= adr.SECTOR_NUMBER .word
  3996 = 4CB0			adr.SECTOR_DATA	= DATAORIGIN+$05B4
  3997 3FE9			.var SECTOR_DATA	= adr.SECTOR_DATA .word
  3998 = 4CB8			SPACE_NUMBER	= DATAORIGIN+$05BC
  3999
  4000 = 4CAA			@VarData	= INFO
  4001 = 000F			@VarDataSize	= 15
  4002
  4003 3FE9			@exit
  4004 					.ifdef @new
  4005 					lda <@VarData
  4006 					sta :ztmp
  4007 					lda >@VarData
  4008 					ldy #@VarDataSize-1
  4009 					jmp @FreeMem
  4010 					eif
  4011 3FE9 60				rts						; ret
  4012 = 3FEA AB 4C		SECTOR_NUMBER
  4012 = 3FEC B0 4C		SECTOR_DATA
  4012 				.endl
  4013
  4014 3FEE			.local	COPY						; PROCEDURE
  4015
  4016 				; optimize OK (milf.pas), line = 810
  4017
  4018 3FEE AD 6F 4B			lda DEST_DRIVE
  4019 3FF1 C9 FF			cmp #$FF
  4020 3FF3 D0 10			jne l_1256
  4021
  4022 				; optimize FAIL (100, milf.pas), line = 811
  4023 					@printSTRING #CODEORIGIN+$0527
  4023 				 LDY> CODEORIGIN+$0527\ LDA< CODEORIGIN+$0527\ JSR @PRINTSTRING
  4023 3FF5 A0 25		 LDY> CODEORIGIN+$0527
  4023 3FF7 A9 27		 LDA< CODEORIGIN+$0527
  4023 3FF9 20 89 2B		 JSR @PRINTSTRING
  4024 3FFC 20 7B 2B			@printEOL
  4025
  4026 				; optimize FAIL ('PRESSKEY', milf.pas), line = 812
  4027 3FFF 20 9A 30			jsr PRESSKEY
  4028 4002 4C F9 45			jmp COPYEXIT
  4029 4005			l_1256
  4030
  4031 				; optimize OK (milf.pas), line = 816
  4032
  4033 4005 AD 74 4B			lda BYTES_PER_SECTOR_SOURCE+1
  4034 4008 CD 76 4B			cmp BYTES_PER_SECTOR_DEST+1
  4035 400B D0 06			bne @+
  4036 400D AD 73 4B			lda BYTES_PER_SECTOR_SOURCE
  4037 4010 CD 75 4B			cmp BYTES_PER_SECTOR_DEST
  4038 4013			@
  4039 4013 F0 66			jeq l_126F
  4040
  4041 				; optimize FAIL (100, milf.pas), line = 817
  4042 					@printSTRING #CODEORIGIN+$0543
  4042 				 LDY> CODEORIGIN+$0543\ LDA< CODEORIGIN+$0543\ JSR @PRINTSTRING
  4042 4015 A0 25		 LDY> CODEORIGIN+$0543
  4042 4017 A9 43		 LDA< CODEORIGIN+$0543
  4042 4019 20 89 2B		 JSR @PRINTSTRING
  4043 401C 20 7B 2B			@printEOL
  4044
  4045 				; optimize FAIL (100, milf.pas), line = 818
  4046 					@printSTRING #CODEORIGIN+$0569
  4046 				 LDY> CODEORIGIN+$0569\ LDA< CODEORIGIN+$0569\ JSR @PRINTSTRING
  4046 401F A0 25		 LDY> CODEORIGIN+$0569
  4046 4021 A9 69		 LDA< CODEORIGIN+$0569
  4046 4023 20 89 2B		 JSR @PRINTSTRING
  4047 4026 20 7B 2B			@printEOL
  4048
  4049 				; optimize FAIL (100, milf.pas), line = 819
  4050 					@printSTRING #CODEORIGIN+$058B
  4050 				 LDY> CODEORIGIN+$058B\ LDA< CODEORIGIN+$058B\ JSR @PRINTSTRING
  4050 4029 A0 25		 LDY> CODEORIGIN+$058B
  4050 402B A9 8B		 LDA< CODEORIGIN+$058B
  4050 402D 20 89 2B		 JSR @PRINTSTRING
  4051 4030 20 7B 2B			@printEOL
  4052
  4053 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 821
  4054 4033 20 8F 30			jsr CLEARKEYS
  4055 4036			SECTORSIZE
  4056
  4057 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 825
  4058 4036 20 5A 2F			jsr CRT.KEYPRESSED
  4059 4039 CA				dex
  4060 403A B5 9B			lda :STACKORIGIN+1,x
  4061 403C F0 0C			jeq l_1284
  4062
  4063 				; optimize FAIL ('CRT.READKEY', milf.pas), line = 825
  4064 403E 20 E5 2E			jsr CRT.READKEY
  4065 4041 B5 9A 8D 5B 4B		mva :STACKORIGIN,x KEY
  4066 4046 CA				dex
  4067 4047 4C 4D 40			jmp l_1292
  4068 404A			l_1284
  4069 404A 4C 36 40			jmp SECTORSIZE
  4070 404D			l_1292
  4071
  4072 				; ------------------------------------------------------------
  4073
  4074 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  4075 				; as Pointer
  4076
  4077 404D E8				inx
  4078 404E AD 5B 4B 95 9A		mva KEY :STACKORIGIN,x
  4079
  4080 				; GenerateCaseProlog
  4081 4053 CA				dex
  4082
  4083 				; GenerateCaseEqualityCheck
  4084 4054 B5 9B			lda :STACKORIGIN+1,x
  4085 4056 C9 59			cmp #89
  4086 4058 F0 06			beq @+
  4087
  4088 				; GenerateCaseEqualityCheck
  4089 405A B5 9B			lda :STACKORIGIN+1,x
  4090 405C C9 79			cmp #121
  4091 405E D0 06			jne l_12A0
  4092 4060			@
  4093 4060 4C 7B 40			jmp STARTSECTOR
  4094
  4095 				; GenerateCaseStatementEpilog
  4096 4063 4C 7B 40			jmp a_0008
  4097 4066			l_12A0
  4098
  4099 				; GenerateCaseEqualityCheck
  4100 4066 B5 9B			lda :STACKORIGIN+1,x
  4101 4068 C9 4E			cmp #78
  4102 406A F0 06			beq @+
  4103
  4104 				; GenerateCaseEqualityCheck
  4105 406C B5 9B			lda :STACKORIGIN+1,x
  4106 406E C9 6E			cmp #110
  4107 4070 D0 06			jne l_12AB
  4108 4072			@
  4109 4072 4C F9 45			jmp COPYEXIT
  4110
  4111 				; GenerateCaseStatementEpilog
  4112 4075 4C 7B 40			jmp a_0008
  4113 4078			l_12AB
  4114 4078 4C 36 40			jmp SECTORSIZE
  4115
  4116 				; GenerateCaseEpilog
  4117 407B			a_0008
  4118 407B			l_126F
  4119 407B			STARTSECTOR
  4120
  4121 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 837
  4122 407B 20 8F 30			jsr CLEARKEYS
  4123
  4124 				; optimize FAIL ('CLEARBUFFER', milf.pas), line = 838
  4125 407E 20 C2 30			jsr CLEARBUFFER
  4126
  4127 				; optimize FAIL (100, milf.pas), line = 840
  4128 					@printSTRING #CODEORIGIN+$05A7
  4128 				 LDY> CODEORIGIN+$05A7\ LDA< CODEORIGIN+$05A7\ JSR @PRINTSTRING
  4128 4081 A0 25		 LDY> CODEORIGIN+$05A7
  4128 4083 A9 A7		 LDA< CODEORIGIN+$05A7
  4128 4085 20 89 2B		 JSR @PRINTSTRING
  4129 4088 20 7B 2B			@printEOL
  4130
  4131 				; optimize FAIL ('GETSTRING', milf.pas), line = 841
  4132 408B E8				inx
  4133 408C A9 06 95 9A			mva #$06 :STACKORIGIN,x
  4134 4090 20 9C 2F			jsr GETSTRING
  4135
  4136 				; optimize FAIL ('BREAKPRESSED', milf.pas), line = 843
  4137 4093 20 75 30			jsr BREAKPRESSED
  4138 4096 CA				dex
  4139 4097 B5 9B			lda :STACKORIGIN+1,x
  4140 4099 F0 0D			jeq l_12C4
  4141
  4142 				; optimize FAIL (100, milf.pas), line = 844
  4143 					@printSTRING #CODEORIGIN+$04FE
  4143 				 LDY> CODEORIGIN+$04FE\ LDA< CODEORIGIN+$04FE\ JSR @PRINTSTRING
  4143 409B A0 24		 LDY> CODEORIGIN+$04FE
  4143 409D A9 FE		 LDA< CODEORIGIN+$04FE
  4143 409F 20 89 2B		 JSR @PRINTSTRING
  4144 40A2 20 7B 2B			@printEOL
  4145 40A5 4C F9 45			jmp COPYEXIT
  4146 40A8			l_12C4
  4147
  4148 				; optimize FAIL ('PARSEINPUT', milf.pas), line = 848
  4149 40A8 E8				inx
  4150 40A9 A9 05 95 9A			mva #$05 :STACKORIGIN,x
  4151 40AD 20 F8 30			jsr PARSEINPUT
  4152
  4153 				; optimize FAIL ('SYSTEM.VAL_0712', milf.pas), line = 850
  4154 40B0 E8				inx
  4155 40B1 AD F6 46 95 9A		mva TMPSTRING :STACKORIGIN,x
  4156 40B6 AD F7 46 95 AA		mva TMPSTRING+1 :STACKORIGIN+STACKWIDTH,x
  4157 40BB E8				inx
  4158 40BC A9 81 95 9A			mva <START_SECTOR :STACKORIGIN,x
  4159 40C0 A9 4B 95 AA			mva >START_SECTOR :STACKORIGIN+STACKWIDTH,x
  4160 40C4 E8				inx
  4161 40C5 A9 68 95 9A			mva <CODE :STACKORIGIN,x
  4162 40C9 A9 4B 95 AA			mva >CODE :STACKORIGIN+STACKWIDTH,x
  4163 40CD 20 CF 2C			jsr SYSTEM.VAL_0712
  4164
  4165 				; optimize OK (milf.pas), line = 852
  4166
  4167 40D0 AD 68 4B			lda CODE
  4168 40D3 F0 03			jeq l_12E3
  4169 40D5 4C 7B 40			jmp STARTSECTOR
  4170 40D8			l_12E3
  4171
  4172 				; optimize OK (milf.pas), line = 854
  4173
  4174 40D8				.LOCAL
  4175 40D8 AD 84 4B			lda START_SECTOR+3
  4176 40DB 38 E9 00			sub #$00
  4177 40DE D0 21			bne L4
  4178 40E0 AD 83 4B			lda START_SECTOR+2
  4179 40E3 C9 00			cmp #$00
  4180 40E5 D0 0E			bne L1
  4181 40E7 AD 82 4B			lda START_SECTOR+1
  4182 40EA CD 7A 4B			cmp NUMBER_OF_SECTORS+1
  4183 40ED D0 06			bne L1
  4184 40EF AD 81 4B			lda START_SECTOR
  4185 40F2 CD 79 4B			cmp NUMBER_OF_SECTORS
  4186 40F5 F0 10		L1	beq L5
  4187 40F7 B0 04			bcs L3
  4188 40F9 A9 FF			lda #$FF
  4189 40FB D0 0A			bne L5
  4190 40FD A9 01		L3	lda #$01
  4191 40FF D0 06			bne L5
  4192 4101 50 04		L4	bvc L5
  4193 4103 49 FF			eor #$FF
  4194 4105 09 01			ora #$01
  4195 4107			L5
  4196 					.ENDL
  4197 4107 30 17			jmi l_12F7
  4198
  4199 				; optimize FAIL (100, milf.pas), line = 855
  4200 					@printSTRING #CODEORIGIN+$05B6
  4200 				 LDY> CODEORIGIN+$05B6\ LDA< CODEORIGIN+$05B6\ JSR @PRINTSTRING
  4200 4109 A0 25		 LDY> CODEORIGIN+$05B6
  4200 410B A9 B6		 LDA< CODEORIGIN+$05B6
  4200 410D 20 89 2B		 JSR @PRINTSTRING
  4201 4110 20 7B 2B			@printEOL
  4202
  4203 				; optimize FAIL (100, milf.pas), line = 856
  4204 					@printSTRING #CODEORIGIN+$05DA
  4204 				 LDY> CODEORIGIN+$05DA\ LDA< CODEORIGIN+$05DA\ JSR @PRINTSTRING
  4204 4113 A0 25		 LDY> CODEORIGIN+$05DA
  4204 4115 A9 DA		 LDA< CODEORIGIN+$05DA
  4204 4117 20 89 2B		 JSR @PRINTSTRING
  4205 411A 20 7B 2B			@printEOL
  4206 411D 4C 7B 40			jmp STARTSECTOR
  4207 4120			l_12F7
  4208
  4209 				; optimize OK (milf.pas), line = 860
  4210
  4211 4120				.LOCAL
  4212 4120 AD 84 4B			lda START_SECTOR+3
  4213 4123 38 E9 00			sub #$00
  4214 4126 D0 1F			bne L4
  4215 4128 AD 83 4B			lda START_SECTOR+2
  4216 412B C9 00			cmp #$00
  4217 412D D0 0C			bne L1
  4218 412F AD 82 4B			lda START_SECTOR+1
  4219 4132 C9 00			cmp #$00
  4220 4134 D0 05			bne L1
  4221 4136 AD 81 4B			lda START_SECTOR
  4222 4139 C9 01			cmp #$01
  4223 413B F0 10		L1	beq L5
  4224 413D B0 04			bcs L3
  4225 413F A9 FF			lda #$FF
  4226 4141 D0 0A			bne L5
  4227 4143 A9 01		L3	lda #$01
  4228 4145 D0 06			bne L5
  4229 4147 50 04		L4	bvc L5
  4230 4149 49 FF			eor #$FF
  4231 414B 09 01			ora #$01
  4232 414D			L5
  4233 					.ENDL
  4234 414D 10 0D			jpl l_1310
  4235
  4236 				; optimize FAIL (100, milf.pas), line = 861
  4237 					@printSTRING #CODEORIGIN+$05EE
  4237 				 LDY> CODEORIGIN+$05EE\ LDA< CODEORIGIN+$05EE\ JSR @PRINTSTRING
  4237 414F A0 25		 LDY> CODEORIGIN+$05EE
  4237 4151 A9 EE		 LDA< CODEORIGIN+$05EE
  4237 4153 20 89 2B		 JSR @PRINTSTRING
  4238 4156 20 7B 2B			@printEOL
  4239 4159 4C 7B 40			jmp STARTSECTOR
  4240 415C			l_1310
  4241 415C			ENDSECTOR
  4242
  4243 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 867
  4244 415C 20 8F 30			jsr CLEARKEYS
  4245
  4246 				; optimize FAIL ('CLEARBUFFER', milf.pas), line = 868
  4247 415F 20 C2 30			jsr CLEARBUFFER
  4248
  4249 				; optimize FAIL (100, milf.pas), line = 870
  4250 					@printSTRING #CODEORIGIN+$0609
  4250 				 LDY> CODEORIGIN+$0609\ LDA< CODEORIGIN+$0609\ JSR @PRINTSTRING
  4250 4162 A0 26		 LDY> CODEORIGIN+$0609
  4250 4164 A9 09		 LDA< CODEORIGIN+$0609
  4250 4166 20 89 2B		 JSR @PRINTSTRING
  4251 4169 20 7B 2B			@printEOL
  4252
  4253 				; optimize FAIL ('GETSTRING', milf.pas), line = 871
  4254 416C E8				inx
  4255 416D A9 06 95 9A			mva #$06 :STACKORIGIN,x
  4256 4171 20 9C 2F			jsr GETSTRING
  4257
  4258 				; optimize FAIL ('BREAKPRESSED', milf.pas), line = 873
  4259 4174 20 75 30			jsr BREAKPRESSED
  4260 4177 CA				dex
  4261 4178 B5 9B			lda :STACKORIGIN+1,x
  4262 417A F0 0D			jeq l_1327
  4263
  4264 				; optimize FAIL (100, milf.pas), line = 874
  4265 					@printSTRING #CODEORIGIN+$04FE
  4265 				 LDY> CODEORIGIN+$04FE\ LDA< CODEORIGIN+$04FE\ JSR @PRINTSTRING
  4265 417C A0 24		 LDY> CODEORIGIN+$04FE
  4265 417E A9 FE		 LDA< CODEORIGIN+$04FE
  4265 4180 20 89 2B		 JSR @PRINTSTRING
  4266 4183 20 7B 2B			@printEOL
  4267 4186 4C F9 45			jmp COPYEXIT
  4268 4189			l_1327
  4269
  4270 				; optimize FAIL ('PARSEINPUT', milf.pas), line = 878
  4271 4189 E8				inx
  4272 418A A9 05 95 9A			mva #$05 :STACKORIGIN,x
  4273 418E 20 F8 30			jsr PARSEINPUT
  4274
  4275 				; optimize FAIL ('SYSTEM.VAL_0712', milf.pas), line = 880
  4276 4191 E8				inx
  4277 4192 AD F6 46 95 9A		mva TMPSTRING :STACKORIGIN,x
  4278 4197 AD F7 46 95 AA		mva TMPSTRING+1 :STACKORIGIN+STACKWIDTH,x
  4279 419C E8				inx
  4280 419D A9 85 95 9A			mva <END_SECTOR :STACKORIGIN,x
  4281 41A1 A9 4B 95 AA			mva >END_SECTOR :STACKORIGIN+STACKWIDTH,x
  4282 41A5 E8				inx
  4283 41A6 A9 68 95 9A			mva <CODE :STACKORIGIN,x
  4284 41AA A9 4B 95 AA			mva >CODE :STACKORIGIN+STACKWIDTH,x
  4285 41AE 20 CF 2C			jsr SYSTEM.VAL_0712
  4286
  4287 				; optimize OK (milf.pas), line = 882
  4288
  4289 41B1 AD 68 4B			lda CODE
  4290 41B4 F0 03			jeq l_1346
  4291 41B6 4C 5C 41			jmp ENDSECTOR
  4292 41B9			l_1346
  4293
  4294 				; optimize OK (milf.pas), line = 884
  4295
  4296 41B9				.LOCAL
  4297 41B9 AD 88 4B			lda END_SECTOR+3
  4298 41BC 38 E9 00			sub #$00
  4299 41BF D0 21			bne L4
  4300 41C1 AD 87 4B			lda END_SECTOR+2
  4301 41C4 C9 00			cmp #$00
  4302 41C6 D0 0E			bne L1
  4303 41C8 AD 86 4B			lda END_SECTOR+1
  4304 41CB CD 7A 4B			cmp NUMBER_OF_SECTORS+1
  4305 41CE D0 06			bne L1
  4306 41D0 AD 85 4B			lda END_SECTOR
  4307 41D3 CD 79 4B			cmp NUMBER_OF_SECTORS
  4308 41D6 F0 10		L1	beq L5
  4309 41D8 B0 04			bcs L3
  4310 41DA A9 FF			lda #$FF
  4311 41DC D0 0A			bne L5
  4312 41DE A9 01		L3	lda #$01
  4313 41E0 D0 06			bne L5
  4314 41E2 50 04		L4	bvc L5
  4315 41E4 49 FF			eor #$FF
  4316 41E6 09 01			ora #$01
  4317 41E8			L5
  4318 					.ENDL
  4319 41E8 30 19			jmi l_135A
  4320 41EA F0 17			jeq l_135A
  4321
  4322 				; optimize FAIL (100, milf.pas), line = 885
  4323 					@printSTRING #CODEORIGIN+$0616
  4323 				 LDY> CODEORIGIN+$0616\ LDA< CODEORIGIN+$0616\ JSR @PRINTSTRING
  4323 41EC A0 26		 LDY> CODEORIGIN+$0616
  4323 41EE A9 16		 LDA< CODEORIGIN+$0616
  4323 41F0 20 89 2B		 JSR @PRINTSTRING
  4324 41F3 20 7B 2B			@printEOL
  4325
  4326 				; optimize FAIL (100, milf.pas), line = 886
  4327 					@printSTRING #CODEORIGIN+$05DA
  4327 				 LDY> CODEORIGIN+$05DA\ LDA< CODEORIGIN+$05DA\ JSR @PRINTSTRING
  4327 41F6 A0 25		 LDY> CODEORIGIN+$05DA
  4327 41F8 A9 DA		 LDA< CODEORIGIN+$05DA
  4327 41FA 20 89 2B		 JSR @PRINTSTRING
  4328 41FD 20 7B 2B			@printEOL
  4329 4200 4C 5C 41			jmp ENDSECTOR
  4330 4203			l_135A
  4331
  4332 				; optimize OK (milf.pas), line = 890
  4333
  4334 4203				.LOCAL
  4335 4203 AD 88 4B			lda END_SECTOR+3
  4336 4206 38 ED 84 4B			sub START_SECTOR+3
  4337 420A D0 22			bne L4
  4338 420C AD 87 4B			lda END_SECTOR+2
  4339 420F CD 83 4B			cmp START_SECTOR+2
  4340 4212 D0 0E			bne L1
  4341 4214 AD 86 4B			lda END_SECTOR+1
  4342 4217 CD 82 4B			cmp START_SECTOR+1
  4343 421A D0 06			bne L1
  4344 421C AD 85 4B			lda END_SECTOR
  4345 421F CD 81 4B			cmp START_SECTOR
  4346 4222 F0 10		L1	beq L5
  4347 4224 B0 04			bcs L3
  4348 4226 A9 FF			lda #$FF
  4349 4228 D0 0A			bne L5
  4350 422A A9 01		L3	lda #$01
  4351 422C D0 06			bne L5
  4352 422E 50 04		L4	bvc L5
  4353 4230 49 FF			eor #$FF
  4354 4232 09 01			ora #$01
  4355 4234			L5
  4356 					.ENDL
  4357 4234 10 17			jpl l_1373
  4358
  4359 				; optimize FAIL (100, milf.pas), line = 891
  4360 					@printSTRING #CODEORIGIN+$0639
  4360 				 LDY> CODEORIGIN+$0639\ LDA< CODEORIGIN+$0639\ JSR @PRINTSTRING
  4360 4236 A0 26		 LDY> CODEORIGIN+$0639
  4360 4238 A9 39		 LDA< CODEORIGIN+$0639
  4360 423A 20 89 2B		 JSR @PRINTSTRING
  4361 423D 20 7B 2B			@printEOL
  4362
  4363 				; optimize FAIL (100, milf.pas), line = 892
  4364 					@printSTRING #CODEORIGIN+$065A
  4364 				 LDY> CODEORIGIN+$065A\ LDA< CODEORIGIN+$065A\ JSR @PRINTSTRING
  4364 4240 A0 26		 LDY> CODEORIGIN+$065A
  4364 4242 A9 5A		 LDA< CODEORIGIN+$065A
  4364 4244 20 89 2B		 JSR @PRINTSTRING
  4365 4247 20 7B 2B			@printEOL
  4366 424A 4C 5C 41			jmp ENDSECTOR
  4367 424D			l_1373
  4368
  4369 				; optimize OK (milf.pas), line = 896
  4370
  4371 424D AD 85 4B			lda END_SECTOR
  4372 4250 38 ED 81 4B			sub START_SECTOR
  4373 4254 85 A3			sta :STACKORIGIN+9
  4374 4256 AD 86 4B			lda END_SECTOR+1
  4375 4259 ED 82 4B			sbc START_SECTOR+1
  4376 425C 8D 80 4B			sta SECTORS_TO_READ+1
  4377 425F A5 A3			lda :STACKORIGIN+9
  4378 4261 18 69 01			add #$01
  4379 4264 8D 7F 4B			sta SECTORS_TO_READ
  4380 4267 90 03			scc
  4381 4269 EE 80 4B			inc SECTORS_TO_READ+1
  4382
  4383 				; optimize FAIL (100, milf.pas), line = 898
  4384 					@printSTRING #CODEORIGIN+$0663
  4384 				 LDY> CODEORIGIN+$0663\ LDA< CODEORIGIN+$0663\ JSR @PRINTSTRING
  4384 426C A0 26		 LDY> CODEORIGIN+$0663
  4384 426E A9 63		 LDA< CODEORIGIN+$0663
  4384 4270 20 89 2B		 JSR @PRINTSTRING
  4385 4273 AD 7F 4B			lda SECTORS_TO_READ
  4386 4276 AC 80 4B			ldy SECTORS_TO_READ+1
  4387 4279 20 D5 2B			jsr @printWORD._ay
  4388 					@printSTRING #CODEORIGIN+$066D
  4388 				 LDY> CODEORIGIN+$066D\ LDA< CODEORIGIN+$066D\ JSR @PRINTSTRING
  4388 427C A0 26		 LDY> CODEORIGIN+$066D
  4388 427E A9 6D		 LDA< CODEORIGIN+$066D
  4388 4280 20 89 2B		 JSR @PRINTSTRING
  4389 4283 20 7B 2B			@printEOL
  4390
  4391 				; optimize FAIL ('CLEARBUFFER', milf.pas), line = 900
  4392 4286 20 C2 30			jsr CLEARBUFFER
  4393
  4394 				; optimize OK (milf.pas), line = 902
  4395
  4396 4289 AD 81 4B 8D 7B 4B		mva START_SECTOR CURRENT_SECTOR
  4397 428F AD 82 4B 8D 7C 4B		mva START_SECTOR+1 CURRENT_SECTOR+1
  4398
  4399 				; optimize OK (milf.pas), line = 903
  4400
  4401 4295 AD 81 4B 8D B9 4C		mva START_SECTOR CURRENT_SECTOR_WRITE
  4402 429B AD 82 4B 8D BA 4C		mva START_SECTOR+1 CURRENT_SECTOR_WRITE+1
  4403
  4404 				; optimize OK (milf.pas), line = 905
  4405
  4406 42A1 A9 00 8D BB 4C		mva #$00 DESTINATION
  4407 42A6 A9 60 8D BC 4C		mva #$60 DESTINATION+1
  4408
  4409 				; optimize FAIL ('CRT.CURSOROFF', milf.pas), line = 907
  4410 42AB 20 BF 2E			jsr CRT.CURSOROFF
  4411
  4412 				; optimize FAIL ('CLEARLOGBUFFER', milf.pas), line = 908
  4413 42AE 20 D5 30			jsr CLEARLOGBUFFER
  4414
  4415 				; optimize OK (milf.pas), line = 909
  4416
  4417 42B1 A9 00 8D 7D 4B		mva #$00 SECTOR_INDEX
  4418 42B6 8D 7E 4B			sta SECTOR_INDEX+1
  4419
  4420 				; optimize FAIL (100, milf.pas), line = 911
  4421 42B9 20 7B 2B			@printEOL
  4422
  4423 				; --- WhileProlog
  4424 42BC 4C 3C 45			jmp l_13AA
  4425 42BF			l_13AB
  4426
  4427 				; optimize FAIL ('CLEARBUFFER', milf.pas), line = 915
  4428 42BF 20 C2 30			jsr CLEARBUFFER
  4429
  4430 				; optimize FAIL ('CRT.WHEREY', milf.pas), line = 917
  4431 42C2 20 8F 2F			jsr CRT.WHEREY
  4432 42C5 B5 9A 8D 69 4B		mva :STACKORIGIN,x CURSOR_Y
  4433 42CA CA				dex
  4434
  4435 				; optimize FAIL ('CRT.GOTOXY', milf.pas), line = 918
  4436 42CB E8				inx
  4437 42CC A9 03 95 9A			mva #$03 :STACKORIGIN,x
  4438 42D0 E8				inx
  4439 42D1 AD 69 4B 95 9A		mva CURSOR_Y :STACKORIGIN,x
  4440 42D6 20 6E 2F			jsr CRT.GOTOXY
  4441
  4442 				; optimize FAIL (100, milf.pas), line = 919
  4443 					@printSTRING #CODEORIGIN+$0678
  4443 				 LDY> CODEORIGIN+$0678\ LDA< CODEORIGIN+$0678\ JSR @PRINTSTRING
  4443 42D9 A0 26		 LDY> CODEORIGIN+$0678
  4443 42DB A9 78		 LDA< CODEORIGIN+$0678
  4443 42DD 20 89 2B		 JSR @PRINTSTRING
  4444 42E0 AD 7B 4B			lda CURRENT_SECTOR
  4445 42E3 AC 7C 4B			ldy CURRENT_SECTOR+1
  4446 42E6 20 D5 2B			jsr @printWORD._ay
  4447
  4448 				; optimize OK (milf.pas), line = 921
  4449
  4450 42E9 AD 7C 4B			lda CURRENT_SECTOR+1
  4451 42EC F0 03 4C 17 44		jne l_13D0
  4452 42F1 AD 7B 4B			lda CURRENT_SECTOR
  4453 42F4 C9 04			cmp #$04
  4454 42F6 90 03 4C 17 44		jcs l_13D0
  4455
  4456 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 922
  4457 42FB E8				inx
  4458 42FC AD 6E 4B 95 9A		mva SOURCE_DRIVE :STACKORIGIN,x
  4459 4301 E8				inx
  4460 4302 A9 52 95 9A			mva #$52 :STACKORIGIN,x
  4461 4306 E8				inx
  4462 4307 A9 40 95 9A			mva #$40 :STACKORIGIN,x
  4463 430B E8				inx
  4464 430C A9 07 95 9A			mva #$07 :STACKORIGIN,x
  4465 4310 E8				inx
  4466 4311 AD BB 4C 95 9A		mva DESTINATION :STACKORIGIN,x
  4467 4316 AD BC 4C 95 AA		mva DESTINATION+1 :STACKORIGIN+STACKWIDTH,x
  4468 431B E8				inx
  4469 431C A9 80 95 9A			mva #$80 :STACKORIGIN,x
  4470 4320 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4471 4324 E8				inx
  4472 4325 AD 7B 4B 95 9A		mva CURRENT_SECTOR :STACKORIGIN,x
  4473 432A AD 7C 4B 95 AA		mva CURRENT_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  4474 432F 20 C6 2F			jsr EXEC_SIO
  4475
  4476 				; optimize OK (milf.pas), line = 923
  4477
  4478 4332 AD 30 4B			lda SIORESULT
  4479 4335 10 4E			jpl l_13EF
  4480
  4481 				; optimize FAIL ('PUTTOLOG', milf.pas), line = 924
  4482 4337 E8				inx
  4483 4338 A9 72 95 9A			mva #$72 :STACKORIGIN,x
  4484 433C 20 06 3F			jsr PUTTOLOG
  4485
  4486 				; ------------------------------------------------------------
  4487
  4488 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  4489 				; as Pointer
  4490
  4491 433F E8				inx
  4492 4340 AD 30 4B 95 9A		mva SIORESULT :STACKORIGIN,x
  4493
  4494 				; ------------------------------------------------------------
  4495
  4496 				; Push WORD / SMALLINT / SHORTREAL / POINTER
  4497 				; as Pointer
  4498
  4499 4345 E8				inx
  4500 4346 AD 7B 4B 95 9A		mva CURRENT_SECTOR :STACKORIGIN,x
  4501 434B AD 7C 4B 95 AA		mva CURRENT_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  4502
  4503 				; ------------------------------------------------------------
  4504
  4505 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  4506 				; as Value $00000001 (1)
  4507
  4508 4350 E8				inx
  4509 4351 A9 01 95 9A			mva #$01 :STACKORIGIN,x
  4510
  4511 4355 20 BB 3C			jsr COPYERROR					; call Entry
  4512
  4513 				; GenerateCaseProlog
  4514 4358 CA				dex
  4515
  4516 				; GenerateCaseEqualityCheck
  4517 4359 B5 9B			lda :STACKORIGIN+1,x
  4518 435B C9 01			cmp #1
  4519 435D D0 06			jne l_1402
  4520 435F			@
  4521
  4522 435F 4C 75 45			jmp b_13AB					; break
  4523
  4524 				; GenerateCaseStatementEpilog
  4525 4362 4C 82 43			jmp a_0009
  4526 4365			l_1402
  4527
  4528 				; GenerateCaseEqualityCheck
  4529 4365 B5 9B			lda :STACKORIGIN+1,x
  4530 4367 C9 02			cmp #2
  4531 4369 D0 06			jne l_140B
  4532 436B			@
  4533
  4534 436B 4C 3C 45			jmp c_13AB					; continue
  4535
  4536 				; GenerateCaseStatementEpilog
  4537 436E 4C 82 43			jmp a_0009
  4538 4371			l_140B
  4539
  4540 				; GenerateCaseEqualityCheck
  4541 4371 B5 9B			lda :STACKORIGIN+1,x
  4542 4373 C9 03			cmp #3
  4543 4375 D0 0B			jne l_1414
  4544 4377			@
  4545
  4546 				; optimize FAIL (0, milf.pas), line = 928
  4547 4377 EE 7B 4B			inc CURRENT_SECTOR
  4548 437A D0 03			sne
  4549 437C EE 7C 4B			inc CURRENT_SECTOR+1
  4550
  4551 				; GenerateCaseStatementEpilog
  4552 437F 4C 82 43			jmp a_0009
  4553 4382			l_1414
  4554
  4555 				; GenerateCaseEpilog
  4556 4382			a_0009
  4557 4382 4C 8D 43			jmp l_1428
  4558 4385			l_13EF
  4559
  4560 				; optimize FAIL ('PUTTOLOG', milf.pas), line = 931
  4561 4385 E8				inx
  4562 4386 A9 6F 95 9A			mva #$6F :STACKORIGIN,x
  4563 438A 20 06 3F			jsr PUTTOLOG
  4564 438D			l_1428
  4565
  4566 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 933
  4567 438D E8				inx
  4568 438E AD 6F 4B 95 9A		mva DEST_DRIVE :STACKORIGIN,x
  4569 4393 E8				inx
  4570 4394 A9 50 95 9A			mva #$50 :STACKORIGIN,x
  4571 4398 E8				inx
  4572 4399 A9 80 95 9A			mva #$80 :STACKORIGIN,x
  4573 439D E8				inx
  4574 439E A9 07 95 9A			mva #$07 :STACKORIGIN,x
  4575 43A2 E8				inx
  4576 43A3 AD BB 4C 95 9A		mva DESTINATION :STACKORIGIN,x
  4577 43A8 AD BC 4C 95 AA		mva DESTINATION+1 :STACKORIGIN+STACKWIDTH,x
  4578 43AD E8				inx
  4579 43AE A9 80 95 9A			mva #$80 :STACKORIGIN,x
  4580 43B2 A9 00 95 AA			mva #$00 :STACKORIGIN+STACKWIDTH,x
  4581 43B6 E8				inx
  4582 43B7 AD 7B 4B 95 9A		mva CURRENT_SECTOR :STACKORIGIN,x
  4583 43BC AD 7C 4B 95 AA		mva CURRENT_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  4584 43C1 20 C6 2F			jsr EXEC_SIO
  4585
  4586 				; optimize OK (milf.pas), line = 934
  4587
  4588 43C4 AD 30 4B			lda SIORESULT
  4589 43C7 10 4B			jpl l_1448
  4590
  4591 				; optimize FAIL ('PUTTOLOG', milf.pas), line = 935
  4592 43C9 E8				inx
  4593 43CA A9 77 95 9A			mva #$77 :STACKORIGIN,x
  4594 43CE 20 06 3F			jsr PUTTOLOG
  4595
  4596 				; ------------------------------------------------------------
  4597
  4598 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  4599 				; as Pointer
  4600
  4601 43D1 E8				inx
  4602 43D2 AD 30 4B 95 9A		mva SIORESULT :STACKORIGIN,x
  4603
  4604 				; ------------------------------------------------------------
  4605
  4606 				; Push WORD / SMALLINT / SHORTREAL / POINTER
  4607 				; as Pointer
  4608
  4609 43D7 E8				inx
  4610 43D8 AD 7B 4B 95 9A		mva CURRENT_SECTOR :STACKORIGIN,x
  4611 43DD AD 7C 4B 95 AA		mva CURRENT_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  4612
  4613 				; ------------------------------------------------------------
  4614
  4615 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  4616 				; as Value $00000002 (2)
  4617
  4618 43E2 E8				inx
  4619 43E3 A9 02 95 9A			mva #$02 :STACKORIGIN,x
  4620
  4621 43E7 20 BB 3C			jsr COPYERROR					; call Entry
  4622
  4623 				; GenerateCaseProlog
  4624 43EA CA				dex
  4625
  4626 				; GenerateCaseEqualityCheck
  4627 43EB B5 9B			lda :STACKORIGIN+1,x
  4628 43ED C9 01			cmp #1
  4629 43EF D0 06			jne l_145B
  4630 43F1			@
  4631
  4632 43F1 4C 75 45			jmp b_13AB					; break
  4633
  4634 				; GenerateCaseStatementEpilog
  4635 43F4 4C 14 44			jmp a_000A
  4636 43F7			l_145B
  4637
  4638 				; GenerateCaseEqualityCheck
  4639 43F7 B5 9B			lda :STACKORIGIN+1,x
  4640 43F9 C9 02			cmp #2
  4641 43FB D0 06			jne l_1464
  4642 43FD			@
  4643
  4644 43FD 4C 3C 45			jmp c_13AB					; continue
  4645
  4646 				; GenerateCaseStatementEpilog
  4647 4400 4C 14 44			jmp a_000A
  4648 4403			l_1464
  4649
  4650 				; GenerateCaseEqualityCheck
  4651 4403 B5 9B			lda :STACKORIGIN+1,x
  4652 4405 C9 03			cmp #3
  4653 4407 D0 0B			jne l_146D
  4654 4409			@
  4655
  4656 				; optimize FAIL (0, milf.pas), line = 939
  4657 4409 EE 7B 4B			inc CURRENT_SECTOR
  4658 440C D0 03			sne
  4659 440E EE 7C 4B			inc CURRENT_SECTOR+1
  4660
  4661 				; GenerateCaseStatementEpilog
  4662 4411 4C 14 44			jmp a_000A
  4663 4414			l_146D
  4664
  4665 				; GenerateCaseEpilog
  4666 4414			a_000A
  4667 4414			l_1448
  4668 4414 4C 34 45			jmp l_1483
  4669 4417			l_13D0
  4670
  4671 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 943
  4672 4417 E8				inx
  4673 4418 AD 6E 4B 95 9A		mva SOURCE_DRIVE :STACKORIGIN,x
  4674 441D E8				inx
  4675 441E A9 52 95 9A			mva #$52 :STACKORIGIN,x
  4676 4422 E8				inx
  4677 4423 A9 40 95 9A			mva #$40 :STACKORIGIN,x
  4678 4427 E8				inx
  4679 4428 A9 07 95 9A			mva #$07 :STACKORIGIN,x
  4680 442C E8				inx
  4681 442D AD BB 4C 95 9A		mva DESTINATION :STACKORIGIN,x
  4682 4432 AD BC 4C 95 AA		mva DESTINATION+1 :STACKORIGIN+STACKWIDTH,x
  4683 4437 E8				inx
  4684 4438 AD 77 4B 95 9A		mva BYTES_PER_SECTOR :STACKORIGIN,x
  4685 443D AD 78 4B 95 AA		mva BYTES_PER_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  4686 4442 E8				inx
  4687 4443 AD 7B 4B 95 9A		mva CURRENT_SECTOR :STACKORIGIN,x
  4688 4448 AD 7C 4B 95 AA		mva CURRENT_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  4689 444D 20 C6 2F			jsr EXEC_SIO
  4690
  4691 				; optimize OK (milf.pas), line = 944
  4692
  4693 4450 AD 30 4B			lda SIORESULT
  4694 4453 10 4E			jpl l_14A2
  4695
  4696 				; optimize FAIL ('PUTTOLOG', milf.pas), line = 945
  4697 4455 E8				inx
  4698 4456 A9 72 95 9A			mva #$72 :STACKORIGIN,x
  4699 445A 20 06 3F			jsr PUTTOLOG
  4700
  4701 				; ------------------------------------------------------------
  4702
  4703 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  4704 				; as Pointer
  4705
  4706 445D E8				inx
  4707 445E AD 30 4B 95 9A		mva SIORESULT :STACKORIGIN,x
  4708
  4709 				; ------------------------------------------------------------
  4710
  4711 				; Push WORD / SMALLINT / SHORTREAL / POINTER
  4712 				; as Pointer
  4713
  4714 4463 E8				inx
  4715 4464 AD 7B 4B 95 9A		mva CURRENT_SECTOR :STACKORIGIN,x
  4716 4469 AD 7C 4B 95 AA		mva CURRENT_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  4717
  4718 				; ------------------------------------------------------------
  4719
  4720 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  4721 				; as Value $00000001 (1)
  4722
  4723 446E E8				inx
  4724 446F A9 01 95 9A			mva #$01 :STACKORIGIN,x
  4725
  4726 4473 20 BB 3C			jsr COPYERROR					; call Entry
  4727
  4728 				; GenerateCaseProlog
  4729 4476 CA				dex
  4730
  4731 				; GenerateCaseEqualityCheck
  4732 4477 B5 9B			lda :STACKORIGIN+1,x
  4733 4479 C9 01			cmp #1
  4734 447B D0 06			jne l_14B5
  4735 447D			@
  4736
  4737 447D 4C 75 45			jmp b_13AB					; break
  4738
  4739 				; GenerateCaseStatementEpilog
  4740 4480 4C A0 44			jmp a_000B
  4741 4483			l_14B5
  4742
  4743 				; GenerateCaseEqualityCheck
  4744 4483 B5 9B			lda :STACKORIGIN+1,x
  4745 4485 C9 02			cmp #2
  4746 4487 D0 06			jne l_14BE
  4747 4489			@
  4748
  4749 4489 4C 3C 45			jmp c_13AB					; continue
  4750
  4751 				; GenerateCaseStatementEpilog
  4752 448C 4C A0 44			jmp a_000B
  4753 448F			l_14BE
  4754
  4755 				; GenerateCaseEqualityCheck
  4756 448F B5 9B			lda :STACKORIGIN+1,x
  4757 4491 C9 03			cmp #3
  4758 4493 D0 0B			jne l_14C7
  4759 4495			@
  4760
  4761 				; optimize FAIL (0, milf.pas), line = 949
  4762 4495 EE 7B 4B			inc CURRENT_SECTOR
  4763 4498 D0 03			sne
  4764 449A EE 7C 4B			inc CURRENT_SECTOR+1
  4765
  4766 				; GenerateCaseStatementEpilog
  4767 449D 4C A0 44			jmp a_000B
  4768 44A0			l_14C7
  4769
  4770 				; GenerateCaseEpilog
  4771 44A0			a_000B
  4772 44A0 4C AB 44			jmp l_14DB
  4773 44A3			l_14A2
  4774
  4775 				; optimize FAIL ('PUTTOLOG', milf.pas), line = 952
  4776 44A3 E8				inx
  4777 44A4 A9 6F 95 9A			mva #$6F :STACKORIGIN,x
  4778 44A8 20 06 3F			jsr PUTTOLOG
  4779 44AB			l_14DB
  4780
  4781 				; optimize FAIL ('EXEC_SIO', milf.pas), line = 954
  4782 44AB E8				inx
  4783 44AC AD 6F 4B 95 9A		mva DEST_DRIVE :STACKORIGIN,x
  4784 44B1 E8				inx
  4785 44B2 A9 50 95 9A			mva #$50 :STACKORIGIN,x
  4786 44B6 E8				inx
  4787 44B7 A9 80 95 9A			mva #$80 :STACKORIGIN,x
  4788 44BB E8				inx
  4789 44BC A9 07 95 9A			mva #$07 :STACKORIGIN,x
  4790 44C0 E8				inx
  4791 44C1 AD BB 4C 95 9A		mva DESTINATION :STACKORIGIN,x
  4792 44C6 AD BC 4C 95 AA		mva DESTINATION+1 :STACKORIGIN+STACKWIDTH,x
  4793 44CB E8				inx
  4794 44CC AD 77 4B 95 9A		mva BYTES_PER_SECTOR :STACKORIGIN,x
  4795 44D1 AD 78 4B 95 AA		mva BYTES_PER_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  4796 44D6 E8				inx
  4797 44D7 AD 7B 4B 95 9A		mva CURRENT_SECTOR :STACKORIGIN,x
  4798 44DC AD 7C 4B 95 AA		mva CURRENT_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  4799 44E1 20 C6 2F			jsr EXEC_SIO
  4800
  4801 				; optimize OK (milf.pas), line = 955
  4802
  4803 44E4 AD 30 4B			lda SIORESULT
  4804 44E7 10 4B			jpl l_14FC
  4805
  4806 				; optimize FAIL ('PUTTOLOG', milf.pas), line = 956
  4807 44E9 E8				inx
  4808 44EA A9 77 95 9A			mva #$77 :STACKORIGIN,x
  4809 44EE 20 06 3F			jsr PUTTOLOG
  4810
  4811 				; ------------------------------------------------------------
  4812
  4813 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  4814 				; as Pointer
  4815
  4816 44F1 E8				inx
  4817 44F2 AD 30 4B 95 9A		mva SIORESULT :STACKORIGIN,x
  4818
  4819 				; ------------------------------------------------------------
  4820
  4821 				; Push WORD / SMALLINT / SHORTREAL / POINTER
  4822 				; as Pointer
  4823
  4824 44F7 E8				inx
  4825 44F8 AD 7B 4B 95 9A		mva CURRENT_SECTOR :STACKORIGIN,x
  4826 44FD AD 7C 4B 95 AA		mva CURRENT_SECTOR+1 :STACKORIGIN+STACKWIDTH,x
  4827
  4828 				; ------------------------------------------------------------
  4829
  4830 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  4831 				; as Value $00000002 (2)
  4832
  4833 4502 E8				inx
  4834 4503 A9 02 95 9A			mva #$02 :STACKORIGIN,x
  4835
  4836 4507 20 BB 3C			jsr COPYERROR					; call Entry
  4837
  4838 				; GenerateCaseProlog
  4839 450A CA				dex
  4840
  4841 				; GenerateCaseEqualityCheck
  4842 450B B5 9B			lda :STACKORIGIN+1,x
  4843 450D C9 01			cmp #1
  4844 450F D0 06			jne l_150F
  4845 4511			@
  4846
  4847 4511 4C 75 45			jmp b_13AB					; break
  4848
  4849 				; GenerateCaseStatementEpilog
  4850 4514 4C 34 45			jmp a_000C
  4851 4517			l_150F
  4852
  4853 				; GenerateCaseEqualityCheck
  4854 4517 B5 9B			lda :STACKORIGIN+1,x
  4855 4519 C9 02			cmp #2
  4856 451B D0 06			jne l_1518
  4857 451D			@
  4858
  4859 451D 4C 3C 45			jmp c_13AB					; continue
  4860
  4861 				; GenerateCaseStatementEpilog
  4862 4520 4C 34 45			jmp a_000C
  4863 4523			l_1518
  4864
  4865 				; GenerateCaseEqualityCheck
  4866 4523 B5 9B			lda :STACKORIGIN+1,x
  4867 4525 C9 03			cmp #3
  4868 4527 D0 0B			jne l_1521
  4869 4529			@
  4870
  4871 				; optimize FAIL (0, milf.pas), line = 960
  4872 4529 EE 7B 4B			inc CURRENT_SECTOR
  4873 452C D0 03			sne
  4874 452E EE 7C 4B			inc CURRENT_SECTOR+1
  4875
  4876 				; GenerateCaseStatementEpilog
  4877 4531 4C 34 45			jmp a_000C
  4878 4534			l_1521
  4879
  4880 				; GenerateCaseEpilog
  4881 4534			a_000C
  4882 4534			l_14FC
  4883 4534			l_1483
  4884
  4885 				; optimize FAIL (0, milf.pas), line = 965
  4886 4534 EE 7B 4B			inc CURRENT_SECTOR
  4887 4537 D0 03			sne
  4888 4539 EE 7C 4B			inc CURRENT_SECTOR+1
  4889 453C			c_13AB
  4890 453C			l_13AA
  4891
  4892 				; optimize OK (milf.pas), line = 913
  4893
  4894 453C				.LOCAL
  4895 453C A9 00			lda #$00
  4896 453E 38 ED 88 4B			sub END_SECTOR+3
  4897 4542 D0 21			bne L4
  4898 4544 A9 00			lda #$00
  4899 4546 CD 87 4B			cmp END_SECTOR+2
  4900 4549 D0 0E			bne L1
  4901 454B AD 7C 4B			lda CURRENT_SECTOR+1
  4902 454E CD 86 4B			cmp END_SECTOR+1
  4903 4551 D0 06			bne L1
  4904 4553 AD 7B 4B			lda CURRENT_SECTOR
  4905 4556 CD 85 4B			cmp END_SECTOR
  4906 4559 F0 10		L1	beq L5
  4907 455B B0 04			bcs L3
  4908 455D A9 FF			lda #$FF
  4909 455F D0 0A			bne L5
  4910 4561 A9 01		L3	lda #$01
  4911 4563 D0 06			bne L5
  4912 4565 50 04		L4	bvc L5
  4913 4567 49 FF			eor #$FF
  4914 4569 09 01			ora #$01
  4915 456B			L5
  4916 					.ENDL
  4917 456B 10 03 4C BF 42		jmi l_13AB
  4918 4570 D0 03 4C BF 42		jeq l_13AB
  4919 4575			b_13AB
  4920
  4921 				; optimize FAIL ('CRT.CURSORON', milf.pas), line = 969
  4922 4575 20 CF 2E			jsr CRT.CURSORON
  4923
  4924 				; optimize FAIL (100, milf.pas), line = 971
  4925 4578 20 7B 2B			@printEOL
  4926
  4927 				; optimize FAIL (100, milf.pas), line = 972
  4928 457B 20 7B 2B			@printEOL
  4929
  4930 				; optimize FAIL (100, milf.pas), line = 973
  4931 					@printSTRING #CODEORIGIN+$0696
  4931 				 LDY> CODEORIGIN+$0696\ LDA< CODEORIGIN+$0696\ JSR @PRINTSTRING
  4931 457E A0 26		 LDY> CODEORIGIN+$0696
  4931 4580 A9 96		 LDA< CODEORIGIN+$0696
  4931 4582 20 89 2B		 JSR @PRINTSTRING
  4932 4585 20 7B 2B			@printEOL
  4933
  4934 				; optimize OK (milf.pas), line = 975
  4935
  4936 4588 AD 80 4B			lda SECTORS_TO_READ+1
  4937 458B C9 0B			cmp #$0B
  4938 458D D0 05			bne @+
  4939 458F AD 7F 4B			lda SECTORS_TO_READ
  4940 4592 C9 41			cmp #$41
  4941 4594			@
  4942 4594 B0 60			jcs l_1552
  4943
  4944 				; optimize FAIL (100, milf.pas), line = 977
  4945 4596 20 7B 2B			@printEOL
  4946
  4947 				; optimize FAIL (100, milf.pas), line = 978
  4948 					@printSTRING #CODEORIGIN+$06A6
  4948 				 LDY> CODEORIGIN+$06A6\ LDA< CODEORIGIN+$06A6\ JSR @PRINTSTRING
  4948 4599 A0 26		 LDY> CODEORIGIN+$06A6
  4948 459B A9 A6		 LDA< CODEORIGIN+$06A6
  4948 459D 20 89 2B		 JSR @PRINTSTRING
  4949 45A0 20 7B 2B			@printEOL
  4950
  4951 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 980
  4952 45A3 20 8F 30			jsr CLEARKEYS
  4953 45A6			LOGFILEDIALOG
  4954
  4955 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 984
  4956 45A6 20 5A 2F			jsr CRT.KEYPRESSED
  4957 45A9 CA				dex
  4958 45AA B5 9B			lda :STACKORIGIN+1,x
  4959 45AC F0 0C			jeq l_1561
  4960
  4961 				; optimize FAIL ('CRT.READKEY', milf.pas), line = 984
  4962 45AE 20 E5 2E			jsr CRT.READKEY
  4963 45B1 B5 9A 8D 5B 4B		mva :STACKORIGIN,x KEY
  4964 45B6 CA				dex
  4965 45B7 4C BD 45			jmp l_156F
  4966 45BA			l_1561
  4967 45BA 4C A6 45			jmp LOGFILEDIALOG
  4968 45BD			l_156F
  4969
  4970 				; ------------------------------------------------------------
  4971
  4972 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  4973 				; as Pointer
  4974
  4975 45BD E8				inx
  4976 45BE AD 5B 4B 95 9A		mva KEY :STACKORIGIN,x
  4977
  4978 				; GenerateCaseProlog
  4979 45C3 CA				dex
  4980
  4981 				; GenerateCaseEqualityCheck
  4982 45C4 B5 9B			lda :STACKORIGIN+1,x
  4983 45C6 C9 59			cmp #89
  4984 45C8 F0 06			beq @+
  4985
  4986 				; GenerateCaseEqualityCheck
  4987 45CA B5 9B			lda :STACKORIGIN+1,x
  4988 45CC C9 79			cmp #121
  4989 45CE D0 11			jne l_157D
  4990 45D0			@
  4991
  4992 				; optimize FAIL ('WRITELOG', milf.pas), line = 987
  4993 45D0 E8				inx
  4994 45D1 AD 7F 4B 95 9A		mva SECTORS_TO_READ :STACKORIGIN,x
  4995 45D6 AD 80 4B 95 AA		mva SECTORS_TO_READ+1 :STACKORIGIN+STACKWIDTH,x
  4996 45DB 20 E0 3D			jsr WRITELOG
  4997
  4998 				; GenerateCaseStatementEpilog
  4999 45DE 4C F6 45			jmp a_000D
  5000 45E1			l_157D
  5001
  5002 				; GenerateCaseEqualityCheck
  5003 45E1 B5 9B			lda :STACKORIGIN+1,x
  5004 45E3 C9 4E			cmp #78
  5005 45E5 F0 06			beq @+
  5006
  5007 				; GenerateCaseEqualityCheck
  5008 45E7 B5 9B			lda :STACKORIGIN+1,x
  5009 45E9 C9 6E			cmp #110
  5010 45EB D0 06			jne l_158B
  5011 45ED			@
  5012 45ED 4C F9 45			jmp COPYEXIT
  5013
  5014 				; GenerateCaseStatementEpilog
  5015 45F0 4C F6 45			jmp a_000D
  5016 45F3			l_158B
  5017 45F3 4C A6 45			jmp LOGFILEDIALOG
  5018
  5019 				; GenerateCaseEpilog
  5020 45F6			a_000D
  5021 45F6			l_1552
  5022
  5023 				; optimize FAIL ('PRESSKEY', milf.pas), line = 993
  5024 45F6 20 9A 30			jsr PRESSKEY
  5025 45F9			COPYEXIT
  5026
  5027 				; optimize FAIL ('WRITEMENU', milf.pas), line = 997
  5028 45F9 20 94 34			jsr WRITEMENU
  5029
  5030 				; ------------------------------------------------------------
  5031
  5032 = 4CB9			CURRENT_SECTOR_WRITE	= DATAORIGIN+$05BD
  5033 = 4CBB			DESTINATION	= DATAORIGIN+$05BF
  5034
  5035 = 4CB9			@VarData	= CURRENT_SECTOR_WRITE
  5036 = 0004			@VarDataSize	= 4
  5037
  5038 45FC			@exit
  5039 					.ifdef @new
  5040 					lda <@VarData
  5041 					sta :ztmp
  5042 					lda >@VarData
  5043 					ldy #@VarDataSize-1
  5044 					jmp @FreeMem
  5045 					eif
  5046 45FC 60				rts						; ret
  5047 				.endl
  5048 45FD			l_06E6
  5049 45FD			START
  5050
  5051 				; optimize OK (milf.pas), line = 1008
  5052
  5053 45FD A9 01 8D 6E 4B		mva #$01 SOURCE_DRIVE
  5054
  5055 				; optimize OK (milf.pas), line = 1009
  5056
  5057 4602 A9 FF 8D 6F 4B		mva #$FF DEST_DRIVE
  5058
  5059 				; optimize OK (milf.pas), line = 1011
  5060
  5061 4607 A9 01 8D 71 4B		mva #$01 SOURCE_DRIVE_NOT_CONFIGURABLE
  5062
  5063 				; optimize OK (milf.pas), line = 1012
  5064
  5065 460C 8D 72 4B			sta DEST_DRIVE_NOT_CONFIGURABLE
  5066
  5067 				; optimize FAIL ('CRT.CLRSCR', milf.pas), line = 1014
  5068 460F 20 DF 2E			jsr CRT.CLRSCR
  5069
  5070 				; optimize FAIL ('CLEARPERCOMBUFFER', milf.pas), line = 1015
  5071 4612 20 ED 30			jsr CLEARPERCOMBUFFER
  5072
  5073 				; optimize FAIL (100, milf.pas), line = 1017
  5074 					@printSTRING #CODEORIGIN+$06C5
  5074 				 LDY> CODEORIGIN+$06C5\ LDA< CODEORIGIN+$06C5\ JSR @PRINTSTRING
  5074 4615 A0 26		 LDY> CODEORIGIN+$06C5
  5074 4617 A9 C5		 LDA< CODEORIGIN+$06C5
  5074 4619 20 89 2B		 JSR @PRINTSTRING
  5075 461C 20 7B 2B			@printEOL
  5076
  5077 				; optimize FAIL (100, milf.pas), line = 1018
  5078 461F 20 7B 2B			@printEOL
  5079
  5080 				; optimize FAIL ('WRITEMENU', milf.pas), line = 1020
  5081 4622 20 94 34			jsr WRITEMENU
  5082 4625			MENU
  5083
  5084 				; optimize FAIL ('CRT.KEYPRESSED', milf.pas), line = 1024
  5085 4625 20 5A 2F			jsr CRT.KEYPRESSED
  5086 4628 CA				dex
  5087 4629 B5 9B			lda :STACKORIGIN+1,x
  5088 462B F0 09			jeq l_15B6
  5089
  5090 				; optimize FAIL ('CRT.READKEY', milf.pas), line = 1024
  5091 462D 20 E5 2E			jsr CRT.READKEY
  5092 4630 B5 9A 8D 5B 4B		mva :STACKORIGIN,x KEY
  5093 4635 CA				dex
  5094 4636			l_15B6
  5095
  5096 				; ------------------------------------------------------------
  5097
  5098 				; Push BYTE / CHAR / SHORTINT / BOOLEAN
  5099 				; as Pointer
  5100
  5101 4636 E8				inx
  5102 4637 AD 5B 4B 95 9A		mva KEY :STACKORIGIN,x
  5103
  5104 				; GenerateCaseProlog
  5105 463C CA				dex
  5106
  5107 				; GenerateCaseEqualityCheck
  5108 463D B5 9B			lda :STACKORIGIN+1,x
  5109 463F C9 52			cmp #82
  5110 4641 F0 06			beq @+
  5111
  5112 				; GenerateCaseEqualityCheck
  5113 4643 B5 9B			lda :STACKORIGIN+1,x
  5114 4645 C9 72			cmp #114
  5115 4647 D0 06			jne l_15CB
  5116 4649			@
  5117
  5118 				; optimize FAIL ('WRITEMENU', milf.pas), line = 1027
  5119 4649 20 94 34			jsr WRITEMENU
  5120
  5121 				; GenerateCaseStatementEpilog
  5122 464C 4C D0 46			jmp a_000E
  5123 464F			l_15CB
  5124
  5125 				; GenerateCaseEqualityCheck
  5126 464F B5 9B			lda :STACKORIGIN+1,x
  5127 4651 C9 57			cmp #87
  5128 4653 F0 06			beq @+
  5129
  5130 				; GenerateCaseEqualityCheck
  5131 4655 B5 9B			lda :STACKORIGIN+1,x
  5132 4657 C9 77			cmp #119
  5133 4659 D0 06			jne l_15D7
  5134 465B			@
  5135
  5136 				; optimize FAIL ('WRITEPERCOM', milf.pas), line = 1028
  5137 465B 20 78 39			jsr WRITEPERCOM
  5138
  5139 				; GenerateCaseStatementEpilog
  5140 465E 4C D0 46			jmp a_000E
  5141 4661			l_15D7
  5142
  5143 				; GenerateCaseEqualityCheck
  5144 4661 B5 9B			lda :STACKORIGIN+1,x
  5145 4663 C9 46			cmp #70
  5146 4665 F0 06			beq @+
  5147
  5148 				; GenerateCaseEqualityCheck
  5149 4667 B5 9B			lda :STACKORIGIN+1,x
  5150 4669 C9 66			cmp #102
  5151 466B D0 06			jne l_15E3
  5152 466D			@
  5153
  5154 				; optimize FAIL ('FORMAT', milf.pas), line = 1029
  5155 466D 20 FD 35			jsr FORMAT
  5156
  5157 				; GenerateCaseStatementEpilog
  5158 4670 4C D0 46			jmp a_000E
  5159 4673			l_15E3
  5160
  5161 				; GenerateCaseEqualityCheck
  5162 4673 B5 9B			lda :STACKORIGIN+1,x
  5163 4675 C9 44			cmp #68
  5164 4677 F0 06			beq @+
  5165
  5166 				; GenerateCaseEqualityCheck
  5167 4679 B5 9B			lda :STACKORIGIN+1,x
  5168 467B C9 64			cmp #100
  5169 467D D0 06			jne l_15EF
  5170 467F			@
  5171
  5172 				; optimize FAIL ('CHANGEDRIVES', milf.pas), line = 1030
  5173 467F 20 0E 38			jsr CHANGEDRIVES
  5174
  5175 				; GenerateCaseStatementEpilog
  5176 4682 4C D0 46			jmp a_000E
  5177 4685			l_15EF
  5178
  5179 				; GenerateCaseEqualityCheck
  5180 4685 B5 9B			lda :STACKORIGIN+1,x
  5181 4687 C9 43			cmp #67
  5182 4689 F0 06			beq @+
  5183
  5184 				; GenerateCaseEqualityCheck
  5185 468B B5 9B			lda :STACKORIGIN+1,x
  5186 468D C9 63			cmp #99
  5187 468F D0 06			jne l_15FB
  5188 4691			@
  5189
  5190 				; optimize FAIL ('COPY', milf.pas), line = 1031
  5191 4691 20 EE 3F			jsr COPY
  5192
  5193 				; GenerateCaseStatementEpilog
  5194 4694 4C D0 46			jmp a_000E
  5195 4697			l_15FB
  5196
  5197 				; GenerateCaseEqualityCheck
  5198 4697 B5 9B			lda :STACKORIGIN+1,x
  5199 4699 C9 58			cmp #88
  5200 469B F0 06			beq @+
  5201
  5202 				; GenerateCaseEqualityCheck
  5203 469D B5 9B			lda :STACKORIGIN+1,x
  5204 469F C9 78			cmp #120
  5205 46A1 D0 06			jne l_1607
  5206 46A3			@
  5207
  5208 				; optimize FAIL ('SWAPDRIVES', milf.pas), line = 1032
  5209 46A3 20 7F 35			jsr SWAPDRIVES
  5210
  5211 				; GenerateCaseStatementEpilog
  5212 46A6 4C D0 46			jmp a_000E
  5213 46A9			l_1607
  5214
  5215 				; GenerateCaseEqualityCheck
  5216 46A9 B5 9B			lda :STACKORIGIN+1,x
  5217 46AB C9 51			cmp #81
  5218 46AD F0 06			beq @+
  5219
  5220 				; GenerateCaseEqualityCheck
  5221 46AF B5 9B			lda :STACKORIGIN+1,x
  5222 46B1 C9 71			cmp #113
  5223 46B3 D0 06			jne l_1613
  5224 46B5			@
  5225
  5226 				; optimize FAIL ('EXITTODOS', milf.pas), line = 1033
  5227 46B5 20 6B 30			jsr EXITTODOS
  5228
  5229 				; GenerateCaseStatementEpilog
  5230 46B8 4C D0 46			jmp a_000E
  5231 46BB			l_1613
  5232
  5233 				; GenerateCaseEqualityCheck
  5234 46BB B5 9B			lda :STACKORIGIN+1,x
  5235 46BD C9 42			cmp #66
  5236 46BF F0 06			beq @+
  5237
  5238 				; GenerateCaseEqualityCheck
  5239 46C1 B5 9B			lda :STACKORIGIN+1,x
  5240 46C3 C9 62			cmp #98
  5241 46C5 D0 06			jne l_161F
  5242 46C7			@
  5243
  5244 				; optimize FAIL ('COLDSTART', milf.pas), line = 1034
  5245 46C7 20 70 30			jsr COLDSTART
  5246
  5247 				; GenerateCaseStatementEpilog
  5248 46CA 4C D0 46			jmp a_000E
  5249 46CD			l_161F
  5250 46CD 4C 25 46			jmp MENU
  5251
  5252 				; GenerateCaseEpilog
  5253 46D0			a_000E
  5254
  5255 				; optimize FAIL ('CLEARKEYS', milf.pas), line = 1038
  5256 46D0 20 8F 30			jsr CLEARKEYS
  5257 46D3 4C 25 46			jmp MENU
  5258
  5259 				; ------------------------------------------------------------
  5260
  5261 = 0040			SIO_READ	= $40
  5262 = 0080			SIO_WRITE	= $80
  5263 = 0000			SIO_NONE	= $00
  5264 = 00C0			SIO_READ_WRITE	= $C0
  5265 = 0021			FORMAT_DISK	= $21
  5266 = 0021			FORMAT_SINGLE	= $21
  5267 = 0022			FORMAT_ENHANCED	= $22
  5268 = 004E			READ_PERCOM	= $4E
  5269 = 004F			WRITE_PERCOM	= $4F
  5270 = 0050			PUT_SECTOR	= $50
  5271 = 0052			READ_SECTOR	= $52
  5272 = 0053			READ_STATUS	= $53
  5273 = 0600			PERCOM_BUFFER_MEM	= $0600
  5274 = 6000			COPY_BUFFER_MEM	= $6000
  5275 = 6200			LOG_BUFFER	= $6200
  5276 = 0072			LOG_READ_ERROR	= $72
  5277 = 006F			LOG_READ_SUCCESS	= $6F
  5278 = 0077			LOG_WRITE_ERROR	= $77
  5279 = 009B			EOL	= $9B
  5280 = 0300			DDEVIC	= $0300
  5281 = 0301			DUNIT	= $0301
  5282 = 0302			DCOMND	= $0302
  5283 = 0303			DSTATS	= $0303
  5284 = 0304			DBUFLO	= $0304
  5285 = 0305			DBUFHI	= $0305
  5286 = 0306			DTIMLO	= $0306
  5287 = 0307			DUNUSE	= $0307
  5288 = 0308			DBYTLO	= $0308
  5289 = 0309			DBYTHI	= $0309
  5290 = 030A			DAUX1	= $030A
  5291 = 030B			DAUX2	= $030B
  5292 = 26DF			adr.SSSD	= CODEORIGIN+$06DF
  5293 46D6			.var SSSD	= adr.SSSD .word
  5294 = 26EB			adr.SSED	= CODEORIGIN+$06EB
  5295 46D6			.var SSED	= adr.SSED .word
  5296 = 26F7			adr.SSDD	= CODEORIGIN+$06F7
  5297 46D6			.var SSDD	= adr.SSDD .word
  5298 = 2703			adr.DSDD	= CODEORIGIN+$0703
  5299 46D6			.var DSDD	= adr.DSDD .word
  5300 = 270F			adr.DSQD	= CODEORIGIN+$070F
  5301 46D6			.var DSQD	= adr.DSQD .word
  5302 = 4B22			adr.PERCOMBLOCK	= DATAORIGIN+$0426
  5303 46D6			.var PERCOMBLOCK	= adr.PERCOMBLOCK .word
  5304 = 02FC			CH	= $02FC
  5305 = 4B2E			RESULT	= DATAORIGIN+$0432
  5306 = 4B30			SIORESULT	= DATAORIGIN+$0434
  5307 = 4B31			CIORESULT	= DATAORIGIN+$0435
  5308 = 4B32			TMPBOOL	= DATAORIGIN+$0436
  5309 = 4B33			TMPBYTE	= DATAORIGIN+$0437
  5310 = 4B34			TMPBYTE2	= DATAORIGIN+$0438
  5311 = 4B35			TMPWORD	= DATAORIGIN+$0439
  5312 = 4B37			adr.TMPSTRING	= DATAORIGIN+$043B
  5313 46D6			.var TMPSTRING	= adr.TMPSTRING .word
  5314 = 4B49			adr.TMPSTRING2	= DATAORIGIN+$044D
  5315 46D6			.var TMPSTRING2	= adr.TMPSTRING2 .word
  5316 = 4B5B			KEY	= DATAORIGIN+$045F
  5317 46D6			.var F	= DATAORIGIN+$0460 .word
  5318 = 4B68			CODE	= DATAORIGIN+$046C
  5319 = 4B69			CURSOR_Y	= DATAORIGIN+$046D
  5320 = 4B6A			REQUESTEDSECTORS	= DATAORIGIN+$046E
  5321 = 4B6C			REQUESTEDSECTORSIZE	= DATAORIGIN+$0470
  5322 = 4B6E			SOURCE_DRIVE	= DATAORIGIN+$0472
  5323 = 4B6F			DEST_DRIVE	= DATAORIGIN+$0473
  5324 = 4B70			SELECTED_DRIVE	= DATAORIGIN+$0474
  5325 = 4B71			SOURCE_DRIVE_NOT_CONFIGURABLE	= DATAORIGIN+$0475
  5326 = 4B72			DEST_DRIVE_NOT_CONFIGURABLE	= DATAORIGIN+$0476
  5327 = 4B73			BYTES_PER_SECTOR_SOURCE	= DATAORIGIN+$0477
  5328 = 4B75			BYTES_PER_SECTOR_DEST	= DATAORIGIN+$0479
  5329 = 4B77			BYTES_PER_SECTOR	= DATAORIGIN+$047B
  5330 = 4B79			NUMBER_OF_SECTORS	= DATAORIGIN+$047D
  5331 = 4B7B			CURRENT_SECTOR	= DATAORIGIN+$047F
  5332 = 4B7D			SECTOR_INDEX	= DATAORIGIN+$0481
  5333 = 4B7F			SECTORS_TO_READ	= DATAORIGIN+$0483
  5334 = 4B81			START_SECTOR	= DATAORIGIN+$0485
  5335 = 4B85			END_SECTOR	= DATAORIGIN+$0489
  5336 46D6			@exit
  5337
  5338 46D6 A2 00		@halt	ldx #0
  5339 46D8 9A				txs
  5340 					.ifdef MAIN.@DEFINES.ROMOFF
  5341 					inc portb
  5342 					.endif
  5343
  5344 46D9 60				rts
  5345
  5346 				; ------------------------------------------------------------
  5347
  5348 46DA 00 00 00 00 00 00 + IOCB@COPY	:16 brk
  5349
  5350 				; ------------------------------------------------------------
  5351
  5352 46EA			.local	@DEFINES
  5353 46EA			ATARI
  5354 				.endl
  5355
  5356 = 46EA DF 26		SSSD
  5356 = 46EC EB 26		SSED
  5356 = 46EE F7 26		SSDD
  5356 = 46F0 03 27		DSDD
  5356 = 46F2 0F 27		DSQD
  5356 = 46F4 22 4B		PERCOMBLOCK
  5356 = 46F6 37 4B		TMPSTRING
  5356 = 46F8 49 4B		TMPSTRING2
  5356 = 46FA 5C 4B		F
  5356 				.endl							; MAIN
  5357
  5358 				; ------------------------------------------------------------
  5359 				; ------------------------------------------------------------
  5360
  5361 				.macro	UNITINITIALIZATION
  5362 				
  5363 					.ifdef MAIN.SYSTEM.@UnitInit
  5364 					jsr MAIN.SYSTEM.@UnitInit
  5365 					eif
  5366 				
  5367 					.ifdef MAIN.ATARI.@UnitInit
  5368 					jsr MAIN.ATARI.@UnitInit
  5369 					eif
  5370 				
  5371 					.ifdef MAIN.CRT.@UnitInit
  5372 					jsr MAIN.CRT.@UnitInit
  5373 					eif
  5374 				.endm
  5375
  5376 				; ------------------------------------------------------------
  5377
  5378 					ift .SIZEOF(MAIN.SYSTEM) > 0
  5379 					.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
  5379 				SYSTEM: $2CB8..$2EBE
  5380 					eif
  5381
  5382 					ift .SIZEOF(MAIN.ATARI) > 0
  5383 					.print 'ATARI: ',MAIN.ATARI,'..',MAIN.ATARI+.SIZEOF(MAIN.ATARI)-1
  5384 					eif
  5385
  5386 					ift .SIZEOF(MAIN.CRT) > 0
  5387 					.print 'CRT: ',MAIN.CRT,'..',MAIN.CRT+.SIZEOF(MAIN.CRT)-1
  5387 				CRT: $2EBF..$2F9B
  5388 					eif
  5389
  5390 					.print 'CODE: ',CODEORIGIN,'..',*-1
  5390 				CODE: $2000..$46FB
  5391
  5392 				; ------------------------------------------------------------
  5393
  5394 46FC			DATAORIGIN
  5395 46FC 28 00 18 00 2D 0C	.by  $28 $00 $18 $00 $2D $0C
  5396
  5397 = 0006			VARINITSIZE	= *-DATAORIGIN
  5398 = 05C1			VARDATASIZE	= 1473
  5399
  5400 = 4CBD			PROGRAMSTACK	= DATAORIGIN+VARDATASIZE
  5401
  5402 					.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK
  5402 				DATA: $46FC..$4CBD
  5403
  5404 02E0-02E1> 7B 2C			run START
  5405
  5406 				; ------------------------------------------------------------
  5407
  5408 				.macro	STATICDATA
  5409 				.by  $0C $50 $72 $65 $73 $73 $20 $6B  $65 $79 $2E $2E $2E $00 $00 $00  $17 $44 $72 $69 $76 $65 $20 $64
  5410 				.by  $6F $65 $73 $20 $6E $6F $74 $20  $72 $65 $73 $70 $6F $6E $64 $2E  $00 $1E $44 $72 $69 $76 $65 $20
  5411 				.by  $64 $6F $65 $73 $20 $6E $6F $74  $20 $73 $75 $70 $70 $6F $72 $74  $20 $50 $45 $52 $43 $4F $4D $2E
  5412 				.by  $00 $21 $50 $72 $6F $62 $61 $62  $6C $79 $20 $41 $74 $61 $72 $69  $20 $38 $31 $30 $20 $6F $72 $20
  5413 				.by  $41 $74 $61 $72 $69 $20 $31 $30  $35 $30 $2E $00 $1B $54 $72 $79  $69 $6E $67 $20 $74 $6F $20 $64
  5414 				.by  $65 $74 $65 $63 $74 $20 $64 $65  $6E $73 $69 $74 $79 $2E $2E $2E  $00 $0C $20 $73 $65 $63 $74 $6F
  5415 				.by  $72 $73 $20 $6F $66 $20 $00 $07  $20 $62 $79 $74 $65 $73 $2E $00  $08 $53 $74 $61 $74 $75 $73 $3A
  5416 				.by  $20 $00 $06 $65 $72 $72 $6F $72  $20 $00 $02 $4F $4B $00 $17 $43  $75 $72 $72 $65 $6E $74 $20 $73
  5417 				.by  $6F $75 $72 $63 $65 $20 $64 $72  $69 $76 $65 $3A $20 $44 $00 $25  $2D $2D $2D $2D $2D $2D $2D $2D
  5418 				.by  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D  $2D $2D $2D $2D $2D $2D $2D $2D
  5419 				.by  $2D $2D $2D $2D $2D $00 $1C $43  $75 $72 $72 $65 $6E $74 $20 $64  $65 $73 $74 $69 $6E $61 $74 $69
  5420 				.by  $6F $6E $20 $64 $72 $69 $76 $65  $3A $20 $44 $00 $19 $44 $65 $73  $74 $69 $6E $61 $74 $69 $6F $6E
  5421 				.by  $20 $64 $72 $69 $76 $65 $20 $6E  $6F $74 $20 $73 $65 $74 $00 $1C  $D2 $20 $2D $20 $52 $65 $61 $64
  5422 				.by  $20 $64 $72 $69 $76 $65 $20 $63  $6F $6E $66 $69 $67 $75 $72 $61  $74 $69 $6F $6E $00 $1D $D7 $20
  5423 				.by  $2D $20 $57 $72 $69 $74 $65 $20  $64 $72 $69 $76 $65 $20 $63 $6F  $6E $66 $69 $67 $75 $72 $61 $74
  5424 				.by  $69 $6F $6E $00 $10 $C6 $20 $2D  $20 $46 $6F $72 $6D $61 $74 $20  $64 $72 $69 $76 $65 $00 $22 $C4
  5425 				.by  $20 $2D $20 $53 $65 $74 $20 $73  $6F $75 $72 $63 $65 $2C $20 $64  $65 $73 $74 $69 $6E $61 $74 $69
  5426 				.by  $6F $6E $20 $64 $72 $69 $76 $65  $73 $00 $23 $D8 $20 $2D $20 $45  $78 $63 $68 $61 $6E $67 $65 $20
  5427 				.by  $73 $6F $75 $72 $63 $65 $20 $61  $6E $64 $20 $64 $65 $73 $74 $69  $6E $61 $74 $69 $6F $6E $00 $10
  5428 				.by  $C3 $20 $2D $20 $43 $6F $70 $79  $20 $73 $65 $63 $74 $6F $72 $73  $00 $0F $D1 $20 $2D $20 $45 $78
  5429 				.by  $69 $74 $20 $74 $6F $20 $44 $4F  $53 $00 $0E $C2 $20 $2D $20 $43  $6F $6C $64 $20 $73 $74 $61 $72
  5430 				.by  $74 $00 $19 $4F $6E $65 $20 $6F  $66 $20 $64 $72 $69 $76 $65 $73  $20 $69 $73 $20 $6E $6F $74 $20
  5431 				.by  $73 $65 $74 $2E $00 $12 $43 $61  $6E $20 $6E $6F $74 $20 $65 $78  $63 $68 $61 $6E $67 $65 $2E $20
  5432 				.by  $00 $13 $44 $72 $69 $76 $65 $20  $77 $65 $72 $65 $20 $73 $77 $61  $70 $70 $65 $64 $2E $00 $10 $53
  5433 				.by  $20 $2D $20 $53 $6F $75 $72 $63  $65 $20 $64 $72 $69 $76 $65 $00  $15 $44 $20 $2D $20 $44 $65 $73
  5434 				.by  $74 $69 $6E $61 $74 $69 $6F $6E  $20 $64 $72 $69 $76 $65 $00 $1E  $54 $68 $69 $73 $20 $64 $72 $69
  5435 				.by  $76 $65 $20 $69 $73 $20 $6E $6F  $74 $20 $63 $6F $6E $66 $69 $67  $75 $72 $61 $62 $6C $65 $00 $05
  5436 				.by  $4F $6E $6C $79 $20 $00 $0B $D3  $20 $2D $20 $39 $30 $20 $4B $42  $2C $20 $00 $0A $C5 $20 $2D $20
  5437 				.by  $31 $33 $30 $20 $4B $42 $00 $18  $64 $65 $6E $73 $69 $74 $69 $65  $73 $20 $61 $72 $65 $20 $61 $76
  5438 				.by  $61 $69 $6C $61 $62 $6C $65 $2E  $00 $10 $46 $6F $72 $6D $61 $74  $74 $69 $6E $67 $20 $64 $69 $73
  5439 				.by  $6B $2E $00 $06 $73 $6F $75 $72  $63 $65 $00 $0B $64 $65 $73 $74  $69 $6E $61 $74 $69 $6F $6E $00
  5440 				.by  $07 $53 $65 $6C $65 $63 $74 $20  $00 $13 $20 $64 $72 $69 $76 $65  $20 $6E $75 $6D $62 $65 $72 $20
  5441 				.by  $28 $31 $2D $38 $29 $00 $21 $44  $65 $73 $74 $69 $6E $61 $74 $69  $6F $6E $20 $64 $72 $69 $76 $65
  5442 				.by  $20 $6E $75 $6D $62 $65 $72 $20  $6D $75 $73 $74 $20 $62 $65 $20  $00 $1D $64 $69 $66 $66 $65 $72
  5443 				.by  $65 $6E $74 $20 $74 $68 $61 $6E  $20 $73 $6F $75 $72 $63 $65 $20  $6E $75 $6D $62 $65 $72 $2E $00
  5444 				.by  $1F $54 $68 $69 $73 $20 $64 $72  $69 $76 $65 $20 $69 $73 $20 $6E  $6F $74 $20 $63 $6F $6E $66 $69
  5445 				.by  $67 $75 $72 $61 $62 $6C $65 $2E  $00 $0E $50 $72 $65 $73 $73 $20  $61 $6E $79 $20 $6B $65 $79 $2E
  5446 				.by  $00 $1B $53 $65 $6C $65 $63 $74  $20 $64 $72 $69 $76 $65 $20 $63  $6F $6E $66 $69 $67 $75 $72 $61
  5447 				.by  $74 $69 $6F $6E $3A $00 $12 $31  $20 $2D $20 $53 $53 $20 $53 $44  $20 $20 $28 $39 $30 $20 $4B $42
  5448 				.by  $29 $00 $12 $32 $20 $2D $20 $53  $53 $20 $45 $44 $20 $28 $31 $33  $30 $20 $4B $42 $29 $00 $12 $33
  5449 				.by  $20 $2D $20 $53 $53 $20 $44 $44  $20 $28 $31 $38 $30 $20 $4B $42  $29 $00 $12 $34 $20 $2D $20 $44
  5450 				.by  $53 $20 $44 $44 $20 $28 $33 $36  $30 $20 $4B $42 $29 $00 $12 $35  $20 $2D $20 $44 $53 $20 $51 $44
  5451 				.by  $20 $28 $37 $32 $30 $20 $4B $42  $29 $00 $17 $43 $6F $6E $66 $69  $67 $75 $72 $61 $74 $69 $6F $6E
  5452 				.by  $20 $63 $6F $6E $66 $69 $72 $6D  $65 $64 $00 $23 $57 $61 $72 $6E  $69 $6E $67 $2E $20 $44 $72 $69
  5453 				.by  $76 $65 $20 $6D $61 $79 $20 $6E  $6F $74 $20 $73 $75 $70 $70 $6F  $72 $74 $20 $74 $68 $61 $74 $00
  5454 				.by  $24 $63 $6F $6E $66 $69 $67 $75  $72 $61 $74 $69 $6F $6E $2E $20  $50 $72 $6F $63 $65 $65 $64 $20
  5455 				.by  $77 $69 $74 $68 $20 $63 $61 $75  $74 $69 $6F $6E $21 $00 $07 $72  $65 $61 $64 $69 $6E $67 $00 $07
  5456 				.by  $77 $72 $69 $74 $69 $6E $67 $00  $06 $45 $72 $72 $6F $72 $20 $00  $08 $20 $73 $65 $63 $74 $6F $72
  5457 				.by  $20 $00 $0B $C1 $20 $2D $20 $41  $62 $6F $72 $74 $2C $20 $00 $0B  $D2 $20 $2D $20 $52 $65 $74 $72
  5458 				.by  $79 $2C $20 $00 $09 $D3 $20 $2D  $20 $53 $6B $69 $70 $2C $00 $1E  $D7 $20 $2D $20 $77 $72 $69 $74
  5459 				.by  $65 $20 $62 $75 $66 $66 $65 $72  $20 $61 $6E $64 $20 $63 $6F $6E  $74 $69 $6E $75 $65 $2E $00 $21
  5460 				.by  $45 $6E $74 $65 $72 $20 $66 $69  $6C $65 $6E $61 $6D $65 $20 $77  $69 $74 $68 $20 $64 $72 $69 $76
  5461 				.by  $65 $20 $6E $75 $6D $62 $65 $72  $2E $00 $12 $45 $67 $2E $20 $44  $31 $3A $4C $4F $47 $46 $49 $4C
  5462 				.by  $45 $2E $4C $4F $47 $00 $1B $42  $72 $65 $61 $6B $20 $6B $65 $79  $20 $70 $72 $65 $73 $73 $65 $64
  5463 				.by  $2C $20 $61 $62 $6F $72 $74 $69  $6E $67 $00 $0A $46 $69 $6C $65  $20 $73 $61 $76 $65 $64 $00 $1A
  5464 				.by  $44 $65 $73 $74 $69 $6E $61 $74  $69 $6F $6E $20 $64 $72 $69 $76  $65 $20 $6E $6F $74 $20 $73 $65
  5465 				.by  $74 $2E $00 $24 $53 $65 $63 $74  $6F $72 $20 $73 $69 $7A $65 $20  $69 $6E $20 $64 $65 $73 $74 $69
  5466 				.by  $6E $61 $74 $69 $6F $6E $20 $64  $72 $69 $76 $65 $20 $64 $6F $20  $00 $20 $6E $6F $74 $20 $6D $61
  5467 				.by  $74 $63 $68 $20 $73 $65 $63 $74  $6F $72 $20 $73 $69 $7A $65 $20  $69 $6E $20 $73 $6F $75 $72 $63
  5468 				.by  $65 $20 $00 $1A $64 $72 $69 $76  $65 $2E $20 $41 $72 $65 $20 $79  $6F $75 $20 $73 $75 $72 $65 $20
  5469 				.by  $28 $59 $2F $4E $29 $3F $00 $0D  $53 $74 $61 $72 $74 $20 $73 $65  $63 $74 $6F $72 $3A $00 $22 $53
  5470 				.by  $74 $61 $72 $74 $20 $73 $65 $63  $74 $6F $72 $20 $69 $73 $20 $67  $72 $65 $61 $74 $65 $72 $20 $74
  5471 				.by  $68 $61 $6E $20 $74 $6F $74 $61  $6C $00 $12 $6E $75 $6D $62 $65  $72 $20 $6F $66 $20 $73 $65 $63
  5472 				.by  $74 $6F $72 $73 $2E $00 $19 $4C  $6F $77 $65 $73 $74 $20 $73 $65  $63 $74 $6F $72 $20 $6E $75 $6D
  5473 				.by  $62 $65 $72 $20 $69 $73 $20 $31  $00 $0B $45 $6E $64 $20 $73 $65  $63 $74 $6F $72 $3A $00 $21 $45
  5474 				.by  $6E $64 $20 $73 $65 $63 $74 $6F  $72 $20 $69 $73 $20 $67 $72 $65  $61 $74 $65 $72 $20 $74 $68 $61
  5475 				.by  $6E $20 $74 $6F $74 $61 $6C $20  $00 $1F $45 $6E $64 $20 $73 $65  $63 $74 $6F $72 $20 $69 $73 $20
  5476 				.by  $6C $65 $73 $73 $65 $72 $20 $74  $68 $61 $6E $20 $73 $74 $61 $72  $74 $00 $07 $73 $65 $63 $74 $6F
  5477 				.by  $72 $2E $00 $08 $43 $6F $70 $79  $69 $6E $67 $20 $00 $09 $20 $73  $65 $63 $74 $6F $72 $73 $2E $00
  5478 				.by  $1C $52 $65 $61 $64 $69 $6E $67  $20 $61 $6E $64 $20 $77 $72 $69  $74 $69 $6E $67 $20 $73 $65 $63
  5479 				.by  $74 $6F $72 $20 $23 $00 $0E $43  $6F $70 $79 $20 $66 $69 $6E $69  $73 $68 $65 $64 $2E $00 $1D $57
  5480 				.by  $72 $69 $74 $65 $20 $6C $6F $67  $20 $66 $69 $6C $65 $20 $74 $6F  $20 $64 $69 $73 $6B $3F $20 $28
  5481 				.by  $59 $2F $4E $29 $00 $18 $4D $49  $4C $46 $20 $30 $2E $37 $20 $2D  $20 $64 $65 $6C $79 $2F $62 $6A
  5482 				.by  $62 $20 $32 $30 $32 $30 $00 $28  $02 $00 $12 $00 $00 $00 $80 $00  $00 $00 $00 $28 $02 $00 $1A $00
  5483 				.by  $04 $00 $80 $00 $00 $00 $00 $28  $02 $00 $12 $00 $04 $01 $00 $00  $00 $00 $00 $28 $02 $00 $12 $01
  5484 				.by  $04 $01 $00 $00 $00 $00 $00 $50  $02 $00 $12 $01 $04 $01 $00 $00  $00 $00 $00 $D3 $22 $DB $22
  5485 				.endm
  5486
  5487 					end
