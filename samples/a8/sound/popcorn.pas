// popcorn

uses crt;

const
	track : array [0..8] of byte = (0,40,32,6,32,20,32,6,32);

	sequence: array [0..56] of byte = (
	0,
	75,32,51,63,75,32,51,63,87,32,58,67,87,
	32,58,67,97,32,63,75,97,32,63,75,63,32,
	43,51,63,32,43,51,51,32,33,43,51,32,
	33,43,58,32,37,45,58,32,37,45,32,32,32
	,32,32,32,32,32
	);

	data: array [0..542] of byte = (
	14,48,0,0,0,0,0,0,0,0,
	14,48,0,0,0,0,0,0,0,0,
	14,0,0,0,0,0,0,0,0,0,
	14,0,0,0,0,0,0,0,0,0,
	14,0,0,0,0,0,0,0,0,0,
	14,0,0,0,0,0,72,0,81,0,
	116,0,
					// [62]
	72,0,96,0,121,0,96,0,
	116,0,144,0,0,0,72,0,81,0,
	116,0,72,0,96,0,121,0,96,0,
	116,0,144,0,0,0,72,0,64,0,
	116,0,60,0,64,60,0,60,72,0,
	128,8,64,0,72,64,0,64,81,0,
	146,16,72,0,91,0,121,0,91,0,
	146,16,72,0,0,0,72,0,81,0,
	116,0,72,0,96,0,121,0,96,0,
	116,0,144,0,0,0,72,0,81,0,
	116,0,72,0,96,0,121,0,96,0,
	116,0,144,0,0,0,72,0,64,0,
	116,0,60,0,64,60,0,60,72,0,
	128,8,64,0,72,64,0,64,81,0,
	146,16,72,0,91,0,121,0,91,0,
	146,16,72,0,0,0,47,0,53,0,
	98,24,47,0,60,0,81,0,60,0,
	98,24,96,0,0,0,47,0,53,0,
	98,24,47,0,60,0,81,0,60,0,
	98,24,96,0,0,0,47,0,42,0,
	152,32,40,0,42,40,0,40,47,0,
	176,40,42,0,47,42,0,42,53,0,
	98,24,47,0,60,0,81,0,60,0,
	98,24,47,0,0,0,47,0,53,0,
	98,24,47,0,60,0,81,0,60,0,
	98,24,96,0,0,0,47,0,53,0,
	98,24,47,0,60,0,81,0,60,0,
	98,24,96,0,0,0,47,0,42,0,
	152,32,40,0,42,40,0,40,47,0,
	176,40,42,0,47,42,0,42,53,0,
	98,24,47,0,60,0,81,0,60,0,
	98,24,47,0,0,0,72,0,64,0,
	116,0,60,0,0,0,0,0,0,0,
	128,8,64,0,0,0,0,0,0,0,
	146,16,72,0,0,0,0,0,0,0,
	146,16,0,0,0,0,60,0,53,0,
	152,32,47,0,0,0,0,0,0,0,
	176,40,53,0,0,0,0,0,0,0,
	98,24,60,0,0,0,0,0,0,0,
	98,24,0,0,0,0,72,0,64,0,
	116,0,60,0,0,0,0,0,0,0,
	128,8,64,0,0,0,0,0,0,0,
	146,16,72,0,0,0,0,0,0,0,
	146,16,0,0,0,0,60,0,53,0,
	152,32,47,0,0,0,0,0,0,0,
	176,40,53,0,0,0,0,0,0,0,
	98,24,60,0,0,0,0,0,0,0,
	98,24,0,0,0,0,72,0,81,0,
	116,0,-1
	);

var
	a, c, t, speed, rd, rt, bt, sd, st, sl: byte;

	i: shortint;

	idx: word;


function ReadData: byte;
begin

 Result := data[idx];

 inc(idx);

end;


begin

 c:=8;
 speed:=3;

 repeat
	pause(6);

	inc(c);
	if c=9 then begin
	 c:=1;

	 bt := ReadData;
	 sd := ReadData;
	end;

	t := ReadData;

	if t=byte(-1) then begin
	 idx:=62;		// data[62]
	 t:=ReadData;

	 speed:=speed+ord(speed<12);
	end;

	a:=sequence[c+sd];

	if a<>32 then begin
	 st:=a;
	 sl:=10;
	end;

	rd:=1;
	rt:=track[c];

	if rt<>32 then rd:=8;

	sound(2, bt,12,6);

	i:=15;
	while i>=4 do begin

	 sound(3,rt,rd,i-4);
	 sound(0,t,10,i+3);
	 sound(1,st,12,sl);

	 sl:=sl-ord(sl>0);

	 dec(i, speed);
	end;

 until keypressed;

 NoSound;

end.
