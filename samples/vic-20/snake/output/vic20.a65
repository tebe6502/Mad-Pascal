; ------------------------------------------------------------
; Mad Pascal Compiler version 1.6.6 [2022/04/15] for 6502
; ------------------------------------------------------------

STACKWIDTH	= 16

TRUE		= 1
FALSE		= 0

; ------------------------------------------------------------

	org $00

zpage

.if .def(@AllocMem)||.def(MAIN.SYSTEM.GETMEM)||.def(MAIN.SYSTEM.FREEMEM)
psptr	.ds 2						; PROGRAMSTACK Pointer
.fi

bp	.ds 2
bp2	.ds 2

eax	.ds 4						;8 bytes (aex + edx) -> divREAL
edx	.ds 4
ecx	.ds 4

TMP
ztmp
ztmp8	.ds 1
ztmp9	.ds 1
ztmp10	.ds 1
ztmp11	.ds 1

STACKORIGIN	.ds STACKWIDTH*4
zpend

; ------------------------------------------------------------

ax	= eax
al	= eax
ah	= eax+1

cx	= ecx
cl	= ecx
ch	= ecx+1

dx	= edx
dl	= edx
dh	= edx+1

	org eax

FP1MAN0	.ds 1
FP1MAN1	.ds 1
FP1MAN2	.ds 1
FP1MAN3	.ds 1

	org ztmp8

FP1SGN	.ds 1
FP1EXP	.ds 1

	org edx

FP2MAN0	.ds 1
FP2MAN1	.ds 1
FP2MAN2	.ds 1
FP2MAN3	.ds 1

	org ztmp10

FP2SGN	.ds 1
FP2EXP	.ds 1

	org ecx

FPMAN0	.ds 1
FPMAN1	.ds 1
FPMAN2	.ds 1
FPMAN3	.ds 1

	org bp2

FPSGN	.ds 1
FPEXP	.ds 1

; ------------------------------------------------------------

	opt h-f+

	org $A009
	jmp START

CODEORIGIN

	STATICDATA

; ------------------------------------------------------------

RTLIB
	icl 'rtl6502_raw.asm'

.print 'ZPAGE: ',zpage,'..',zpend-1

.print 'RTLIB: ',RTLIB,'..',*-1

; ------------------------------------------------------------

START
	tsx
	stx MAIN.@halt+1

	.ifdef fmulinit
	fmulinit
	.fi

VLEN	= VARDATASIZE-VARINITSIZE
VADR	= DATAORIGIN+VARINITSIZE

	ift VADR > $BFFF
	ert 'Invalid memory address range ',VADR
	eli (VLEN>0) && (VLEN<=256)
	ldx #256-VLEN
	lda #$00
	sta:rne VADR+VLEN-256,x+
	eli VLEN>256
	@fill #VADR #VLEN #$00
	eif

.ifdef :psptr
	mwa #PROGRAMSTACK :psptr
.fi

	ldx #$00
	stx bp						; BP = 0

	dex						; X = 255

	UNITINITIALIZATION

.local	MAIN						; PROCEDURE

	jmp l_0067

; ------------------------------------------------------------

.local	SYSTEM						; UNIT

.local	PEEK						; FUNCTION | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
@main

; -------------------  ASM Block 00000002  -------------------

	ldy #0
	mva (:edx),y Result

@exit

; ------------------------------------------------------------

; Push BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer

	inx
	mva RESULT :STACKORIGIN,x

	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	eif

; ------------------------------------------------------------

A	= :EDX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	POKE						; PROCEDURE | ASSEMBLER | REGISTER

; ------------------------------------------------------------

; Generate Assignment for WORD / SMALLINT / SHORTREAL / POINTER
; as Pointer
	lda :STACKORIGIN,x
	sta A
	lda :STACKORIGIN+STACKWIDTH,x
	sta A+1
	dex
	jmi @main

; ------------------------------------------------------------

; Generate Assignment for BYTE / CHAR / SHORTINT / BOOLEAN
; as Pointer
	lda :STACKORIGIN,x
	sta VALUE
	dex
@main

; -------------------  ASM Block 00000018  -------------------

	ldy #0
	mva value (:edx),y

; ------------------------------------------------------------

A	= :EDX
VALUE	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_00B1					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER | INLINE

	.MACRO m@INLINE

; -------------------  ASM Block 00000028  -------------------

	jsr @move

	.ENDM

; ------------------------------------------------------------

SOURCE	= :EDX
DEST	= :ECX
COUNT	= :EAX
@exit
.endl

; ------------------------------------------------------------

M_PI_2	= $0648
D_PI_2	= $0192
D_PI_180	= $04
RNDSEED	= DATAORIGIN+$0000

.endl							; UNIT SYSTEM

; ------------------------------------------------------------

.local	SYS_VIC20					; UNIT

.local	SYS_VBI						; PROCEDURE | ASSEMBLER | INTERRUPT

; -------------------  ASM Block 00000048  -------------------

      inc RTCLOCK

      ldx VIA1DDRA
      ldy VIA2DDRB
      mva #%11000011 VIA1DDRA
      lda VIA1PA
      stx VIA1DDRA
      and #%00111100                  // up, down, left, fire
      sta JOY
      mva #%01111111 VIA2DDRB
      lda VIA2PB
      sty VIA2DDRB
      and #%10000000                  // right
      ora JOY
      eor #%10111100                  // inverse values
      sta JOY

      jsr VBI

      mva #%01000000 VIA2IFR
      plr

	rti						; ret
.endl

.local	SYS_INIT					; PROCEDURE | ASSEMBLER

; -------------------  ASM Block 00000049  -------------------

      sei

      mva #%01111111 VIA1IER          // disable all NMI
      mva #%11000000 VIA2IER          // enable IRQ via2/timer1
      mva #%01000000 VIA2ACR          // put via2/timer1 in continuous free-running mode

      mwa #SYS_VBI CINV               // register IRQ procedure

      mva #0 RTCLOCK                  // reset raster

      lda #VBI_START                  // wait for 130 raster line
@     cmp VICCR4
      bne @-

      mwa #PAL_TIMER1 VIA2T1CL        // set via2/timer1; 1/50 sec.

      ldy #15
      mva:rpl adr.VIC_DEF,y VICCR0,y- // init VIC registers

      cli

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	WAIT_00DC					; PROCEDURE | ASSEMBLER | OVERLOAD | REGISTER
	sta N

; -------------------  ASM Block 00000052  -------------------

      lda n
      add RTCLOCK
@     cmp RTCLOCK
      bne @-

; ------------------------------------------------------------

N	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLRSCR						; PROCEDURE | ASSEMBLER | REGISTER
	sta V

; -------------------  ASM Block 00000053  -------------------

      ldy #0
      lda v
@     sta SCREEN_ADR,y
      sta SCREEN_ADR + $100,y
      sta SCREEN_ADR + $200,y
      iny
      bne @-

; ------------------------------------------------------------

V	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	CLRCOL						; PROCEDURE | ASSEMBLER | REGISTER
	sta C

; -------------------  ASM Block 00000054  -------------------

      ldy #0
      lda c
@     sta COLORMAP_ADR,y
      sta COLORMAP_ADR + $100,y
      sta COLORMAP_ADR + $200,y
      iny
      bne @-

; ------------------------------------------------------------

C	= :EDX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	SET_XY						; PROCEDURE | REGISTER

; optimize OK (SYS_VIC20), line = 433

	lda X
	sta T0B
	lda Y
	sta T1B

; optimize OK (SYS_VIC20), line = 434

	lda #$19
	sta :ecx
	lda T1B
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta TMP
	lda :eax+1
	sta TMP+1
	lda TMP
	add T0B
	sta TMP
	scc
	inc TMP+1

; optimize OK (SYS_VIC20), line = 436

	sta SCR
	lda TMP+1
	add #$1C
	sta SCR+1

; optimize OK (SYS_VIC20), line = 437

	lda TMP
	sta COLMAP
	lda TMP+1
	add #$94
	sta COLMAP+1

; ------------------------------------------------------------

X	= :EDX
Y	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PRINT						; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000055  -------------------

      ldy #0
      mva (s),y ZP_0_B
      tay:dey:inc s
@     mva (s),y (scr),y
      mva col (colmap),y
      dey
      bpl @-

; ------------------------------------------------------------

COL	= :EDX
S	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_CHAR					; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000056  -------------------

      ldy #0
      mva c (scr),y
      mva col (colmap),y

; ------------------------------------------------------------

COL	= :EDX
C	= :ECX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATE_COUNTER_2				; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000057  -------------------

      sed

      ldy #0
      lda (counter),y
      add v
      sta (counter),y

      cld

      ldy #0
      lda (counter),y
      pha
      and #%00001111
      ora #%00110000
      ldy #3
      sta (scr_counter),y
      pla
:4    lsr
      ora #%00110000
      dey
      sta (scr_counter),y

; ------------------------------------------------------------

V	= :EDX
COUNTER	= :ECX
SCR_COUNTER	= :EAX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATE_COUNTER_4				; PROCEDURE | ASSEMBLER | REGISTER

; -------------------  ASM Block 00000058  -------------------

      sed

      ldy #0
      lda (counter),y
      add v
      sta (counter),y
      bcc @+
      iny
      lda (counter),y
      add #1
      sta (counter),y

@     cld

      ldy #0
      lda (counter),y
      pha
      and #%00001111
      ora #%00110000
      ldy #3
      sta (scr_counter),y
      pla
:4    lsr
      ora #%00110000
      dey
      sta (scr_counter),y

      dey
      lda (counter),y
      and #%00001111
      ora #%00110000
      sta (scr_counter),y
      lda (counter),y
:4    lsr
      ora #%00110000
      dey
      sta (scr_counter),y

; ------------------------------------------------------------

V	= :EDX
COUNTER	= :ECX
SCR_COUNTER	= :EAX
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PRND_0112					; FUNCTION | ASSEMBLER | OVERLOAD | REGISTER

; -------------------  ASM Block 00000059  -------------------

      lda VICCR4
      adc RTCLOCK
      eor VIA2T1LH
      eor VIA2T1LL
      eor VIA1T1CL
      eor VIA1T1CH
      sta RESULT

@exit

; ------------------------------------------------------------

RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

.local	PRND_0113					; FUNCTION | OVERLOAD | REGISTER

; optimize FAIL ('PRND_0112', SYS_VIC20), line = 554

	jsr PRND_0112
	lda PRND_0112.RESULT
	and MASK
	sta RESULT

; optimize OK (SYS_VIC20), line = 556

	cmp A
	jcs l_0134
	add A
	sta RESULT
l_0134

; optimize OK (SYS_VIC20), line = 557

	lda B
	cmp RESULT
	jcs l_014E

; --- RepeatUntilProlog
l_0150

; optimize OK (SYS_VIC20), line = 558

	lsr RESULT

; optimize OK (SYS_VIC20), line = 559

	lda B
	cmp RESULT
	jcc l_0150
l_014E
@exit

; ------------------------------------------------------------

A	= :EDX
B	= :ECX
MASK	= :EAX
RESULT	= :STACKORIGIN-4
	rts						; ret
.endl

; ------------------------------------------------------------
; ------------------------------------------------------------
@UnitInit

; optimize OK (SYS_VIC20), line = 566

	lda #$00
	sta SCR
	lda #$1C
	sta SCR+1

; optimize OK (SYS_VIC20), line = 567

	lda #$00
	sta COLMAP
	lda #$94
	sta COLMAP+1

	rts

; ------------------------------------------------------------

BLACK	= $00
WHITE	= $01
RED	= $02
CYAN	= $03
PURPLE	= $04
GREEN	= $05
BLUE	= $06
YELLOW	= $07
ORANGE	= $08
LIGHT_ORANGE	= $09
LIGHT_RED	= $0A
LIGHT_CYAN	= $0B
LIGHT_PURPLE	= $0C
LIGHT_GREEN	= $0D
LIGHT_BLUE	= $0E
LIGHT_YELLOW	= $0F
CHARSET_ADR	= $1000
SCREEN_ADR	= $1C00
COLORMAP_ADR	= $9400
ROW_SIZE	= $19
COL_SIZE	= $1E
ROW_MASK	= $1F
COL_MASK	= $1F
SCREEN_SIZE	= $02EE
CHARSET_SIZE	= $0400
CART_ADR	= $A000
CART_SIZE	= $2000
JOY_UP	= $04
JOY_DOWN	= $08
JOY_LEFT	= $10
JOY_RIGHT	= $80
JOY_FIRE	= $20
JOY_DIR_MASK	= $10011100
RTCLOCK	= $60
JOY	= $61
ZP_0_B	= $54
ZP_1_B	= $55
ZP_0_W	= $56
ZP_1_W	= $58
ZP_2_W	= $5A
ZP_3_W	= $5C
ZP_0_P	= $5E
adr.VIC_DEF	= CODEORIGIN+$0060
.var VIC_DEF	= adr.VIC_DEF .word
PAL_TIMER1	= $5686
VBI_START	= $92
CINV	= $0314
CBINV	= $0316
NMINV	= $0318
VICCR0	= $9000
VICCR1	= $9001
VICCR2	= $9002
VICCR3	= $9003
VICCR4	= $9004
VICCR5	= $9005
VICCR6	= $9006
VICCR7	= $9007
VICCR8	= $9008
VICCR9	= $9009
VICCRA	= $900A
VICCRB	= $900B
VICCRC	= $900C
VICCRD	= $900D
VICCRE	= $900E
VICCRF	= $900F
VIA1PB	= $9110
VIA1PA	= $9111
VIA1DDRB	= $9112
VIA1DDRA	= $9113
VIA1T1CL	= $9114
VIA1T1CH	= $9115
VIA1T1LL	= $9116
VIA1T1LH	= $9117
VIA1T2CL	= $9118
VIA1T2CH	= $9119
VIA1SR	= $911A
VIA1ACR	= $911B
VIA1PCR	= $911C
VIA1IFR	= $911D
VIA1IER	= $911E
VIA1PA2	= $911F
VIA2PB	= $9120
VIA2PA	= $9121
VIA2DDRB	= $9122
VIA2DDRA	= $9123
VIA2T1CL	= $9124
VIA2T1CH	= $9125
VIA2T1LL	= $9126
VIA2T1LH	= $9127
VIA2T2CL	= $9128
VIA2T2CH	= $9129
VIA2SR	= $912A
VIA2ACR	= $912B
VIA2PCR	= $912C
VIA2IFR	= $912D
VIA2IER	= $912E
VIA2PA2	= $912F
SCR	= $56
COLMAP	= $58
TMP	= $5A
GAME_VBI	= $5E
T0B	= $54
T1B	= $55

.endl							; UNIT SYS_VIC20

.local	WELCOME_SCR					; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (game.inc), line = 82

	lda #$01
	jsr SYS_VIC20.CLRCOL

; optimize OK (game.inc), line = 84

	lda #$0C
	sta T0B
	sta T2B

; optimize OK (game.inc), line = 86

	lda adr.TXT_INFO
	lsr @
	sta T1B
	lda T0B
	sub T1B
	sta T0B

; optimize OK (game.inc), line = 87

	sta SYS_VIC20.SET_XY.X
	lda #$02
	sta SYS_VIC20.SET_XY.Y
	jsr SYS_VIC20.SET_XY

; optimize OK (game.inc), line = 88

	lda #$07
	sta SYS_VIC20.PRINT.COL
	lda #$53
	sta SYS_VIC20.PRINT.S
	lda #$A0
	sta SYS_VIC20.PRINT.S+1
	jsr SYS_VIC20.PRINT

; optimize OK (game.inc), line = 90

	lda adr.TXT_TURBO
	lsr @
	sta T1B
	lda T2B
	sub T1B
	sta T2B

; optimize OK (game.inc), line = 91

	sta SYS_VIC20.SET_XY.X
	lda #$19
	sta SYS_VIC20.SET_XY.Y
	jsr SYS_VIC20.SET_XY

; optimize OK (game.inc), line = 92

	lda #$07
	sta SYS_VIC20.PRINT.COL
	lda #$3E
	sta SYS_VIC20.PRINT.S
	lda #$A0
	sta SYS_VIC20.PRINT.S+1
	jsr SYS_VIC20.PRINT

; --- RepeatUntilProlog
l_01A6

; optimize OK (game.inc), line = 94

	lda SYS_VIC20.JOY
	and #$20
	jeq l_01A6
	.ENDM
@exit
.endl

.local	DRAW_FRAME					; PROCEDURE

; optimize OK (game.inc), line = 103

	lda #$19
	sta T0W
	lda #$1C
	sta T0W+1

; optimize OK (game.inc), line = 104

	lda #$1A
	sta I

l_01C8
; --- ForToDoCondition

; optimize OK (game.inc), line = 105

	ldy T0W+1
	sty :bp+1
	ldy T0W
	lda #$43
	sta (:bp),y

; optimize OK (game.inc), line = 106

	mwy T0W :bp2
	ldy #$18
	lda #$42
	sta (:bp2),y

; optimize OK (game.inc), line = 107

	lda T0W
	add #$19
	sta T0W
	scc
	inc T0W+1

; --- ForToDoEpilog
	dec I
	jpl l_01C8
l_01D6

; optimize OK (game.inc), line = 110

	lda #$18
	sta I

l_01F1
; --- ForToDoCondition

; optimize OK (game.inc), line = 111

	ldy I
	lda #$41
	sta $1C00,y

; optimize OK (game.inc), line = 112

	sta $1EBC,y

; --- ForToDoEpilog
	dec I
	jpl l_01F1
l_01FF

; ------------------------------------------------------------

I	= $70
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PRESS_FIRE					; PROCEDURE

; optimize OK (game.inc), line = 120

	lda #$19
	sub adr.TXT_FIRE
	sub #$02
	sta SYS_VIC20.SET_XY.X
	lda #$00
	sta SYS_VIC20.SET_XY.Y
	jsr SYS_VIC20.SET_XY

; optimize OK (game.inc), line = 121

	lda #$01
	sta SYS_VIC20.PRINT.COL
	lda #$32
	sta SYS_VIC20.PRINT.S
	lda #$A0
	sta SYS_VIC20.PRINT.S+1
	jsr SYS_VIC20.PRINT

; --- RepeatUntilProlog
l_0228

; optimize OK (game.inc), line = 123

	lda SYS_VIC20.JOY
	and #$20
	jeq l_0228
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_SNAKE					; PROCEDURE

; optimize OK (game.inc), line = 130

	lda #$44
	sta HEAD_DIR

; optimize OK (game.inc), line = 131

	sta TAIL_DIR

; optimize OK (game.inc), line = 132

	lda #$83
	sta HEAD_POS
	lda #$1D
	sta HEAD_POS+1

; optimize OK (game.inc), line = 133

	lda #$83
	sta HEAD_POS_COL
	lda #$95
	sta HEAD_POS_COL+1

; optimize OK (game.inc), line = 135

	ldy HEAD_POS+1
	sty :bp+1
	ldy HEAD_POS
	lda #$48
	sta (:bp),y
	ldy HEAD_POS_COL+1
	sty :bp+1
	ldy HEAD_POS_COL
	lda #$01
	sta (:bp),y

; optimize OK (game.inc), line = 137

	lda HEAD_POS
	sta T0W
	lda HEAD_POS+1
	sta T0W+1
	lda HEAD_POS_COL
	sta T1W
	lda HEAD_POS_COL+1
	sta T1W+1

; optimize OK (game.inc), line = 138

	lda #$00
	sta T0B

l_0268
; --- ForToDoCondition

; optimize OK (game.inc), line = 139

	lda T0W
	add #$19
	sta T0W
	scc
	inc T0W+1
	lda T1W
	add #$19
	sta T1W
	scc
	inc T1W+1

; optimize OK (game.inc), line = 140

	ldy T0W+1
	sty :bp+1
	ldy T0W
	lda #$4C
	sta (:bp),y
	ldy T1W+1
	sty :bp+1
	ldy T1W
	lda #$01
	sta (:bp),y

; --- ForToDoEpilog
	dec T0B
	jpl l_0268
l_0276

; optimize OK (game.inc), line = 143

	lda T0W
	add #$19
	sta T0W
	scc
	inc T0W+1
	lda T1W
	add #$19
	sta T1W
	scc
	inc T1W+1
	lda T0W
	sta TAIL_POS
	lda T0W+1
	sta TAIL_POS+1

; optimize OK (game.inc), line = 144

	sta :bp+1
	ldy TAIL_POS
	lda #$44
	sta (:bp),y
	ldy T1W+1
	sty :bp+1
	ldy T1W
	lda #$01
	sta (:bp),y

; ------------------------------------------------------------

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	DRAW_BOTTOM_LINE				; PROCEDURE

; optimize OK (game.inc), line = 151

	lda #$00
	sta SYS_VIC20.SET_XY.X
	lda #$1D
	sta SYS_VIC20.SET_XY.Y
	jsr SYS_VIC20.SET_XY

; optimize OK (game.inc), line = 152

	lda #$01
	sta SYS_VIC20.PRINT.COL
	lda #$0C
	sta SYS_VIC20.PRINT.S
	lda #$A0
	sta SYS_VIC20.PRINT.S+1
	jsr SYS_VIC20.PRINT

; optimize OK (game.inc), line = 154

	lda adr.TXT_LEVEL
	add #$01
	sta SYS_VIC20.SET_XY.X
	lda #$1D
	sta SYS_VIC20.SET_XY.Y
	jsr SYS_VIC20.SET_XY

; optimize OK (game.inc), line = 155

	lda #$01
	sta SYS_VIC20.PRINT.COL
	lda #$23
	sta SYS_VIC20.PRINT.S
	lda #$A0
	sta SYS_VIC20.PRINT.S+1
	jsr SYS_VIC20.PRINT

; optimize OK (game.inc), line = 157

	lda #$19
	sub adr.TXT_POINTS
	sta SYS_VIC20.SET_XY.X
	lda #$1D
	sta SYS_VIC20.SET_XY.Y
	jsr SYS_VIC20.SET_XY

; optimize OK (game.inc), line = 158

	lda #$01
	sta SYS_VIC20.PRINT.COL
	lda #$16
	sta SYS_VIC20.PRINT.S
	lda #$A0
	sta SYS_VIC20.PRINT.S+1
	jsr SYS_VIC20.PRINT
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PRINT_HI_SCORE					; PROCEDURE

; optimize OK (game.inc), line = 165

	lda #$02
	sta SYS_VIC20.SET_XY.X
	lda #$00
	sta SYS_VIC20.SET_XY.Y
	jsr SYS_VIC20.SET_XY

; optimize OK (game.inc), line = 166

	lda #$01
	sta SYS_VIC20.PRINT.COL
	lda #$29
	sta SYS_VIC20.PRINT.S
	lda #$A0
	sta SYS_VIC20.PRINT.S+1
	jsr SYS_VIC20.PRINT

; optimize OK (game.inc), line = 167

	lda #$00
	sta SYS_VIC20.UPDATE_COUNTER_4.V
	lda #$82
	sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER
	lda #$00
	sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER+1
	lda #$05
	sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER
	lda #$1C
	sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER+1
	jsr SYS_VIC20.UPDATE_COUNTER_4
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	HALL_OF_FAME					; PROCEDURE

; optimize OK (game.inc), line = 174

	lda HI_SCORE_BCD+1
	cmp SCORE_BCD+1
	bne @+
	lda HI_SCORE_BCD
	cmp SCORE_BCD
@
	jcs l_02D4
	lda SCORE_BCD
	sta HI_SCORE_BCD
	lda SCORE_BCD+1
	sta HI_SCORE_BCD+1
l_02D4

; optimize FAIL ('PRINT_HI_SCORE', game.inc), line = 175

	jsr PRINT_HI_SCORE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_TAIL					; PROCEDURE

; optimize OK (game.inc), line = 182

	ldy TAIL_POS+1
	sty :bp+1
	ldy TAIL_POS
	lda #$20
	sta (:bp),y

; optimize OK (game.inc), line = 184

	lda TAIL_DIR
	sta @CASETMP_0003
	cmp #$44
	jne l_02F0
@

; optimize OK (game.inc), line = 185

	lda TAIL_POS
	sub #$19
	sta TAIL_POS
	scs
	dec TAIL_POS+1

	jmp a_0003
l_02F0
	cmp #$45
	jne l_02FA
@

; optimize OK (game.inc), line = 186

	lda TAIL_POS
	add #$19
	sta TAIL_POS
	scc
	inc TAIL_POS+1

	jmp a_0003
l_02FA
	cmp #$46
	jne l_0304
@

; optimize FAIL (0, game.inc), line = 187

	inc TAIL_POS
	sne
	inc TAIL_POS+1

	jmp a_0003
l_0304
	cmp #$47
	jne l_0311
@

; optimize FAIL (0, game.inc), line = 188

	lda TAIL_POS
	bne @+
	dec TAIL_POS+1
@
	dec TAIL_POS

l_0311
a_0003

; optimize OK (game.inc), line = 191

	ldy TAIL_POS+1
	sty :bp+1
	ldy TAIL_POS
	lda (:bp),y
	sta T0B

; optimize OK (game.inc), line = 193

	lda TAIL_DIR
	sta @CASETMP_0004
	cmp #$44
	beq @+
	cmp #$45
	jne l_0330
@

; optimize OK (game.inc), line = 195

	lda T0B
	sta @CASETMP_0005
	cmp #$50
	beq @+
	cmp #$4E
	jne l_033D
@

; optimize OK (game.inc), line = 196

	lda #$47
	sta TAIL_DIR

	jmp a_0005
l_033D
	cmp #$51
	beq @+
	cmp #$4F
	jne l_034C
@

; optimize OK (game.inc), line = 197

	lda #$46
	sta TAIL_DIR

l_034C
a_0005

	jmp a_0004
l_0330
	cmp #$46
	beq @+
	cmp #$47
	jne l_0361
@

; optimize OK (game.inc), line = 201

	lda T0B
	sta @CASETMP_0006
	cmp #$4E
	beq @+
	cmp #$4F
	jne l_036E
@

; optimize OK (game.inc), line = 202

	lda #$44
	sta TAIL_DIR

	jmp a_0006
l_036E
	cmp #$50
	beq @+
	cmp #$51
	jne l_037D
@

; optimize OK (game.inc), line = 203

	lda #$45
	sta TAIL_DIR

l_037D
a_0006

l_0361
a_0004

; optimize OK (game.inc), line = 208

	ldy TAIL_POS+1
	sty :bp+1
	ldy TAIL_POS
	lda TAIL_DIR
	sta (:bp),y

; ------------------------------------------------------------

@CASETMP_0003	= DATAORIGIN+$0002
@CASETMP_0004	= DATAORIGIN+$0003
@CASETMP_0005	= DATAORIGIN+$0004
@CASETMP_0006	= DATAORIGIN+$0005

@VarData	= @CASETMP_0003
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATE_SNAKE					; PROCEDURE | REGISTER
	sta S

; optimize OK (game.inc), line = 215

	and #$3F
	sta @CASETMP_0007
	cmp #$01
	jne l_03A6
@

; optimize OK (game.inc), line = 216

	lda #$4F
	sta SNAKE.BODY

	jmp a_0007
l_03A6
	cmp #$02
	jne l_03B3
@

; optimize OK (game.inc), line = 217

	lda #$4E
	sta SNAKE.BODY

	jmp a_0007
l_03B3
	cmp #$04
	jne l_03C0
@

; optimize OK (game.inc), line = 218

	lda #$51
	sta SNAKE.BODY

	jmp a_0007
l_03C0
	cmp #$08
	jne l_03CD
@

; optimize OK (game.inc), line = 219

	lda #$50
	sta SNAKE.BODY

	jmp a_0007
l_03CD
	cmp #$10
	jne l_03DA
@

; optimize OK (game.inc), line = 220

	lda #$4C
	sta SNAKE.BODY

	jmp a_0007
l_03DA
	cmp #$20
	jne l_03E7
@

; optimize OK (game.inc), line = 221

	lda #$4D
	sta SNAKE.BODY

l_03E7
a_0007

; optimize OK (game.inc), line = 224

	lda S
	and #$C0
	sta @CASETMP_0008
	cmp #$00
	jne l_0404
@

; optimize OK (game.inc), line = 225

	lda #$48
	sta SNAKE.HEAD
	lda #$E7
	sta SNAKE.M

	jmp a_0008
l_0404
	cmp #$40
	jne l_0415
@

; optimize OK (game.inc), line = 226

	lda #$49
	sta SNAKE.HEAD
	lda #$19
	sta SNAKE.M

	jmp a_0008
l_0415
	cmp #$80
	jne l_0426
@

; optimize OK (game.inc), line = 227

	lda #$4B
	sta SNAKE.HEAD
	lda #$01
	sta SNAKE.M

	jmp a_0008
l_0426
	cmp #$C0
	jne l_0437
@

; optimize OK (game.inc), line = 228

	lda #$4A
	sta SNAKE.HEAD
	lda #$FF
	sta SNAKE.M

l_0437
a_0008

; optimize OK (game.inc), line = 231

	ldy #$00
	lda SNAKE.M
	spl
	dey
	add HEAD_POS
	sta T0W
	tya
	adc HEAD_POS+1
	sta T0W+1

; optimize OK (game.inc), line = 232

	sta :bp+1
	ldy T0W
	lda (:bp),y
	sta T1W
	lda #$00
	sta T1W+1

; optimize OK (game.inc), line = 234

	bne @+
	lda T1W
	cmp #$20
@
	jeq l_0474x
	lda T1W+1
	bne @+
	lda T1W
	cmp #$40
@
	jne l_0474
l_0474x

; optimize OK (game.inc), line = 236

	lda T1W+1
	bne @+
	lda T1W
	cmp #$40
@
	jne l_0486

; optimize OK (game.inc), line = 237

	lda #$00
	sta FRUIT_ON_BOARD

; optimize OK (game.inc), line = 239

	lda #$10
	sta SYS_VIC20.UPDATE_COUNTER_4.V
	lda #$80
	sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER
	lda #$00
	sta SYS_VIC20.UPDATE_COUNTER_4.COUNTER+1
	lda #$EA
	sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER
	lda #$1E
	sta SYS_VIC20.UPDATE_COUNTER_4.SCR_COUNTER+1
	jsr SYS_VIC20.UPDATE_COUNTER_4

; optimize FAIL (0, game.inc), line = 241

	dec LEVEL_UP

; optimize OK (game.inc), line = 242

	jne l_04A5

; optimize FAIL (0, game.inc), line = 243

	inc LEVEL

; optimize OK (game.inc), line = 244

	lda #$01
	sta SYS_VIC20.UPDATE_COUNTER_2.V
	lda #$7E
	sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
	lda #$00
	sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
	lda #$D9
	sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
	lda #$1E
	sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
	jsr SYS_VIC20.UPDATE_COUNTER_2

; optimize OK (game.inc), line = 245

	lda #$0A
	sta LEVEL_UP
l_04A5
	jmp l_04BD
l_0486

; optimize FAIL ('MOVE_TAIL', game.inc), line = 249

	jsr MOVE_TAIL
l_04BD

; optimize OK (game.inc), line = 251

	ldy HEAD_POS+1
	sty :bp+1
	ldy HEAD_POS
	lda SNAKE.BODY
	sta (:bp),y

; optimize OK (game.inc), line = 253

	ldy #$00
	lda SNAKE.M
	spl
	dey
	add HEAD_POS_COL
	sta HEAD_POS_COL
	tya
	adc HEAD_POS_COL+1
	sta HEAD_POS_COL+1

; optimize OK (game.inc), line = 254

	ldy T0W+1
	sty :bp+1
	ldy T0W
	lda SNAKE.HEAD
	sta (:bp),y

; optimize OK (game.inc), line = 255

	ldy HEAD_POS_COL+1
	sty :bp+1
	ldy HEAD_POS_COL
	lda #$01
	sta (:bp),y

; optimize OK (game.inc), line = 256

	lda T0W
	sta HEAD_POS
	lda T0W+1
	sta HEAD_POS+1
	jmp l_04E7
l_0474

; optimize OK (game.inc), line = 259

	lda #$01
	sta GAME_OVER
l_04E7

; ------------------------------------------------------------

S	= :EDX
@CASETMP_0007	= DATAORIGIN+$0006
@CASETMP_0008	= DATAORIGIN+$0007

@VarData	= @CASETMP_0007
@VarDataSize	= 2

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	MOVE_SNAKE					; PROCEDURE

; optimize OK (game.inc), line = 265

	lda HEAD_DIR
	sta @CASETMP_0009
	cmp #$44
	jne l_04FA
@

; optimize OK (game.inc), line = 266

	lda #$10
	sta T0B

	jmp a_0009
l_04FA
	cmp #$45
	jne l_0507
@

; optimize OK (game.inc), line = 267

	lda #$50
	sta T0B

	jmp a_0009
l_0507
	cmp #$46
	jne l_0514
@

; optimize OK (game.inc), line = 268

	lda #$A0
	sta T0B

	jmp a_0009
l_0514
	cmp #$47
	jne l_0521
@

; optimize OK (game.inc), line = 269

	lda #$E0
	sta T0B

l_0521
a_0009

; optimize OK (game.inc), line = 272

	lda T0B
	jsr UPDATE_SNAKE

; ------------------------------------------------------------

@CASETMP_0009	= DATAORIGIN+$0008

@VarData	= @CASETMP_0009
@VarDataSize	= 1

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	JOY_HANDLER					; PROCEDURE

; optimize OK (game.inc), line = 279

	lda #$00
	sta T0B

; optimize OK (game.inc), line = 281

	lda SYS_VIC20.JOY
	and #$04
	jeq l_055B
	lda HEAD_DIR
	cmp #$45
	jeq l_055B

; optimize OK (game.inc), line = 282

	sta @CASETMP_000A
	cmp #$47
	jne l_0567
@

; optimize OK (game.inc), line = 283

	lda #$01
	sta T0B

	jmp a_000A
l_0567
	cmp #$46
	jne l_0574
@

; optimize OK (game.inc), line = 284

	lda #$02
	sta T0B

l_0574
a_000A

; optimize OK (game.inc), line = 286

	lda #$44
	sta HEAD_DIR
	jmp l_058B
l_055B

; optimize OK (game.inc), line = 288

	lda SYS_VIC20.JOY
	and #$08
	jeq l_05AD
	lda HEAD_DIR
	cmp #$44
	jeq l_05AD

; optimize OK (game.inc), line = 289

	sta @CASETMP_000B
	cmp #$47
	jne l_05B9
@

; optimize OK (game.inc), line = 290

	lda #$44
	sta T0B

	jmp a_000B
l_05B9
	cmp #$46
	jne l_05C6
@

; optimize OK (game.inc), line = 291

	lda #$48
	sta T0B

l_05C6
a_000B

; optimize OK (game.inc), line = 293

	lda #$45
	sta HEAD_DIR
	jmp l_05DD
l_05AD

; optimize OK (game.inc), line = 295

	lda SYS_VIC20.JOY
	jpl l_05FF
	lda HEAD_DIR
	cmp #$47
	jeq l_05FF

; optimize OK (game.inc), line = 296

	sta @CASETMP_000C
	cmp #$44
	jne l_060B
@

; optimize OK (game.inc), line = 297

	lda #$84
	sta T0B

	jmp a_000C
l_060B
	cmp #$45
	jne l_0618
@

; optimize OK (game.inc), line = 298

	lda #$81
	sta T0B

l_0618
a_000C

; optimize OK (game.inc), line = 300

	lda #$46
	sta HEAD_DIR
	jmp l_062F
l_05FF

; optimize OK (game.inc), line = 302

	lda SYS_VIC20.JOY
	and #$10
	jeq l_0651
	lda HEAD_DIR
	cmp #$46
	jeq l_0651

; optimize OK (game.inc), line = 303

	sta @CASETMP_000D
	cmp #$44
	jne l_065D
@

; optimize OK (game.inc), line = 304

	lda #$C8
	sta T0B

	jmp a_000D
l_065D
	cmp #$45
	jne l_066A
@

; optimize OK (game.inc), line = 305

	lda #$C2
	sta T0B

l_066A
a_000D

; optimize OK (game.inc), line = 307

	lda #$47
	sta HEAD_DIR
l_0651
l_062F
l_05DD
l_058B

; optimize OK (game.inc), line = 309

	lda SYS_VIC20.JOY
	and #$20
	jeq l_0690
	lda SNAKE_SPEED
	lsr @
	lsr @
	sta SNAKE_SPEED
l_0690

; optimize OK (game.inc), line = 311

	lda T0B
	jeq l_06AF

; optimize OK (game.inc), line = 312

	lda SNAKE_SPEED
	sta SNAKE_SPD_C

; optimize OK (game.inc), line = 313

	lda T0B
	jsr UPDATE_SNAKE
l_06AF

; ------------------------------------------------------------

@CASETMP_000A	= DATAORIGIN+$0009
@CASETMP_000B	= DATAORIGIN+$000A
@CASETMP_000C	= DATAORIGIN+$000B
@CASETMP_000D	= DATAORIGIN+$000C

@VarData	= @CASETMP_000A
@VarDataSize	= 4

@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PUT_FRUIT					; PROCEDURE

; optimize OK (game.inc), line = 321

	lda #$01
	sta SYS_VIC20.PRND_0113.A
	lda #$18
	sta SYS_VIC20.PRND_0113.B
	lda #$1F
	sta SYS_VIC20.PRND_0113.MASK
	jsr SYS_VIC20.PRND_0113
	lda SYS_VIC20.PRND_0113.RESULT
	sta T0B

; optimize OK (game.inc), line = 322

	lda #$01
	sta SYS_VIC20.PRND_0113.A
	lda #$1B
	sta SYS_VIC20.PRND_0113.B
	lda #$1F
	sta SYS_VIC20.PRND_0113.MASK
	jsr SYS_VIC20.PRND_0113
	lda SYS_VIC20.PRND_0113.RESULT
	sta T1B

; optimize OK (game.inc), line = 324

	sta :ecx
	lda #$19
	sta :eax
	.ifdef fmulinit
	fmulu_8
	els
	imulCL
	eif
	lda :eax
	sta T0W
	lda :eax+1
	sta T0W+1
	add #$1C
	sta T0W+1
	lda T0W
	add T0B
	sta T0W
	scc
	inc T0W+1

; optimize OK (game.inc), line = 326

	ldy T0W+1
	sty :bp+1
	ldy T0W
	lda (:bp),y
	cmp #$20
	jne l_06EE

; optimize OK (game.inc), line = 327

	lda T0B
	sta SYS_VIC20.SET_XY.X
	lda T1B
	sta SYS_VIC20.SET_XY.Y
	jsr SYS_VIC20.SET_XY
	lda #$05
	sta SYS_VIC20.PUT_CHAR.COL
	lda #$40
	sta SYS_VIC20.PUT_CHAR.C
	jsr SYS_VIC20.PUT_CHAR

; optimize OK (game.inc), line = 328

	lda #$01
	sta FRUIT_ON_BOARD
l_06EE
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	UPDATE_TIME					; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize FAIL (0, game.inc), line = 336

	dec TIME_ENTITY

; optimize OK (game.inc), line = 337

	jne l_0719

; optimize OK (game.inc), line = 338

	lda #$C8
	sta TIME_ENTITY

; optimize OK (game.inc), line = 339

	lda #$01
	sta SYS_VIC20.UPDATE_COUNTER_2.V
	lda #$7D
	sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER
	lda #$00
	sta SYS_VIC20.UPDATE_COUNTER_2.COUNTER+1
	lda #$DE
	sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER
	lda #$1E
	sta SYS_VIC20.UPDATE_COUNTER_2.SCR_COUNTER+1
	jsr SYS_VIC20.UPDATE_COUNTER_2
l_0719
	.ENDM
@exit
.endl

.local	SNAKE_STEP					; PROCEDURE | INLINE

	.MACRO m@INLINE

; optimize OK (game.inc), line = 347

	lda #$0E
	sub LEVEL
	sta SNAKE_SPEED

; optimize OK (game.inc), line = 348

	cmp #$02
	jcs l_0744
	lda #$02
	sta SNAKE_SPEED
l_0744

; optimize FAIL ('JOY_HANDLER', game.inc), line = 350

	jsr JOY_HANDLER

; optimize OK (game.inc), line = 352

	lda SNAKE_SPD_C
	jne l_075E

; optimize FAIL ('MOVE_SNAKE', game.inc), line = 353

	jsr MOVE_SNAKE

; optimize OK (game.inc), line = 354

	lda SNAKE_SPEED
	sta SNAKE_SPD_C
	jmp l_076F
l_075E

; optimize FAIL (0, game.inc), line = 356

	dec SNAKE_SPD_C
l_076F
	.ENDM
@exit
.endl

.local	SET_GAME					; PROCEDURE

; optimize OK (game.inc), line = 363

	lda #$20
	jsr SYS_VIC20.CLRSCR
	lda #$07
	jsr SYS_VIC20.CLRCOL

; optimize FAIL ('DRAW_FRAME', game.inc), line = 364

	jsr DRAW_FRAME
	jsr DRAW_BOTTOM_LINE
	jsr PUT_SNAKE
	jsr PRINT_HI_SCORE

; optimize OK (game.inc), line = 366

	lda #$C8
	sta TIME_ENTITY

; optimize OK (game.inc), line = 367

	lda #$0A
	sta LEVEL_UP

; optimize OK (game.inc), line = 368

	lda #$00
	sta SCORE_BCD
	sta SCORE_BCD+1

; optimize OK (game.inc), line = 369

	sta TIME_BCD

; optimize OK (game.inc), line = 370

	sta LEVEL_BCD

; optimize OK (game.inc), line = 371

	sta LEVEL

; optimize OK (game.inc), line = 372

	sta SNAKE_SPD_C

; optimize OK (game.inc), line = 373

	sta FRUIT_ON_BOARD

; optimize OK (game.inc), line = 374

	sta GAME_OVER

; optimize OK (game.inc), line = 376

	lda #$01
	jsr SYS_VIC20.WAIT_00DC
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	RESTART_GAME					; PROCEDURE

; optimize FAIL ('HALL_OF_FAME', game.inc), line = 383

	jsr HALL_OF_FAME

; optimize OK (game.inc), line = 384

	lda #$19
	jsr SYS_VIC20.WAIT_00DC

; optimize FAIL ('PRESS_FIRE', game.inc), line = 385

	jsr PRESS_FIRE

; optimize FAIL ('SET_GAME', game.inc), line = 386

	jsr SET_GAME
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	VBI						; PROCEDURE

; optimize OK (game.inc), line = 393

	lda GAME_OVER
	jne l_07C1

; optimize FAIL ('m@INLINE', game.inc), line = 394

	.local +MAIN.UPDATE_TIME
	m@INLINE
	.endl

; optimize FAIL ('m@INLINE', game.inc), line = 395

	.local +MAIN.SNAKE_STEP
	m@INLINE
	.endl

; optimize OK (game.inc), line = 396

	lda FRUIT_ON_BOARD
	jne l_07D3
	jsr PUT_FRUIT
l_07D3

; optimize OK (game.inc), line = 397

	lda TIME_BCD
	cmp #$99
	jne l_07E9
	lda #$01
	sta GAME_OVER
l_07E9
l_07C1
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl

.local	PREPARE						; PROCEDURE

; optimize OK (game.inc), line = 405

	lda #$00
	sta SYSTEM.MOVE_00B1.SOURCE
	lda #$BC
	sta SYSTEM.MOVE_00B1.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_00B1.DEST
	lda #$10
	sta SYSTEM.MOVE_00B1.DEST+1
	lda #$00
	sta SYSTEM.MOVE_00B1.COUNT
	lda #$04
	sta SYSTEM.MOVE_00B1.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00B1
	m@INLINE
	.endl

; optimize OK (game.inc), line = 406

	lda #$12
	sta SYSTEM.MOVE_00B1.SOURCE
	lda #$B9
	sta SYSTEM.MOVE_00B1.SOURCE+1
	lda #$00
	sta SYSTEM.MOVE_00B1.DEST
	lda #$1C
	sta SYSTEM.MOVE_00B1.DEST+1
	lda #$EE
	sta SYSTEM.MOVE_00B1.COUNT
	lda #$02
	sta SYSTEM.MOVE_00B1.COUNT+1
	.local +MAIN.SYSTEM.MOVE_00B1
	m@INLINE
	.endl
@exit
	.ifdef @new
	lda <@VarData
	sta :ztmp
	lda >@VarData
	ldy #@VarDataSize-1
	jmp @FreeMem
	els
	rts						; ret
	eif
.endl
l_0067

; optimize OK (game.inc), line = 412

	lda #$01
	sta GAME_OVER

; optimize FAIL ('PREPARE', game.inc), line = 414

	jsr PREPARE
	jsr SYS_VIC20.SYS_INIT
	.local +MAIN.WELCOME_SCR
	m@INLINE
	.endl

; optimize OK (game.inc), line = 416

	lda #$00
	sta HI_SCORE_BCD
	sta HI_SCORE_BCD+1
	jsr SET_GAME

; --- RepeatUntilProlog
l_080C

; optimize OK (game.inc), line = 419

	lda GAME_OVER
	jeq l_0818
	jsr RESTART_GAME
l_0818

; optimize OK (game.inc), line = 420

	jmp l_080C

; ------------------------------------------------------------

CRT_CHARS_ADR	= $BC00
CRT_TITLE_ADR	= $B912
GAME_BLACK	= $00
GAME_WHITE	= $01
GAME_RED	= $02
GAME_CYAN	= $03
GAME_PURPLE	= $04
GAME_GREEN	= $05
GAME_BLUE	= $06
GAME_YELLOW	= $07
GAME_ORANGE	= $08
C_SPACE	= $20
C_FRUIT	= $40
C_WALL_H	= $41
C_WALL_VE	= $42
C_WALL_VW	= $43
C_TAIL_UP	= $44
C_TAIL_DOWN	= $45
C_TAIL_RIGHT	= $46
C_TAIL_LEFT	= $47
C_HEAD_UP	= $48
C_HEAD_DOWN	= $49
C_HEAD_LEFT	= $4A
C_HEAD_RIGHT	= $4B
C_BODY_V	= $4C
C_BODY_H	= $4D
C_BODY_SW	= $4E
C_BODY_SE	= $4F
C_BODY_NW	= $50
C_BODY_NE	= $51
adr.TXT_LEVEL	= CODEORIGIN+$0000
.var TXT_LEVEL	= adr.TXT_LEVEL .word
adr.TXT_POINTS	= CODEORIGIN+$000A
.var TXT_POINTS	= adr.TXT_POINTS .word
adr.TXT_TIME	= CODEORIGIN+$0017
.var TXT_TIME	= adr.TXT_TIME .word
adr.TXT_HSCORE	= CODEORIGIN+$001D
.var TXT_HSCORE	= adr.TXT_HSCORE .word
adr.TXT_FIRE	= CODEORIGIN+$0026
.var TXT_FIRE	= adr.TXT_FIRE .word
adr.TXT_TURBO	= CODEORIGIN+$0032
.var TXT_TURBO	= adr.TXT_TURBO .word
adr.TXT_INFO	= CODEORIGIN+$0047
.var TXT_INFO	= adr.TXT_INFO .word
SNAKE_SIZE	= $02
GAME_SPEED	= $0E
LEVEL_THOLD	= $0A
SPEED_THOLD	= $02
TIME_E_SET	= $C8
TIME_THOLD	= $99
UP	= $44
DOWN	= $45
LEFT	= $47
RIGHT	= $46
MOVE_UP	= $E7
MOVE_DOWN	= $19
MOVE_LEFT	= $FF
MOVE_RIGHT	= $01
T0B	= $70
T1B	= $71
T2B	= $72
T0W	= $73
T1W	= $75
SNAKE_SPEED	= $77
SNAKE_SPD_C	= $78
TAIL_DIR	= $79
HEAD_DIR	= $7A
LEVEL_UP	= $7B
TIME_ENTITY	= $7C
TIME_BCD	= $7D
LEVEL_BCD	= $7E
LEVEL	= $7F
SCORE_BCD	= $80
HI_SCORE_BCD	= $82
HEAD_POS	= $84
HEAD_POS_COL	= $86
TAIL_POS	= $88
FRUIT_ON_BOARD	= $8A
adr.SNAKE	= $8B
.var SNAKE	= adr.SNAKE .word
SNAKE.HEAD	= $8B
SNAKE.BODY	= $8C
SNAKE.M	= $8D
GAME_OVER	= $FB
SF0B	= $FB
SF1B	= $FC
HI_SCR_SCORE	= $1C05
SCR_SCORE	= $1EEA
SCR_LEVEL	= $1ED9
SCR_TIME	= $1EDE
@exit

@halt	ldx #$00
	txs

	rts

; ------------------------------------------------------------

; ------------------------------------------------------------

.local	@DEFINES
RAW
.endl

.local	@RESOURCE
.endl

.endl							; MAIN

; ------------------------------------------------------------
; ------------------------------------------------------------

.macro	UNITINITIALIZATION

	.ifdef MAIN.SYSTEM.@UnitInit
	jsr MAIN.SYSTEM.@UnitInit
	.fi

	.ifdef MAIN.SYS_VIC20.@UnitInit
	jsr MAIN.SYS_VIC20.@UnitInit
	.fi
.endm

; ------------------------------------------------------------

	ift .SIZEOF(MAIN.SYSTEM) > 0
	.print 'SYSTEM: ',MAIN.SYSTEM,'..',MAIN.SYSTEM+.SIZEOF(MAIN.SYSTEM)-1
	eif

	ift .SIZEOF(MAIN.SYS_VIC20) > 0
	.print 'SYS_VIC20: ',MAIN.SYS_VIC20,'..',MAIN.SYS_VIC20+.SIZEOF(MAIN.SYS_VIC20)-1
	eif

	.print 'CODE: ',CODEORIGIN,'..',MAIN.@RESOURCE-1

; ------------------------------------------------------------

	.align $0004

DATAORIGIN

VARINITSIZE	= *-DATAORIGIN
VARDATASIZE	= 13

PROGRAMSTACK	= DATAORIGIN+VARDATASIZE

	.print 'DATA: ',DATAORIGIN,'..',PROGRAMSTACK

; ------------------------------------------------------------

.macro	STATICDATA
.by  $08 $0C $05 $16 $05 $0C $20 $30  $30 $00 $0B $10 $0F $09 $0E $14  $13 $20 $30 $30 $30 $30 $00 $04
.by  $14 $3A $30 $30 $00 $07 $08 $09  $3A $30 $30 $30 $30 $00 $0A $10  $12 $05 $13 $13 $20 $06 $09 $12
.by  $05 $00 $13 $08 $0F $0C $04 $20  $06 $09 $12 $05 $20 $06 $0F $12  $20 $14 $15 $12 $02 $0F $00 $17
.by  $13 $03 $0F $12 $05 $20 $10 $0F  $09 $0E $14 $13 $20 $15 $0E $14  $09 $0C $20 $14 $3A $39 $39 $00
.by  $09 $1A $19 $3C $00 $FC $00 $00  $FF $FF $00 $00 $00 $00 $00 $6E
.endm

.local	RESOURCE
	icl 'raw\resource.asm'

	RCDATA 'res/title_cbm.scr' CRT_TITLE_ADR 0 0 0 0 0 0 0 0
	RCDATA 'res/snake_cbm.fnt' CRT_CHARS_ADR 0 0 0 0 0 0 0 0
.endl

	end
